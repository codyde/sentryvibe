// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/chat/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/chat">> = Specific
  const handler = {} as typeof import("../../src/app/api/chat/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/claude-agent/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/claude-agent">> = Specific
  const handler = {} as typeof import("../../src/app/api/claude-agent/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/cleanup/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/cleanup">> = Specific
  const handler = {} as typeof import("../../src/app/api/cleanup/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/files/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/files">> = Specific
  const handler = {} as typeof import("../../src/app/api/files/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/generate/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/generate">> = Specific
  const handler = {} as typeof import("../../src/app/api/generate/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/import/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/import">> = Specific
  const handler = {} as typeof import("../../src/app/api/import/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/processes/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/processes">> = Specific
  const handler = {} as typeof import("../../src/app/api/processes/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/build/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/build">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/build/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/element-change/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/element-change">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/element-change/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/files/content/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/files/content">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/files/content/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/files/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/files">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/files/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/generate/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/generate">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/generate/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/logs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/logs">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/logs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/messages/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/messages">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/messages/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/proxy/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/proxy">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/proxy/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/start/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/start">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/start/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/stop/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/stop">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/stop/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/[id]/update-port/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/[id]/update-port">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/[id]/update-port/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/projects/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects">> = Specific
  const handler = {} as typeof import("../../src/app/api/projects/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/reconcile/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reconcile">> = Specific
  const handler = {} as typeof import("../../src/app/api/reconcile/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/runner/commands/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/runner/commands">> = Specific
  const handler = {} as typeof import("../../src/app/api/runner/commands/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/runner/events/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/runner/events">> = Specific
  const handler = {} as typeof import("../../src/app/api/runner/events/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/runner/status/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/runner/status">> = Specific
  const handler = {} as typeof import("../../src/app/api/runner/status/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/start-dev/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/start-dev">> = Specific
  const handler = {} as typeof import("../../src/app/api/start-dev/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
