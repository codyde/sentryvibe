/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz";
exports.ids = ["vendor-chunks/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz"];
exports.modules = {

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2RlYnVnLWJ1aWxkLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! ./integrations/http.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index = __webpack_require__(/*! ./integrations/tracing/fastify/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./integrations/tracing/postgresjs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/tracing/hono/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/vercelai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\nconst index$4 = __webpack_require__(/*! ./integrations/tracing/openai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/anthropic-ai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\");\nconst index$6 = __webpack_require__(/*! ./integrations/tracing/claude-code/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\");\nconst helpers = __webpack_require__(/*! ./integrations/tracing/claude-code/helpers.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js\");\nconst index$7 = __webpack_require__(/*! ./integrations/tracing/openai-codex/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\");\nconst helpers$1 = __webpack_require__(/*! ./integrations/tracing/openai-codex/helpers.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js\");\nconst index$8 = __webpack_require__(/*! ./integrations/tracing/google-genai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\");\nconst launchDarkly = __webpack_require__(/*! ./integrations/featureFlagShims/launchDarkly.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\");\nconst openFeature = __webpack_require__(/*! ./integrations/featureFlagShims/openFeature.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\");\nconst statsig = __webpack_require__(/*! ./integrations/featureFlagShims/statsig.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\");\nconst unleash = __webpack_require__(/*! ./integrations/featureFlagShims/unleash.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\");\nconst firebase = __webpack_require__(/*! ./integrations/tracing/firebase/firebase.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst index$9 = __webpack_require__(/*! ./sdk/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$a = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./integrations/tracing/claude-code/instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\");\nconst instrumentation$1 = __webpack_require__(/*! ./integrations/tracing/openai-codex/instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\");\n\n\n\nexports.httpIntegration = http.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = index.fastifyIntegration;\nexports.setupFastifyErrorHandler = index.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.postgresJsIntegration = postgresjs.postgresJsIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$1.hapiIntegration;\nexports.setupHapiErrorHandler = index$1.setupHapiErrorHandler;\nexports.honoIntegration = index$2.honoIntegration;\nexports.setupHonoErrorHandler = index$2.setupHonoErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.vercelAIIntegration = index$3.vercelAIIntegration;\nexports.openAIIntegration = index$4.openAIIntegration;\nexports.anthropicAIIntegration = index$5.anthropicAIIntegration;\nexports.claudeCodeIntegration = index$6.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = helpers.createInstrumentedClaudeQuery;\nexports.openaiCodexIntegration = index$7.openaiCodexIntegration;\nexports.createInstrumentedCodex = helpers$1.createInstrumentedCodex;\nexports.googleGenAIIntegration = index$8.googleGenAIIntegration;\nexports.buildLaunchDarklyFlagUsedHandler = launchDarkly.buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegration = launchDarkly.launchDarklyIntegrationShim;\nexports.OpenFeatureIntegrationHook = openFeature.OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegration = openFeature.openFeatureIntegrationShim;\nexports.statsigIntegration = statsig.statsigIntegrationShim;\nexports.unleashIntegration = unleash.unleashIntegrationShim;\nexports.firebaseIntegration = firebase.firebaseIntegration;\nexports.getDefaultIntegrations = index$9.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$9.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$9.init;\nexports.initWithoutDefaultIntegrations = index$9.initWithoutDefaultIntegrations;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$a.getAutoPerformanceIntegrations;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.consoleIntegration = core.consoleIntegration;\nexports.consoleLoggingIntegration = core.consoleLoggingIntegration;\nexports.continueTrace = core.continueTrace;\nexports.createConsolaReporter = core.createConsolaReporter;\nexports.createTransport = core.createTransport;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.eventFiltersIntegration = core.eventFiltersIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.featureFlagsIntegration = core.featureFlagsIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.httpHeadersToSpanAttributes = core.httpHeadersToSpanAttributes;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.instrumentSupabaseClient = core.instrumentSupabaseClient;\nexports.isEnabled = core.isEnabled;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.supabaseIntegration = core.supabaseIntegration;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.winterCGHeadersToDict = core.winterCGHeadersToDict;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.wrapMcpServerWithSentry = core.wrapMcpServerWithSentry;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.NODE_VERSION = nodeCore.NODE_VERSION;\nexports.NodeClient = nodeCore.NodeClient;\nexports.SentryContextManager = nodeCore.SentryContextManager;\nexports.anrIntegration = nodeCore.anrIntegration;\nexports.childProcessIntegration = nodeCore.childProcessIntegration;\nexports.contextLinesIntegration = nodeCore.contextLinesIntegration;\nexports.createGetModuleFromFilename = nodeCore.createGetModuleFromFilename;\nexports.createSentryWinstonTransport = nodeCore.createSentryWinstonTransport;\nexports.cron = nodeCore.cron;\nexports.defaultStackParser = nodeCore.defaultStackParser;\nexports.disableAnrDetectionForCallback = nodeCore.disableAnrDetectionForCallback;\nexports.generateInstrumentOnce = nodeCore.generateInstrumentOnce;\nexports.getSentryRelease = nodeCore.getSentryRelease;\nexports.httpServerIntegration = nodeCore.httpServerIntegration;\nexports.httpServerSpansIntegration = nodeCore.httpServerSpansIntegration;\nexports.localVariablesIntegration = nodeCore.localVariablesIntegration;\nexports.logger = nodeCore.logger;\nexports.makeNodeTransport = nodeCore.makeNodeTransport;\nexports.modulesIntegration = nodeCore.modulesIntegration;\nexports.nodeContextIntegration = nodeCore.nodeContextIntegration;\nexports.onUncaughtExceptionIntegration = nodeCore.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = nodeCore.onUnhandledRejectionIntegration;\nexports.spotlightIntegration = nodeCore.spotlightIntegration;\nexports.systemErrorIntegration = nodeCore.systemErrorIntegration;\nexports.validateOpenTelemetrySetup = nodeCore.validateOpenTelemetrySetup;\nexports.patchClaudeCodeQuery = instrumentation.patchClaudeCodeQuery;\nexports.patchCodexConstructor = instrumentation$1.patchCodexConstructor;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the LaunchDarkly integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst launchDarklyIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The launchDarklyIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'LaunchDarkly',\n  };\n});\n\n/**\n * This is a shim for the LaunchDarkly flag used handler.\n */\nfunction buildLaunchDarklyFlagUsedHandlerShim() {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The buildLaunchDarklyFlagUsedHandler() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'sentry-flag-auditor',\n    type: 'flag-used',\n    synchronous: true,\n    method: () => null,\n  };\n}\n\nexports.buildLaunchDarklyFlagUsedHandlerShim = buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegrationShim = launchDarklyIntegrationShim;\n//# sourceMappingURL=launchDarkly.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mZWF0dXJlRmxhZ1NoaW1zL2xhdW5jaERhcmtseS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNENBQTRDO0FBQzVDLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy9sYXVuY2hEYXJrbHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIExhdW5jaERhcmtseSBpbnRlZ3JhdGlvbi5cbiAqIFdlIG5lZWQgdGhpcyBpbiBvcmRlciB0byBub3QgdGhyb3cgcnVudGltZSBlcnJvcnMgd2hlbiBhY2NpZGVudGFsbHkgaW1wb3J0aW5nIHRoaXMgb24gdGhlIHNlcnZlciB0aHJvdWdoIGEgbWV0YSBmcmFtZXdvcmsgbGlrZSBOZXh0LmpzLlxuICovXG5jb25zdCBsYXVuY2hEYXJrbHlJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBsYXVuY2hEYXJrbHlJbnRlZ3JhdGlvbigpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdMYXVuY2hEYXJrbHknLFxuICB9O1xufSk7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNoaW0gZm9yIHRoZSBMYXVuY2hEYXJrbHkgZmxhZyB1c2VkIGhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTGF1bmNoRGFya2x5RmxhZ1VzZWRIYW5kbGVyU2hpbSgpIHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXIoKSBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBicm93c2VyLicpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnc2VudHJ5LWZsYWctYXVkaXRvcicsXG4gICAgdHlwZTogJ2ZsYWctdXNlZCcsXG4gICAgc3luY2hyb25vdXM6IHRydWUsXG4gICAgbWV0aG9kOiAoKSA9PiBudWxsLFxuICB9O1xufVxuXG5leHBvcnRzLmJ1aWxkTGF1bmNoRGFya2x5RmxhZ1VzZWRIYW5kbGVyU2hpbSA9IGJ1aWxkTGF1bmNoRGFya2x5RmxhZ1VzZWRIYW5kbGVyU2hpbTtcbmV4cG9ydHMubGF1bmNoRGFya2x5SW50ZWdyYXRpb25TaGltID0gbGF1bmNoRGFya2x5SW50ZWdyYXRpb25TaGltO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGF1bmNoRGFya2x5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the OpenFeature integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst openFeatureIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The openFeatureIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'OpenFeature',\n  };\n});\n\n/**\n * This is a shim for the OpenFeature integration hook.\n */\nclass OpenFeatureIntegrationHookShim {\n  /**\n   *\n   */\n   constructor() {\n    if (!core.isBrowser()) {\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('The OpenFeatureIntegrationHook can only be used in the browser.');\n      });\n    }\n  }\n\n  /**\n   *\n   */\n   after() {\n    // No-op\n  }\n\n  /**\n   *\n   */\n   error() {\n    // No-op\n  }\n}\n\nexports.OpenFeatureIntegrationHookShim = OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegrationShim = openFeatureIntegrationShim;\n//# sourceMappingURL=openFeature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mZWF0dXJlRmxhZ1NoaW1zL29wZW5GZWF0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvb3BlbkZlYXR1cmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIE9wZW5GZWF0dXJlIGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IG9wZW5GZWF0dXJlSW50ZWdyYXRpb25TaGltID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoX29wdGlvbnMpID0+IHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgb3BlbkZlYXR1cmVJbnRlZ3JhdGlvbigpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdPcGVuRmVhdHVyZScsXG4gIH07XG59KTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIE9wZW5GZWF0dXJlIGludGVncmF0aW9uIGhvb2suXG4gKi9cbmNsYXNzIE9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rU2hpbSB7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICghY29yZS5pc0Jyb3dzZXIoKSkge1xuICAgICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIE9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gICBhZnRlcigpIHtcbiAgICAvLyBOby1vcFxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICAgZXJyb3IoKSB7XG4gICAgLy8gTm8tb3BcbiAgfVxufVxuXG5leHBvcnRzLk9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rU2hpbSA9IE9wZW5GZWF0dXJlSW50ZWdyYXRpb25Ib29rU2hpbTtcbmV4cG9ydHMub3BlbkZlYXR1cmVJbnRlZ3JhdGlvblNoaW0gPSBvcGVuRmVhdHVyZUludGVncmF0aW9uU2hpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5GZWF0dXJlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Statsig integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst statsigIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The statsigIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Statsig',\n  };\n});\n\nexports.statsigIntegrationShim = statsigIntegrationShim;\n//# sourceMappingURL=statsig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mZWF0dXJlRmxhZ1NoaW1zL3N0YXRzaWcuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvc3RhdHNpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgU3RhdHNpZyBpbnRlZ3JhdGlvbi5cbiAqIFdlIG5lZWQgdGhpcyBpbiBvcmRlciB0byBub3QgdGhyb3cgcnVudGltZSBlcnJvcnMgd2hlbiBhY2NpZGVudGFsbHkgaW1wb3J0aW5nIHRoaXMgb24gdGhlIHNlcnZlciB0aHJvdWdoIGEgbWV0YSBmcmFtZXdvcmsgbGlrZSBOZXh0LmpzLlxuICovXG5jb25zdCBzdGF0c2lnSW50ZWdyYXRpb25TaGltID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoX29wdGlvbnMpID0+IHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgc3RhdHNpZ0ludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1N0YXRzaWcnLFxuICB9O1xufSk7XG5cbmV4cG9ydHMuc3RhdHNpZ0ludGVncmF0aW9uU2hpbSA9IHN0YXRzaWdJbnRlZ3JhdGlvblNoaW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0c2lnLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Unleash integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst unleashIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The unleashIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Unleash',\n  };\n});\n\nexports.unleashIntegrationShim = unleashIntegrationShim;\n//# sourceMappingURL=unleash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mZWF0dXJlRmxhZ1NoaW1zL3VubGVhc2guanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvdW5sZWFzaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgVW5sZWFzaCBpbnRlZ3JhdGlvbi5cbiAqIFdlIG5lZWQgdGhpcyBpbiBvcmRlciB0byBub3QgdGhyb3cgcnVudGltZSBlcnJvcnMgd2hlbiBhY2NpZGVudGFsbHkgaW1wb3J0aW5nIHRoaXMgb24gdGhlIHNlcnZlciB0aHJvdWdoIGEgbWV0YSBmcmFtZXdvcmsgbGlrZSBOZXh0LmpzLlxuICovXG5jb25zdCB1bmxlYXNoSW50ZWdyYXRpb25TaGltID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigoX29wdGlvbnMpID0+IHtcbiAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdUaGUgdW5sZWFzaEludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1VubGVhc2gnLFxuICB9O1xufSk7XG5cbmV4cG9ydHMudW5sZWFzaEludGVncmF0aW9uU2hpbSA9IHVubGVhc2hJbnRlZ3JhdGlvblNoaW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmxlYXNoLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.24.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        nodeCore.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new nodeCore.SentryHttpInstrumentation(options);\n  },\n);\n\nconst instrumentOtelHttp = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation({\n    ...config,\n    // This is hard-coded and can never be overridden by the user\n    disableIncomingRequestInstrumentation: true,\n  });\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/** Exported only for tests. */\nfunction _shouldUseOtelHttpInstrumentation(\n  options,\n  clientOptions = {},\n) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  if (typeof options.spans === 'boolean') {\n    return options.spans;\n  }\n\n  if (clientOptions.skipOpenTelemetrySetup) {\n    return false;\n  }\n\n  // IMPORTANT: We only disable span instrumentation when spans are not enabled _and_ we are on Node 22+,\n  // as otherwise the necessary diagnostics channel is not available yet\n  if (!core.hasSpansEnabled(clientOptions) && nodeCore.NODE_VERSION.major >= 22) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  const spans = options.spans ?? true;\n  const disableIncomingRequestSpans = options.disableIncomingRequestSpans;\n\n  const serverOptions = {\n    sessions: options.trackIncomingRequestsAsSessions,\n    sessionFlushingDelayMS: options.sessionFlushingDelayMS,\n    ignoreRequestBody: options.ignoreIncomingRequestBody,\n    maxRequestBodySize: options.maxIncomingRequestBodySize,\n  } ;\n\n  const serverSpansOptions = {\n    ignoreIncomingRequests: options.ignoreIncomingRequests,\n    ignoreStaticAssets: options.ignoreStaticAssets,\n    ignoreStatusCodes: options.dropSpansForIncomingRequestStatusCodes,\n    instrumentation: options.instrumentation,\n    onSpanCreated: options.incomingRequestSpanHook,\n  } ;\n\n  const server = nodeCore.httpServerIntegration(serverOptions);\n  const serverSpans = nodeCore.httpServerSpansIntegration(serverSpansOptions);\n\n  const enableServerSpans = spans && !disableIncomingRequestSpans;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (enableServerSpans && core.hasSpansEnabled(clientOptions)) {\n        serverSpans.setup(client);\n      }\n    },\n    setupOnce() {\n      const clientOptions = (core.getClient()?.getOptions() || {}) ;\n      const useOtelHttpInstrumentation = _shouldUseOtelHttpInstrumentation(options, clientOptions);\n\n      server.setupOnce();\n\n      const sentryHttpInstrumentationOptions = {\n        breadcrumbs: options.breadcrumbs,\n        propagateTraceInOutgoingRequests: !useOtelHttpInstrumentation,\n        ignoreOutgoingRequests: options.ignoreOutgoingRequests,\n      } ;\n\n      // This is Sentry-specific instrumentation for outgoing request breadcrumbs & trace propagation\n      instrumentSentryHttp(sentryHttpInstrumentationOptions);\n\n      // This is the \"regular\" OTEL instrumentation that emits outgoing request spans\n      if (useOtelHttpInstrumentation) {\n        const instrumentationConfig = getConfigWithDefaults(options);\n        instrumentOtelHttp(instrumentationConfig);\n      }\n    },\n    processEvent(event) {\n      // Note: We always run this, even if spans are disabled\n      // The reason being that e.g. the remix integration disables span creation here but still wants to use the ignore status codes option\n      return serverSpans.processEvent(event);\n    },\n  };\n});\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ignoreOutgoingRequestHook: request => {\n      const url = nodeCore.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests?.(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requestHook: (span, req) => {\n      nodeCore.addOriginToSpan(span, 'auto.http.otel.http');\n\n      options.instrumentation?.requestHook?.(span, req);\n    },\n    responseHook: (span, res) => {\n      options.instrumentation?.responseHook?.(span, res);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      options.instrumentation?.applyCustomAttributesOnSpan?.(span, request, response);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports._shouldUseOtelHttpInstrumentation = _shouldUseOtelHttpInstrumentation;\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.15.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\nconst instrumentOtelNodeFetch = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationUndici.UndiciInstrumentation,\n  (options) => {\n    return getConfigWithDefaults(options);\n  },\n);\n\nconst instrumentSentryNodeFetch = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  nodeCore.SentryNodeFetchInstrumentation,\n  (options) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, core.getClient()?.getOptions());\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        instrumentOtelNodeFetch(options);\n      }\n\n      // This is the Sentry-specific instrumentation that creates breadcrumbs & propagates traces\n      // This must be registered after the OTEL one, to ensure that the core trace propagation logic takes presedence\n      // Otherwise, the sentry-trace header may be set multiple times\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nfunction _shouldInstrumentSpans(options, clientOptions = {}) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  return typeof options.spans === 'boolean'\n    ? options.spans\n    : !clientOptions.skipOpenTelemetrySetup && core.hasSpansEnabled(clientOptions);\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    requireParentforSpans: false,\n    ignoreRequestHook: request => {\n      const url = getAbsoluteUrl(request.origin, request.path);\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n      return !!shouldIgnore;\n    },\n    startSpanHook: () => {\n      return {\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n      };\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9ub2RlLWZldGNoLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDhCQUE4QixtQkFBTyxDQUFDLGdPQUF1QztBQUM3RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsS0FBSyxpQkFBaUI7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixPQUFPOztBQUV4QjtBQUNBLGNBQWMsSUFBSSxFQUFFLGNBQWM7QUFDbEM7O0FBRUE7QUFDQSxjQUFjLElBQUksR0FBRyxjQUFjO0FBQ25DOztBQUVBLFlBQVksSUFBSSxFQUFFLEtBQUs7QUFDdkI7O0FBRUEsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9ub2RlLWZldGNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25VbmRpY2kgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdW5kaWNpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTm9kZUZldGNoJztcblxuY29uc3QgaW5zdHJ1bWVudE90ZWxOb2RlRmV0Y2ggPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICBpbnN0cnVtZW50YXRpb25VbmRpY2kuVW5kaWNpSW5zdHJ1bWVudGF0aW9uLFxuICAob3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBnZXRDb25maWdXaXRoRGVmYXVsdHMob3B0aW9ucyk7XG4gIH0sXG4pO1xuXG5jb25zdCBpbnN0cnVtZW50U2VudHJ5Tm9kZUZldGNoID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgYCR7SU5URUdSQVRJT05fTkFNRX0uc2VudHJ5YCxcbiAgbm9kZUNvcmUuU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uLFxuICAob3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9LFxuKTtcblxuY29uc3QgX25hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTm9kZUZldGNoJyxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50U3BhbnMgPSBfc2hvdWxkSW5zdHJ1bWVudFNwYW5zKG9wdGlvbnMsIGNvcmUuZ2V0Q2xpZW50KCk/LmdldE9wdGlvbnMoKSk7XG5cbiAgICAgIC8vIFRoaXMgaXMgdGhlIFwicmVndWxhclwiIE9URUwgaW5zdHJ1bWVudGF0aW9uIHRoYXQgZW1pdHMgc3BhbnNcbiAgICAgIGlmIChpbnN0cnVtZW50U3BhbnMpIHtcbiAgICAgICAgaW5zdHJ1bWVudE90ZWxOb2RlRmV0Y2gob3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoaXMgaXMgdGhlIFNlbnRyeS1zcGVjaWZpYyBpbnN0cnVtZW50YXRpb24gdGhhdCBjcmVhdGVzIGJyZWFkY3J1bWJzICYgcHJvcGFnYXRlcyB0cmFjZXNcbiAgICAgIC8vIFRoaXMgbXVzdCBiZSByZWdpc3RlcmVkIGFmdGVyIHRoZSBPVEVMIG9uZSwgdG8gZW5zdXJlIHRoYXQgdGhlIGNvcmUgdHJhY2UgcHJvcGFnYXRpb24gbG9naWMgdGFrZXMgcHJlc2VkZW5jZVxuICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgc2VudHJ5LXRyYWNlIGhlYWRlciBtYXkgYmUgc2V0IG11bHRpcGxlIHRpbWVzXG4gICAgICBpbnN0cnVtZW50U2VudHJ5Tm9kZUZldGNoKG9wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IG5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24pO1xuXG4vLyBNYXRjaGluZyB0aGUgYmVoYXZpb3Igb2YgdGhlIGJhc2UgaW5zdHJ1bWVudGF0aW9uXG5mdW5jdGlvbiBnZXRBYnNvbHV0ZVVybChvcmlnaW4sIHBhdGggPSAnLycpIHtcbiAgY29uc3QgdXJsID0gYCR7b3JpZ2lufWA7XG5cbiAgaWYgKHVybC5lbmRzV2l0aCgnLycpICYmIHBhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgcmV0dXJuIGAke3VybH0ke3BhdGguc2xpY2UoMSl9YDtcbiAgfVxuXG4gIGlmICghdXJsLmVuZHNXaXRoKCcvJykgJiYgIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgcmV0dXJuIGAke3VybH0vJHtwYXRoLnNsaWNlKDEpfWA7XG4gIH1cblxuICByZXR1cm4gYCR7dXJsfSR7cGF0aH1gO1xufVxuXG5mdW5jdGlvbiBfc2hvdWxkSW5zdHJ1bWVudFNwYW5zKG9wdGlvbnMsIGNsaWVudE9wdGlvbnMgPSB7fSkge1xuICAvLyBJZiBgc3BhbnNgIGlzIHBhc3NlZCBpbiwgaXQgdGFrZXMgcHJlY2VkZW5jZVxuICAvLyBFbHNlLCB3ZSBieSBkZWZhdWx0IGVtaXQgc3BhbnMsIHVubGVzcyBgc2tpcE9wZW5UZWxlbWV0cnlTZXR1cGAgaXMgc2V0IHRvIGB0cnVlYCBvciBzcGFucyBhcmUgbm90IGVuYWJsZWRcbiAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLnNwYW5zID09PSAnYm9vbGVhbidcbiAgICA/IG9wdGlvbnMuc3BhbnNcbiAgICA6ICFjbGllbnRPcHRpb25zLnNraXBPcGVuVGVsZW1ldHJ5U2V0dXAgJiYgY29yZS5oYXNTcGFuc0VuYWJsZWQoY2xpZW50T3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdldENvbmZpZ1dpdGhEZWZhdWx0cyhvcHRpb25zID0ge30pIHtcbiAgY29uc3QgaW5zdHJ1bWVudGF0aW9uQ29uZmlnID0ge1xuICAgIHJlcXVpcmVQYXJlbnRmb3JTcGFuczogZmFsc2UsXG4gICAgaWdub3JlUmVxdWVzdEhvb2s6IHJlcXVlc3QgPT4ge1xuICAgICAgY29uc3QgdXJsID0gZ2V0QWJzb2x1dGVVcmwocmVxdWVzdC5vcmlnaW4sIHJlcXVlc3QucGF0aCk7XG4gICAgICBjb25zdCBfaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyA9IG9wdGlvbnMuaWdub3JlT3V0Z29pbmdSZXF1ZXN0cztcbiAgICAgIGNvbnN0IHNob3VsZElnbm9yZSA9IF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzICYmIHVybCAmJiBfaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyh1cmwpO1xuXG4gICAgICByZXR1cm4gISFzaG91bGRJZ25vcmU7XG4gICAgfSxcbiAgICBzdGFydFNwYW5Ib29rOiAoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5ub2RlX2ZldGNoJyxcbiAgICAgIH07XG4gICAgfSxcbiAgfSA7XG5cbiAgcmV0dXJuIGluc3RydW1lbnRhdGlvbkNvbmZpZztcbn1cblxuZXhwb3J0cy5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IG5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1mZXRjaC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2FtcXBsaWIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsbU9BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQW1xcGxpYic7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgY29uc3VtZUVuZEhvb2s6IChzcGFuKSA9PiB7XG4gICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5jb25zdW1lcicpO1xuICB9LFxuICBwdWJsaXNoSG9vazogKHNwYW4pID0+IHtcbiAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uYW1xcGxpYi5vdGVsLnB1Ymxpc2hlcicpO1xuICB9LFxufTtcblxuY29uc3QgaW5zdHJ1bWVudEFtcXBsaWIgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25BbXFwbGliLkFtcXBsaWJJbnN0cnVtZW50YXRpb24oY29uZmlnKSk7XG5cbmNvbnN0IF9hbXFwbGliSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEFtcXBsaWIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2FtcXBsaWJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2FtcXBsaWIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BhbXFwbGliSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvYW1xcGxpYi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmFtcXBsaWJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGFtcXBsaWJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2FtcXBsaWJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuYW1xcGxpYkludGVncmF0aW9uID0gYW1xcGxpYkludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50QW1xcGxpYiA9IGluc3RydW1lbnRBbXFwbGliO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1xcGxpYi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js\");\n\nconst instrumentAnthropicAi = nodeCore.generateInstrumentOnce(\n  core.ANTHROPIC_AI_INTEGRATION_NAME,\n  options => new instrumentation.SentryAnthropicAiInstrumentation(options),\n);\n\nconst _anthropicAIIntegration = ((options = {}) => {\n  return {\n    name: core.ANTHROPIC_AI_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentAnthropicAi(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Anthropic AI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments Anthropic AI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.anthropicAIIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.anthropicAIIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.anthropicAIIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst anthropicAIIntegration = core.defineIntegration(_anthropicAIIntegration);\n\nexports.anthropicAIIntegration = anthropicAIIntegration;\nexports.instrumentAnthropicAi = instrumentAnthropicAi;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2FudGhyb3BpYy1haS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1CO0FBQzVDLHdCQUF3QixtQkFBTyxDQUFDLDZOQUFzQjs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbnRocm9waWMtYWkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IGluc3RydW1lbnRBbnRocm9waWNBaSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIGNvcmUuQU5USFJPUElDX0FJX0lOVEVHUkFUSU9OX05BTUUsXG4gIG9wdGlvbnMgPT4gbmV3IGluc3RydW1lbnRhdGlvbi5TZW50cnlBbnRocm9waWNBaUluc3RydW1lbnRhdGlvbihvcHRpb25zKSxcbik7XG5cbmNvbnN0IF9hbnRocm9waWNBSUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBjb3JlLkFOVEhST1BJQ19BSV9JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEFudGhyb3BpY0FpKG9wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBBbnRocm9waWMgQUkgU0RLLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gaXMgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIFdoZW4gY29uZmlndXJlZCwgdGhpcyBpbnRlZ3JhdGlvbiBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRzIEFudGhyb3BpYyBBSSBTREsgY2xpZW50IGluc3RhbmNlc1xuICogdG8gY2FwdHVyZSB0ZWxlbWV0cnkgZGF0YSBmb2xsb3dpbmcgT3BlblRlbGVtZXRyeSBTZW1hbnRpYyBDb252ZW50aW9ucyBmb3IgR2VuZXJhdGl2ZSBBSS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuYW50aHJvcGljQUlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogIyMgT3B0aW9uc1xuICpcbiAqIC0gYHJlY29yZElucHV0c2A6IFdoZXRoZXIgdG8gcmVjb3JkIHByb21wdCBtZXNzYWdlcyAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICogLSBgcmVjb3JkT3V0cHV0c2A6IFdoZXRoZXIgdG8gcmVjb3JkIHJlc3BvbnNlIHRleHQgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqXG4gKiAjIyMgRGVmYXVsdCBCZWhhdmlvclxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBpbnRlZ3JhdGlvbiB3aWxsOlxuICogLSBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIE9OTFkgaWYgYHNlbmREZWZhdWx0UGlpYCBpcyBzZXQgdG8gYHRydWVgIGluIHlvdXIgU2VudHJ5IGNsaWVudCBvcHRpb25zXG4gKiAtIE90aGVyd2lzZSwgaW5wdXRzIGFuZCBvdXRwdXRzIGFyZSBOT1QgcmVjb3JkZWQgdW5sZXNzIGV4cGxpY2l0bHkgZW5hYmxlZFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIHdoZW4gc2VuZERlZmF1bHRQaWkgaXMgZmFsc2VcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5LmFudGhyb3BpY0FJSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBOZXZlciByZWNvcmQgaW5wdXRzL291dHB1dHMgcmVnYXJkbGVzcyBvZiBzZW5kRGVmYXVsdFBpaVxuICogU2VudHJ5LmluaXQoe1xuICogICBzZW5kRGVmYXVsdFBpaTogdHJ1ZSxcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5LmFudGhyb3BpY0FJSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiBmYWxzZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IGZhbHNlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5jb25zdCBhbnRocm9waWNBSUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfYW50aHJvcGljQUlJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuYW50aHJvcGljQUlJbnRlZ3JhdGlvbiA9IGFudGhyb3BpY0FJSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRBbnRocm9waWNBaSA9IGluc3RydW1lbnRBbnRocm9waWNBaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=0.19.2 <1.0.0'];\n\n/**\n * Sentry Anthropic AI instrumentation using OpenTelemetry.\n */\nclass SentryAnthropicAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-anthropic-ai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition(\n      '@anthropic-ai/sdk',\n      supportedVersions,\n      this._patch.bind(this),\n    );\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the Anthropic AI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.Anthropic;\n\n    const config = this.getConfig();\n\n    const WrappedAnthropic = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const recordInputs = config.recordInputs ?? defaultPii;\n      const recordOutputs = config.recordOutputs ?? defaultPii;\n\n      return core.instrumentAnthropicAiClient(instance , {\n        recordInputs,\n        recordOutputs,\n      });\n    } ;\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedAnthropic, Original);\n    Object.setPrototypeOf(WrappedAnthropic.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedAnthropic, key, descriptor);\n        }\n      }\n    }\n\n    // Constructor replacement - handle read-only properties\n    // The Anthropic property might have only a getter, so use defineProperty\n    try {\n      exports.Anthropic = WrappedAnthropic;\n    } catch (error) {\n      // If direct assignment fails, override the property descriptor\n      Object.defineProperty(exports, 'Anthropic', {\n        value: WrappedAnthropic,\n        writable: true,\n        configurable: true,\n        enumerable: true,\n      });\n    }\n\n    // Wrap the default export if it points to the original constructor\n    // Constructor replacement - handle read-only properties\n    // The Anthropic property might have only a getter, so use defineProperty\n    if (exports.default === Original) {\n      try {\n        exports.default = WrappedAnthropic;\n      } catch (error) {\n        // If direct assignment fails, override the property descriptor\n        Object.defineProperty(exports, 'default', {\n          value: WrappedAnthropic,\n          writable: true,\n          configurable: true,\n          enumerable: true,\n        });\n      }\n    }\n    return exports;\n  }\n}\n\nexports.SentryAnthropicAiInstrumentation = SentryAnthropicAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2FudGhyb3BpYy1haS9pbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxvREFBb0QseUNBQXlDLDBDQUEwQyw4Q0FBOEMsb0RBQW9ELHFEQUFxRCxpQkFBaUI7O0FBRWhULHdCQUF3QixtQkFBTyxDQUFDLDRNQUFnQztBQUNoRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2FudGhyb3BpYy1haS9pbnN0cnVtZW50YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJTRU5UUllfUkVMRUFTRVwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeUJhc2VQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5TmV4dEpzVmVyc2lvblwiXSA9IFwiMTUuNS40XCI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlRnJhbWVzRGlzdERpclwiXSA9IFwiLm5leHRcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IHN1cHBvcnRlZFZlcnNpb25zID0gWyc+PTAuMTkuMiA8MS4wLjAnXTtcblxuLyoqXG4gKiBTZW50cnkgQW50aHJvcGljIEFJIGluc3RydW1lbnRhdGlvbiB1c2luZyBPcGVuVGVsZW1ldHJ5LlxuICovXG5jbGFzcyBTZW50cnlBbnRocm9waWNBaUluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoJ0BzZW50cnkvaW5zdHJ1bWVudGF0aW9uLWFudGhyb3BpYy1haScsIGNvcmUuU0RLX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGluc3RydW1lbnRhdGlvbiBieSBkZWZpbmluZyB0aGUgbW9kdWxlcyB0byBiZSBwYXRjaGVkLlxuICAgKi9cbiAgIGluaXQoKSB7XG4gICAgY29uc3QgbW9kdWxlID0gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbihcbiAgICAgICdAYW50aHJvcGljLWFpL3NkaycsXG4gICAgICBzdXBwb3J0ZWRWZXJzaW9ucyxcbiAgICAgIHRoaXMuX3BhdGNoLmJpbmQodGhpcyksXG4gICAgKTtcbiAgICByZXR1cm4gbW9kdWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcmUgcGF0Y2ggbG9naWMgYXBwbHlpbmcgaW5zdHJ1bWVudGF0aW9uIHRvIHRoZSBBbnRocm9waWMgQUkgY2xpZW50IGNvbnN0cnVjdG9yLlxuICAgKi9cbiAgIF9wYXRjaChleHBvcnRzKSB7XG4gICAgY29uc3QgT3JpZ2luYWwgPSBleHBvcnRzLkFudGhyb3BpYztcblxuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG5cbiAgICBjb25zdCBXcmFwcGVkQW50aHJvcGljID0gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IFJlZmxlY3QuY29uc3RydWN0KE9yaWdpbmFsLCBhcmdzKTtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gICAgICBjb25zdCBkZWZhdWx0UGlpID0gQm9vbGVhbihjbGllbnQ/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaSk7XG5cbiAgICAgIGNvbnN0IHJlY29yZElucHV0cyA9IGNvbmZpZy5yZWNvcmRJbnB1dHMgPz8gZGVmYXVsdFBpaTtcbiAgICAgIGNvbnN0IHJlY29yZE91dHB1dHMgPSBjb25maWcucmVjb3JkT3V0cHV0cyA/PyBkZWZhdWx0UGlpO1xuXG4gICAgICByZXR1cm4gY29yZS5pbnN0cnVtZW50QW50aHJvcGljQWlDbGllbnQoaW5zdGFuY2UgLCB7XG4gICAgICAgIHJlY29yZElucHV0cyxcbiAgICAgICAgcmVjb3JkT3V0cHV0cyxcbiAgICAgIH0pO1xuICAgIH0gO1xuXG4gICAgLy8gUHJlc2VydmUgc3RhdGljIGFuZCBwcm90b3R5cGUgY2hhaW5zXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFdyYXBwZWRBbnRocm9waWMsIE9yaWdpbmFsKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoV3JhcHBlZEFudGhyb3BpYy5wcm90b3R5cGUsIE9yaWdpbmFsLnByb3RvdHlwZSk7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPcmlnaW5hbCkpIHtcbiAgICAgIGlmICghWydsZW5ndGgnLCAnbmFtZScsICdwcm90b3R5cGUnXS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9yaWdpbmFsLCBrZXkpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcmFwcGVkQW50aHJvcGljLCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29uc3RydWN0b3IgcmVwbGFjZW1lbnQgLSBoYW5kbGUgcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAvLyBUaGUgQW50aHJvcGljIHByb3BlcnR5IG1pZ2h0IGhhdmUgb25seSBhIGdldHRlciwgc28gdXNlIGRlZmluZVByb3BlcnR5XG4gICAgdHJ5IHtcbiAgICAgIGV4cG9ydHMuQW50aHJvcGljID0gV3JhcHBlZEFudGhyb3BpYztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgZGlyZWN0IGFzc2lnbm1lbnQgZmFpbHMsIG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0FudGhyb3BpYycsIHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZWRBbnRocm9waWMsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXcmFwIHRoZSBkZWZhdWx0IGV4cG9ydCBpZiBpdCBwb2ludHMgdG8gdGhlIG9yaWdpbmFsIGNvbnN0cnVjdG9yXG4gICAgLy8gQ29uc3RydWN0b3IgcmVwbGFjZW1lbnQgLSBoYW5kbGUgcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAvLyBUaGUgQW50aHJvcGljIHByb3BlcnR5IG1pZ2h0IGhhdmUgb25seSBhIGdldHRlciwgc28gdXNlIGRlZmluZVByb3BlcnR5XG4gICAgaWYgKGV4cG9ydHMuZGVmYXVsdCA9PT0gT3JpZ2luYWwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGV4cG9ydHMuZGVmYXVsdCA9IFdyYXBwZWRBbnRocm9waWM7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiBkaXJlY3QgYXNzaWdubWVudCBmYWlscywgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3JcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdkZWZhdWx0Jywge1xuICAgICAgICAgIHZhbHVlOiBXcmFwcGVkQW50aHJvcGljLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4cG9ydHM7XG4gIH1cbn1cblxuZXhwb3J0cy5TZW50cnlBbnRocm9waWNBaUluc3RydW1lbnRhdGlvbiA9IFNlbnRyeUFudGhyb3BpY0FpSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\");\n\nconst CLAUDE_CODE_INTEGRATION_NAME = 'ClaudeCode';\n\n// Global singleton - only patch once per application instance\nlet _globalPatchedQuery = null;\nlet _initPromise = null;\n\n/**\n * Lazily loads and patches the Claude Code SDK.\n * Ensures only one patched instance exists globally.\n */\nasync function ensurePatchedQuery() {\n  if (_globalPatchedQuery) {\n    return;\n  }\n\n  if (_initPromise) {\n    return _initPromise;\n  }\n\n  _initPromise = (async () => {\n    try {\n      // Use webpackIgnore to prevent webpack from trying to resolve this at build time\n      // The import resolves at runtime from the user's node_modules\n      const sdkPath = '@anthropic-ai/claude-agent-sdk';\n      const claudeSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n      if (!claudeSDK || typeof claudeSDK.query !== 'function') {\n        throw new Error(\n          `Failed to find 'query' function in @anthropic-ai/claude-agent-sdk.\\n` +\n            `Make sure you have version >=0.1.0 installed.`,\n        );\n      }\n\n      const client = core.getClient();\n      const integration = client?.getIntegrationByName(CLAUDE_CODE_INTEGRATION_NAME);\n      const options = (integration )?.options  || {};\n\n      _globalPatchedQuery = instrumentation.patchClaudeCodeQuery(claudeSDK.query, options);\n    } catch (error) {\n      // Reset state on failure to allow retry on next call\n      _initPromise = null;\n\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Unknown error occurred while loading @anthropic-ai/claude-agent-sdk';\n\n      throw new Error(\n        `Failed to instrument Claude Code SDK:\\n${errorMessage}\\n\\n` +\n          `Make sure @anthropic-ai/claude-agent-sdk is installed:\\n` +\n          `  npm install @anthropic-ai/claude-agent-sdk\\n` +\n          `  # or\\n` +\n          `  yarn add @anthropic-ai/claude-agent-sdk`,\n      );\n    }\n  })();\n\n  return _initPromise;\n}\n\n/**\n * Creates a Sentry-instrumented query function for the Claude Code SDK.\n *\n * This is a convenience helper that reduces boilerplate to a single line.\n * The SDK is lazily loaded on first query call, and the patched version is cached globally.\n *\n * **Important**: This helper is NOT automatic. You must call it in your code.\n * The Claude Code SDK cannot be automatically instrumented due to ESM module\n * and webpack bundling limitations.\n *\n * @param options - Optional configuration for this specific agent instance\n * @param options.name - Custom agent name for differentiation (defaults to 'claude-code')\n * @returns An instrumented query function ready to use\n *\n * @example\n * ```typescript\n * import { createInstrumentedClaudeQuery } from '@sentry/node';\n *\n * // Default agent name ('claude-code')\n * const query = createInstrumentedClaudeQuery();\n *\n * // Custom agent name for differentiation\n * const appBuilder = createInstrumentedClaudeQuery({ name: 'app-builder' });\n * const chatAgent = createInstrumentedClaudeQuery({ name: 'chat-assistant' });\n *\n * // Use as normal - automatically instrumented!\n * for await (const message of query({\n *   prompt: 'Hello',\n *   options: { model: 'claude-sonnet-4-5' }\n * })) {\n *   console.log(message);\n * }\n * ```\n *\n * Configuration is automatically pulled from your `claudeCodeIntegration()` setup:\n *\n * @example\n * ```typescript\n * Sentry.init({\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,   // These options are used\n *       recordOutputs: true,  // by createInstrumentedClaudeQuery()\n *     })\n *   ]\n * });\n * ```\n */\nfunction createInstrumentedClaudeQuery(\n  options = {}\n) {\n  const agentName = options.name ?? 'claude-code';\n\n  return async function* query(...args) {\n    await ensurePatchedQuery();\n\n    if (!_globalPatchedQuery) {\n      throw new Error('[Sentry] Failed to initialize instrumented Claude Code query function');\n    }\n\n    // Create a new patched instance with custom agent name\n    const client = core.getClient();\n    const integration = client?.getIntegrationByName(CLAUDE_CODE_INTEGRATION_NAME);\n    const integrationOptions = (integration )?.options  || {};\n\n    // Import SDK again to get fresh query function\n    const sdkPath = '@anthropic-ai/claude-agent-sdk';\n    const claudeSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n    // Patch with custom agent name\n    const customPatchedQuery = instrumentation.patchClaudeCodeQuery(claudeSDK.query, {\n      ...integrationOptions,\n      agentName,\n    });\n\n    yield* customPatchedQuery(...args);\n  };\n}\n\nexports.createInstrumentedClaudeQuery = createInstrumentedClaudeQuery;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst CLAUDE_CODE_INTEGRATION_NAME = 'ClaudeCode';\n\nconst _claudeCodeIntegration = ((options = {}) => {\n  return {\n    name: CLAUDE_CODE_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      // Note: Automatic patching via require hooks doesn't work for ESM modules\n      // or webpack-bundled dependencies. Users must manually patch using patchClaudeCodeQuery()\n      // in their route files.\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Claude Code SDK.\n *\n * **Important**: Due to ESM module and bundler limitations, this integration requires\n * using the `createInstrumentedClaudeQuery()` helper function in your code.\n * See the example below for proper usage.\n *\n * This integration captures telemetry data following OpenTelemetry Semantic Conventions\n * for Generative AI, including:\n * - Agent invocation spans (`invoke_agent`)\n * - LLM chat spans (`chat`)\n * - Tool execution spans (`execute_tool`)\n * - Token usage, model info, and session tracking\n *\n * @example\n * ```typescript\n * // Step 1: Configure the integration\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   dsn: 'your-dsn',\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Step 2: Use the helper in your routes\n * import { createInstrumentedClaudeQuery } from '@sentry/node';\n *\n * const query = createInstrumentedClaudeQuery();\n *\n * // Use query as normal - automatically instrumented!\n * for await (const message of query({\n *   prompt: 'Hello',\n *   options: { model: 'claude-sonnet-4-5' }\n * })) {\n *   console.log(message);\n * }\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text, tool calls, and outputs (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```typescript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n * @see https://docs.sentry.io/platforms/javascript/guides/node/ai-monitoring/\n */\nconst claudeCodeIntegration = core.defineIntegration(_claudeCodeIntegration);\n\nexports.claudeCodeIntegration = claudeCodeIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2NsYXVkZS1jb2RlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYzs7QUFFbkM7O0FBRUEsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY2xhdWRlLWNvZGUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgQ0xBVURFX0NPREVfSU5URUdSQVRJT05fTkFNRSA9ICdDbGF1ZGVDb2RlJztcblxuY29uc3QgX2NsYXVkZUNvZGVJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogQ0xBVURFX0NPREVfSU5URUdSQVRJT05fTkFNRSxcbiAgICBvcHRpb25zLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIC8vIE5vdGU6IEF1dG9tYXRpYyBwYXRjaGluZyB2aWEgcmVxdWlyZSBob29rcyBkb2Vzbid0IHdvcmsgZm9yIEVTTSBtb2R1bGVzXG4gICAgICAvLyBvciB3ZWJwYWNrLWJ1bmRsZWQgZGVwZW5kZW5jaWVzLiBVc2VycyBtdXN0IG1hbnVhbGx5IHBhdGNoIHVzaW5nIHBhdGNoQ2xhdWRlQ29kZVF1ZXJ5KClcbiAgICAgIC8vIGluIHRoZWlyIHJvdXRlIGZpbGVzLlxuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBDbGF1ZGUgQ29kZSBTREsuXG4gKlxuICogKipJbXBvcnRhbnQqKjogRHVlIHRvIEVTTSBtb2R1bGUgYW5kIGJ1bmRsZXIgbGltaXRhdGlvbnMsIHRoaXMgaW50ZWdyYXRpb24gcmVxdWlyZXNcbiAqIHVzaW5nIHRoZSBgY3JlYXRlSW5zdHJ1bWVudGVkQ2xhdWRlUXVlcnkoKWAgaGVscGVyIGZ1bmN0aW9uIGluIHlvdXIgY29kZS5cbiAqIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgcHJvcGVyIHVzYWdlLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gY2FwdHVyZXMgdGVsZW1ldHJ5IGRhdGEgZm9sbG93aW5nIE9wZW5UZWxlbWV0cnkgU2VtYW50aWMgQ29udmVudGlvbnNcbiAqIGZvciBHZW5lcmF0aXZlIEFJLCBpbmNsdWRpbmc6XG4gKiAtIEFnZW50IGludm9jYXRpb24gc3BhbnMgKGBpbnZva2VfYWdlbnRgKVxuICogLSBMTE0gY2hhdCBzcGFucyAoYGNoYXRgKVxuICogLSBUb29sIGV4ZWN1dGlvbiBzcGFucyAoYGV4ZWN1dGVfdG9vbGApXG4gKiAtIFRva2VuIHVzYWdlLCBtb2RlbCBpbmZvLCBhbmQgc2Vzc2lvbiB0cmFja2luZ1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBTdGVwIDE6IENvbmZpZ3VyZSB0aGUgaW50ZWdyYXRpb25cbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgZHNuOiAneW91ci1kc24nLFxuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuY2xhdWRlQ29kZUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogdHJ1ZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IHRydWVcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gU3RlcCAyOiBVc2UgdGhlIGhlbHBlciBpbiB5b3VyIHJvdXRlc1xuICogaW1wb3J0IHsgY3JlYXRlSW5zdHJ1bWVudGVkQ2xhdWRlUXVlcnkgfSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIGNvbnN0IHF1ZXJ5ID0gY3JlYXRlSW5zdHJ1bWVudGVkQ2xhdWRlUXVlcnkoKTtcbiAqXG4gKiAvLyBVc2UgcXVlcnkgYXMgbm9ybWFsIC0gYXV0b21hdGljYWxseSBpbnN0cnVtZW50ZWQhXG4gKiBmb3IgYXdhaXQgKGNvbnN0IG1lc3NhZ2Ugb2YgcXVlcnkoe1xuICogICBwcm9tcHQ6ICdIZWxsbycsXG4gKiAgIG9wdGlvbnM6IHsgbW9kZWw6ICdjbGF1ZGUtc29ubmV0LTQtNScgfVxuICogfSkpIHtcbiAqICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAjIyBPcHRpb25zXG4gKlxuICogLSBgcmVjb3JkSW5wdXRzYDogV2hldGhlciB0byByZWNvcmQgcHJvbXB0IG1lc3NhZ2VzIChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKiAtIGByZWNvcmRPdXRwdXRzYDogV2hldGhlciB0byByZWNvcmQgcmVzcG9uc2UgdGV4dCwgdG9vbCBjYWxscywgYW5kIG91dHB1dHMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqXG4gKiAjIyMgRGVmYXVsdCBCZWhhdmlvclxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBpbnRlZ3JhdGlvbiB3aWxsOlxuICogLSBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIE9OTFkgaWYgYHNlbmREZWZhdWx0UGlpYCBpcyBzZXQgdG8gYHRydWVgIGluIHlvdXIgU2VudHJ5IGNsaWVudCBvcHRpb25zXG4gKiAtIE90aGVyd2lzZSwgaW5wdXRzIGFuZCBvdXRwdXRzIGFyZSBOT1QgcmVjb3JkZWQgdW5sZXNzIGV4cGxpY2l0bHkgZW5hYmxlZFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIHdoZW4gc2VuZERlZmF1bHRQaWkgaXMgZmFsc2VcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5LmNsYXVkZUNvZGVJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IHRydWUsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiB0cnVlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICpcbiAqIC8vIE5ldmVyIHJlY29yZCBpbnB1dHMvb3V0cHV0cyByZWdhcmRsZXNzIG9mIHNlbmREZWZhdWx0UGlpXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIHNlbmREZWZhdWx0UGlpOiB0cnVlLFxuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuY2xhdWRlQ29kZUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogZmFsc2UsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiBmYWxzZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9haS1tb25pdG9yaW5nL1xuICovXG5jb25zdCBjbGF1ZGVDb2RlSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9jbGF1ZGVDb2RlSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmNsYXVkZUNvZGVJbnRlZ3JhdGlvbiA9IGNsYXVkZUNvZGVJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst GEN_AI_ATTRIBUTES = {\n  SYSTEM: 'gen_ai.system',\n  OPERATION_NAME: 'gen_ai.operation.name',\n  REQUEST_MODEL: 'gen_ai.request.model',\n  REQUEST_MESSAGES: 'gen_ai.request.messages',\n  RESPONSE_TEXT: 'gen_ai.response.text',\n  RESPONSE_TOOL_CALLS: 'gen_ai.response.tool_calls',\n  RESPONSE_ID: 'gen_ai.response.id',\n  RESPONSE_MODEL: 'gen_ai.response.model',\n  USAGE_INPUT_TOKENS: 'gen_ai.usage.input_tokens',\n  USAGE_OUTPUT_TOKENS: 'gen_ai.usage.output_tokens',\n  USAGE_TOTAL_TOKENS: 'gen_ai.usage.total_tokens',\n  TOOL_NAME: 'gen_ai.tool.name',\n  TOOL_TYPE: 'gen_ai.tool.type',\n  TOOL_INPUT: 'gen_ai.tool.input',\n  TOOL_OUTPUT: 'gen_ai.tool.output',\n  AGENT_NAME: 'gen_ai.agent.name',\n} ;\n\nconst SENTRY_ORIGIN = 'auto.ai.claude-code';\n\n/**\n * Maps Claude Code tool names to OpenTelemetry tool types.\n *\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/\n * @param toolName - The name of the tool (e.g., 'Bash', 'Read', 'WebSearch')\n * @returns The OpenTelemetry tool type: 'function', 'extension', or 'datastore'\n */\nfunction getToolType(toolName) {\n  // Client-side execution tools - functions that run on the client\n  const functionTools = new Set([\n    'Bash', 'BashOutput', 'KillShell', // Shell/process tools\n    'Read', 'Write', 'Edit', // File operations\n    'Glob', 'Grep', // File search\n    'Task', 'ExitPlanMode', 'TodoWrite', // Agent control\n    'NotebookEdit', 'SlashCommand', // Specialized operations\n  ]);\n\n  // Agent-side API calls - external service integrations\n  const extensionTools = new Set([\n    'WebSearch', 'WebFetch',\n  ]);\n\n  // Data access tools - database/structured data operations\n  // (Currently none in Claude Code, but future-proofing)\n  const datastoreTools = new Set([]);\n\n  if (functionTools.has(toolName)) return 'function';\n  if (extensionTools.has(toolName)) return 'extension';\n  if (datastoreTools.has(toolName)) return 'datastore';\n\n  // Default to function for unknown tools (safest assumption)\n  return 'function';\n}\n\nfunction setTokenUsageAttributes(\n  span,\n  inputTokens,\n  outputTokens,\n  cacheCreationTokens,\n  cacheReadTokens,\n) {\n  const attrs = {};\n\n  if (typeof inputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_INPUT_TOKENS] = inputTokens;\n  }\n  if (typeof outputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_OUTPUT_TOKENS] = outputTokens;\n  }\n\n  const total = (inputTokens ?? 0) + (outputTokens ?? 0) + (cacheCreationTokens ?? 0) + (cacheReadTokens ?? 0);\n  if (total > 0) {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_TOTAL_TOKENS] = total;\n  }\n\n  if (Object.keys(attrs).length > 0) {\n    span.setAttributes(attrs);\n  }\n}\n\n/**\n * Patches the Claude Code SDK query function with Sentry instrumentation.\n * This function can be called directly to patch an imported query function.\n */\nfunction patchClaudeCodeQuery(\n  queryFunction,\n  options = {},\n) {\n  const patchedQuery = function ( ...args) {\n    const client = core.getClient();\n    const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n    const recordInputs = options.recordInputs ?? defaultPii;\n    const recordOutputs = options.recordOutputs ?? defaultPii;\n    const agentName = options.agentName ?? 'claude-code';\n\n    // Parse query arguments\n    const [queryParams] = args ;\n    const { options: queryOptions, inputMessages } = queryParams || {};\n    const model = (queryOptions )?.model ?? 'sonnet';\n\n    // Create original query instance\n    const originalQueryInstance = queryFunction.apply(this, args);\n\n    // Create instrumented generator\n    const instrumentedGenerator = _createInstrumentedGenerator(\n      originalQueryInstance,\n      model ,\n      { recordInputs, recordOutputs, inputMessages, agentName },\n    );\n\n    // Preserve Query interface methods\n    if (typeof (originalQueryInstance ).interrupt === 'function') {\n      (instrumentedGenerator ).interrupt = (\n        (originalQueryInstance ).interrupt\n      ).bind(originalQueryInstance);\n    }\n    if (typeof (originalQueryInstance ).setPermissionMode === 'function') {\n      (instrumentedGenerator ).setPermissionMode = (\n        (originalQueryInstance ).setPermissionMode\n      ).bind(originalQueryInstance);\n    }\n\n    return instrumentedGenerator;\n  };\n\n  return patchedQuery ;\n}\n\n/**\n * Creates an instrumented async generator that wraps the original query.\n */\nfunction _createInstrumentedGenerator(\n  originalQuery,\n  model,\n  instrumentationOptions\n\n,\n) {\n    const agentName = instrumentationOptions.agentName ?? 'claude-code';\n\n    return core.startSpanManual(\n      {\n        name: `invoke_agent ${agentName}`,\n        op: 'gen_ai.invoke_agent',\n        attributes: {\n          [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n          [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n          [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n          [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        },\n      },\n      async function* (span) {\n        // State accumulation\n        let sessionId = null;\n        let currentLLMSpan = null;\n        let currentTurnContent = '';\n        let currentTurnTools = [];\n        let currentTurnId = null;\n        let currentTurnModel = null;\n        let inputMessagesCaptured = false;\n        let finalResult = null;\n        let previousLLMSpan = null;\n        let previousTurnTools = [];\n\n        try {\n          for await (const message of originalQuery) {\n            const msg = message ;\n\n            // Extract session ID from system message\n            if (msg.type === 'system' && msg.session_id) {\n              sessionId = msg.session_id ;\n\n              if (\n                !inputMessagesCaptured &&\n                instrumentationOptions.recordInputs &&\n                msg.conversation_history\n              ) {\n                span.setAttributes({\n                  [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify(msg.conversation_history),\n                });\n                inputMessagesCaptured = true;\n              }\n            }\n\n            // Handle assistant messages\n            if (msg.type === 'assistant') {\n              // Close previous LLM span if still open\n              if (previousLLMSpan) {\n                previousLLMSpan.setStatus({ code: 1 });\n                previousLLMSpan.end();\n                previousLLMSpan = null;\n                previousTurnTools = [];\n              }\n\n              // Create new LLM span\n              if (!currentLLMSpan) {\n                currentLLMSpan = core.withActiveSpan(span, () => {\n                  return core.startSpanManual(\n                    {\n                      name: `chat ${model}`,\n                      op: 'gen_ai.chat',\n                      attributes: {\n                        [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n                        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n                        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                      },\n                    },\n                    (childSpan) => {\n                      if (instrumentationOptions.recordInputs && instrumentationOptions.inputMessages) {\n                        childSpan.setAttributes({\n                          [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify(\n                            instrumentationOptions.inputMessages,\n                          ),\n                        });\n                      }\n                      return childSpan;\n                    },\n                  );\n                });\n\n                currentTurnContent = '';\n                currentTurnTools = [];\n              }\n\n              // Accumulate content\n              const content = (msg.message )?.content ;\n              if (Array.isArray(content)) {\n                const textContent = content\n                  .filter((c) => (c ).type === 'text')\n                  .map((c) => (c ).text )\n                  .join('');\n                if (textContent) {\n                  currentTurnContent += textContent;\n                }\n\n                const tools = content.filter((c) => (c ).type === 'tool_use');\n                if (tools.length > 0) {\n                  currentTurnTools.push(...tools);\n                }\n              }\n\n              if ((msg.message )?.id) {\n                currentTurnId = (msg.message ).id ;\n              }\n              if ((msg.message )?.model) {\n                currentTurnModel = (msg.message ).model ;\n              }\n            }\n\n            // Handle result messages\n            if (msg.type === 'result') {\n              if (msg.result) {\n                finalResult = msg.result ;\n              }\n\n              // Close previous LLM span\n              if (previousLLMSpan) {\n                previousLLMSpan.setStatus({ code: 1 });\n                previousLLMSpan.end();\n                previousLLMSpan = null;\n                previousTurnTools = [];\n              }\n\n              // Finalize current LLM span\n              if (currentLLMSpan) {\n                if (instrumentationOptions.recordOutputs && currentTurnContent) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: currentTurnContent,\n                  });\n                }\n\n                if (instrumentationOptions.recordOutputs && currentTurnTools.length > 0) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_TOOL_CALLS]: JSON.stringify(currentTurnTools),\n                  });\n                }\n\n                if (currentTurnId) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_ID]: currentTurnId,\n                  });\n                }\n                if (currentTurnModel) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_MODEL]: currentTurnModel,\n                  });\n                }\n\n                if (msg.usage) {\n                  const usage = msg.usage ;\n                  setTokenUsageAttributes(\n                    currentLLMSpan,\n                    usage.input_tokens,\n                    usage.output_tokens,\n                    usage.cache_creation_input_tokens,\n                    usage.cache_read_input_tokens,\n                  );\n                }\n\n                currentLLMSpan.setStatus({ code: 1 });\n                currentLLMSpan.end();\n\n                previousLLMSpan = currentLLMSpan;\n                previousTurnTools = currentTurnTools;\n\n                currentLLMSpan = null;\n                currentTurnContent = '';\n                currentTurnTools = [];\n                currentTurnId = null;\n                currentTurnModel = null;\n              }\n            }\n\n            // Handle tool results\n            if (msg.type === 'user' && (msg.message )?.content) {\n              const content = (msg.message ).content ;\n              const toolResults = Array.isArray(content)\n                ? content.filter((c) => (c ).type === 'tool_result')\n                : [];\n\n              for (const toolResult of toolResults) {\n                const tr = toolResult ;\n                let matchingTool = currentTurnTools.find(\n                  (t) => (t ).id === tr.tool_use_id,\n                ) ;\n                let parentLLMSpan = currentLLMSpan;\n\n                if (!matchingTool && previousTurnTools.length > 0) {\n                  matchingTool = previousTurnTools.find(\n                    (t) => (t ).id === tr.tool_use_id,\n                  ) ;\n                  parentLLMSpan = previousLLMSpan;\n                }\n\n                if (matchingTool && parentLLMSpan) {\n                  core.withActiveSpan(parentLLMSpan, () => {\n                    const toolName = matchingTool.name ;\n                    const toolType = getToolType(toolName);\n\n                    core.startSpan(\n                      {\n                        name: `execute_tool ${toolName}`,\n                        op: 'gen_ai.execute_tool',\n                        attributes: {\n                          [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n                          [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n                          [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                          [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                          [GEN_AI_ATTRIBUTES.TOOL_NAME]: toolName,\n                          [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                        },\n                      },\n                      (toolSpan) => {\n                        if (instrumentationOptions.recordInputs && matchingTool.input) {\n                          toolSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_INPUT]: JSON.stringify(matchingTool.input),\n                          });\n                        }\n\n                        if (instrumentationOptions.recordOutputs && tr.content) {\n                          toolSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]:\n                              typeof tr.content === 'string' ? tr.content : JSON.stringify(tr.content),\n                          });\n                        }\n\n                        // Set span status explicitly\n                        if (tr.is_error) {\n                          toolSpan.setStatus({ code: 2, message: 'Tool execution error' });\n                        } else {\n                          toolSpan.setStatus({ code: 1 }); // Explicit success status\n                        }\n                      },\n                    );\n                  });\n                }\n              }\n            }\n\n            yield message;\n          }\n\n          if (instrumentationOptions.recordOutputs && finalResult) {\n            span.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: finalResult,\n            });\n          }\n\n          if (sessionId) {\n            span.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_ID]: sessionId,\n            });\n          }\n\n          span.setStatus({ code: 1 });\n        } catch (error) {\n          // Capture exception to Sentry with proper metadata\n          core.captureException(error, {\n            mechanism: {\n              type: SENTRY_ORIGIN,\n              handled: false,\n            },\n          });\n\n          span.setStatus({ code: 2, message: (error ).message });\n          throw error;\n        } finally {\n          // Ensure all child spans are closed even if generator exits early\n          if (currentLLMSpan && currentLLMSpan.isRecording()) {\n            currentLLMSpan.setStatus({ code: 1 });\n            currentLLMSpan.end();\n          }\n\n          if (previousLLMSpan && previousLLMSpan.isRecording()) {\n            previousLLMSpan.setStatus({ code: 1 });\n            previousLLMSpan.end();\n          }\n\n          span.end();\n        }\n      },\n    );\n}\n\nexports.patchClaudeCodeQuery = patchClaudeCodeQuery;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err, {\n    mechanism: {\n      handled: false,\n      type: 'auto.middleware.connect',\n    },\n  });\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  nodeCore.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need the \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Nvbm5lY3QuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsbU9BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7O0FBRTVDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jb25uZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Db25uZWN0ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWNvbm5lY3QnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25uZWN0JztcblxuY29uc3QgaW5zdHJ1bWVudENvbm5lY3QgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25Db25uZWN0LkNvbm5lY3RJbnN0cnVtZW50YXRpb24oKSk7XG5cbmNvbnN0IF9jb25uZWN0SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudENvbm5lY3QoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbQ29ubmVjdF0oaHR0cHM6Ly9naXRodWIuY29tL3NlbmNoYWxhYnMvY29ubmVjdC8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwQ29ubmVjdEVycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3UgaW5pdGlhbGl6ZSB5b3VyIGNvbm5lY3QgYXBwLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtjb25uZWN0IGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL2Nvbm5lY3QvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuY29ubmVjdEludGVncmF0aW9uKCldLFxuICogfSlcbiAqIGBgYFxuICovXG5jb25zdCBjb25uZWN0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9jb25uZWN0SW50ZWdyYXRpb24pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gY29ubmVjdEVycm9yTWlkZGxld2FyZShlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnIsIHtcbiAgICBtZWNoYW5pc206IHtcbiAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgdHlwZTogJ2F1dG8ubWlkZGxld2FyZS5jb25uZWN0JyxcbiAgICB9LFxuICB9KTtcbiAgbmV4dChlcnIpO1xufVxuXG4vKipcbiAqIEFkZCBhIENvbm5lY3QgbWlkZGxld2FyZSB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgQ29ubmVjdCBhcHAgdG8gYXR0YWNoIHRoZSBlcnJvciBoYW5kbGVyIHRvXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICogY29uc3QgY29ubmVjdCA9IHJlcXVpcmUoXCJjb25uZWN0XCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IGNvbm5lY3QoKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyKGFwcCk7XG4gKlxuICogLy8gQWRkIHlvdSBjb25uZWN0IHJvdXRlcyBoZXJlXG4gKlxuICogYXBwLmxpc3RlbigzMDAwKTtcbiAqIGBgYFxuICovXG5jb25zdCBzZXR1cENvbm5lY3RFcnJvckhhbmRsZXIgPSAoYXBwKSA9PiB7XG4gIGFwcC51c2UoY29ubmVjdEVycm9yTWlkZGxld2FyZSk7XG5cbiAgLy8gU2FkbHksIENvbm5lY3RJbnN0cnVtZW50YXRpb24gaGFzIG5vIHJlcXVlc3RIb29rLCBzbyB3ZSBuZWVkIHRvIGFkZCB0aGUgYXR0cmlidXRlcyBoZXJlXG4gIC8vIFdlIHJlZ2lzdGVyIHRoaXMgaG9vayBpbiB0aGlzIG1ldGhvZCwgYmVjYXVzZSBpZiB3ZSByZWdpc3RlciBpdCBpbiB0aGUgaW50ZWdyYXRpb24gYHNldHVwYCxcbiAgLy8gaXQgd291bGQgYWx3YXlzIHJ1biBldmVuIGZvciB1c2VycyB0aGF0IGFyZSBub3QgZXZlbiB1c2luZyBjb25uZWN0XG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgYWRkQ29ubmVjdFNwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgIH0pO1xuICB9XG5cbiAgbm9kZUNvcmUuZW5zdXJlSXNXcmFwcGVkKGFwcC51c2UsICdjb25uZWN0Jyk7XG59O1xuXG5mdW5jdGlvbiBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJlcXVlc3RfaGFuZGxlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snY29ubmVjdC50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBjb25uZWN0IHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5jb25uZWN0JyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uY29ubmVjdGAsXG4gIH0pO1xuXG4gIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lLCB3ZSBkb24ndCBuZWVkIHRoZSBcIm1pZGRsZXdhcmUgLSBcIiBwcmVmaXhcbiAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNbJ2Nvbm5lY3QubmFtZSddO1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUpO1xuICB9XG59XG5cbmV4cG9ydHMuY29ubmVjdEludGVncmF0aW9uID0gY29ubmVjdEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50Q29ubmVjdCA9IGluc3RydW1lbnRDb25uZWN0O1xuZXhwb3J0cy5zZXR1cENvbm5lY3RFcnJvckhhbmRsZXIgPSBzZXR1cENvbm5lY3RFcnJvckhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.22.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentDataloader();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      // This is called either immediately or when the instrumentation is wrapped\n      instrumentationWrappedCallback?.(() => {\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n          if (spanJSON.description?.startsWith('dataloader')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n          }\n\n          // These are all possible dataloader span descriptions\n          // Still checking for the future versions\n          // in case they add support for `clear` and `prime`\n          if (\n            spanJSON.description === 'dataloader.load' ||\n            spanJSON.description === 'dataloader.loadMany' ||\n            spanJSON.description === 'dataloader.batch'\n          ) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n            // TODO: We can try adding `key` to the `data` attribute upstream.\n            // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n          }\n        });\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2RhdGFsb2FkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0NBQWtDLG1CQUFPLENBQUMsNE9BQTJDO0FBQ3JGLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2RhdGFsb2FkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZGF0YWxvYWRlcicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0RhdGFsb2FkZXInO1xuXG5jb25zdCBpbnN0cnVtZW50RGF0YWxvYWRlciA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIuRGF0YWxvYWRlckluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9kYXRhbG9hZGVySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50RGF0YWxvYWRlcigpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgLy8gVGhpcyBpcyBjYWxsZWQgZWl0aGVyIGltbWVkaWF0ZWx5IG9yIHdoZW4gdGhlIGluc3RydW1lbnRhdGlvbiBpcyB3cmFwcGVkXG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s/LigoKSA9PiB7XG4gICAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgICAgY29uc3Qgc3BhbkpTT04gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgICAgaWYgKHNwYW5KU09OLmRlc2NyaXB0aW9uPy5zdGFydHNXaXRoKCdkYXRhbG9hZGVyJykpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZGF0YWxvYWRlcicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZXNlIGFyZSBhbGwgcG9zc2libGUgZGF0YWxvYWRlciBzcGFuIGRlc2NyaXB0aW9uc1xuICAgICAgICAgIC8vIFN0aWxsIGNoZWNraW5nIGZvciB0aGUgZnV0dXJlIHZlcnNpb25zXG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGV5IGFkZCBzdXBwb3J0IGZvciBgY2xlYXJgIGFuZCBgcHJpbWVgXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmxvYWQnIHx8XG4gICAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZE1hbnknIHx8XG4gICAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIuYmF0Y2gnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdjYWNoZS5nZXQnKTtcbiAgICAgICAgICAgIC8vIFRPRE86IFdlIGNhbiB0cnkgYWRkaW5nIGBrZXlgIHRvIHRoZSBgZGF0YWAgYXR0cmlidXRlIHVwc3RyZWFtLlxuICAgICAgICAgICAgLy8gT3IgYWx0ZXJuYXRpdmVseSwgd2UgY2FuIGFkZCBgcmVxdWVzdEhvb2tgIHRvIHRoZSBkYXRhbG9hZGVyIGluc3RydW1lbnRhdGlvbi5cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtkYXRhbG9hZGVyXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9kYXRhbG9hZGVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZGF0YWxvYWRlckludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2RhdGFsb2FkZXIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5kYXRhbG9hZGVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBkYXRhbG9hZGVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9kYXRhbG9hZGVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudERhdGFsb2FkZXIgPSBpbnN0cnVtZW50RGF0YWxvYWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGFsb2FkZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nfunction requestHook(span) {\n  nodeCore.addOriginToSpan(span, 'auto.http.otel.express');\n\n  const attributes = core.spanToJSON(span).data;\n  // this is one of: middleware, request_handler, router\n  const type = attributes['express.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n  }\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['express.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nfunction spanNameHook(info, defaultName) {\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n    return defaultName;\n  }\n  if (info.layerType === 'request_handler') {\n    // type cast b/c Otel unfortunately types info.request as any :(\n    const req = info.request ;\n    const method = req.method ? req.method.toUpperCase() : 'GET';\n    core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n  }\n  return defaultName;\n}\n\nconst instrumentExpress = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    request,\n    res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    // When an error happens, the `expressRequestHandler` middleware does not run, so we set it here too\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const eventId = core.captureException(error, { mechanism: { type: 'auto.middleware.express', handled: false } });\n      (res ).sentry = eventId;\n    }\n\n    next(error);\n  };\n}\n\nfunction expressRequestHandler() {\n  return function sentryRequestMiddleware(\n    request,\n    _res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    next();\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressRequestHandler());\n  app.use(expressErrorHandler(options));\n  nodeCore.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || error.output?.statusCode;\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst minimatch = __webpack_require__(/*! minimatch */ \"(instrument)/../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/commonjs/index.js\");\n\n/*\nVendored in and modified from @fastify/otel version 0.8.0\nhttps://github.com/fastify/otel/releases/tag/v0.8.0\n\nTried not to modify the original code too much keeping it as a JavaScript CJS module to make it easier to update when required\n\nModifications include:\n- Removed reading of package.json to get the version and package name\n\nMIT License\n\nCopyright (c) 2024 Fastify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n// SENTRY VENDOR NOTE\n// Instead of using the package.json file, we hard code the package name and version here.\nconst PACKAGE_NAME = '@fastify/otel';\nconst PACKAGE_VERSION = '0.8.0';\n\n// Constants\nconst SUPPORTED_VERSIONS = '>=4.0.0 <6';\nconst FASTIFY_HOOKS = [\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preHandler',\n  'preSerialization',\n  'onSend',\n  'onResponse',\n  'onError',\n];\nconst ATTRIBUTE_NAMES = {\n  HOOK_NAME: 'hook.name',\n  FASTIFY_TYPE: 'fastify.type',\n  HOOK_CALLBACK_NAME: 'hook.callback.name',\n  ROOT: 'fastify.root',\n};\nconst HOOK_TYPES = {\n  ROUTE: 'route-hook',\n  INSTANCE: 'hook',\n  HANDLER: 'request-handler',\n};\nconst ANONYMOUS_FUNCTION_NAME = 'anonymous';\n\n// Symbols\nconst kInstrumentation = Symbol('fastify otel instance');\nconst kRequestSpan = Symbol('fastify otel request spans');\nconst kRequestContext = Symbol('fastify otel request context');\nconst kAddHookOriginal = Symbol('fastify otel addhook original');\nconst kSetNotFoundOriginal = Symbol('fastify otel setnotfound original');\nconst kIgnorePaths = Symbol('fastify otel ignore path');\n\nclass FastifyOtelInstrumentation extends instrumentation.InstrumentationBase {\n  constructor(config) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n    this.servername = config?.servername ?? process.env.OTEL_SERVICE_NAME ?? 'fastify';\n    this[kIgnorePaths] = null;\n    this._logger = api.diag.createComponentLogger({ namespace: PACKAGE_NAME });\n\n    if (config?.ignorePaths != null || process.env.OTEL_FASTIFY_IGNORE_PATHS != null) {\n      const ignorePaths = config?.ignorePaths ?? process.env.OTEL_FASTIFY_IGNORE_PATHS;\n\n      if ((typeof ignorePaths !== 'string' || ignorePaths.length === 0) && typeof ignorePaths !== 'function') {\n        throw new TypeError('ignorePaths must be a string or a function');\n      }\n\n      const globMatcher = minimatch.minimatch;\n\n      this[kIgnorePaths] = routeOptions => {\n        if (typeof ignorePaths === 'function') {\n          return ignorePaths(routeOptions);\n        } else {\n          return globMatcher(routeOptions.url, ignorePaths);\n        }\n      };\n    }\n  }\n\n  enable() {\n    if (this._handleInitialization === undefined && this.getConfig().registerOnInitialization) {\n      const FastifyInstrumentationPlugin = this.plugin();\n      this._handleInitialization = message => {\n        message.fastify.register(FastifyInstrumentationPlugin);\n      };\n      dc.default.subscribe('fastify.initialization', this._handleInitialization);\n    }\n    return super.enable();\n  }\n\n  disable() {\n    if (this._handleInitialization) {\n      dc.default.unsubscribe('fastify.initialization', this._handleInitialization);\n      this._handleInitialization = undefined;\n    }\n    return super.disable();\n  }\n\n  // We do not do patching in this instrumentation\n  init() {\n    return [];\n  }\n\n  plugin() {\n    const instrumentation = this;\n\n    FastifyInstrumentationPlugin[Symbol.for('skip-override')] = true;\n    FastifyInstrumentationPlugin[Symbol.for('fastify.display-name')] = '@fastify/otel';\n    FastifyInstrumentationPlugin[Symbol.for('plugin-meta')] = {\n      fastify: SUPPORTED_VERSIONS,\n      name: '@fastify/otel',\n    };\n\n    return FastifyInstrumentationPlugin;\n\n    function FastifyInstrumentationPlugin(instance, opts, done) {\n      instance.decorate(kInstrumentation, instrumentation);\n      // addHook and notfoundHandler are essentially inherited from the prototype\n      // what is important is to bound it to the right instance\n      instance.decorate(kAddHookOriginal, instance.addHook);\n      instance.decorate(kSetNotFoundOriginal, instance.setNotFoundHandler);\n      instance.decorateRequest('opentelemetry', function openetelemetry() {\n        const ctx = this[kRequestContext];\n        const span = this[kRequestSpan];\n        return {\n          span,\n          tracer: instrumentation.tracer,\n          context: ctx,\n          inject: (carrier, setter) => {\n            return api.propagation.inject(ctx, carrier, setter);\n          },\n          extract: (carrier, getter) => {\n            return api.propagation.extract(ctx, carrier, getter);\n          },\n        };\n      });\n      instance.decorateRequest(kRequestSpan, null);\n      instance.decorateRequest(kRequestContext, null);\n\n      instance.addHook('onRoute', function (routeOptions) {\n        if (instrumentation[kIgnorePaths]?.(routeOptions) === true) {\n          instrumentation._logger.debug(\n            `Ignoring route instrumentation ${routeOptions.method} ${routeOptions.url} because it matches the ignore path`,\n          );\n          return;\n        }\n\n        for (const hook of FASTIFY_HOOKS) {\n          if (routeOptions[hook] != null) {\n            const handlerLike = routeOptions[hook];\n\n            if (typeof handlerLike === 'function') {\n              routeOptions[hook] = handlerWrapper(handlerLike, {\n                [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                  handlerLike.name?.length > 0 ? handlerLike.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n              });\n            } else if (Array.isArray(handlerLike)) {\n              const wrappedHandlers = [];\n\n              for (const handler of handlerLike) {\n                wrappedHandlers.push(\n                  handlerWrapper(handler, {\n                    [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                    [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                    [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                    [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                    [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                      handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME,\n                  }),\n                );\n              }\n\n              routeOptions[hook] = wrappedHandlers;\n            }\n          }\n        }\n\n        // We always want to add the onSend hook to the route to be executed last\n        if (routeOptions.onSend != null) {\n          routeOptions.onSend = Array.isArray(routeOptions.onSend)\n            ? [...routeOptions.onSend, onSendHook]\n            : [routeOptions.onSend, onSendHook];\n        } else {\n          routeOptions.onSend = onSendHook;\n        }\n\n        // We always want to add the onError hook to the route to be executed last\n        if (routeOptions.onError != null) {\n          routeOptions.onError = Array.isArray(routeOptions.onError)\n            ? [...routeOptions.onError, onErrorHook]\n            : [routeOptions.onError, onErrorHook];\n        } else {\n          routeOptions.onError = onErrorHook;\n        }\n\n        routeOptions.handler = handlerWrapper(routeOptions.handler, {\n          [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n          [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route-handler`,\n          [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.HANDLER,\n          [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n          [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n            routeOptions.handler.name.length > 0 ? routeOptions.handler.name : ANONYMOUS_FUNCTION_NAME,\n        });\n      });\n\n      instance.addHook('onRequest', function (request, _reply, hookDone) {\n        if (this[kInstrumentation].isEnabled() === false) {\n          return hookDone();\n        } else if (\n          this[kInstrumentation][kIgnorePaths]?.({\n            url: request.url,\n            method: request.method,\n          }) === true\n        ) {\n          this[kInstrumentation]._logger.debug(\n            `Ignoring request ${request.method} ${request.url} because it matches the ignore path`,\n          );\n          return hookDone();\n        }\n\n        let ctx = api.context.active();\n\n        if (api.trace.getSpan(ctx) == null) {\n          ctx = api.propagation.extract(ctx, request.headers);\n        }\n\n        const rpcMetadata = core.getRPCMetadata(ctx);\n\n        if (request.routeOptions.url != null && rpcMetadata?.type === core.RPCType.HTTP) {\n          rpcMetadata.route = request.routeOptions.url;\n        }\n\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = this[kInstrumentation].tracer.startSpan(\n          'request',\n          {\n            attributes: {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.ROOT]: '@fastify/otel',\n              [semanticConventions.ATTR_HTTP_ROUTE]: request.url,\n              [semanticConventions.ATTR_HTTP_REQUEST_METHOD]: request.method,\n            },\n          },\n          ctx,\n        );\n\n        request[kRequestContext] = api.trace.setSpan(ctx, span);\n        request[kRequestSpan] = span;\n\n        api.context.with(request[kRequestContext], () => {\n          hookDone();\n        });\n      });\n\n      // onResponse is the last hook to be executed, only added for 404 handlers\n      instance.addHook('onResponse', function (request, reply, hookDone) {\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.OK,\n            message: 'OK',\n          });\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: 404,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone();\n      });\n\n      instance.addHook = addHookPatched;\n      instance.setNotFoundHandler = setNotFoundHandlerPatched;\n\n      done();\n\n      function onSendHook(request, reply, payload, hookDone) {\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          if (reply.statusCode < 500) {\n            span.setStatus({\n              code: api.SpanStatusCode.OK,\n              message: 'OK',\n            });\n          }\n\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: reply.statusCode,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone(null, payload);\n      }\n\n      function onErrorHook(request, reply, error, hookDone) {\n        /** @type {Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message: error.message,\n          });\n          span.recordException(error);\n        }\n\n        hookDone();\n      }\n\n      function addHookPatched(name, hook) {\n        const addHookOriginal = this[kAddHookOriginal];\n\n        if (FASTIFY_HOOKS.includes(name)) {\n          return addHookOriginal.call(\n            this,\n            name,\n            handlerWrapper(hook, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - ${name}`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hook.name?.length > 0 ? hook.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            }),\n          );\n        } else {\n          return addHookOriginal.call(this, name, hook);\n        }\n      }\n\n      function setNotFoundHandlerPatched(hooks, handler) {\n        const setNotFoundHandlerOriginal = this[kSetNotFoundOriginal];\n        if (typeof hooks === 'function') {\n          handler = handlerWrapper(hooks, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              hooks.name?.length > 0 ? hooks.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, handler);\n        } else {\n          if (hooks.preValidation != null) {\n            hooks.preValidation = handlerWrapper(hooks.preValidation, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preValidation`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preValidation.name?.length > 0\n                  ? hooks.preValidation.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          if (hooks.preHandler != null) {\n            hooks.preHandler = handlerWrapper(hooks.preHandler, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preHandler`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preHandler.name?.length > 0\n                  ? hooks.preHandler.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          handler = handlerWrapper(handler, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, hooks, handler);\n        }\n      }\n\n      function handlerWrapper(handler, spanAttributes = {}) {\n        return function handlerWrapped(...args) {\n          /** @type {FastifyOtelInstrumentation} */\n          const instrumentation = this[kInstrumentation];\n          const [request] = args;\n\n          if (instrumentation.isEnabled() === false) {\n            return handler.call(this, ...args);\n          }\n\n          const ctx = request[kRequestContext] ?? api.context.active();\n          const span = instrumentation.tracer.startSpan(\n            `handler - ${\n              handler.name?.length > 0\n                ? handler.name\n                : (this.pluginName /* c8 ignore next */ ?? ANONYMOUS_FUNCTION_NAME) /* c8 ignore next */\n            }`,\n            {\n              attributes: spanAttributes,\n            },\n            ctx,\n          );\n\n          return api.context.with(\n            api.trace.setSpan(ctx, span),\n            function () {\n              try {\n                const res = handler.call(this, ...args);\n\n                if (typeof res?.then === 'function') {\n                  return res.then(\n                    result => {\n                      span.end();\n                      return result;\n                    },\n                    error => {\n                      span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: error.message,\n                      });\n                      span.recordException(error);\n                      span.end();\n                      return Promise.reject(error);\n                    },\n                  );\n                }\n\n                span.end();\n                return res;\n              } catch (error) {\n                span.setStatus({\n                  code: api.SpanStatusCode.ERROR,\n                  message: error.message,\n                });\n                span.recordException(error);\n                span.end();\n                throw error;\n              }\n            },\n            this,\n          );\n        };\n      }\n    }\n  }\n}\n\nexports.FastifyOtelInstrumentation = FastifyOtelInstrumentation;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ./fastify-otel/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\");\nconst instrumentation = __webpack_require__(/*! ./v3/instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\");\n\n/**\n * Options for the Fastify integration.\n *\n * `shouldHandleError` - Callback method deciding whether error should be captured and sent to Sentry\n * This is used on Fastify v5 where Sentry handles errors in the diagnostics channel.\n * Fastify v3 and v4 use `setupFastifyErrorHandler` instead.\n *\n * @example\n *\n * ```javascript\n * Sentry.init({\n *   integrations: [\n *     Sentry.fastifyIntegration({\n *       shouldHandleError(_error, _request, reply) {\n *         return reply.statusCode >= 500;\n *       },\n *     });\n *   },\n * });\n * ```\n *\n */\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastifyV3 = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.v3`,\n  () => new instrumentation.FastifyInstrumentationV3(),\n);\n\nfunction getFastifyIntegration() {\n  const client = core.getClient();\n  if (!client) {\n    return undefined;\n  } else {\n    return client.getIntegrationByName(INTEGRATION_NAME);\n  }\n}\n\nfunction handleFastifyError(\n\n  error,\n  request,\n  reply,\n  handlerOrigin,\n) {\n  const shouldHandleError = getFastifyIntegration()?.getShouldHandleError() || defaultShouldHandleError;\n  // Diagnostics channel runs before the onError hook, so we can use it to check if the handler was already registered\n  if (handlerOrigin === 'diagnostics-channel') {\n    this.diagnosticsChannelExists = true;\n  }\n\n  if (this.diagnosticsChannelExists && handlerOrigin === 'onError-hook') {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        'Fastify error handler was already registered via diagnostics channel.',\n        'You can safely remove `setupFastifyErrorHandler` call and set `shouldHandleError` on the integration options.',\n      );\n\n    // If the diagnostics channel already exists, we don't need to handle the error again\n    return;\n  }\n\n  if (shouldHandleError(error, request, reply)) {\n    core.captureException(error, { mechanism: { handled: false, type: 'auto.function.fastify' } });\n  }\n}\n\nconst instrumentFastify = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.v5`, () => {\n  const fastifyOtelInstrumentationInstance = new index.FastifyOtelInstrumentation();\n  const plugin = fastifyOtelInstrumentationInstance.plugin();\n\n  // This message handler works for Fastify versions 3, 4 and 5\n  dc.subscribe('fastify.initialization', message => {\n    const fastifyInstance = (message ).fastify;\n\n    fastifyInstance?.register(plugin).after(err => {\n      if (err) {\n        debugBuild.DEBUG_BUILD && core.debug.error('Failed to setup Fastify instrumentation', err);\n      } else {\n        instrumentClient();\n\n        if (fastifyInstance) {\n          instrumentOnRequest(fastifyInstance);\n        }\n      }\n    });\n  });\n\n  // This diagnostics channel only works on Fastify version 5\n  // For versions 3 and 4, we use `setupFastifyErrorHandler` instead\n  dc.subscribe('tracing:fastify.request.handler:error', message => {\n    const { error, request, reply } = message\n\n;\n\n    handleFastifyError.call(handleFastifyError, error, request, reply, 'diagnostics-channel');\n  });\n\n  // Returning this as unknown not to deal with the internal types of the FastifyOtelInstrumentation\n  return fastifyOtelInstrumentationInstance ;\n});\n\nconst _fastifyIntegration = (({ shouldHandleError }) => {\n  let _shouldHandleError;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _shouldHandleError = shouldHandleError || defaultShouldHandleError;\n\n      instrumentFastifyV3();\n      instrumentFastify();\n    },\n    getShouldHandleError() {\n      return _shouldHandleError;\n    },\n    setShouldHandleError(fn) {\n      _shouldHandleError = fn;\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration((options = {}) =>\n  _fastifyIntegration(options),\n);\n\n/**\n * Default function to determine if an error should be sent to Sentry\n *\n * 3xx and 4xx errors are not sent by default.\n */\nfunction defaultShouldHandleError(_error, _request, reply) {\n  const statusCode = reply.statusCode;\n  // 3xx and 4xx errors are not sent by default.\n  return statusCode >= 500 || statusCode <= 299;\n}\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify, options) {\n  if (options?.shouldHandleError) {\n    getFastifyIntegration()?.setShouldHandleError(options.shouldHandleError);\n  }\n\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (request, reply, error) => {\n        handleFastifyError.call(handleFastifyError, error, request, reply, 'onError-hook');\n      });\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fastify.register(plugin);\n}\n\nfunction addFastifySpanAttributes(span) {\n  const spanJSON = core.spanToJSON(span);\n  const spanName = spanJSON.description;\n  const attributes = spanJSON.data;\n\n  const type = attributes['fastify.type'];\n\n  const isHook = type === 'hook';\n  const isHandler = type === spanName?.startsWith('handler -');\n  // In @fastify/otel `request-handler` is separated by dash, not underscore\n  const isRequestHandler = spanName === 'request' || type === 'request-handler';\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || (!isHandler && !isRequestHandler && !isHook)) {\n    return;\n  }\n\n  const opPrefix = isHook ? 'hook' : isHandler ? 'middleware' : isRequestHandler ? 'request-handler' : '<unknown>';\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${opPrefix}.fastify`,\n  });\n\n  const attrName = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof attrName === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = attrName.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nfunction instrumentClient() {\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifySpanAttributes(span);\n    });\n  }\n}\n\nfunction instrumentOnRequest(fastify) {\n  fastify.addHook('onRequest', async (request, _reply) => {\n    if (request.opentelemetry) {\n      const { span } = request.opentelemetry();\n\n      if (span) {\n        addFastifySpanAttributes(span);\n      }\n    }\n\n    const routeName = request.routeOptions?.url;\n    const method = request.method || 'GET';\n\n    core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n  });\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.instrumentFastifyV3 = instrumentFastifyV3;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/constants.ts\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst spanRequestSymbol = Symbol('opentelemetry.instrumentation.fastify.request_active_span');\n\nexports.spanRequestSymbol = spanRequestSymbol;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Zhc3RpZnkvdjMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLy8gVmVuZG9yZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvY29uc3RhbnRzLnRzXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5jb25zdCBzcGFuUmVxdWVzdFN5bWJvbCA9IFN5bWJvbCgnb3BlbnRlbGVtZXRyeS5pbnN0cnVtZW50YXRpb24uZmFzdGlmeS5yZXF1ZXN0X2FjdGl2ZV9zcGFuJyk7XG5cbmV4cG9ydHMuc3BhblJlcXVlc3RTeW1ib2wgPSBzcGFuUmVxdWVzdFN5bWJvbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/enums/AttributeNames.ts\n//\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.AttributeNames = void 0; (function (AttributeNames) {\n  const FASTIFY_NAME = 'fastify.name'; AttributeNames[\"FASTIFY_NAME\"] = FASTIFY_NAME;\n  const FASTIFY_TYPE = 'fastify.type'; AttributeNames[\"FASTIFY_TYPE\"] = FASTIFY_TYPE;\n  const HOOK_NAME = 'hook.name'; AttributeNames[\"HOOK_NAME\"] = HOOK_NAME;\n  const PLUGIN_NAME = 'plugin.name'; AttributeNames[\"PLUGIN_NAME\"] = PLUGIN_NAME;\n})(exports.AttributeNames || (exports.AttributeNames = {}));\n\nexports.FastifyTypes = void 0; (function (FastifyTypes) {\n  const MIDDLEWARE = 'middleware'; FastifyTypes[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request_handler'; FastifyTypes[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyTypes || (exports.FastifyTypes = {}));\n\nexports.FastifyNames = void 0; (function (FastifyNames) {\n  const MIDDLEWARE = 'middleware'; FastifyNames[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request handler'; FastifyNames[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyNames || (exports.FastifyNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Zhc3RpZnkvdjMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsV0FBVztBQUNqQyx1Q0FBdUM7QUFDdkMsdUNBQXVDO0FBQ3ZDLGlDQUFpQztBQUNqQyxxQ0FBcUM7QUFDckMsQ0FBQyw2QkFBNkIsc0JBQXNCLEtBQUs7O0FBRXpELG9CQUFvQixXQUFXO0FBQy9CLG1DQUFtQztBQUNuQyw2Q0FBNkM7QUFDN0MsQ0FBQywyQkFBMkIsb0JBQW9CLEtBQUs7O0FBRXJELG9CQUFvQixXQUFXO0FBQy9CLG1DQUFtQztBQUNuQyw2Q0FBNkM7QUFDN0MsQ0FBQywyQkFBMkIsb0JBQW9CLEtBQUs7QUFDckQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLy8gVmVuZG9yZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMudHNcbi8vXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwOyAoZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gIGNvbnN0IEZBU1RJRllfTkFNRSA9ICdmYXN0aWZ5Lm5hbWUnOyBBdHRyaWJ1dGVOYW1lc1tcIkZBU1RJRllfTkFNRVwiXSA9IEZBU1RJRllfTkFNRTtcbiAgY29uc3QgRkFTVElGWV9UWVBFID0gJ2Zhc3RpZnkudHlwZSc7IEF0dHJpYnV0ZU5hbWVzW1wiRkFTVElGWV9UWVBFXCJdID0gRkFTVElGWV9UWVBFO1xuICBjb25zdCBIT09LX05BTUUgPSAnaG9vay5uYW1lJzsgQXR0cmlidXRlTmFtZXNbXCJIT09LX05BTUVcIl0gPSBIT09LX05BTUU7XG4gIGNvbnN0IFBMVUdJTl9OQU1FID0gJ3BsdWdpbi5uYW1lJzsgQXR0cmlidXRlTmFtZXNbXCJQTFVHSU5fTkFNRVwiXSA9IFBMVUdJTl9OQU1FO1xufSkoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG5cbmV4cG9ydHMuRmFzdGlmeVR5cGVzID0gdm9pZCAwOyAoZnVuY3Rpb24gKEZhc3RpZnlUeXBlcykge1xuICBjb25zdCBNSURETEVXQVJFID0gJ21pZGRsZXdhcmUnOyBGYXN0aWZ5VHlwZXNbXCJNSURETEVXQVJFXCJdID0gTUlERExFV0FSRTtcbiAgY29uc3QgUkVRVUVTVF9IQU5ETEVSID0gJ3JlcXVlc3RfaGFuZGxlcic7IEZhc3RpZnlUeXBlc1tcIlJFUVVFU1RfSEFORExFUlwiXSA9IFJFUVVFU1RfSEFORExFUjtcbn0pKGV4cG9ydHMuRmFzdGlmeVR5cGVzIHx8IChleHBvcnRzLkZhc3RpZnlUeXBlcyA9IHt9KSk7XG5cbmV4cG9ydHMuRmFzdGlmeU5hbWVzID0gdm9pZCAwOyAoZnVuY3Rpb24gKEZhc3RpZnlOYW1lcykge1xuICBjb25zdCBNSURETEVXQVJFID0gJ21pZGRsZXdhcmUnOyBGYXN0aWZ5TmFtZXNbXCJNSURETEVXQVJFXCJdID0gTUlERExFV0FSRTtcbiAgY29uc3QgUkVRVUVTVF9IQU5ETEVSID0gJ3JlcXVlc3QgaGFuZGxlcic7IEZhc3RpZnlOYW1lc1tcIlJFUVVFU1RfSEFORExFUlwiXSA9IFJFUVVFU1RfSEFORExFUjtcbn0pKGV4cG9ydHMuRmFzdGlmeU5hbWVzIHx8IChleHBvcnRzLkZhc3RpZnlOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst AttributeNames = __webpack_require__(/*! ./enums/AttributeNames.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** @knipignore */\n\nconst PACKAGE_VERSION = '0.1.0';\n\nconst PACKAGE_NAME = '@sentry/instrumentation-fastify-v3';\nconst ANONYMOUS_NAME = 'anonymous';\n\n// The instrumentation creates a span for invocations of lifecycle hook handlers\n// that take `(request, reply, ...[, done])` arguments. Currently this is all\n// lifecycle hooks except `onRequestAbort`.\n// https://fastify.dev/docs/latest/Reference/Hooks\nconst hooksNamesToWrap = new Set([\n  'onTimeout',\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preSerialization',\n  'preHandler',\n  'onSend',\n  'onResponse',\n  'onError',\n]);\n\n/**\n * Fastify instrumentation for OpenTelemetry\n */\nclass FastifyInstrumentationV3 extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('fastify', ['>=3.0.0 <4'], moduleExports => {\n        return this._patchConstructor(moduleExports);\n      }),\n    ];\n  }\n\n   _hookOnRequest() {\n    const instrumentation = this;\n\n    return function onRequest(request, reply, done) {\n      if (!instrumentation.isEnabled()) {\n        return done();\n      }\n      instrumentation._wrap(reply, 'send', instrumentation._patchSend());\n\n      const anyRequest = request ;\n\n      const rpcMetadata = core.getRPCMetadata(api.context.active());\n      const routeName = anyRequest.routeOptions\n        ? anyRequest.routeOptions.url // since fastify@4.10.0\n        : request.routerPath;\n      if (routeName && rpcMetadata?.type === core.RPCType.HTTP) {\n        rpcMetadata.route = routeName;\n      }\n\n      const method = request.method || 'GET';\n\n      core$1.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      done();\n    };\n  }\n\n   _wrapHandler(\n    pluginName,\n    hookName,\n    original,\n    syncFunctionWithDone,\n  ) {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify route.handler function');\n\n    return function ( ...args) {\n      if (!instrumentation.isEnabled()) {\n        return original.apply(this, args);\n      }\n\n      const name = original.name || pluginName || ANONYMOUS_NAME;\n      const spanName = `${AttributeNames.FastifyNames.MIDDLEWARE} - ${name}`;\n\n      const reply = args[1] ;\n\n      const span = utils.startSpan(reply, instrumentation.tracer, spanName, {\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.MIDDLEWARE,\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: pluginName,\n        [AttributeNames.AttributeNames.HOOK_NAME]: hookName,\n      });\n\n      const origDone = syncFunctionWithDone && (args[args.length - 1] );\n      if (origDone) {\n        args[args.length - 1] = function (...doneArgs) {\n          utils.endSpan(reply);\n          origDone.apply(this, doneArgs);\n        };\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return utils.safeExecuteInTheMiddleMaybePromise(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (err instanceof Error) {\n              span.setStatus({\n                code: api.SpanStatusCode.ERROR,\n                message: err.message,\n              });\n              span.recordException(err);\n            }\n            // async hooks should end the span as soon as the promise is resolved\n            if (!syncFunctionWithDone) {\n              utils.endSpan(reply);\n            }\n          },\n        );\n      });\n    };\n  }\n\n   _wrapAddHook() {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify server.addHook function');\n\n    // biome-ignore lint/complexity/useArrowFunction: <explanation>\n    return function (original) {\n      return function wrappedAddHook( ...args) {\n        const name = args[0] ;\n        const handler = args[1] ;\n        const pluginName = this.pluginName;\n        if (!hooksNamesToWrap.has(name)) {\n          return original.apply(this, args);\n        }\n\n        const syncFunctionWithDone =\n          typeof args[args.length - 1] === 'function' && handler.constructor.name !== 'AsyncFunction';\n\n        return original.apply(this, [\n          name,\n          instrumentation._wrapHandler(pluginName, name, handler, syncFunctionWithDone),\n        ] );\n      };\n    };\n  }\n\n   _patchConstructor(moduleExports\n\n) {\n    const instrumentation = this;\n\n    function fastify( ...args) {\n      const app = moduleExports.fastify.apply(this, args);\n      app.addHook('onRequest', instrumentation._hookOnRequest());\n      app.addHook('preHandler', instrumentation._hookPreHandler());\n\n      instrumentClient();\n\n      instrumentation._wrap(app, 'addHook', instrumentation._wrapAddHook());\n\n      return app;\n    }\n\n    if (moduleExports.errorCodes !== undefined) {\n      fastify.errorCodes = moduleExports.errorCodes;\n    }\n    fastify.fastify = fastify;\n    fastify.default = fastify;\n    return fastify;\n  }\n\n   _patchSend() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify reply.send function');\n\n    return function patchSend(original) {\n      return function send( ...args) {\n        const maybeError = args[0];\n\n        if (!instrumentation$1.isEnabled()) {\n          return original.apply(this, args);\n        }\n\n        return instrumentation.safeExecuteInTheMiddle(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (!err && maybeError instanceof Error) {\n              // eslint-disable-next-line no-param-reassign\n              err = maybeError;\n            }\n            utils.endSpan(this, err);\n          },\n        );\n      };\n    };\n  }\n\n   _hookPreHandler() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify preHandler function');\n\n    return function preHandler( request, reply, done) {\n      if (!instrumentation$1.isEnabled()) {\n        return done();\n      }\n      const anyRequest = request ;\n\n      const handler = anyRequest.routeOptions?.handler || anyRequest.context?.handler;\n      const handlerName = handler?.name.startsWith('bound ') ? handler.name.substring(6) : handler?.name;\n      const spanName = `${AttributeNames.FastifyNames.REQUEST_HANDLER} - ${handlerName || this.pluginName || ANONYMOUS_NAME}`;\n\n      const spanAttributes = {\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: this.pluginName,\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.REQUEST_HANDLER,\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMATTRS_HTTP_ROUTE]: anyRequest.routeOptions\n          ? anyRequest.routeOptions.url // since fastify@4.10.0\n          : request.routerPath,\n      };\n      if (handlerName) {\n        spanAttributes[AttributeNames.AttributeNames.FASTIFY_NAME] = handlerName;\n      }\n      const span = utils.startSpan(reply, instrumentation$1.tracer, spanName, spanAttributes);\n\n      addFastifyV3SpanAttributes(span);\n\n      const { requestHook } = instrumentation$1.getConfig();\n      if (requestHook) {\n        instrumentation.safeExecuteInTheMiddle(\n          () => requestHook(span, { request }),\n          e => {\n            if (e) {\n              instrumentation$1._diag.error('request hook failed', e);\n            }\n          },\n          true,\n        );\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        done();\n      });\n    };\n  }\n}\n\nfunction instrumentClient() {\n  const client = core$1.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifyV3SpanAttributes(span);\n    });\n  }\n}\n\nfunction addFastifyV3SpanAttributes(span) {\n  const attributes = core$1.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = name.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nexports.FastifyInstrumentationV3 = FastifyInstrumentationV3;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/utils.ts\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Starts Span\n * @param reply - reply function\n * @param tracer - tracer\n * @param spanName - span name\n * @param spanAttributes - span attributes\n */\nfunction startSpan(\n  reply,\n  tracer,\n  spanName,\n  spanAttributes = {},\n) {\n  const span = tracer.startSpan(spanName, { attributes: spanAttributes });\n\n  const spans = reply[constants.spanRequestSymbol] || [];\n  spans.push(span);\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(reply, constants.spanRequestSymbol, {\n    enumerable: false,\n    configurable: true,\n    value: spans,\n  });\n\n  return span;\n}\n\n/**\n * Ends span\n * @param reply - reply function\n * @param err - error\n */\nfunction endSpan(reply, err) {\n  const spans = reply[constants.spanRequestSymbol] || [];\n  // there is no active span, or it has already ended\n  if (!spans.length) {\n    return;\n  }\n  // biome-ignore lint/complexity/noForEach: <explanation>\n  spans.forEach((span) => {\n    if (err) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: err.message,\n      });\n      span.recordException(err);\n    }\n    span.end();\n  });\n  delete reply[constants.spanRequestSymbol];\n}\n\n// @TODO after approve add this to instrumentation package and replace usage\n// when it will be released\n\n/**\n * This function handles the missing case from instrumentation package when\n * execute can either return a promise or void. And using async is not an\n * option as it is producing unwanted side effects.\n * @param execute - function to be executed\n * @param onFinish - function called when function executed\n * @param preventThrowingError - prevent to throw error when execute\n * function fails\n */\n\nfunction safeExecuteInTheMiddleMaybePromise(\n  execute,\n  onFinish,\n  preventThrowingError,\n) {\n  let error;\n  let result = undefined;\n  try {\n    result = execute();\n\n    if (isPromise(result)) {\n      result.then(\n        res => onFinish(undefined, res),\n        err => onFinish(err),\n      );\n    }\n  } catch (e) {\n    error = e;\n  } finally {\n    if (!isPromise(result)) {\n      onFinish(error, result);\n      if (error && true) {\n        // eslint-disable-next-line no-unsafe-finally\n        throw error;\n      }\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n\nfunction isPromise(val) {\n  return (\n    (typeof val === 'object' && val && typeof Object.getOwnPropertyDescriptor(val, 'then')?.value === 'function') ||\n    false\n  );\n}\n\nexports.endSpan = endSpan;\nexports.safeExecuteInTheMiddleMaybePromise = safeExecuteInTheMiddleMaybePromise;\nexports.startSpan = startSpan;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Zhc3RpZnkvdjMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsWUFBWSxtQkFBTyxDQUFDLDZJQUFvQjtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQywrTUFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSw0Q0FBNEMsNEJBQTRCOztBQUV4RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZiwwQ0FBMEM7QUFDMUMsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Zhc3RpZnkvdjMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMuanMnKTtcblxuLy8gVmVuZG9yZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzQwN2Y2MTU5MWJhNjlhMzlhNjkwODI2NDM3OWQ0ZDk4YTQ4ZGJlYzQvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWZhc3RpZnkvc3JjL3V0aWxzLnRzXG4vKiBlc2xpbnQtZGlzYWJsZSBqc2RvYy9yZXF1aXJlLWpzZG9jICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICogU3RhcnRzIFNwYW5cbiAqIEBwYXJhbSByZXBseSAtIHJlcGx5IGZ1bmN0aW9uXG4gKiBAcGFyYW0gdHJhY2VyIC0gdHJhY2VyXG4gKiBAcGFyYW0gc3Bhbk5hbWUgLSBzcGFuIG5hbWVcbiAqIEBwYXJhbSBzcGFuQXR0cmlidXRlcyAtIHNwYW4gYXR0cmlidXRlc1xuICovXG5mdW5jdGlvbiBzdGFydFNwYW4oXG4gIHJlcGx5LFxuICB0cmFjZXIsXG4gIHNwYW5OYW1lLFxuICBzcGFuQXR0cmlidXRlcyA9IHt9LFxuKSB7XG4gIGNvbnN0IHNwYW4gPSB0cmFjZXIuc3RhcnRTcGFuKHNwYW5OYW1lLCB7IGF0dHJpYnV0ZXM6IHNwYW5BdHRyaWJ1dGVzIH0pO1xuXG4gIGNvbnN0IHNwYW5zID0gcmVwbHlbY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sXSB8fCBbXTtcbiAgc3BhbnMucHVzaChzcGFuKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXBseSwgY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBzcGFucyxcbiAgfSk7XG5cbiAgcmV0dXJuIHNwYW47XG59XG5cbi8qKlxuICogRW5kcyBzcGFuXG4gKiBAcGFyYW0gcmVwbHkgLSByZXBseSBmdW5jdGlvblxuICogQHBhcmFtIGVyciAtIGVycm9yXG4gKi9cbmZ1bmN0aW9uIGVuZFNwYW4ocmVwbHksIGVycikge1xuICBjb25zdCBzcGFucyA9IHJlcGx5W2NvbnN0YW50cy5zcGFuUmVxdWVzdFN5bWJvbF0gfHwgW107XG4gIC8vIHRoZXJlIGlzIG5vIGFjdGl2ZSBzcGFuLCBvciBpdCBoYXMgYWxyZWFkeSBlbmRlZFxuICBpZiAoIXNwYW5zLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBiaW9tZS1pZ25vcmUgbGludC9jb21wbGV4aXR5L25vRm9yRWFjaDogPGV4cGxhbmF0aW9uPlxuICBzcGFucy5mb3JFYWNoKChzcGFuKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgfSk7XG4gICAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnIpO1xuICAgIH1cbiAgICBzcGFuLmVuZCgpO1xuICB9KTtcbiAgZGVsZXRlIHJlcGx5W2NvbnN0YW50cy5zcGFuUmVxdWVzdFN5bWJvbF07XG59XG5cbi8vIEBUT0RPIGFmdGVyIGFwcHJvdmUgYWRkIHRoaXMgdG8gaW5zdHJ1bWVudGF0aW9uIHBhY2thZ2UgYW5kIHJlcGxhY2UgdXNhZ2Vcbi8vIHdoZW4gaXQgd2lsbCBiZSByZWxlYXNlZFxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgbWlzc2luZyBjYXNlIGZyb20gaW5zdHJ1bWVudGF0aW9uIHBhY2thZ2Ugd2hlblxuICogZXhlY3V0ZSBjYW4gZWl0aGVyIHJldHVybiBhIHByb21pc2Ugb3Igdm9pZC4gQW5kIHVzaW5nIGFzeW5jIGlzIG5vdCBhblxuICogb3B0aW9uIGFzIGl0IGlzIHByb2R1Y2luZyB1bndhbnRlZCBzaWRlIGVmZmVjdHMuXG4gKiBAcGFyYW0gZXhlY3V0ZSAtIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gKiBAcGFyYW0gb25GaW5pc2ggLSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBmdW5jdGlvbiBleGVjdXRlZFxuICogQHBhcmFtIHByZXZlbnRUaHJvd2luZ0Vycm9yIC0gcHJldmVudCB0byB0aHJvdyBlcnJvciB3aGVuIGV4ZWN1dGVcbiAqIGZ1bmN0aW9uIGZhaWxzXG4gKi9cblxuZnVuY3Rpb24gc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZShcbiAgZXhlY3V0ZSxcbiAgb25GaW5pc2gsXG4gIHByZXZlbnRUaHJvd2luZ0Vycm9yLFxuKSB7XG4gIGxldCBlcnJvcjtcbiAgbGV0IHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBleGVjdXRlKCk7XG5cbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdC50aGVuKFxuICAgICAgICByZXMgPT4gb25GaW5pc2godW5kZWZpbmVkLCByZXMpLFxuICAgICAgICBlcnIgPT4gb25GaW5pc2goZXJyKSxcbiAgICAgICk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmICghaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIG9uRmluaXNoKGVycm9yLCByZXN1bHQpO1xuICAgICAgaWYgKGVycm9yICYmIHRydWUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbCwgJ3RoZW4nKT8udmFsdWUgPT09ICdmdW5jdGlvbicpIHx8XG4gICAgZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0cy5lbmRTcGFuID0gZW5kU3BhbjtcbmV4cG9ydHMuc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZSA9IHNhZmVFeGVjdXRlSW5UaGVNaWRkbGVNYXliZVByb21pc2U7XG5leHBvcnRzLnN0YXJ0U3BhbiA9IHN0YXJ0U3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst firebaseInstrumentation = __webpack_require__(/*! ./otel/firebaseInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Firebase';\n\nconst config = {\n  firestoreSpanCreationHook: span => {\n    nodeCore.addOriginToSpan(span, 'auto.firebase.otel.firestore');\n\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'db.query');\n  },\n};\n\nconst instrumentFirebase = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new firebaseInstrumentation.FirebaseInstrumentation(config));\n\nconst _firebaseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFirebase();\n    },\n  };\n}) ;\n\nconst firebaseIntegration = core.defineIntegration(_firebaseIntegration);\n\nexports.firebaseIntegration = firebaseIntegration;\nexports.instrumentFirebase = instrumentFirebase;\n//# sourceMappingURL=firebase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2ZpcmViYXNlL2ZpcmViYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7QUFDNUMsZ0NBQWdDLG1CQUFPLENBQUMsbVBBQW1DOztBQUUzRTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUEsMkJBQTJCO0FBQzNCLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9maXJlYmFzZS9maXJlYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgZmlyZWJhc2VJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL290ZWwvZmlyZWJhc2VJbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdGaXJlYmFzZSc7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vazogc3BhbiA9PiB7XG4gICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmZpcmViYXNlLm90ZWwuZmlyZXN0b3JlJyk7XG5cbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdkYi5xdWVyeScpO1xuICB9LFxufTtcblxuY29uc3QgaW5zdHJ1bWVudEZpcmViYXNlID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgZmlyZWJhc2VJbnN0cnVtZW50YXRpb24uRmlyZWJhc2VJbnN0cnVtZW50YXRpb24oY29uZmlnKSk7XG5cbmNvbnN0IF9maXJlYmFzZUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRGaXJlYmFzZSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGZpcmViYXNlSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9maXJlYmFzZUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5maXJlYmFzZUludGVncmF0aW9uID0gZmlyZWJhc2VJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEZpcmViYXNlID0gaW5zdHJ1bWVudEZpcmViYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlyZWJhc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst firestore = __webpack_require__(/*! ./patches/firestore.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\");\n\nconst DefaultFirebaseInstrumentationConfig = {};\nconst firestoreSupportedVersions = ['>=3.0.0 <5']; // firebase 9+\n\n/**\n * Instrumentation for Firebase services, specifically Firestore.\n */\nclass FirebaseInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = DefaultFirebaseInstrumentationConfig) {\n    super('@sentry/instrumentation-firebase', core.SDK_VERSION, config);\n  }\n\n  /**\n   * sets config\n   * @param config\n   */\n    setConfig(config = {}) {\n    super.setConfig({ ...DefaultFirebaseInstrumentationConfig, ...config });\n  }\n\n  /**\n   *\n   * @protected\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n   init() {\n    const modules = [];\n\n    modules.push(firestore.patchFirestore(this.tracer, firestoreSupportedVersions, this._wrap, this._unwrap, this.getConfig()));\n\n    return modules;\n  }\n}\n\nexports.FirebaseInstrumentation = FirebaseInstrumentation;\n//# sourceMappingURL=firebaseInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2ZpcmViYXNlL290ZWwvZmlyZWJhc2VJbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsd0JBQXdCLG1CQUFPLENBQUMsNE1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxrQkFBa0IsbUJBQU8sQ0FBQyxrT0FBd0I7O0FBRWxEO0FBQ0EsbURBQW1EOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixzQkFBc0Isb0RBQW9EO0FBQzFFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2Uvb3RlbC9maXJlYmFzZUluc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBmaXJlc3RvcmUgPSByZXF1aXJlKCcuL3BhdGNoZXMvZmlyZXN0b3JlLmpzJyk7XG5cbmNvbnN0IERlZmF1bHRGaXJlYmFzZUluc3RydW1lbnRhdGlvbkNvbmZpZyA9IHt9O1xuY29uc3QgZmlyZXN0b3JlU3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49My4wLjAgPDUnXTsgLy8gZmlyZWJhc2UgOStcblxuLyoqXG4gKiBJbnN0cnVtZW50YXRpb24gZm9yIEZpcmViYXNlIHNlcnZpY2VzLCBzcGVjaWZpY2FsbHkgRmlyZXN0b3JlLlxuICovXG5jbGFzcyBGaXJlYmFzZUluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IERlZmF1bHRGaXJlYmFzZUluc3RydW1lbnRhdGlvbkNvbmZpZykge1xuICAgIHN1cGVyKCdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1maXJlYmFzZScsIGNvcmUuU0RLX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogc2V0cyBjb25maWdcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKi9cbiAgICBzZXRDb25maWcoY29uZmlnID0ge30pIHtcbiAgICBzdXBlci5zZXRDb25maWcoeyAuLi5EZWZhdWx0RmlyZWJhc2VJbnN0cnVtZW50YXRpb25Db25maWcsIC4uLmNvbmZpZyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICBpbml0KCkge1xuICAgIGNvbnN0IG1vZHVsZXMgPSBbXTtcblxuICAgIG1vZHVsZXMucHVzaChmaXJlc3RvcmUucGF0Y2hGaXJlc3RvcmUodGhpcy50cmFjZXIsIGZpcmVzdG9yZVN1cHBvcnRlZFZlcnNpb25zLCB0aGlzLl93cmFwLCB0aGlzLl91bndyYXAsIHRoaXMuZ2V0Q29uZmlnKCkpKTtcblxuICAgIHJldHVybiBtb2R1bGVzO1xuICB9XG59XG5cbmV4cG9ydHMuRmlyZWJhc2VJbnN0cnVtZW50YXRpb24gPSBGaXJlYmFzZUluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcmViYXNlSW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n\n// Inline minimal types used from `shimmer` to avoid importing shimmer's types directly.\n// We only need the shape for `wrap` and `unwrap` used in this file.\n\n/**\n *\n * @param tracer - Opentelemetry Tracer\n * @param firestoreSupportedVersions - supported version of firebase/firestore\n * @param wrap - reference to native instrumentation wrap function\n * @param unwrap - reference to native instrumentation wrap function\n */\nfunction patchFirestore(\n  tracer,\n  firestoreSupportedVersions,\n  wrap,\n  unwrap,\n  config,\n) {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const defaultFirestoreSpanCreationHook = () => {};\n\n  let firestoreSpanCreationHook = defaultFirestoreSpanCreationHook;\n  const configFirestoreSpanCreationHook = config.firestoreSpanCreationHook;\n\n  if (typeof configFirestoreSpanCreationHook === 'function') {\n    firestoreSpanCreationHook = (span) => {\n      instrumentation.safeExecuteInTheMiddle(\n        () => configFirestoreSpanCreationHook(span),\n        error => {\n          if (!error) {\n            return;\n          }\n          api.diag.error(error?.message);\n        },\n        true,\n      );\n    };\n  }\n\n  const moduleFirestoreCJS = new instrumentation.InstrumentationNodeModuleDefinition(\n    '@firebase/firestore',\n    firestoreSupportedVersions,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (moduleExports) => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n  );\n  const files = [\n    '@firebase/firestore/dist/lite/index.node.cjs.js',\n    '@firebase/firestore/dist/lite/index.node.mjs.js',\n    '@firebase/firestore/dist/lite/index.rn.esm2017.js',\n    '@firebase/firestore/dist/lite/index.cjs.js',\n  ];\n\n  for (const file of files) {\n    moduleFirestoreCJS.files.push(\n      new instrumentation.InstrumentationNodeModuleFile(\n        file,\n        firestoreSupportedVersions,\n        moduleExports => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n        moduleExports => unwrapMethods(moduleExports, unwrap),\n      ),\n    );\n  }\n\n  return moduleFirestoreCJS;\n}\n\nfunction wrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  wrap,\n  unwrap,\n  tracer,\n  firestoreSpanCreationHook,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  unwrapMethods(moduleExports, unwrap);\n\n  wrap(moduleExports, 'addDoc', patchAddDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'getDocs', patchGetDocs(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'setDoc', patchSetDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'deleteDoc', patchDeleteDoc(tracer, firestoreSpanCreationHook));\n\n  return moduleExports;\n}\n\nfunction unwrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  unwrap,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  for (const method of ['addDoc', 'getDocs', 'setDoc', 'deleteDoc']) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (instrumentation.isWrapped(moduleExports[method])) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      unwrap(moduleExports, method);\n    }\n  }\n  return moduleExports;\n}\n\nfunction patchAddDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function addDoc(original) {\n    return function (\n      reference,\n      data,\n    ) {\n      const span = startDBSpan(tracer, 'addDoc', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference, data);\n      });\n    };\n  };\n}\n\nfunction patchDeleteDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function deleteDoc(original) {\n    return function (reference) {\n      const span = startDBSpan(tracer, 'deleteDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchGetDocs(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function getDocs(original) {\n    return function (\n      reference,\n    ) {\n      const span = startDBSpan(tracer, 'getDocs', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchSetDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function setDoc(original) {\n    return function (\n      reference,\n      data,\n      options,\n    ) {\n      const span = startDBSpan(tracer, 'setDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n\n      return executeContextWithSpan(span, () => {\n        return typeof options !== 'undefined' ? original(reference, data, options) : original(reference, data);\n      });\n    };\n  };\n}\n\nfunction executeContextWithSpan(span, callback) {\n  return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n    return instrumentation.safeExecuteInTheMiddle(\n      () => {\n        return callback();\n      },\n      err => {\n        if (err) {\n          span.recordException(err);\n        }\n        span.end();\n      },\n      true,\n    );\n  });\n}\n\nfunction startDBSpan(\n  tracer,\n  spanName,\n  reference,\n) {\n  const span = tracer.startSpan(`${spanName} ${reference.path}`, { kind: api.SpanKind.CLIENT });\n  addAttributes(span, reference);\n  span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, spanName);\n  return span;\n}\n\n/**\n * Gets the server address and port attributes from the Firestore settings.\n * It's best effort to extract the address and port from the settings, especially for IPv6.\n * @param span - The span to set attributes on.\n * @param settings - The Firestore settings containing host information.\n */\nfunction getPortAndAddress(settings)\n\n {\n  let address;\n  let port;\n\n  if (typeof settings.host === 'string') {\n    if (settings.host.startsWith('[')) {\n      // IPv6 addresses can be enclosed in square brackets, e.g., [2001:db8::1]:8080\n      if (settings.host.endsWith(']')) {\n        // IPv6 with square brackets without port\n        address = settings.host.replace(/^\\[|\\]$/g, '');\n      } else if (settings.host.includes(']:')) {\n        // IPv6 with square brackets with port\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(1, lastColonIndex).replace(/^\\[|\\]$/g, '');\n          port = settings.host.slice(lastColonIndex + 1);\n        }\n      }\n    } else {\n      // IPv4 or IPv6 without square brackets\n      // If it's an IPv6 address without square brackets, we assume it does not have a port.\n      if (net.isIPv6(settings.host)) {\n        address = settings.host;\n      }\n      // If it's an IPv4 address, we can extract the port if it exists.\n      else {\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(0, lastColonIndex);\n          port = settings.host.slice(lastColonIndex + 1);\n        } else {\n          address = settings.host;\n        }\n      }\n    }\n  }\n  return {\n    address: address,\n    port: port ? parseInt(port, 10) : undefined,\n  };\n}\n\nfunction addAttributes(\n  span,\n  reference,\n) {\n  const firestoreApp = reference.firestore.app;\n  const firestoreOptions = firestoreApp.options;\n  const json = reference.firestore.toJSON() || {};\n  const settings = json.settings || {};\n\n  const attributes = {\n    [semanticConventions.ATTR_DB_COLLECTION_NAME]: reference.path,\n    [semanticConventions.ATTR_DB_NAMESPACE]: firestoreApp.name,\n    [semanticConventions.ATTR_DB_SYSTEM_NAME]: 'firebase.firestore',\n    'firebase.firestore.type': reference.type,\n    'firebase.firestore.options.projectId': firestoreOptions.projectId,\n    'firebase.firestore.options.appId': firestoreOptions.appId,\n    'firebase.firestore.options.messagingSenderId': firestoreOptions.messagingSenderId,\n    'firebase.firestore.options.storageBucket': firestoreOptions.storageBucket,\n  };\n\n  const { address, port } = getPortAndAddress(settings);\n\n  if (address) {\n    attributes[semanticConventions.ATTR_SERVER_ADDRESS] = address;\n  }\n  if (port) {\n    attributes[semanticConventions.ATTR_SERVER_PORT] = port;\n  }\n\n  span.setAttributes(attributes);\n}\n\nexports.getPortAndAddress = getPortAndAddress;\nexports.patchFirestore = patchFirestore;\n//# sourceMappingURL=firestore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentGenericPool();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n\n          const spanDescription = spanJSON.description;\n\n          // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n          const isGenericPoolSpan =\n            spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n          if (isGenericPoolSpan) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dlbmVyaWNQb29sLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1DQUFtQyxtQkFBTyxDQUFDLGtQQUE2QztBQUN4RixhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQSxrSkFBa0o7O0FBRWxKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nZW5lcmljUG9vbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uR2VuZXJpY1Bvb2wgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ2VuZXJpYy1wb29sJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnR2VuZXJpY1Bvb2wnO1xuXG5jb25zdCBpbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbC5HZW5lcmljUG9vbEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIGxldCBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IGluc3RydW1lbnRHZW5lcmljUG9vbCgpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcblxuICAgICAgICAgIGNvbnN0IHNwYW5EZXNjcmlwdGlvbiA9IHNwYW5KU09OLmRlc2NyaXB0aW9uO1xuXG4gICAgICAgICAgLy8gdHlwbyBpbiBlbWl0dGVkIHNwYW4gZm9yIHZlcnNpb24gPD0gMC4zOC4wIG9mIEBvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2xcbiAgICAgICAgICBjb25zdCBpc0dlbmVyaWNQb29sU3BhbiA9XG4gICAgICAgICAgICBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYXF1aXJlJyB8fCBzcGFuRGVzY3JpcHRpb24gPT09ICdnZW5lcmljLXBvb2wuYWNxdWlyZSc7XG5cbiAgICAgICAgICBpZiAoaXNHZW5lcmljUG9vbFNwYW4pIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZ2VuZXJpY19wb29sJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtnZW5lcmljLXBvb2xdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2dlbmVyaWMtcG9vbCkgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGdlbmVyaWNQb29sSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZ2VuZXJpY3Bvb2wvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5nZW5lcmljUG9vbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dlbmVyaWNQb29sSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmdlbmVyaWNQb29sSW50ZWdyYXRpb24gPSBnZW5lcmljUG9vbEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50R2VuZXJpY1Bvb2wgPSBpbnN0cnVtZW50R2VuZXJpY1Bvb2w7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmljUG9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js\");\n\nconst instrumentGoogleGenAI = nodeCore.generateInstrumentOnce(\n  core.GOOGLE_GENAI_INTEGRATION_NAME,\n  options => new instrumentation.SentryGoogleGenAiInstrumentation(options),\n);\n\nconst _googleGenAIIntegration = ((options = {}) => {\n  return {\n    name: core.GOOGLE_GENAI_INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGoogleGenAI(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Google Generative AI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments Google GenAI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.googleGenAiIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.googleGenAiIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.googleGenAiIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst googleGenAIIntegration = core.defineIntegration(_googleGenAIIntegration);\n\nexports.googleGenAIIntegration = googleGenAIIntegration;\nexports.instrumentGoogleGenAI = instrumentGoogleGenAI;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dvb2dsZS1nZW5haS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1CO0FBQzVDLHdCQUF3QixtQkFBTyxDQUFDLDZOQUFzQjs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ29vZ2xlLWdlbmFpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2luc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBpbnN0cnVtZW50R29vZ2xlR2VuQUkgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBjb3JlLkdPT0dMRV9HRU5BSV9JTlRFR1JBVElPTl9OQU1FLFxuICBvcHRpb25zID0+IG5ldyBpbnN0cnVtZW50YXRpb24uU2VudHJ5R29vZ2xlR2VuQWlJbnN0cnVtZW50YXRpb24ob3B0aW9ucyksXG4pO1xuXG5jb25zdCBfZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogY29yZS5HT09HTEVfR0VOQUlfSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50R29vZ2xlR2VuQUkob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIEdvb2dsZSBHZW5lcmF0aXZlIEFJIFNESy5cbiAqXG4gKiBUaGlzIGludGVncmF0aW9uIGlzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBXaGVuIGNvbmZpZ3VyZWQsIHRoaXMgaW50ZWdyYXRpb24gYXV0b21hdGljYWxseSBpbnN0cnVtZW50cyBHb29nbGUgR2VuQUkgU0RLIGNsaWVudCBpbnN0YW5jZXNcbiAqIHRvIGNhcHR1cmUgdGVsZW1ldHJ5IGRhdGEgZm9sbG93aW5nIE9wZW5UZWxlbWV0cnkgU2VtYW50aWMgQ29udmVudGlvbnMgZm9yIEdlbmVyYXRpdmUgQUkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lmdvb2dsZUdlbkFpSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiAtIGByZWNvcmRJbnB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCBwcm9tcHQgbWVzc2FnZXMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYHJlY29yZE91dHB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCByZXNwb25zZSB0ZXh0IChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKlxuICogIyMjIERlZmF1bHQgQmVoYXZpb3JcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgaW50ZWdyYXRpb24gd2lsbDpcbiAqIC0gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyBPTkxZIGlmIGBzZW5kRGVmYXVsdFBpaWAgaXMgc2V0IHRvIGB0cnVlYCBpbiB5b3VyIFNlbnRyeSBjbGllbnQgb3B0aW9uc1xuICogLSBPdGhlcndpc2UsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgTk9UIHJlY29yZGVkIHVubGVzcyBleHBsaWNpdGx5IGVuYWJsZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyB3aGVuIHNlbmREZWZhdWx0UGlpIGlzIGZhbHNlXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5nb29nbGVHZW5BaUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogdHJ1ZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IHRydWVcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gTmV2ZXIgcmVjb3JkIGlucHV0cy9vdXRwdXRzIHJlZ2FyZGxlc3Mgb2Ygc2VuZERlZmF1bHRQaWlcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgc2VuZERlZmF1bHRQaWk6IHRydWUsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5nb29nbGVHZW5BaUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogZmFsc2UsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiBmYWxzZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqL1xuY29uc3QgZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dvb2dsZUdlbkFJSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmdvb2dsZUdlbkFJSW50ZWdyYXRpb24gPSBnb29nbGVHZW5BSUludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50R29vZ2xlR2VuQUkgPSBpbnN0cnVtZW50R29vZ2xlR2VuQUk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=0.10.0 <2'];\n\n/**\n * Represents the patched shape of the Google GenAI module export.\n */\n\n/**\n * Sentry Google GenAI instrumentation using OpenTelemetry.\n */\nclass SentryGoogleGenAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-google-genai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition(\n      '@google/genai',\n      supportedVersions,\n      exports => this._patch(exports),\n      exports => exports,\n      // In CJS, @google/genai re-exports from (dist/node/index.cjs) file.\n      // Patching only the root module sometimes misses the real implementation or\n      // gets overwritten when that file is loaded. We add a file-level patch so that\n      // _patch runs again on the concrete implementation\n      [\n        new instrumentation.InstrumentationNodeModuleFile(\n          '@google/genai/dist/node/index.cjs',\n          supportedVersions,\n          exports => this._patch(exports),\n          exports => exports,\n        ),\n      ],\n    );\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the Google GenAI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.GoogleGenAI;\n    const config = this.getConfig();\n\n    if (typeof Original !== 'function') {\n      return exports;\n    }\n\n    const WrappedGoogleGenAI = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const typedConfig = config;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const recordInputs = typedConfig?.recordInputs ?? defaultPii;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const recordOutputs = typedConfig?.recordOutputs ?? defaultPii;\n\n      return core.instrumentGoogleGenAIClient(instance, {\n        recordInputs,\n        recordOutputs,\n      });\n    };\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedGoogleGenAI, Original);\n    Object.setPrototypeOf(WrappedGoogleGenAI.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedGoogleGenAI, key, descriptor);\n        }\n      }\n    }\n\n    // Replace google genai exports with the wrapped constructor\n    core.replaceExports(exports, 'GoogleGenAI', WrappedGoogleGenAI);\n\n    return exports;\n  }\n}\n\nexports.SentryGoogleGenAiInstrumentation = SentryGoogleGenAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dvb2dsZS1nZW5haS9pbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxvREFBb0QseUNBQXlDLDBDQUEwQyw4Q0FBOEMsb0RBQW9ELHFEQUFxRCxpQkFBaUI7O0FBRWhULHdCQUF3QixtQkFBTyxDQUFDLDRNQUFnQztBQUNoRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nb29nbGUtZ2VuYWkvaW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiU0VOVFJZX1JFTEVBU0VcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlCYXNlUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeU5leHRKc1ZlcnNpb25cIl0gPSBcIjE1LjUuNFwiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXJcIl0gPSBcIi5uZXh0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBzdXBwb3J0ZWRWZXJzaW9ucyA9IFsnPj0wLjEwLjAgPDInXTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBwYXRjaGVkIHNoYXBlIG9mIHRoZSBHb29nbGUgR2VuQUkgbW9kdWxlIGV4cG9ydC5cbiAqL1xuXG4vKipcbiAqIFNlbnRyeSBHb29nbGUgR2VuQUkgaW5zdHJ1bWVudGF0aW9uIHVzaW5nIE9wZW5UZWxlbWV0cnkuXG4gKi9cbmNsYXNzIFNlbnRyeUdvb2dsZUdlbkFpSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICBzdXBlcignQHNlbnRyeS9pbnN0cnVtZW50YXRpb24tZ29vZ2xlLWdlbmFpJywgY29yZS5TREtfVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW5zdHJ1bWVudGF0aW9uIGJ5IGRlZmluaW5nIHRoZSBtb2R1bGVzIHRvIGJlIHBhdGNoZWQuXG4gICAqL1xuICAgaW5pdCgpIHtcbiAgICBjb25zdCBtb2R1bGUgPSBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICAgJ0Bnb29nbGUvZ2VuYWknLFxuICAgICAgc3VwcG9ydGVkVmVyc2lvbnMsXG4gICAgICBleHBvcnRzID0+IHRoaXMuX3BhdGNoKGV4cG9ydHMpLFxuICAgICAgZXhwb3J0cyA9PiBleHBvcnRzLFxuICAgICAgLy8gSW4gQ0pTLCBAZ29vZ2xlL2dlbmFpIHJlLWV4cG9ydHMgZnJvbSAoZGlzdC9ub2RlL2luZGV4LmNqcykgZmlsZS5cbiAgICAgIC8vIFBhdGNoaW5nIG9ubHkgdGhlIHJvb3QgbW9kdWxlIHNvbWV0aW1lcyBtaXNzZXMgdGhlIHJlYWwgaW1wbGVtZW50YXRpb24gb3JcbiAgICAgIC8vIGdldHMgb3ZlcndyaXR0ZW4gd2hlbiB0aGF0IGZpbGUgaXMgbG9hZGVkLiBXZSBhZGQgYSBmaWxlLWxldmVsIHBhdGNoIHNvIHRoYXRcbiAgICAgIC8vIF9wYXRjaCBydW5zIGFnYWluIG9uIHRoZSBjb25jcmV0ZSBpbXBsZW1lbnRhdGlvblxuICAgICAgW1xuICAgICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVGaWxlKFxuICAgICAgICAgICdAZ29vZ2xlL2dlbmFpL2Rpc3Qvbm9kZS9pbmRleC5janMnLFxuICAgICAgICAgIHN1cHBvcnRlZFZlcnNpb25zLFxuICAgICAgICAgIGV4cG9ydHMgPT4gdGhpcy5fcGF0Y2goZXhwb3J0cyksXG4gICAgICAgICAgZXhwb3J0cyA9PiBleHBvcnRzLFxuICAgICAgICApLFxuICAgICAgXSxcbiAgICApO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBwYXRjaCBsb2dpYyBhcHBseWluZyBpbnN0cnVtZW50YXRpb24gdG8gdGhlIEdvb2dsZSBHZW5BSSBjbGllbnQgY29uc3RydWN0b3IuXG4gICAqL1xuICAgX3BhdGNoKGV4cG9ydHMpIHtcbiAgICBjb25zdCBPcmlnaW5hbCA9IGV4cG9ydHMuR29vZ2xlR2VuQUk7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgIGlmICh0eXBlb2YgT3JpZ2luYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBleHBvcnRzO1xuICAgIH1cblxuICAgIGNvbnN0IFdyYXBwZWRHb29nbGVHZW5BSSA9IGZ1bmN0aW9uICggLi4uYXJncykge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBSZWZsZWN0LmNvbnN0cnVjdChPcmlnaW5hbCwgYXJncyk7XG4gICAgICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICAgICAgY29uc3QgZGVmYXVsdFBpaSA9IEJvb2xlYW4oY2xpZW50Py5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkpO1xuXG4gICAgICBjb25zdCB0eXBlZENvbmZpZyA9IGNvbmZpZztcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIGNvbnN0IHJlY29yZElucHV0cyA9IHR5cGVkQ29uZmlnPy5yZWNvcmRJbnB1dHMgPz8gZGVmYXVsdFBpaTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgIGNvbnN0IHJlY29yZE91dHB1dHMgPSB0eXBlZENvbmZpZz8ucmVjb3JkT3V0cHV0cyA/PyBkZWZhdWx0UGlpO1xuXG4gICAgICByZXR1cm4gY29yZS5pbnN0cnVtZW50R29vZ2xlR2VuQUlDbGllbnQoaW5zdGFuY2UsIHtcbiAgICAgICAgcmVjb3JkSW5wdXRzLFxuICAgICAgICByZWNvcmRPdXRwdXRzLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIFByZXNlcnZlIHN0YXRpYyBhbmQgcHJvdG90eXBlIGNoYWluc1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkR29vZ2xlR2VuQUksIE9yaWdpbmFsKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoV3JhcHBlZEdvb2dsZUdlbkFJLnByb3RvdHlwZSwgT3JpZ2luYWwucHJvdG90eXBlKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9yaWdpbmFsKSkge1xuICAgICAgaWYgKCFbJ2xlbmd0aCcsICduYW1lJywgJ3Byb3RvdHlwZSddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT3JpZ2luYWwsIGtleSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRHb29nbGVHZW5BSSwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlcGxhY2UgZ29vZ2xlIGdlbmFpIGV4cG9ydHMgd2l0aCB0aGUgd3JhcHBlZCBjb25zdHJ1Y3RvclxuICAgIGNvcmUucmVwbGFjZUV4cG9ydHMoZXhwb3J0cywgJ0dvb2dsZUdlbkFJJywgV3JhcHBlZEdvb2dsZUdlbkFJKTtcblxuICAgIHJldHVybiBleHBvcnRzO1xuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5R29vZ2xlR2VuQWlJbnN0cnVtZW50YXRpb24gPSBTZW50cnlHb29nbGVHZW5BaUluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationGraphql.GraphQLInstrumentation,\n  (_options) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return {\n      ...options,\n      responseHook(span, result) {\n        nodeCore.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        // We want to ensure spans are marked as errored if there are errors in the result\n        // We only do that if the span is not already marked with a status\n        const resultWithMaybeError = result ;\n        if (resultWithMaybeError.errors?.length && !core.spanToJSON(span).status) {\n          span.setStatus({ code: api.SpanStatusCode.ERROR });\n        }\n\n        const attributes = core.spanToJSON(span).data;\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            (existingOperations ).push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (typeof existingOperations === 'string') {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n\n          if (!core.spanToJSON(rootSpan).data['original-description']) {\n            rootSpan.setAttribute('original-description', core.spanToJSON(rootSpan).description);\n          }\n          // Important for e.g. @sentry/aws-serverless because this would otherwise overwrite the name again\n          rootSpan.updateName(\n            `${core.spanToJSON(rootSpan).data['original-description']} (${getGraphqlOperationNamesFromAttribute(\n              existingOperations,\n            )})`,\n          );\n        }\n      },\n    };\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\n// copy from packages/opentelemetry/utils\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return !!(event && typeof event === 'object' && 'error' in event && event.error);\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'auto.function.hapi',\n      handled: false,\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route.path) {\n          core.getIsolationScope().setTransactionName(`${route.method.toUpperCase()} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.debug.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  nodeCore.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hhcGkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsNEJBQTRCLG1CQUFPLENBQUMsME5BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsMExBQXlCOztBQUVwRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsc0NBQXNDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCw0QkFBNEIsRUFBRSxXQUFXO0FBQ2xHO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUs7QUFDakQsR0FBRztBQUNIOztBQUVBLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsc0JBQXNCO0FBQ3RCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9oYXBpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25IYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWhhcGknKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi8uLi8uLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0hhcGknO1xuXG5jb25zdCBpbnN0cnVtZW50SGFwaSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkhhcGkuSGFwaUluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2hhcGlJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50SGFwaSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtIYXBpXShodHRwczovL2hhcGkuZGV2LykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcilgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBzZXJ2ZXIuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2hhcGkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvaGFwaS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5oYXBpSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGhhcGlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2hhcGlJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGlzRXJyb3JFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAnZXJyb3InIGluIGV2ZW50ICYmIGV2ZW50LmVycm9yKTtcbn1cblxuZnVuY3Rpb24gc2VuZEVycm9yVG9TZW50cnkoZXJyb3JEYXRhKSB7XG4gIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvckRhdGEsIHtcbiAgICBtZWNoYW5pc206IHtcbiAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLmhhcGknLFxuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgfSxcbiAgfSk7XG59XG5cbmNvbnN0IGhhcGlFcnJvclBsdWdpbiA9IHtcbiAgbmFtZTogJ1NlbnRyeUhhcGlFcnJvclBsdWdpbicsXG4gIHZlcnNpb246IGNvcmUuU0RLX1ZFUlNJT04sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlZ2lzdGVyOiBhc3luYyBmdW5jdGlvbiAoc2VydmVyQXJnKSB7XG4gICAgY29uc3Qgc2VydmVyID0gc2VydmVyQXJnIDtcblxuICAgIHNlcnZlci5ldmVudHMub24oeyBuYW1lOiAncmVxdWVzdCcsIGNoYW5uZWxzOiBbJ2Vycm9yJ10gfSwgKHJlcXVlc3QsIGV2ZW50KSA9PiB7XG4gICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpICE9PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gcmVxdWVzdC5yb3V0ZTtcbiAgICAgICAgaWYgKHJvdXRlLnBhdGgpIHtcbiAgICAgICAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke3JvdXRlLm1ldGhvZC50b1VwcGVyQ2FzZSgpfSAke3JvdXRlLnBhdGh9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgICAgICBjb3JlLmRlYnVnLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBzdGlsbCB0aGUgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNFcnJvckV2ZW50KGV2ZW50KSkge1xuICAgICAgICBzZW5kRXJyb3JUb1NlbnRyeShldmVudC5lcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuXG4vKipcbiAqIEFkZCBhIEhhcGkgcGx1Z2luIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gc2VydmVyIFRoZSBIYXBpIHNlcnZlciB0byBhdHRhY2ggdGhlIGVycm9yIGhhbmRsZXIgdG9cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBIYXBpID0gcmVxdWlyZSgnQGhhcGkvaGFwaScpO1xuICpcbiAqIGNvbnN0IGluaXQgPSBhc3luYyAoKSA9PiB7XG4gKiAgIGNvbnN0IHNlcnZlciA9IEhhcGkuc2VydmVyKCk7XG4gKlxuICogICAvLyBhbGwgeW91ciByb3V0ZXMgaGVyZVxuICpcbiAqICAgYXdhaXQgU2VudHJ5LnNldHVwSGFwaUVycm9ySGFuZGxlcihzZXJ2ZXIpO1xuICpcbiAqICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gKiB9O1xuICogYGBgXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldHVwSGFwaUVycm9ySGFuZGxlcihzZXJ2ZXIpIHtcbiAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGhhcGlFcnJvclBsdWdpbik7XG5cbiAgLy8gU2FkbHksIG1pZGRsZXdhcmUgc3BhbnMgZG8gbm90IGdvIHRocm91Z2ggYHJlcXVlc3RIb29rYCwgc28gd2UgaGFuZGxlIHRob3NlIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGhhcGlcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRIYXBpU3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gIG5vZGVDb3JlLmVuc3VyZUlzV3JhcHBlZChzZXJ2ZXIucmVnaXN0ZXIsICdoYXBpJyk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogcm91dGVyLCBwbHVnaW4sIHNlcnZlci5leHRcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2hhcGkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gSGFwaSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuaGFwaScsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmhhcGlgLFxuICB9KTtcbn1cblxuZXhwb3J0cy5oYXBpRXJyb3JQbHVnaW4gPSBoYXBpRXJyb3JQbHVnaW47XG5leHBvcnRzLmhhcGlJbnRlZ3JhdGlvbiA9IGhhcGlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50SGFwaTtcbmV4cG9ydHMuc2V0dXBIYXBpRXJyb3JIYW5kbGVyID0gc2V0dXBIYXBpRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst AttributeNames = {\n  HONO_TYPE: 'hono.type',\n  HONO_NAME: 'hono.name',\n} ;\n\nconst HonoTypes = {\n  MIDDLEWARE: 'middleware',\n  REQUEST_HANDLER: 'request_handler',\n} ;\n\nexports.AttributeNames = AttributeNames;\nexports.HonoTypes = HonoTypes;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hvbm8vY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0QixpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IEF0dHJpYnV0ZU5hbWVzID0ge1xuICBIT05PX1RZUEU6ICdob25vLnR5cGUnLFxuICBIT05PX05BTUU6ICdob25vLm5hbWUnLFxufSA7XG5cbmNvbnN0IEhvbm9UeXBlcyA9IHtcbiAgTUlERExFV0FSRTogJ21pZGRsZXdhcmUnLFxuICBSRVFVRVNUX0hBTkRMRVI6ICdyZXF1ZXN0X2hhbmRsZXInLFxufSA7XG5cbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSBBdHRyaWJ1dGVOYW1lcztcbmV4cG9ydHMuSG9ub1R5cGVzID0gSG9ub1R5cGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Hono';\n\nfunction addHonoSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n  const type = attributes[constants.AttributeNames.HONO_TYPE];\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hono',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hono`,\n  });\n\n  const name = attributes[constants.AttributeNames.HONO_NAME];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n    return;\n  }\n\n  const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n  const method = attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD];\n  if (typeof route === 'string' && typeof method === 'string') {\n    core.getIsolationScope().setTransactionName(`${method} ${route}`);\n  }\n}\n\nconst instrumentHono = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentation.HonoInstrumentation({\n      responseHook: span => {\n        addHonoSpanAttributes(span);\n      },\n    }),\n);\n\nconst _honoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHono();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hono](https://hono.dev/).\n *\n * If you also want to capture errors, you need to call `setupHonoErrorHandler(app)` after you set up your Hono server.\n *\n * For more information, see the [hono documentation](https://docs.sentry.io/platforms/javascript/guides/hono/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.honoIntegration()],\n * })\n * ```\n */\nconst honoIntegration = core.defineIntegration(_honoIntegration);\n\nfunction honoRequestHandler() {\n  return async function sentryRequestMiddleware(context, next) {\n    const normalizedRequest = core.httpRequestToRequestData(context.req);\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n    await next();\n  };\n}\n\nfunction defaultShouldHandleError(context) {\n  const statusCode = context.res.status;\n  return statusCode >= 500;\n}\n\nfunction honoErrorHandler(options) {\n  return async function sentryErrorMiddleware(context, next) {\n    await next();\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n    if (shouldHandleError(context)) {\n      (context.res ).sentry = core.captureException(context.error, {\n        mechanism: {\n          type: 'auto.middleware.hono',\n          handled: false,\n        },\n      });\n    }\n  };\n}\n\n/**\n * Add a Hono error handler to capture errors to Sentry.\n *\n * @param app The Hono instances\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const { Hono } = require(\"hono\");\n *\n * const app = new Hono();\n *\n * Sentry.setupHonoErrorHandler(app);\n *\n * // Add your routes, etc.\n * ```\n */\nfunction setupHonoErrorHandler(\n  app,\n  options,\n) {\n  app.use(honoRequestHandler());\n  app.use(honoErrorHandler(options));\n  nodeCore.ensureIsWrapped(app.use, 'hono');\n}\n\nexports.honoIntegration = honoIntegration;\nexports.instrumentHono = instrumentHono;\nexports.setupHonoErrorHandler = setupHonoErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hvbm8vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsNEJBQTRCLG1CQUFPLENBQUMsaU1BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsMExBQXlCO0FBQ3BELGtCQUFrQixtQkFBTyxDQUFDLHlNQUFnQjtBQUMxQyx3QkFBd0IsbUJBQU8sQ0FBQyxxTkFBc0I7O0FBRXREOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLEtBQUs7QUFDakQsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsUUFBUSxFQUFFLE1BQU07QUFDbkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsbUJBQW1CO0FBQzNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hvbm8vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHNlbWFudGljQ29udmVudGlvbnMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdIb25vJztcblxuZnVuY3Rpb24gYWRkSG9ub1NwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1tjb25zdGFudHMuQXR0cmlidXRlTmFtZXMuSE9OT19UWVBFXTtcbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuaG9ubycsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9Lmhvbm9gLFxuICB9KTtcblxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1tjb25zdGFudHMuQXR0cmlidXRlTmFtZXMuSE9OT19OQU1FXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIHNwYW4udXBkYXRlTmFtZShuYW1lKTtcbiAgfVxuXG4gIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgPT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlIC0gc2tpcHBpbmcgc2V0dGluZyB0cmFuc2FjdGlvbk5hbWUnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByb3V0ZSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdO1xuICBjb25zdCBtZXRob2QgPSBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EXTtcbiAgaWYgKHR5cGVvZiByb3V0ZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIG1ldGhvZCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke21ldGhvZH0gJHtyb3V0ZX1gKTtcbiAgfVxufVxuXG5jb25zdCBpbnN0cnVtZW50SG9ubyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbi5Ib25vSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vazogc3BhbiA9PiB7XG4gICAgICAgIGFkZEhvbm9TcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfaG9ub0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIb25vKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0hvbm9dKGh0dHBzOi8vaG9uby5kZXYvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEhvbm9FcnJvckhhbmRsZXIoYXBwKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIEhvbm8gc2VydmVyLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtob25vIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL2hvbm8vKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuaG9ub0ludGVncmF0aW9uKCldLFxuICogfSlcbiAqIGBgYFxuICovXG5jb25zdCBob25vSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9ob25vSW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBob25vUmVxdWVzdEhhbmRsZXIoKSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiBzZW50cnlSZXF1ZXN0TWlkZGxld2FyZShjb250ZXh0LCBuZXh0KSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFJlcXVlc3QgPSBjb3JlLmh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YShjb250ZXh0LnJlcSk7XG4gICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0IH0pO1xuICAgIGF3YWl0IG5leHQoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFNob3VsZEhhbmRsZUVycm9yKGNvbnRleHQpIHtcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IGNvbnRleHQucmVzLnN0YXR1cztcbiAgcmV0dXJuIHN0YXR1c0NvZGUgPj0gNTAwO1xufVxuXG5mdW5jdGlvbiBob25vRXJyb3JIYW5kbGVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHNlbnRyeUVycm9yTWlkZGxld2FyZShjb250ZXh0LCBuZXh0KSB7XG4gICAgYXdhaXQgbmV4dCgpO1xuXG4gICAgY29uc3Qgc2hvdWxkSGFuZGxlRXJyb3IgPSBvcHRpb25zPy5zaG91bGRIYW5kbGVFcnJvciB8fCBkZWZhdWx0U2hvdWxkSGFuZGxlRXJyb3I7XG4gICAgaWYgKHNob3VsZEhhbmRsZUVycm9yKGNvbnRleHQpKSB7XG4gICAgICAoY29udGV4dC5yZXMgKS5zZW50cnkgPSBjb3JlLmNhcHR1cmVFeGNlcHRpb24oY29udGV4dC5lcnJvciwge1xuICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICB0eXBlOiAnYXV0by5taWRkbGV3YXJlLmhvbm8nLFxuICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEFkZCBhIEhvbm8gZXJyb3IgaGFuZGxlciB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgSG9ubyBpbnN0YW5jZXNcbiAqIEBwYXJhbSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGhhbmRsZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCB7IEhvbm8gfSA9IHJlcXVpcmUoXCJob25vXCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IG5ldyBIb25vKCk7XG4gKlxuICogU2VudHJ5LnNldHVwSG9ub0Vycm9ySGFuZGxlcihhcHApO1xuICpcbiAqIC8vIEFkZCB5b3VyIHJvdXRlcywgZXRjLlxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHNldHVwSG9ub0Vycm9ySGFuZGxlcihcbiAgYXBwLFxuICBvcHRpb25zLFxuKSB7XG4gIGFwcC51c2UoaG9ub1JlcXVlc3RIYW5kbGVyKCkpO1xuICBhcHAudXNlKGhvbm9FcnJvckhhbmRsZXIob3B0aW9ucykpO1xuICBub2RlQ29yZS5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2hvbm8nKTtcbn1cblxuZXhwb3J0cy5ob25vSW50ZWdyYXRpb24gPSBob25vSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRIb25vID0gaW5zdHJ1bWVudEhvbm87XG5leHBvcnRzLnNldHVwSG9ub0Vycm9ySGFuZGxlciA9IHNldHVwSG9ub0Vycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\");\n\nconst PACKAGE_NAME = '@sentry/instrumentation-hono';\nconst PACKAGE_VERSION = '0.0.1';\n\n/**\n * Hono instrumentation for OpenTelemetry\n */\nclass HonoInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  /**\n   * Initialize the instrumentation.\n   */\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('hono', ['>=4.0.0 <5'], moduleExports => this._patch(moduleExports)),\n    ];\n  }\n\n  /**\n   * Patches the module exports to instrument Hono.\n   */\n   _patch(moduleExports) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    class WrappedHono extends moduleExports.Hono {\n       constructor(...args) {\n        super(...args);\n\n        instrumentation._wrap(this, 'get', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'post', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'put', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'delete', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'options', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'patch', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'all', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'on', instrumentation._patchOnHandler());\n        instrumentation._wrap(this, 'use', instrumentation._patchMiddlewareHandler());\n      }\n    }\n\n    try {\n      moduleExports.Hono = WrappedHono;\n    } catch {\n      // This is a workaround for environments where direct assignment is not allowed.\n      return { ...moduleExports, Hono: WrappedHono };\n    }\n\n    return moduleExports;\n  }\n\n  /**\n   * Patches the route handler to instrument it.\n   */\n   _patchHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        if (typeof args[0] === 'string') {\n          const path = args[0];\n          if (args.length === 1) {\n            return original.apply(this, [path]);\n          }\n\n          const handlers = args.slice(1);\n          return original.apply(this, [\n            path,\n            ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n          ]);\n        }\n\n        return original.apply(\n          this,\n          args.map(handler => instrumentation._wrapHandler(handler )),\n        );\n      };\n    };\n  }\n\n  /**\n   * Patches the 'on' handler to instrument it.\n   */\n   _patchOnHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        const handlers = args.slice(2);\n        return original.apply(this, [\n          ...args.slice(0, 2),\n          ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n        ]);\n      };\n    };\n  }\n\n  /**\n   * Patches the middleware handler to instrument it.\n   */\n   _patchMiddlewareHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        if (typeof args[0] === 'string') {\n          const path = args[0];\n          if (args.length === 1) {\n            return original.apply(this, [path]);\n          }\n\n          const handlers = args.slice(1);\n          return original.apply(this, [\n            path,\n            ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n          ]);\n        }\n\n        return original.apply(\n          this,\n          args.map(handler => instrumentation._wrapHandler(handler )),\n        );\n      };\n    };\n  }\n\n  /**\n   * Wraps a handler or middleware handler to apply instrumentation.\n   */\n   _wrapHandler(handler) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function ( c, next) {\n      if (!instrumentation.isEnabled()) {\n        return handler.apply(this, [c, next]);\n      }\n\n      const path = c.req.path;\n      const span = instrumentation.tracer.startSpan(path);\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return instrumentation._safeExecute(\n          () => {\n            const result = handler.apply(this, [c, next]);\n            if (core.isThenable(result)) {\n              return result.then(result => {\n                const type = instrumentation._determineHandlerType(result);\n                span.setAttributes({\n                  [constants.AttributeNames.HONO_TYPE]: type,\n                  [constants.AttributeNames.HONO_NAME]: type === constants.HonoTypes.REQUEST_HANDLER ? path : handler.name || 'anonymous',\n                });\n                instrumentation.getConfig().responseHook?.(span);\n                return result;\n              });\n            } else {\n              const type = instrumentation._determineHandlerType(result);\n              span.setAttributes({\n                [constants.AttributeNames.HONO_TYPE]: type,\n                [constants.AttributeNames.HONO_NAME]: type === constants.HonoTypes.REQUEST_HANDLER ? path : handler.name || 'anonymous',\n              });\n              instrumentation.getConfig().responseHook?.(span);\n              return result;\n            }\n          },\n          () => span.end(),\n          error => {\n            instrumentation._handleError(span, error);\n            span.end();\n          },\n        );\n      });\n    };\n  }\n\n  /**\n   * Safely executes a function and handles errors.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _safeExecute(execute, onSuccess, onFailure) {\n    try {\n      const result = execute();\n\n      if (core.isThenable(result)) {\n        result.then(\n          () => onSuccess(),\n          (error) => onFailure(error),\n        );\n      } else {\n        onSuccess();\n      }\n\n      return result;\n    } catch (error) {\n      onFailure(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Determines the handler type based on the result.\n   * @param result\n   * @private\n   */\n   _determineHandlerType(result) {\n    return result === undefined ? constants.HonoTypes.MIDDLEWARE : constants.HonoTypes.REQUEST_HANDLER;\n  }\n\n  /**\n   * Handles errors by setting the span status and recording the exception.\n   */\n   _handleError(span, error) {\n    if (error instanceof Error) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: error.message,\n      });\n      span.recordException(error);\n    }\n  }\n}\n\nexports.HonoInstrumentation = HonoInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hvbm8vaW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLENBQUMsb0RBQW9ELHlDQUF5QywwQ0FBMEMsOENBQThDLG9EQUFvRCxxREFBcUQsaUJBQWlCOztBQUVoVCxZQUFZLG1CQUFPLENBQUMsNklBQW9CO0FBQ3hDLHdCQUF3QixtQkFBTyxDQUFDLDRNQUFnQztBQUNoRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsa0JBQWtCLG1CQUFPLENBQUMseU1BQWdCOztBQUUxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLGVBQWU7QUFDZjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9pbnN0cnVtZW50YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJTRU5UUllfUkVMRUFTRVwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeUJhc2VQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5TmV4dEpzVmVyc2lvblwiXSA9IFwiMTUuNS40XCI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlRnJhbWVzRGlzdERpclwiXSA9IFwiLm5leHRcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG5cbmNvbnN0IFBBQ0tBR0VfTkFNRSA9ICdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1ob25vJztcbmNvbnN0IFBBQ0tBR0VfVkVSU0lPTiA9ICcwLjAuMSc7XG5cbi8qKlxuICogSG9ubyBpbnN0cnVtZW50YXRpb24gZm9yIE9wZW5UZWxlbWV0cnlcbiAqL1xuY2xhc3MgSG9ub0luc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoUEFDS0FHRV9OQU1FLCBQQUNLQUdFX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgaW5zdHJ1bWVudGF0aW9uLlxuICAgKi9cbiAgIGluaXQoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ2hvbm8nLCBbJz49NC4wLjAgPDUnXSwgbW9kdWxlRXhwb3J0cyA9PiB0aGlzLl9wYXRjaChtb2R1bGVFeHBvcnRzKSksXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaGVzIHRoZSBtb2R1bGUgZXhwb3J0cyB0byBpbnN0cnVtZW50IEhvbm8uXG4gICAqL1xuICAgX3BhdGNoKG1vZHVsZUV4cG9ydHMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgY2xhc3MgV3JhcHBlZEhvbm8gZXh0ZW5kcyBtb2R1bGVFeHBvcnRzLkhvbm8ge1xuICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uLl93cmFwKHRoaXMsICdnZXQnLCBpbnN0cnVtZW50YXRpb24uX3BhdGNoSGFuZGxlcigpKTtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uLl93cmFwKHRoaXMsICdwb3N0JywgaW5zdHJ1bWVudGF0aW9uLl9wYXRjaEhhbmRsZXIoKSk7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbi5fd3JhcCh0aGlzLCAncHV0JywgaW5zdHJ1bWVudGF0aW9uLl9wYXRjaEhhbmRsZXIoKSk7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbi5fd3JhcCh0aGlzLCAnZGVsZXRlJywgaW5zdHJ1bWVudGF0aW9uLl9wYXRjaEhhbmRsZXIoKSk7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbi5fd3JhcCh0aGlzLCAnb3B0aW9ucycsIGluc3RydW1lbnRhdGlvbi5fcGF0Y2hIYW5kbGVyKCkpO1xuICAgICAgICBpbnN0cnVtZW50YXRpb24uX3dyYXAodGhpcywgJ3BhdGNoJywgaW5zdHJ1bWVudGF0aW9uLl9wYXRjaEhhbmRsZXIoKSk7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbi5fd3JhcCh0aGlzLCAnYWxsJywgaW5zdHJ1bWVudGF0aW9uLl9wYXRjaEhhbmRsZXIoKSk7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbi5fd3JhcCh0aGlzLCAnb24nLCBpbnN0cnVtZW50YXRpb24uX3BhdGNoT25IYW5kbGVyKCkpO1xuICAgICAgICBpbnN0cnVtZW50YXRpb24uX3dyYXAodGhpcywgJ3VzZScsIGluc3RydW1lbnRhdGlvbi5fcGF0Y2hNaWRkbGV3YXJlSGFuZGxlcigpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgbW9kdWxlRXhwb3J0cy5Ib25vID0gV3JhcHBlZEhvbm87XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgZW52aXJvbm1lbnRzIHdoZXJlIGRpcmVjdCBhc3NpZ25tZW50IGlzIG5vdCBhbGxvd2VkLlxuICAgICAgcmV0dXJuIHsgLi4ubW9kdWxlRXhwb3J0cywgSG9ubzogV3JhcHBlZEhvbm8gfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9kdWxlRXhwb3J0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaGVzIHRoZSByb3V0ZSBoYW5kbGVyIHRvIGluc3RydW1lbnQgaXQuXG4gICAqL1xuICAgX3BhdGNoSGFuZGxlcigpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBwZWRIYW5kbGVyKCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjb25zdCBwYXRoID0gYXJnc1swXTtcbiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBbcGF0aF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGhhbmRsZXJzID0gYXJncy5zbGljZSgxKTtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgW1xuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIC4uLmhhbmRsZXJzLm1hcChoYW5kbGVyID0+IGluc3RydW1lbnRhdGlvbi5fd3JhcEhhbmRsZXIoaGFuZGxlciApKSxcbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseShcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGFyZ3MubWFwKGhhbmRsZXIgPT4gaW5zdHJ1bWVudGF0aW9uLl93cmFwSGFuZGxlcihoYW5kbGVyICkpLFxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdGNoZXMgdGhlICdvbicgaGFuZGxlciB0byBpbnN0cnVtZW50IGl0LlxuICAgKi9cbiAgIF9wYXRjaE9uSGFuZGxlcigpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBwZWRIYW5kbGVyKCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgICAuLi5hcmdzLnNsaWNlKDAsIDIpLFxuICAgICAgICAgIC4uLmhhbmRsZXJzLm1hcChoYW5kbGVyID0+IGluc3RydW1lbnRhdGlvbi5fd3JhcEhhbmRsZXIoaGFuZGxlciApKSxcbiAgICAgICAgXSk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUGF0Y2hlcyB0aGUgbWlkZGxld2FyZSBoYW5kbGVyIHRvIGluc3RydW1lbnQgaXQuXG4gICAqL1xuICAgX3BhdGNoTWlkZGxld2FyZUhhbmRsZXIoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gdGhpcztcblxuICAgIHJldHVybiBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiB3cmFwcGVkSGFuZGxlciggLi4uYXJncykge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3QgcGF0aCA9IGFyZ3NbMF07XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgW3BhdGhdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBoYW5kbGVycyA9IGFyZ3Muc2xpY2UoMSk7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAuLi5oYW5kbGVycy5tYXAoaGFuZGxlciA9PiBpbnN0cnVtZW50YXRpb24uX3dyYXBIYW5kbGVyKGhhbmRsZXIgKSksXG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmdzLm1hcChoYW5kbGVyID0+IGluc3RydW1lbnRhdGlvbi5fd3JhcEhhbmRsZXIoaGFuZGxlciApKSxcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcyBhIGhhbmRsZXIgb3IgbWlkZGxld2FyZSBoYW5kbGVyIHRvIGFwcGx5IGluc3RydW1lbnRhdGlvbi5cbiAgICovXG4gICBfd3JhcEhhbmRsZXIoaGFuZGxlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCBjLCBuZXh0KSB7XG4gICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5pc0VuYWJsZWQoKSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5hcHBseSh0aGlzLCBbYywgbmV4dF0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXRoID0gYy5yZXEucGF0aDtcbiAgICAgIGNvbnN0IHNwYW4gPSBpbnN0cnVtZW50YXRpb24udHJhY2VyLnN0YXJ0U3BhbihwYXRoKTtcblxuICAgICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoYXBpLnRyYWNlLnNldFNwYW4oYXBpLmNvbnRleHQuYWN0aXZlKCksIHNwYW4pLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBpbnN0cnVtZW50YXRpb24uX3NhZmVFeGVjdXRlKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZXIuYXBwbHkodGhpcywgW2MsIG5leHRdKTtcbiAgICAgICAgICAgIGlmIChjb3JlLmlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gaW5zdHJ1bWVudGF0aW9uLl9kZXRlcm1pbmVIYW5kbGVyVHlwZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgICAgICBbY29uc3RhbnRzLkF0dHJpYnV0ZU5hbWVzLkhPTk9fVFlQRV06IHR5cGUsXG4gICAgICAgICAgICAgICAgICBbY29uc3RhbnRzLkF0dHJpYnV0ZU5hbWVzLkhPTk9fTkFNRV06IHR5cGUgPT09IGNvbnN0YW50cy5Ib25vVHlwZXMuUkVRVUVTVF9IQU5ETEVSID8gcGF0aCA6IGhhbmRsZXIubmFtZSB8fCAnYW5vbnltb3VzJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50YXRpb24uZ2V0Q29uZmlnKCkucmVzcG9uc2VIb29rPy4oc3Bhbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCB0eXBlID0gaW5zdHJ1bWVudGF0aW9uLl9kZXRlcm1pbmVIYW5kbGVyVHlwZShyZXN1bHQpO1xuICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgIFtjb25zdGFudHMuQXR0cmlidXRlTmFtZXMuSE9OT19UWVBFXTogdHlwZSxcbiAgICAgICAgICAgICAgICBbY29uc3RhbnRzLkF0dHJpYnV0ZU5hbWVzLkhPTk9fTkFNRV06IHR5cGUgPT09IGNvbnN0YW50cy5Ib25vVHlwZXMuUkVRVUVTVF9IQU5ETEVSID8gcGF0aCA6IGhhbmRsZXIubmFtZSB8fCAnYW5vbnltb3VzJyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGluc3RydW1lbnRhdGlvbi5nZXRDb25maWcoKS5yZXNwb25zZUhvb2s/LihzcGFuKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICgpID0+IHNwYW4uZW5kKCksXG4gICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgaW5zdHJ1bWVudGF0aW9uLl9oYW5kbGVFcnJvcihzcGFuLCBlcnJvcik7XG4gICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNhZmVseSBleGVjdXRlcyBhIGZ1bmN0aW9uIGFuZCBoYW5kbGVzIGVycm9ycy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICBfc2FmZUV4ZWN1dGUoZXhlY3V0ZSwgb25TdWNjZXNzLCBvbkZhaWx1cmUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gZXhlY3V0ZSgpO1xuXG4gICAgICBpZiAoY29yZS5pc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4oXG4gICAgICAgICAgKCkgPT4gb25TdWNjZXNzKCksXG4gICAgICAgICAgKGVycm9yKSA9PiBvbkZhaWx1cmUoZXJyb3IpLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uRmFpbHVyZShlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgaGFuZGxlciB0eXBlIGJhc2VkIG9uIHRoZSByZXN1bHQuXG4gICAqIEBwYXJhbSByZXN1bHRcbiAgICogQHByaXZhdGVcbiAgICovXG4gICBfZGV0ZXJtaW5lSGFuZGxlclR5cGUocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY29uc3RhbnRzLkhvbm9UeXBlcy5NSURETEVXQVJFIDogY29uc3RhbnRzLkhvbm9UeXBlcy5SRVFVRVNUX0hBTkRMRVI7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBlcnJvcnMgYnkgc2V0dGluZyB0aGUgc3BhbiBzdGF0dXMgYW5kIHJlY29yZGluZyB0aGUgZXhjZXB0aW9uLlxuICAgKi9cbiAgIF9oYW5kbGVFcnJvcihzcGFuLCBlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgIH0pO1xuICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLkhvbm9JbnN0cnVtZW50YXRpb24gPSBIb25vSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! ../http.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst index$5 = __webpack_require__(/*! ./anthropic-ai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\");\nconst index$7 = __webpack_require__(/*! ./claude-code/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst index$8 = __webpack_require__(/*! ./openai-codex/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index = __webpack_require__(/*! ./fastify/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst firebase = __webpack_require__(/*! ./firebase/firebase.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst index$6 = __webpack_require__(/*! ./google-genai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index$1 = __webpack_require__(/*! ./hapi/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst index$2 = __webpack_require__(/*! ./hono/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst index$4 = __webpack_require__(/*! ./openai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./postgresjs.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./prisma.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst index$3 = __webpack_require__(/*! ./vercelai/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    index.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    index$2.honoIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    prisma.prismaIntegration(),\n    index$1.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n    index$3.vercelAIIntegration(),\n    index$4.openAIIntegration(),\n    postgresjs.postgresJsIntegration(),\n    firebase.firebaseIntegration(),\n    index$5.anthropicAIIntegration(),\n    index$6.googleGenAIIntegration(),\n    index$7.claudeCodeIntegration(),\n    index$8.openaiCodexIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    http.instrumentSentryHttp,\n    http.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    index.instrumentFastify,\n    index.instrumentFastifyV3,\n    index$1.instrumentHapi,\n    index$2.instrumentHono,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index$1.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n    index$3.instrumentVercelAi,\n    index$4.instrumentOpenAi,\n    postgresjs.instrumentPostgresJs,\n    firebase.instrumentFirebase,\n    index$5.instrumentAnthropicAi,\n    index$6.instrumentGoogleGenAI,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxtTEFBWTtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxnTUFBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyxzTkFBeUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMsb05BQXdCO0FBQ2hELGdCQUFnQixtQkFBTyxDQUFDLGdNQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLHNOQUF5QjtBQUNqRCxnQkFBZ0IsbUJBQU8sQ0FBQyxnTUFBYztBQUN0QyxjQUFjLG1CQUFPLENBQUMsNE1BQW9CO0FBQzFDLGlCQUFpQixtQkFBTyxDQUFDLG9OQUF3QjtBQUNqRCxvQkFBb0IsbUJBQU8sQ0FBQyx3TUFBa0I7QUFDOUMsZ0JBQWdCLG1CQUFPLENBQUMsc05BQXlCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLGdNQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLHNNQUFpQjtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxzTUFBaUI7QUFDekMsY0FBYyxtQkFBTyxDQUFDLDRMQUFZO0FBQ2xDLFlBQVksbUJBQU8sQ0FBQyx3TEFBVTtBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQyx3TUFBa0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLDRMQUFZO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLGtNQUFlO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQyw0TEFBWTtBQUNsQyxlQUFlLG1CQUFPLENBQUMsOExBQWE7QUFDcEMsZ0JBQWdCLG1CQUFPLENBQUMsME1BQW1CO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLGtNQUFlO0FBQ3hDLG1CQUFtQixtQkFBTyxDQUFDLHNNQUFpQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMsOExBQWE7QUFDcEMsY0FBYyxtQkFBTyxDQUFDLDRMQUFZO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLGdNQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLDhNQUFxQjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxnREFBZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCcuLi9odHRwLmpzJyk7XG5jb25zdCBhbXFwbGliID0gcmVxdWlyZSgnLi9hbXFwbGliLmpzJyk7XG5jb25zdCBpbmRleCQ1ID0gcmVxdWlyZSgnLi9hbnRocm9waWMtYWkvaW5kZXguanMnKTtcbmNvbnN0IGluZGV4JDcgPSByZXF1aXJlKCcuL2NsYXVkZS1jb2RlL2luZGV4LmpzJyk7XG5jb25zdCBjb25uZWN0ID0gcmVxdWlyZSgnLi9jb25uZWN0LmpzJyk7XG5jb25zdCBpbmRleCQ4ID0gcmVxdWlyZSgnLi9vcGVuYWktY29kZXgvaW5kZXguanMnKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCcuL2V4cHJlc3MuanMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi9mYXN0aWZ5L2luZGV4LmpzJyk7XG5jb25zdCBmaXJlYmFzZSA9IHJlcXVpcmUoJy4vZmlyZWJhc2UvZmlyZWJhc2UuanMnKTtcbmNvbnN0IGdlbmVyaWNQb29sID0gcmVxdWlyZSgnLi9nZW5lcmljUG9vbC5qcycpO1xuY29uc3QgaW5kZXgkNiA9IHJlcXVpcmUoJy4vZ29vZ2xlLWdlbmFpL2luZGV4LmpzJyk7XG5jb25zdCBncmFwaHFsID0gcmVxdWlyZSgnLi9ncmFwaHFsLmpzJyk7XG5jb25zdCBpbmRleCQxID0gcmVxdWlyZSgnLi9oYXBpL2luZGV4LmpzJyk7XG5jb25zdCBpbmRleCQyID0gcmVxdWlyZSgnLi9ob25vL2luZGV4LmpzJyk7XG5jb25zdCBrYWZrYSA9IHJlcXVpcmUoJy4va2Fma2EuanMnKTtcbmNvbnN0IGtvYSA9IHJlcXVpcmUoJy4va29hLmpzJyk7XG5jb25zdCBscnVtZW1vaXplciA9IHJlcXVpcmUoJy4vbHJ1bWVtb2l6ZXIuanMnKTtcbmNvbnN0IG1vbmdvID0gcmVxdWlyZSgnLi9tb25nby5qcycpO1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCcuL21vbmdvb3NlLmpzJyk7XG5jb25zdCBteXNxbCA9IHJlcXVpcmUoJy4vbXlzcWwuanMnKTtcbmNvbnN0IG15c3FsMiA9IHJlcXVpcmUoJy4vbXlzcWwyLmpzJyk7XG5jb25zdCBpbmRleCQ0ID0gcmVxdWlyZSgnLi9vcGVuYWkvaW5kZXguanMnKTtcbmNvbnN0IHBvc3RncmVzID0gcmVxdWlyZSgnLi9wb3N0Z3Jlcy5qcycpO1xuY29uc3QgcG9zdGdyZXNqcyA9IHJlcXVpcmUoJy4vcG9zdGdyZXNqcy5qcycpO1xuY29uc3QgcHJpc21hID0gcmVxdWlyZSgnLi9wcmlzbWEuanMnKTtcbmNvbnN0IHJlZGlzID0gcmVxdWlyZSgnLi9yZWRpcy5qcycpO1xuY29uc3QgdGVkaW91cyA9IHJlcXVpcmUoJy4vdGVkaW91cy5qcycpO1xuY29uc3QgaW5kZXgkMyA9IHJlcXVpcmUoJy4vdmVyY2VsYWkvaW5kZXguanMnKTtcblxuLyoqXG4gKiBXaXRoIE9URUwsIGFsbCBwZXJmb3JtYW5jZSBpbnRlZ3JhdGlvbnMgd2lsbCBiZSBhZGRlZCwgYXMgT1RFTCBvbmx5IGluaXRpYWxpemVzIHRoZW0gd2hlbiB0aGUgcGF0Y2hlZCBwYWNrYWdlIGlzIGFjdHVhbGx5IHJlcXVpcmVkLlxuICovXG5mdW5jdGlvbiBnZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMoKSB7XG4gIHJldHVybiBbXG4gICAgZXhwcmVzcy5leHByZXNzSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleC5mYXN0aWZ5SW50ZWdyYXRpb24oKSxcbiAgICBncmFwaHFsLmdyYXBocWxJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDIuaG9ub0ludGVncmF0aW9uKCksXG4gICAgbW9uZ28ubW9uZ29JbnRlZ3JhdGlvbigpLFxuICAgIG1vbmdvb3NlLm1vbmdvb3NlSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbC5teXNxbEludGVncmF0aW9uKCksXG4gICAgbXlzcWwyLm15c3FsMkludGVncmF0aW9uKCksXG4gICAgcmVkaXMucmVkaXNJbnRlZ3JhdGlvbigpLFxuICAgIHBvc3RncmVzLnBvc3RncmVzSW50ZWdyYXRpb24oKSxcbiAgICBwcmlzbWEucHJpc21hSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQxLmhhcGlJbnRlZ3JhdGlvbigpLFxuICAgIGtvYS5rb2FJbnRlZ3JhdGlvbigpLFxuICAgIGNvbm5lY3QuY29ubmVjdEludGVncmF0aW9uKCksXG4gICAgdGVkaW91cy50ZWRpb3VzSW50ZWdyYXRpb24oKSxcbiAgICBnZW5lcmljUG9vbC5nZW5lcmljUG9vbEludGVncmF0aW9uKCksXG4gICAga2Fma2Eua2Fma2FJbnRlZ3JhdGlvbigpLFxuICAgIGFtcXBsaWIuYW1xcGxpYkludGVncmF0aW9uKCksXG4gICAgbHJ1bWVtb2l6ZXIubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDMudmVyY2VsQUlJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDQub3BlbkFJSW50ZWdyYXRpb24oKSxcbiAgICBwb3N0Z3Jlc2pzLnBvc3RncmVzSnNJbnRlZ3JhdGlvbigpLFxuICAgIGZpcmViYXNlLmZpcmViYXNlSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQ1LmFudGhyb3BpY0FJSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQ2Lmdvb2dsZUdlbkFJSW50ZWdyYXRpb24oKSxcbiAgICBpbmRleCQ3LmNsYXVkZUNvZGVJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDgub3BlbmFpQ29kZXhJbnRlZ3JhdGlvbigpLFxuICBdO1xufVxuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgbWV0aG9kcyB0byBpbnN0cnVtZW50IE9URUwsIHdoZW4gcHJlbG9hZCBpbnN0cnVtZW50YXRpb24uXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBnZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkKCkge1xuICByZXR1cm4gW1xuICAgIGh0dHAuaW5zdHJ1bWVudFNlbnRyeUh0dHAsXG4gICAgaHR0cC5pbnN0cnVtZW50T3RlbEh0dHAsXG4gICAgZXhwcmVzcy5pbnN0cnVtZW50RXhwcmVzcyxcbiAgICBjb25uZWN0Lmluc3RydW1lbnRDb25uZWN0LFxuICAgIGluZGV4Lmluc3RydW1lbnRGYXN0aWZ5LFxuICAgIGluZGV4Lmluc3RydW1lbnRGYXN0aWZ5VjMsXG4gICAgaW5kZXgkMS5pbnN0cnVtZW50SGFwaSxcbiAgICBpbmRleCQyLmluc3RydW1lbnRIb25vLFxuICAgIGthZmthLmluc3RydW1lbnRLYWZrYSxcbiAgICBrb2EuaW5zdHJ1bWVudEtvYSxcbiAgICBscnVtZW1vaXplci5pbnN0cnVtZW50THJ1TWVtb2l6ZXIsXG4gICAgbW9uZ28uaW5zdHJ1bWVudE1vbmdvLFxuICAgIG1vbmdvb3NlLmluc3RydW1lbnRNb25nb29zZSxcbiAgICBteXNxbC5pbnN0cnVtZW50TXlzcWwsXG4gICAgbXlzcWwyLmluc3RydW1lbnRNeXNxbDIsXG4gICAgcG9zdGdyZXMuaW5zdHJ1bWVudFBvc3RncmVzLFxuICAgIGluZGV4JDEuaW5zdHJ1bWVudEhhcGksXG4gICAgZ3JhcGhxbC5pbnN0cnVtZW50R3JhcGhxbCxcbiAgICByZWRpcy5pbnN0cnVtZW50UmVkaXMsXG4gICAgdGVkaW91cy5pbnN0cnVtZW50VGVkaW91cyxcbiAgICBnZW5lcmljUG9vbC5pbnN0cnVtZW50R2VuZXJpY1Bvb2wsXG4gICAgYW1xcGxpYi5pbnN0cnVtZW50QW1xcGxpYixcbiAgICBpbmRleCQzLmluc3RydW1lbnRWZXJjZWxBaSxcbiAgICBpbmRleCQ0Lmluc3RydW1lbnRPcGVuQWksXG4gICAgcG9zdGdyZXNqcy5pbnN0cnVtZW50UG9zdGdyZXNKcyxcbiAgICBmaXJlYmFzZS5pbnN0cnVtZW50RmlyZWJhc2UsXG4gICAgaW5kZXgkNS5pbnN0cnVtZW50QW50aHJvcGljQWksXG4gICAgaW5kZXgkNi5pbnN0cnVtZW50R29vZ2xlR2VuQUksXG4gIF07XG59XG5cbmV4cG9ydHMuZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zID0gZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zO1xuZXhwb3J0cy5nZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkID0gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.14.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2thZmthLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLG1PQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkthZmthanMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta2Fma2FqcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0thZmthJztcblxuY29uc3QgaW5zdHJ1bWVudEthZmthID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uS2Fma2Fqcy5LYWZrYUpzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGNvbnN1bWVySG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwuY29uc3VtZXInKTtcbiAgICAgIH0sXG4gICAgICBwcm9kdWNlckhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8ua2Fma2Fqcy5vdGVsLnByb2R1Y2VyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2thZmthSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEthZmthKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtrYWZrYWpzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9rYWZrYWpzKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtga2Fma2FJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9rYWZrYS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmthZmthSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3Qga2Fma2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2thZmthSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRLYWZrYSA9IGluc3RydW1lbnRLYWZrYTtcbmV4cG9ydHMua2Fma2FJbnRlZ3JhdGlvbiA9IGthZmthSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rYWZrYS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-knex@0.49.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentKnex();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { data } = core.spanToJSON(span);\n          // knex.version is always set in the span data\n          // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n          if ('knex.version' in data) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tuZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsNEJBQTRCLG1CQUFPLENBQUMsME5BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQSxzREFBc0QseUJBQXlCO0FBQy9FOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rbmV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25LbmV4ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtuZXgnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLbmV4JztcblxuY29uc3QgaW5zdHJ1bWVudEtuZXggPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uS25leC5LbmV4SW5zdHJ1bWVudGF0aW9uKHsgcmVxdWlyZVBhcmVudFNwYW46IHRydWUgfSksXG4pO1xuXG5jb25zdCBfa25leEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudEtuZXgoKTtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjayA9IG5vZGVDb3JlLmluc3RydW1lbnRXaGVuV3JhcHBlZChpbnN0cnVtZW50YXRpb24pO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaz8uKCgpID0+XG4gICAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgICAgLy8ga25leC52ZXJzaW9uIGlzIGFsd2F5cyBzZXQgaW4gdGhlIHNwYW4gZGF0YVxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi8wMzA5Y2FlYWZjNDRhYzljYjEzYTMzNDViNzkwYjAxYjc2ZDA0OTdkL3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1rbmV4L3NyYy9pbnN0cnVtZW50YXRpb24udHMjTDEzOFxuICAgICAgICAgIGlmICgna25leC52ZXJzaW9uJyBpbiBkYXRhKSB7XG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLmtuZXgnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEtuZXggaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgW0tuZXhdKGh0dHBzOi8va25leGpzLm9yZy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtuZXhJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGtuZXhJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tuZXhJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEtuZXggPSBpbnN0cnVtZW50S25leDtcbmV4cG9ydHMua25leEludGVncmF0aW9uID0ga25leEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a25leC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationKoa.KoaInstrumentation,\n  (options = {}) => {\n    return {\n      ignoreLayersType: options.ignoreLayersType ,\n      requestHook(span, info) {\n        nodeCore.addOriginToSpan(span, 'auto.http.otel.koa');\n\n        const attributes = core.spanToJSON(span).data;\n\n        // this is one of: middleware, router\n        const type = attributes['koa.type'];\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n        }\n\n        // Also update the name\n        const name = attributes['koa.name'];\n        if (typeof name === 'string') {\n          // Somehow, name is sometimes `''` for middleware spans\n          // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n          span.updateName(name || '< unknown >');\n        }\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = info.context?.request?.method?.toUpperCase() || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    } ;\n  },\n);\n\nconst _koaIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @param {KoaOptions} options Configuration options for the Koa integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n *\n * @example\n * ```javascript\n * // To ignore middleware spans\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [\n *     Sentry.koaIntegration({\n *       ignoreLayersType: ['middleware']\n *     })\n *   ],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error, {\n        mechanism: {\n          handled: false,\n          type: 'auto.middleware.koa',\n        },\n      });\n      throw error;\n    }\n  });\n\n  nodeCore.ensureIsWrapped(app.use, 'koa');\n};\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tvYS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwyQkFBMkIsbUJBQU8sQ0FBQyx1TkFBb0M7QUFDdkUsNEJBQTRCLG1CQUFPLENBQUMsaU1BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsdUxBQXNCOztBQUVqRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLEtBQUs7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLEVBQUUsTUFBTTtBQUN6RTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsc0JBQXNCO0FBQ3RCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rb2EuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbktvYSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rb2EnKTtcbmNvbnN0IHNlbWFudGljQ29udmVudGlvbnMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS29hJztcblxuY29uc3QgaW5zdHJ1bWVudEtvYSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gIGluc3RydW1lbnRhdGlvbktvYS5Lb2FJbnN0cnVtZW50YXRpb24sXG4gIChvcHRpb25zID0ge30pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgaWdub3JlTGF5ZXJzVHlwZTogb3B0aW9ucy5pZ25vcmVMYXllcnNUeXBlICxcbiAgICAgIHJlcXVlc3RIb29rKHNwYW4sIGluZm8pIHtcbiAgICAgICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmh0dHAub3RlbC5rb2EnKTtcblxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG5cbiAgICAgICAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJvdXRlclxuICAgICAgICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1sna29hLnR5cGUnXTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsIGAke3R5cGV9LmtvYWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWVcbiAgICAgICAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNbJ2tvYS5uYW1lJ107XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBTb21laG93LCBuYW1lIGlzIHNvbWV0aW1lcyBgJydgIGZvciBtaWRkbGV3YXJlIHNwYW5zXG4gICAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2lzc3Vlcy8yMjIwXG4gICAgICAgICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUgfHwgJzwgdW5rbm93biA+Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29yZS5nZXRJc29sYXRpb25TY29wZSgpID09PSBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvdXRlID0gYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgY29uc3QgbWV0aG9kID0gaW5mby5jb250ZXh0Py5yZXF1ZXN0Py5tZXRob2Q/LnRvVXBwZXJDYXNlKCkgfHwgJ0dFVCc7XG4gICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3JvdXRlfWApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0gO1xuICB9LFxuKTtcblxuY29uc3QgX2tvYUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRLb2Eob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0tvYV0oaHR0cHM6Ly9rb2Fqcy5jb20vKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEtvYUVycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3Ugc2V0IHVwIHlvdXIgS29hIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBba29hIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL2tvYS8pLlxuICpcbiAqIEBwYXJhbSB7S29hT3B0aW9uc30gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBLb2EgaW50ZWdyYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtvYUludGVncmF0aW9uKCldLFxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBUbyBpZ25vcmUgbWlkZGxld2FyZSBzcGFuc1xuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkua29hSW50ZWdyYXRpb24oe1xuICogICAgICAgaWdub3JlTGF5ZXJzVHlwZTogWydtaWRkbGV3YXJlJ11cbiAqICAgICB9KVxuICogICBdLFxuICogfSlcbiAqIGBgYFxuICovXG5jb25zdCBrb2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tvYUludGVncmF0aW9uKTtcblxuLyoqXG4gKiBBZGQgYW4gS29hIGVycm9yIGhhbmRsZXIgdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIFRoZSBlcnJvciBoYW5kbGVyIG11c3QgYmUgYmVmb3JlIGFueSBvdGhlciBtaWRkbGV3YXJlIGFuZCBhZnRlciBhbGwgY29udHJvbGxlcnMuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgRXhwcmVzcyBpbnN0YW5jZXNcbiAqIEBwYXJhbSBvcHRpb25zIHtFeHByZXNzSGFuZGxlck9wdGlvbnN9IENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGhhbmRsZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBLb2EgPSByZXF1aXJlKFwia29hXCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IG5ldyBLb2EoKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBLb2FFcnJvckhhbmRsZXIoYXBwKTtcbiAqXG4gKiAvLyBBZGQgeW91ciByb3V0ZXMsIGV0Yy5cbiAqXG4gKiBhcHAubGlzdGVuKDMwMDApO1xuICogYGBgXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBzZXR1cEtvYUVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG5leHQoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgIHR5cGU6ICdhdXRvLm1pZGRsZXdhcmUua29hJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9KTtcblxuICBub2RlQ29yZS5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2tvYScpO1xufTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S29hID0gaW5zdHJ1bWVudEtvYTtcbmV4cG9ydHMua29hSW50ZWdyYXRpb24gPSBrb2FJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBLb2FFcnJvckhhbmRsZXIgPSBzZXR1cEtvYUVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtvYS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.49.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2xydW1lbW9pemVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG1DQUFtQyxtQkFBTyxDQUFDLGtQQUE2QztBQUN4RixhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsNkJBQTZCO0FBQzdCLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9scnVtZW1vaXplci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbHJ1LW1lbW9pemVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTHJ1TWVtb2l6ZXInO1xuXG5jb25zdCBpbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplci5McnVNZW1vaXplckluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2xydU1lbW9pemVySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudExydU1lbW9pemVyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtscnUtbWVtb2l6ZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2xydS1tZW1vaXplcikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGxydU1lbW9pemVySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbHJ1bWVtb2l6ZXIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5scnVNZW1vaXplckludGVncmF0aW9uKCldLFxuICogfSk7XG4gKi9cbmNvbnN0IGxydU1lbW9pemVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9scnVNZW1vaXplckludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBpbnN0cnVtZW50THJ1TWVtb2l6ZXI7XG5leHBvcnRzLmxydU1lbW9pemVySW50ZWdyYXRpb24gPSBscnVNZW1vaXplckludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHJ1bWVtb2l6ZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLG1PQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHFDQUFxQztBQUNyQyx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb2RiID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nbyc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nbyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvZGIuTW9uZ29EQkluc3RydW1lbnRhdGlvbih7XG4gICAgICBkYlN0YXRlbWVudFNlcmlhbGl6ZXI6IF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyLFxuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubW9uZ28nKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG4vKipcbiAqIFJlcGxhY2VzIHZhbHVlcyBpbiBkb2N1bWVudCB3aXRoICc/JywgaGlkaW5nIFBJSSBhbmQgaGVscGluZyBncm91cGluZy5cbiAqL1xuZnVuY3Rpb24gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIoY29tbWFuZE9iaikge1xuICBjb25zdCByZXN1bHRPYmogPSBfc2NydWJTdGF0ZW1lbnQoY29tbWFuZE9iaik7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHRPYmopO1xufVxuXG5mdW5jdGlvbiBfc2NydWJTdGF0ZW1lbnQodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcChlbGVtZW50ID0+IF9zY3J1YlN0YXRlbWVudChlbGVtZW50KSk7XG4gIH1cblxuICBpZiAoaXNDb21tYW5kT2JqKHZhbHVlKSkge1xuICAgIGNvbnN0IGluaXRpYWwgPSB7fTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModmFsdWUpXG4gICAgICAubWFwKChba2V5LCBlbGVtZW50XSkgPT4gW2tleSwgX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpXSlcbiAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgaWYgKGlzQ29tbWFuZEVudHJ5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgcHJldltjdXJyZW50WzBdXSA9IGN1cnJlbnRbMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9LCBpbml0aWFsKTtcbiAgfVxuXG4gIC8vIEEgdmFsdWUgbGlrZSBzdHJpbmcgb3IgbnVtYmVyLCBwb3NzaWJsZSBjb250YWlucyBQSUksIHNjcnViIGl0XG4gIHJldHVybiAnPyc7XG59XG5cbmZ1bmN0aW9uIGlzQ29tbWFuZE9iaih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhaXNCdWZmZXIodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWx1ZSkge1xuICBsZXQgaXNCdWZmZXIgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIodmFsdWUpO1xuICB9XG4gIHJldHVybiBpc0J1ZmZlcjtcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kRW50cnkodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG5jb25zdCBfbW9uZ29JbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TW9uZ28oKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW21vbmdvZGJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvZGIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29JbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5fZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplciA9IF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyO1xuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ28gPSBpbnN0cnVtZW50TW9uZ287XG5leHBvcnRzLm1vbmdvSW50ZWdyYXRpb24gPSBtb25nb0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ28uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL21vbmdvb3NlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdDQUFnQyxtQkFBTyxDQUFDLHNPQUF5QztBQUNqRixhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvb3NlJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9uZ29vc2UnO1xuXG5jb25zdCBpbnN0cnVtZW50TW9uZ29vc2UgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Nb25nb29zZS5Nb25nb29zZUluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nb29zZScpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9tb25nb29zZUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nb29zZSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29vc2VdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvb3NlKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbW9uZ29vc2VJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9tb25nb29zZS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm1vbmdvb3NlSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBtb25nb29zZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9uZ29vc2VJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE1vbmdvb3NlID0gaW5zdHJ1bWVudE1vbmdvb3NlO1xuZXhwb3J0cy5tb25nb29zZUludGVncmF0aW9uID0gbW9uZ29vc2VJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvb3NlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.50.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDZCQUE2QixtQkFBTyxDQUFDLDZOQUFzQztBQUMzRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQSxnSUFBZ0k7O0FBRWhJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk15c3FsID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwnO1xuXG5jb25zdCBpbnN0cnVtZW50TXlzcWwgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbC5NeVNRTEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfbXlzcWxJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW215c3FsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9teXNxbCkgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG15c3FsSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbXlzcWwvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5teXNxbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbXlzcWxJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbCA9IGluc3RydW1lbnRNeXNxbDtcbmV4cG9ydHMubXlzcWxJbnRlZ3JhdGlvbiA9IG15c3FsSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1teXNxbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsMi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw4QkFBOEIsbUJBQU8sQ0FBQyxnT0FBdUM7QUFDN0UsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJPQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsMi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwyID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW15c3FsMicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ015c3FsMic7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbDIgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbDIuTXlTUUwySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm15c3FsMicpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9teXNxbDJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtteXNxbDJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL215c3FsMikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG15c3FsMkludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL215c3FsMi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm15c3FsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBteXNxbDJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsMkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwyID0gaW5zdHJ1bWVudE15c3FsMjtcbmV4cG9ydHMubXlzcWwySW50ZWdyYXRpb24gPSBteXNxbDJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsMi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\");\n\nconst OPENAI_CODEX_INTEGRATION_NAME = 'OpenAiCodex';\n\n// Global singleton - only patch once per application instance\nlet _globalInstrumentedCodex = null;\nlet _initPromise = null;\n\n/**\n * Lazily loads and patches the OpenAI Codex SDK.\n * Ensures only one patched instance exists globally.\n */\nasync function ensurePatchedCodex() {\n  if (_globalInstrumentedCodex) {\n    return _globalInstrumentedCodex;\n  }\n\n  if (_initPromise) {\n    await _initPromise;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return _globalInstrumentedCodex;\n  }\n\n  _initPromise = (async () => {\n    try {\n      // Use webpackIgnore to prevent webpack from trying to resolve this at build time\n      // The import resolves at runtime from the user's node_modules\n      const sdkPath = '@openai/codex-sdk';\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const codexSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (!codexSDK || typeof codexSDK.Codex !== 'function') {\n        throw new Error(\n          'Failed to find \\'Codex\\' class in @openai/codex-sdk.\\n' +\n            'Make sure you have the package installed.',\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      _globalInstrumentedCodex = codexSDK.Codex;\n    } catch (error) {\n      // Reset state on failure to allow retry on next call\n      _initPromise = null;\n\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Unknown error occurred while loading @openai/codex-sdk';\n\n      throw new Error(\n        `Failed to instrument OpenAI Codex SDK:\\n${errorMessage}\\n\\n` +\n          'Make sure @openai/codex-sdk is installed:\\n' +\n          '  npm install @openai/codex-sdk\\n' +\n          '  # or\\n' +\n          '  yarn add @openai/codex-sdk',\n      );\n    }\n  })();\n\n  await _initPromise;\n  return _globalInstrumentedCodex;\n}\n\n/**\n * Creates a Sentry-instrumented Codex instance for the OpenAI Codex SDK.\n *\n * This is a convenience helper that reduces boilerplate to a single line.\n * The SDK is lazily loaded on first use, and instances are instrumented automatically.\n *\n * **Important**: This helper is NOT automatic. You must call it in your code.\n * The OpenAI Codex SDK cannot be automatically instrumented due to ESM module\n * and webpack bundling limitations.\n *\n * @param codexOptions - Options to pass to the Codex constructor\n * @param instrumentationOptions - Optional configuration for this specific agent instance\n * @param instrumentationOptions.name - Custom agent name for differentiation (defaults to 'openai-codex')\n * @param instrumentationOptions.recordInputs - Whether to record input prompts (defaults to sendDefaultPii)\n * @param instrumentationOptions.recordOutputs - Whether to record outputs (defaults to sendDefaultPii)\n * @returns An instrumented Codex instance ready to use\n *\n * @example\n * ```typescript\n * import { createInstrumentedCodex } from '@sentry/node';\n *\n * // Default agent name ('openai-codex')\n * const codex = await createInstrumentedCodex();\n * const thread = codex.startThread();\n * const result = await thread.run('Diagnose the test failure');\n *\n * // Custom agent name for differentiation\n * const devAgent = await createInstrumentedCodex({}, { name: 'dev-agent' });\n * const qaAgent = await createInstrumentedCodex({}, { name: 'qa-agent' });\n *\n * // Streaming mode\n * const thread = codex.startThread();\n * for await (const event of thread.runStreamed('Fix the bug')) {\n *   console.log(event);\n * }\n * ```\n *\n * Configuration is automatically pulled from your `openaiCodexIntegration()` setup:\n *\n * @example\n * ```typescript\n * Sentry.init({\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,   // These options are used\n *       recordOutputs: true,  // by createInstrumentedCodex()\n *     })\n *   ]\n * });\n * ```\n */\nasync function createInstrumentedCodex(\n  codexOptions,\n  instrumentationOptions = {},\n) {\n  await ensurePatchedCodex();\n\n  if (!_globalInstrumentedCodex) {\n    throw new Error('[Sentry] Failed to initialize instrumented OpenAI Codex SDK');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const CodexConstructor = _globalInstrumentedCodex;\n\n  const client = core.getClient();\n  const integration = client?.getIntegrationByName(OPENAI_CODEX_INTEGRATION_NAME);\n  const integrationOptions = (integration )?.options  || {};\n\n  // Merge options: integration options < instrumentation options\n  const finalOptions = {\n    ...integrationOptions,\n    ...(instrumentationOptions.recordInputs !== undefined && { recordInputs: instrumentationOptions.recordInputs }),\n    ...(instrumentationOptions.recordOutputs !== undefined && { recordOutputs: instrumentationOptions.recordOutputs }),\n    agentName: instrumentationOptions.name ?? integrationOptions.agentName ?? 'openai-codex',\n  };\n\n  // Create instance and instrument it\n  const codexInstance = new CodexConstructor(codexOptions);\n  return instrumentation.instrumentCodexInstance(codexInstance, finalOptions);\n}\n\nexports.createInstrumentedCodex = createInstrumentedCodex;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst OPENAI_CODEX_INTEGRATION_NAME = 'OpenAiCodex';\n\nconst _openaiCodexIntegration = ((options = {}) => {\n  return {\n    name: OPENAI_CODEX_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      // Note: Automatic patching via require hooks doesn't work for ESM modules\n      // or webpack-bundled dependencies. Users must manually use createInstrumentedCodex()\n      // in their code.\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the OpenAI Codex SDK.\n *\n * **Important**: Due to ESM module and bundler limitations, this integration requires\n * using the `createInstrumentedCodex()` helper function in your code.\n * See the example below for proper usage.\n *\n * This integration captures telemetry data following OpenTelemetry Semantic Conventions\n * for Generative AI, including:\n * - Agent invocation spans (`invoke_agent`)\n * - Chat spans (`chat`) for turn completions\n * - Tool execution spans (`execute_tool`) for commands, web searches, file changes, etc.\n * - Token usage, model info, and session tracking\n *\n * @example\n * ```typescript\n * // Step 1: Configure the integration\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   dsn: 'your-dsn',\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Step 2: Use the helper in your code\n * import { createInstrumentedCodex } from '@sentry/node';\n *\n * const codex = await createInstrumentedCodex();\n *\n * // Use Codex as normal - automatically instrumented!\n * const thread = codex.startThread();\n * const result = await thread.run('Diagnose the test failure and propose a fix');\n * console.log(result.finalResponse);\n *\n * // Or use streaming mode\n * for await (const event of thread.runStreamed('Fix the bug')) {\n *   if (event.type === 'item.completed') {\n *     console.log('Tool completed:', event.item);\n *   }\n * }\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text, tool calls, and outputs (default: respects `sendDefaultPii` client option)\n * - `agentName`: Custom agent name for differentiation (default: 'openai-codex')\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```typescript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n *\n * // Use custom agent name for multiple agents\n * const devAgent = await createInstrumentedCodex({}, { name: 'dev-agent' });\n * const qaAgent = await createInstrumentedCodex({}, { name: 'qa-agent' });\n * ```\n *\n * ## Captured Events\n *\n * The integration captures the following Codex events as spans:\n *\n * ### Agent Invocation (invoke_agent)\n * - Tracks the entire agent interaction lifecycle\n * - Captures thread ID and session information\n *\n * ### Chat Turns (chat)\n * - Tracks individual turns in the conversation\n * - Captures token usage (input, output, cached tokens)\n * - Records response text (when recordOutputs is enabled)\n *\n * ### Tool Executions (execute_tool)\n * - `command_execution`: Shell commands with exit codes\n * - `file_change`: File modifications with change details\n * - `web_search`: Web search queries\n * - `mcp_tool_call`: MCP tool calls with server/tool names\n * - `agent_message`: Agent messages and reasoning\n * - `todo_list`: Task list management\n *\n * @see https://docs.sentry.io/platforms/javascript/guides/node/ai-monitoring/\n */\nconst openaiCodexIntegration = core.defineIntegration(_openaiCodexIntegration);\n\nexports.openaiCodexIntegration = openaiCodexIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL29wZW5haS1jb2RleC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFlBQVksMEJBQTBCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxvREFBb0QsSUFBSSxtQkFBbUI7QUFDM0UsbURBQW1ELElBQUksa0JBQWtCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL29wZW5haS1jb2RleC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBPUEVOQUlfQ09ERVhfSU5URUdSQVRJT05fTkFNRSA9ICdPcGVuQWlDb2RleCc7XG5cbmNvbnN0IF9vcGVuYWlDb2RleEludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBPUEVOQUlfQ09ERVhfSU5URUdSQVRJT05fTkFNRSxcbiAgICBvcHRpb25zLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIC8vIE5vdGU6IEF1dG9tYXRpYyBwYXRjaGluZyB2aWEgcmVxdWlyZSBob29rcyBkb2Vzbid0IHdvcmsgZm9yIEVTTSBtb2R1bGVzXG4gICAgICAvLyBvciB3ZWJwYWNrLWJ1bmRsZWQgZGVwZW5kZW5jaWVzLiBVc2VycyBtdXN0IG1hbnVhbGx5IHVzZSBjcmVhdGVJbnN0cnVtZW50ZWRDb2RleCgpXG4gICAgICAvLyBpbiB0aGVpciBjb2RlLlxuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBPcGVuQUkgQ29kZXggU0RLLlxuICpcbiAqICoqSW1wb3J0YW50Kio6IER1ZSB0byBFU00gbW9kdWxlIGFuZCBidW5kbGVyIGxpbWl0YXRpb25zLCB0aGlzIGludGVncmF0aW9uIHJlcXVpcmVzXG4gKiB1c2luZyB0aGUgYGNyZWF0ZUluc3RydW1lbnRlZENvZGV4KClgIGhlbHBlciBmdW5jdGlvbiBpbiB5b3VyIGNvZGUuXG4gKiBTZWUgdGhlIGV4YW1wbGUgYmVsb3cgZm9yIHByb3BlciB1c2FnZS5cbiAqXG4gKiBUaGlzIGludGVncmF0aW9uIGNhcHR1cmVzIHRlbGVtZXRyeSBkYXRhIGZvbGxvd2luZyBPcGVuVGVsZW1ldHJ5IFNlbWFudGljIENvbnZlbnRpb25zXG4gKiBmb3IgR2VuZXJhdGl2ZSBBSSwgaW5jbHVkaW5nOlxuICogLSBBZ2VudCBpbnZvY2F0aW9uIHNwYW5zIChgaW52b2tlX2FnZW50YClcbiAqIC0gQ2hhdCBzcGFucyAoYGNoYXRgKSBmb3IgdHVybiBjb21wbGV0aW9uc1xuICogLSBUb29sIGV4ZWN1dGlvbiBzcGFucyAoYGV4ZWN1dGVfdG9vbGApIGZvciBjb21tYW5kcywgd2ViIHNlYXJjaGVzLCBmaWxlIGNoYW5nZXMsIGV0Yy5cbiAqIC0gVG9rZW4gdXNhZ2UsIG1vZGVsIGluZm8sIGFuZCBzZXNzaW9uIHRyYWNraW5nXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFN0ZXAgMTogQ29uZmlndXJlIHRoZSBpbnRlZ3JhdGlvblxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBkc246ICd5b3VyLWRzbicsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5vcGVuYWlDb2RleEludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogdHJ1ZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IHRydWVcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gU3RlcCAyOiBVc2UgdGhlIGhlbHBlciBpbiB5b3VyIGNvZGVcbiAqIGltcG9ydCB7IGNyZWF0ZUluc3RydW1lbnRlZENvZGV4IH0gZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBjb25zdCBjb2RleCA9IGF3YWl0IGNyZWF0ZUluc3RydW1lbnRlZENvZGV4KCk7XG4gKlxuICogLy8gVXNlIENvZGV4IGFzIG5vcm1hbCAtIGF1dG9tYXRpY2FsbHkgaW5zdHJ1bWVudGVkIVxuICogY29uc3QgdGhyZWFkID0gY29kZXguc3RhcnRUaHJlYWQoKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRocmVhZC5ydW4oJ0RpYWdub3NlIHRoZSB0ZXN0IGZhaWx1cmUgYW5kIHByb3Bvc2UgYSBmaXgnKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5maW5hbFJlc3BvbnNlKTtcbiAqXG4gKiAvLyBPciB1c2Ugc3RyZWFtaW5nIG1vZGVcbiAqIGZvciBhd2FpdCAoY29uc3QgZXZlbnQgb2YgdGhyZWFkLnJ1blN0cmVhbWVkKCdGaXggdGhlIGJ1ZycpKSB7XG4gKiAgIGlmIChldmVudC50eXBlID09PSAnaXRlbS5jb21wbGV0ZWQnKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ1Rvb2wgY29tcGxldGVkOicsIGV2ZW50Lml0ZW0pO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAjIyBPcHRpb25zXG4gKlxuICogLSBgcmVjb3JkSW5wdXRzYDogV2hldGhlciB0byByZWNvcmQgcHJvbXB0IG1lc3NhZ2VzIChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKiAtIGByZWNvcmRPdXRwdXRzYDogV2hldGhlciB0byByZWNvcmQgcmVzcG9uc2UgdGV4dCwgdG9vbCBjYWxscywgYW5kIG91dHB1dHMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYGFnZW50TmFtZWA6IEN1c3RvbSBhZ2VudCBuYW1lIGZvciBkaWZmZXJlbnRpYXRpb24gKGRlZmF1bHQ6ICdvcGVuYWktY29kZXgnKVxuICpcbiAqICMjIyBEZWZhdWx0IEJlaGF2aW9yXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGludGVncmF0aW9uIHdpbGw6XG4gKiAtIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgT05MWSBpZiBgc2VuZERlZmF1bHRQaWlgIGlzIHNldCB0byBgdHJ1ZWAgaW4geW91ciBTZW50cnkgY2xpZW50IG9wdGlvbnNcbiAqIC0gT3RoZXJ3aXNlLCBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIE5PVCByZWNvcmRlZCB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgd2hlbiBzZW5kRGVmYXVsdFBpaSBpcyBmYWxzZVxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkub3BlbmFpQ29kZXhJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IHRydWUsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiB0cnVlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICpcbiAqIC8vIE5ldmVyIHJlY29yZCBpbnB1dHMvb3V0cHV0cyByZWdhcmRsZXNzIG9mIHNlbmREZWZhdWx0UGlpXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIHNlbmREZWZhdWx0UGlpOiB0cnVlLFxuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkub3BlbmFpQ29kZXhJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IGZhbHNlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogZmFsc2VcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gVXNlIGN1c3RvbSBhZ2VudCBuYW1lIGZvciBtdWx0aXBsZSBhZ2VudHNcbiAqIGNvbnN0IGRldkFnZW50ID0gYXdhaXQgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXgoe30sIHsgbmFtZTogJ2Rldi1hZ2VudCcgfSk7XG4gKiBjb25zdCBxYUFnZW50ID0gYXdhaXQgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXgoe30sIHsgbmFtZTogJ3FhLWFnZW50JyB9KTtcbiAqIGBgYFxuICpcbiAqICMjIENhcHR1cmVkIEV2ZW50c1xuICpcbiAqIFRoZSBpbnRlZ3JhdGlvbiBjYXB0dXJlcyB0aGUgZm9sbG93aW5nIENvZGV4IGV2ZW50cyBhcyBzcGFuczpcbiAqXG4gKiAjIyMgQWdlbnQgSW52b2NhdGlvbiAoaW52b2tlX2FnZW50KVxuICogLSBUcmFja3MgdGhlIGVudGlyZSBhZ2VudCBpbnRlcmFjdGlvbiBsaWZlY3ljbGVcbiAqIC0gQ2FwdHVyZXMgdGhyZWFkIElEIGFuZCBzZXNzaW9uIGluZm9ybWF0aW9uXG4gKlxuICogIyMjIENoYXQgVHVybnMgKGNoYXQpXG4gKiAtIFRyYWNrcyBpbmRpdmlkdWFsIHR1cm5zIGluIHRoZSBjb252ZXJzYXRpb25cbiAqIC0gQ2FwdHVyZXMgdG9rZW4gdXNhZ2UgKGlucHV0LCBvdXRwdXQsIGNhY2hlZCB0b2tlbnMpXG4gKiAtIFJlY29yZHMgcmVzcG9uc2UgdGV4dCAod2hlbiByZWNvcmRPdXRwdXRzIGlzIGVuYWJsZWQpXG4gKlxuICogIyMjIFRvb2wgRXhlY3V0aW9ucyAoZXhlY3V0ZV90b29sKVxuICogLSBgY29tbWFuZF9leGVjdXRpb25gOiBTaGVsbCBjb21tYW5kcyB3aXRoIGV4aXQgY29kZXNcbiAqIC0gYGZpbGVfY2hhbmdlYDogRmlsZSBtb2RpZmljYXRpb25zIHdpdGggY2hhbmdlIGRldGFpbHNcbiAqIC0gYHdlYl9zZWFyY2hgOiBXZWIgc2VhcmNoIHF1ZXJpZXNcbiAqIC0gYG1jcF90b29sX2NhbGxgOiBNQ1AgdG9vbCBjYWxscyB3aXRoIHNlcnZlci90b29sIG5hbWVzXG4gKiAtIGBhZ2VudF9tZXNzYWdlYDogQWdlbnQgbWVzc2FnZXMgYW5kIHJlYXNvbmluZ1xuICogLSBgdG9kb19saXN0YDogVGFzayBsaXN0IG1hbmFnZW1lbnRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvYWktbW9uaXRvcmluZy9cbiAqL1xuY29uc3Qgb3BlbmFpQ29kZXhJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX29wZW5haUNvZGV4SW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLm9wZW5haUNvZGV4SW50ZWdyYXRpb24gPSBvcGVuYWlDb2RleEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst GEN_AI_ATTRIBUTES = {\n  SYSTEM: 'gen_ai.system',\n  OPERATION_NAME: 'gen_ai.operation.name',\n  REQUEST_MODEL: 'gen_ai.request.model',\n  REQUEST_MESSAGES: 'gen_ai.request.messages',\n  RESPONSE_TEXT: 'gen_ai.response.text',\n  RESPONSE_TOOL_CALLS: 'gen_ai.response.tool_calls',\n  RESPONSE_ID: 'gen_ai.response.id',\n  RESPONSE_MODEL: 'gen_ai.response.model',\n  USAGE_INPUT_TOKENS: 'gen_ai.usage.input_tokens',\n  USAGE_OUTPUT_TOKENS: 'gen_ai.usage.output_tokens',\n  USAGE_TOTAL_TOKENS: 'gen_ai.usage.total_tokens',\n  TOOL_NAME: 'gen_ai.tool.name',\n  TOOL_TYPE: 'gen_ai.tool.type',\n  TOOL_INPUT: 'gen_ai.tool.input',\n  TOOL_OUTPUT: 'gen_ai.tool.output',\n  AGENT_NAME: 'gen_ai.agent.name',\n} ;\n\nconst SENTRY_ORIGIN = 'auto.ai.openai-codex';\n\n/**\n * Maps Codex tool/item types to OpenTelemetry tool types.\n *\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/\n * @param itemType - The type of the item (e.g., 'command_execution', 'web_search', 'mcp_tool_call')\n * @returns The OpenTelemetry tool type: 'function', 'extension', or 'datastore'\n */\nfunction getToolType(itemType) {\n  // Client-side execution tools - functions that run on the client\n  const functionTools = new Set([\n    'command_execution', // Shell/process tools\n    'file_change', // File operations\n    'reasoning', // Agent reasoning\n    'agent_message', // Agent messages\n    'todo_list', // Task management\n  ]);\n\n  // Agent-side API calls - external service integrations\n  const extensionTools = new Set(['web_search', 'mcp_tool_call']);\n\n  // Data access tools - database/structured data operations\n  const datastoreTools = new Set([]);\n\n  if (functionTools.has(itemType)) return 'function';\n  if (extensionTools.has(itemType)) return 'extension';\n  if (datastoreTools.has(itemType)) return 'datastore';\n\n  // Default to function for unknown tools (safest assumption)\n  return 'function';\n}\n\nfunction setTokenUsageAttributes(\n  span,\n  inputTokens,\n  outputTokens,\n  cacheCreationTokens,\n  cacheReadTokens,\n) {\n  const attrs = {};\n\n  if (typeof inputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_INPUT_TOKENS] = inputTokens;\n  }\n  if (typeof outputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_OUTPUT_TOKENS] = outputTokens;\n  }\n\n  const total = (inputTokens ?? 0) + (outputTokens ?? 0) + (cacheCreationTokens ?? 0) + (cacheReadTokens);\n  if (total > 0) {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_TOTAL_TOKENS] = total;\n  }\n\n  if (Object.keys(attrs).length > 0) {\n    span.setAttributes(attrs);\n  }\n}\n\n/**\n * Get a display name for a thread item based on its type and properties\n */\nfunction getItemDisplayName(item) {\n  switch (item.type) {\n    case 'command_execution':\n      // Use just the item type, not the full command (which can be very long)\n      return 'command_execution';\n    case 'web_search':\n      return 'web_search';\n    case 'mcp_tool_call':\n      return `mcp_tool_call.${item.server}.${item.tool}`;\n    case 'file_change':\n      return 'file_change';\n    case 'agent_message':\n      return 'agent_message';\n    case 'reasoning':\n      return 'reasoning';\n    case 'todo_list':\n      return 'todo_list';\n    case 'error':\n      return 'error';\n    default:\n      // TypeScript exhaustiveness check\n      return (item ).type;\n  }\n}\n\n/**\n * Get a descriptive span name for a thread item\n * Format: \"execute_tool <type>\"\n * Details go into the input/output attributes\n */\nfunction getSpanDescription(item) {\n  switch (item.type) {\n    case 'command_execution':\n      return 'execute_tool command_execution';\n    case 'web_search':\n      return 'execute_tool web_search';\n    case 'mcp_tool_call':\n      return `execute_tool mcp_tool_call`;\n    case 'file_change':\n      return 'execute_tool file_change';\n    case 'agent_message':\n      return 'execute_tool agent_message';\n    case 'reasoning':\n      return 'execute_tool reasoning';\n    case 'todo_list':\n      return 'execute_tool todo_list';\n    case 'error':\n      return 'execute_tool error';\n    default:\n      return `execute_tool ${(item ).type}`;\n  }\n}\n\n/**\n * Get input data for a thread item for telemetry\n */\nfunction getItemInput(item) {\n  switch (item.type) {\n    case 'command_execution':\n      return item.command;\n    case 'web_search':\n      return item.query;\n    case 'mcp_tool_call':\n      return JSON.stringify({ server: item.server, tool: item.tool });\n    case 'file_change':\n      return JSON.stringify(item.changes);\n    case 'agent_message':\n      return item.text;\n    case 'reasoning':\n      return item.text;\n    case 'todo_list':\n      return JSON.stringify(item.items);\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Strip ANSI escape codes from terminal output\n * Common codes like \\x1B(B\\x1B[m are used for text formatting/color\n */\nfunction stripAnsiCodes(text) {\n  // Remove all ANSI escape sequences including:\n  // - \\x1B[...m (SGR - colors, styles)\n  // - \\x1B(B (character set selection)\n  // - Other control sequences\n  // eslint-disable-next-line no-control-regex\n  return text.replace(/\\x1B(?:\\[[0-9;]*[a-zA-Z]|\\([AB012]|[@-Z\\\\-_])/g, '');\n}\n\n/**\n * Get output data for a thread item for telemetry\n */\nfunction getItemOutput(item) {\n  switch (item.type) {\n    case 'command_execution': {\n      // Strip ANSI codes from terminal output\n      const cleanOutput = stripAnsiCodes(item.aggregated_output);\n      const exitCodeStr = `Exit code: ${item.exit_code ?? 'N/A'}`;\n      // Only include output if it's not empty after stripping ANSI codes\n      return cleanOutput.trim() ? `${cleanOutput}\\n${exitCodeStr}` : exitCodeStr;\n    }\n    case 'file_change':\n      return `Status: ${item.status}`;\n    case 'mcp_tool_call':\n      return `Status: ${item.status}`;\n    case 'error':\n      return item.message;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Wraps a Thread instance to add Sentry instrumentation\n */\nfunction instrumentThread(\n  originalThread,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  // Wrap the runStreamed method\n  const originalRunStreamed = originalThread.runStreamed.bind(originalThread);\n  originalThread.runStreamed = async function (input, turnOptions) {\n    const originalStreamedTurn = await originalRunStreamed(input, turnOptions);\n\n    return {\n      events: instrumentStreamedTurn(originalStreamedTurn.events, input, agentName, recordInputs, recordOutputs),\n    };\n  };\n\n  // Wrap the run method\n  const originalRun = originalThread.run.bind(originalThread);\n  originalThread.run = async function (input, turnOptions) {\n    return instrumentNonStreamedTurn(originalRun, input, turnOptions, agentName, recordInputs, recordOutputs);\n  };\n\n  return originalThread;\n}\n\n/**\n * Instruments a streamed turn (runStreamed) with Sentry spans\n */\nasync function* instrumentStreamedTurn(\n  originalStream,\n  input,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  yield* core.startSpanManual(\n    {\n      name: `invoke_agent ${agentName}`,\n      op: 'gen_ai.invoke_agent',\n      attributes: {\n        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n      },\n    },\n    // eslint-disable-next-line complexity -- Complex event handling for streaming AI responses\n    async function* (agentSpan) {\n      let threadId = null;\n      let currentTurnSpan = null;\n      const itemSpans = new Map();\n      let turnMessages = [];\n\n      try {\n        for await (const event of originalStream) {\n          // Capture thread ID\n          if (event.type === 'thread.started') {\n            threadId = event.thread_id;\n            agentSpan.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_ID]: threadId,\n            });\n          }\n\n          // Start turn span\n          if (event.type === 'turn.started') {\n            if (currentTurnSpan) {\n              currentTurnSpan.setStatus({ code: 1 });\n              currentTurnSpan.end();\n            }\n\n            currentTurnSpan = core.withActiveSpan(agentSpan, () => {\n              return core.startSpanManual(\n                {\n                  name: `chat codex`,\n                  op: 'gen_ai.chat',\n                  attributes: {\n                    [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                    [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                    [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                    ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n                  },\n                },\n                (span) => span,\n              );\n            });\n\n            turnMessages = [];\n          }\n\n          // Complete turn span\n          if (event.type === 'turn.completed') {\n            const turnCompletedEvent = event;\n            if (currentTurnSpan) {\n              // Add response text if we captured any messages\n              if (recordOutputs && turnMessages.length > 0) {\n                currentTurnSpan.setAttributes({\n                  [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: turnMessages.join('\\n'),\n                });\n              }\n\n              // Add token usage\n              if (turnCompletedEvent.usage) {\n                setTokenUsageAttributes(\n                  currentTurnSpan,\n                  turnCompletedEvent.usage.input_tokens,\n                  turnCompletedEvent.usage.output_tokens,\n                  turnCompletedEvent.usage.cached_input_tokens,\n                  0,\n                );\n              }\n\n              currentTurnSpan.setStatus({ code: 1 });\n              currentTurnSpan.end();\n              currentTurnSpan = null;\n            }\n          }\n\n          // Handle turn failure\n          if (event.type === 'turn.failed') {\n            const turnFailedEvent = event;\n            if (currentTurnSpan) {\n              currentTurnSpan.setStatus({ code: 2, message: turnFailedEvent.error.message });\n              currentTurnSpan.end();\n              currentTurnSpan = null;\n            }\n          }\n\n          // Start item span - only for items that have a completion state\n          if (event.type === 'item.started') {\n            const itemEvent = event ;\n            const item = itemEvent.item;\n\n            // Only create spans for items that will have meaningful execution\n            // Skip reasoning items as they complete immediately\n            if (currentTurnSpan && item.type !== 'reasoning' && item.type !== 'agent_message') {\n              const itemSpan = core.withActiveSpan(currentTurnSpan, () => {\n                const itemName = getItemDisplayName(item);\n                const toolType = getToolType(item.type);\n                const spanDescription = getSpanDescription(item);\n\n                return core.startSpanManual(\n                  {\n                    name: spanDescription,\n                    op: 'gen_ai.execute_tool',\n                    attributes: {\n                      [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                      [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                      [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                      [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                      [GEN_AI_ATTRIBUTES.TOOL_NAME]: itemName,\n                      [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                    },\n                  },\n                  (span) => {\n                    if (recordInputs) {\n                      const itemInput = getItemInput(item);\n                      if (itemInput) {\n                        span.setAttributes({\n                          [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                        });\n                      }\n                    }\n                    return span;\n                  },\n                );\n              });\n\n              itemSpans.set(item.id, itemSpan);\n            }\n          }\n\n          // Complete item span\n          if (event.type === 'item.completed') {\n            const itemEvent = event ;\n            const item = itemEvent.item;\n\n            // For items with spans (command_execution, web_search, etc.)\n            const itemSpan = itemSpans.get(item.id);\n            if (itemSpan) {\n              // Update input with latest data (may have been updated since item.started)\n              if (recordInputs) {\n                const itemInput = getItemInput(item);\n                if (itemInput) {\n                  itemSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                  });\n                }\n              }\n\n              if (recordOutputs) {\n                const itemOutput = getItemOutput(item);\n                if (itemOutput) {\n                  itemSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]: itemOutput,\n                  });\n                }\n              }\n\n              // Check for error status - handle command execution exit codes\n              if (item.type === 'error') {\n                itemSpan.setStatus({ code: 2, message: item.message });\n              } else if (item.type === 'command_execution') {\n                // Check exit code - exit_code is optional and may be undefined while in progress\n                if (typeof item.exit_code === 'number' && item.exit_code !== 0) {\n                  itemSpan.setStatus({ code: 2, message: `Command failed with exit code ${item.exit_code}` });\n                } else if (item.status === 'failed') {\n                  itemSpan.setStatus({ code: 2, message: 'Command execution failed' });\n                } else {\n                  itemSpan.setStatus({ code: 1 });\n                }\n              } else if (('status' in item) && item.status === 'failed') {\n                itemSpan.setStatus({ code: 2, message: 'Tool execution failed' });\n              } else {\n                itemSpan.setStatus({ code: 1 });\n              }\n\n              itemSpan.end();\n              itemSpans.delete(item.id);\n            }\n\n            // Capture agent messages for response text\n            if (item.type === 'agent_message') {\n              turnMessages.push(item.text);\n            }\n          }\n\n          yield event;\n        }\n\n        agentSpan.setStatus({ code: 1 });\n      } catch (error) {\n        core.captureException(error, {\n          mechanism: {\n            type: SENTRY_ORIGIN,\n            handled: false,\n          },\n        });\n\n        agentSpan.setStatus({ code: 2, message: (error ).message });\n        throw error;\n      } finally {\n        // Clean up any remaining spans\n        if (currentTurnSpan && currentTurnSpan.isRecording()) {\n          currentTurnSpan.setStatus({ code: 1 });\n          currentTurnSpan.end();\n        }\n\n        for (const itemSpan of itemSpans.values()) {\n          if (itemSpan.isRecording()) {\n            itemSpan.setStatus({ code: 1 });\n            itemSpan.end();\n          }\n        }\n\n        agentSpan.end();\n      }\n    },\n  );\n}\n\n/**\n * Instruments a non-streamed turn (run) with Sentry spans\n */\nasync function instrumentNonStreamedTurn(\n  originalRun,\n  input,\n  turnOptions,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  return core.startSpanManual(\n    {\n      name: `invoke_agent ${agentName}`,\n      op: 'gen_ai.invoke_agent',\n      attributes: {\n        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n      },\n    },\n    async (agentSpan) => {\n      try {\n        const result = await core.withActiveSpan(agentSpan, async () => {\n          return await core.startSpanManual(\n            {\n              name: `chat codex`,\n              op: 'gen_ai.chat',\n              attributes: {\n                [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n              },\n            },\n            async (chatSpan) => {\n              const turn = await originalRun(input, turnOptions);\n\n              // Add response text\n              if (recordOutputs && turn.finalResponse) {\n                chatSpan.setAttributes({\n                  [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: turn.finalResponse,\n                });\n              }\n\n              // Note: run() doesn't provide usage information, only runStreamed() does via events\n\n              // Create spans for each item\n              for (const item of turn.items) {\n                await core.withActiveSpan(chatSpan, () => {\n                  const itemName = getItemDisplayName(item);\n                  const toolType = getToolType(item.type);\n                  const spanDescription = getSpanDescription(item);\n\n                  core.startSpan(\n                    {\n                      name: spanDescription,\n                      op: 'gen_ai.execute_tool',\n                      attributes: {\n                        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                        [GEN_AI_ATTRIBUTES.TOOL_NAME]: itemName,\n                        [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                      },\n                    },\n                    (itemSpan) => {\n                      if (recordInputs) {\n                        const itemInput = getItemInput(item);\n                        if (itemInput) {\n                          itemSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                          });\n                        }\n                      }\n\n                      if (recordOutputs) {\n                        const itemOutput = getItemOutput(item);\n                        if (itemOutput) {\n                          itemSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]: itemOutput,\n                          });\n                        }\n                      }\n\n                      // Check for error status\n                      if (item.type === 'error' || (('status' in item) && item.status === 'failed')) {\n                        itemSpan.setStatus({ code: 2, message: item.type === 'error' ? item.message : 'Tool execution failed' });\n                      } else {\n                        itemSpan.setStatus({ code: 1 });\n                      }\n                    },\n                  );\n                });\n              }\n\n              chatSpan.setStatus({ code: 1 });\n              return turn;\n            },\n          );\n        });\n\n        agentSpan.setStatus({ code: 1 });\n        return result;\n      } catch (error) {\n        core.captureException(error, {\n          mechanism: {\n            type: SENTRY_ORIGIN,\n            handled: false,\n          },\n        });\n\n        agentSpan.setStatus({ code: 2, message: (error ).message });\n        throw error;\n      }\n    },\n  );\n}\n\n/**\n * Wraps a Codex instance to add Sentry instrumentation to all threads\n */\nfunction instrumentCodexInstance(originalCodex, options = {}) {\n  const client = core.getClient();\n  const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n  const recordInputs = options.recordInputs ?? defaultPii;\n  const recordOutputs = options.recordOutputs ?? defaultPii;\n  const agentName = options.agentName ?? 'openai-codex';\n\n  // Wrap startThread\n  const originalStartThread = originalCodex.startThread.bind(originalCodex);\n  originalCodex.startThread = function (threadOptions) {\n    const thread = originalStartThread(threadOptions);\n    return instrumentThread(thread, agentName, recordInputs, recordOutputs);\n  };\n\n  // Wrap resumeThread\n  const originalResumeThread = originalCodex.resumeThread.bind(originalCodex);\n  originalCodex.resumeThread = function (id, threadOptions) {\n    const thread = originalResumeThread(id, threadOptions);\n    return instrumentThread(thread, agentName, recordInputs, recordOutputs);\n  };\n\n  return originalCodex;\n}\n\n/**\n * Wraps the Codex constructor to automatically instrument all instances\n */\nfunction patchCodexConstructor(\n  CodexConstructor,\n  instrumentationOptions = {},\n) {\n  return class InstrumentedCodex extends (CodexConstructor ) {\n    constructor(options) {\n      super(options);\n      return instrumentCodexInstance(this , instrumentationOptions);\n    }\n  } ;\n}\n\nexports.instrumentCodexInstance = instrumentCodexInstance;\nexports.patchCodexConstructor = patchCodexConstructor;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\");\n\nconst instrumentOpenAi = nodeCore.generateInstrumentOnce(\n  core.OPENAI_INTEGRATION_NAME,\n  () => new instrumentation.SentryOpenAiInstrumentation({}),\n);\n\nconst _openAiIntegration = ((options = {}) => {\n  return {\n    name: core.OPENAI_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentOpenAi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the OpenAI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments OpenAI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.openAIIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst openAIIntegration = core.defineIntegration(_openAiIntegration);\n\nexports.instrumentOpenAi = instrumentOpenAi;\nexports.openAIIntegration = openAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL29wZW5haS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1CO0FBQzVDLHdCQUF3QixtQkFBTyxDQUFDLHVOQUFzQjs7QUFFdEQ7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDs7QUFFQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL29wZW5haS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgaW5zdHJ1bWVudE9wZW5BaSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIGNvcmUuT1BFTkFJX0lOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb24uU2VudHJ5T3BlbkFpSW5zdHJ1bWVudGF0aW9uKHt9KSxcbik7XG5cbmNvbnN0IF9vcGVuQWlJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogY29yZS5PUEVOQUlfSU5URUdSQVRJT05fTkFNRSxcbiAgICBvcHRpb25zLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRPcGVuQWkoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgT3BlbkFJIFNESy5cbiAqXG4gKiBUaGlzIGludGVncmF0aW9uIGlzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBXaGVuIGNvbmZpZ3VyZWQsIHRoaXMgaW50ZWdyYXRpb24gYXV0b21hdGljYWxseSBpbnN0cnVtZW50cyBPcGVuQUkgU0RLIGNsaWVudCBpbnN0YW5jZXNcbiAqIHRvIGNhcHR1cmUgdGVsZW1ldHJ5IGRhdGEgZm9sbG93aW5nIE9wZW5UZWxlbWV0cnkgU2VtYW50aWMgQ29udmVudGlvbnMgZm9yIEdlbmVyYXRpdmUgQUkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm9wZW5BSUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAjIyBPcHRpb25zXG4gKlxuICogLSBgcmVjb3JkSW5wdXRzYDogV2hldGhlciB0byByZWNvcmQgcHJvbXB0IG1lc3NhZ2VzIChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKiAtIGByZWNvcmRPdXRwdXRzYDogV2hldGhlciB0byByZWNvcmQgcmVzcG9uc2UgdGV4dCAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICpcbiAqICMjIyBEZWZhdWx0IEJlaGF2aW9yXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGludGVncmF0aW9uIHdpbGw6XG4gKiAtIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgT05MWSBpZiBgc2VuZERlZmF1bHRQaWlgIGlzIHNldCB0byBgdHJ1ZWAgaW4geW91ciBTZW50cnkgY2xpZW50IG9wdGlvbnNcbiAqIC0gT3RoZXJ3aXNlLCBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIE5PVCByZWNvcmRlZCB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgd2hlbiBzZW5kRGVmYXVsdFBpaSBpcyBmYWxzZVxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkub3BlbkFJSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBOZXZlciByZWNvcmQgaW5wdXRzL291dHB1dHMgcmVnYXJkbGVzcyBvZiBzZW5kRGVmYXVsdFBpaVxuICogU2VudHJ5LmluaXQoe1xuICogICBzZW5kRGVmYXVsdFBpaTogdHJ1ZSxcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lm9wZW5BSUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogZmFsc2UsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiBmYWxzZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqL1xuY29uc3Qgb3BlbkFJSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9vcGVuQWlJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE9wZW5BaSA9IGluc3RydW1lbnRPcGVuQWk7XG5leHBvcnRzLm9wZW5BSUludGVncmF0aW9uID0gb3BlbkFJSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=4.0.0 <6'];\n\n/**\n * Determines telemetry recording settings.\n */\nfunction determineRecordingSettings(\n  integrationOptions,\n  defaultEnabled,\n) {\n  const recordInputs = integrationOptions?.recordInputs ?? defaultEnabled;\n  const recordOutputs = integrationOptions?.recordOutputs ?? defaultEnabled;\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * Sentry OpenAI instrumentation using OpenTelemetry.\n */\nclass SentryOpenAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-openai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('openai', supportedVersions, this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the OpenAI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.OpenAI;\n\n    const WrappedOpenAI = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const integration = client?.getIntegrationByName(core.OPENAI_INTEGRATION_NAME);\n      const integrationOpts = integration?.options;\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const { recordInputs, recordOutputs } = determineRecordingSettings(integrationOpts, defaultPii);\n\n      return core.instrumentOpenAiClient(instance , {\n        recordInputs,\n        recordOutputs,\n      });\n    } ;\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedOpenAI, Original);\n    Object.setPrototypeOf(WrappedOpenAI.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedOpenAI, key, descriptor);\n        }\n      }\n    }\n\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    try {\n      exports.OpenAI = WrappedOpenAI;\n    } catch (error) {\n      // If direct assignment fails, override the property descriptor\n      Object.defineProperty(exports, 'OpenAI', {\n        value: WrappedOpenAI,\n        writable: true,\n        configurable: true,\n        enumerable: true,\n      });\n    }\n\n    // Wrap the default export if it points to the original constructor\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    if (exports.default === Original) {\n      try {\n        exports.default = WrappedOpenAI;\n      } catch (error) {\n        // If direct assignment fails, override the property descriptor\n        Object.defineProperty(exports, 'default', {\n          value: WrappedOpenAI,\n          writable: true,\n          configurable: true,\n          enumerable: true,\n        });\n      }\n    }\n    return exports;\n  }\n}\n\nexports.SentryOpenAiInstrumentation = SentryOpenAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL29wZW5haS9pbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxvREFBb0QseUNBQXlDLDBDQUEwQyw4Q0FBOEMsb0RBQW9ELHFEQUFxRCxpQkFBaUI7O0FBRWhULHdCQUF3QixtQkFBTyxDQUFDLDRNQUFnQztBQUNoRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsOEJBQThCOztBQUU1QztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlOZXh0SnNWZXJzaW9uXCJdID0gXCIxNS41LjRcIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3Qgc3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49NC4wLjAgPDYnXTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRlbGVtZXRyeSByZWNvcmRpbmcgc2V0dGluZ3MuXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVJlY29yZGluZ1NldHRpbmdzKFxuICBpbnRlZ3JhdGlvbk9wdGlvbnMsXG4gIGRlZmF1bHRFbmFibGVkLFxuKSB7XG4gIGNvbnN0IHJlY29yZElucHV0cyA9IGludGVncmF0aW9uT3B0aW9ucz8ucmVjb3JkSW5wdXRzID8/IGRlZmF1bHRFbmFibGVkO1xuICBjb25zdCByZWNvcmRPdXRwdXRzID0gaW50ZWdyYXRpb25PcHRpb25zPy5yZWNvcmRPdXRwdXRzID8/IGRlZmF1bHRFbmFibGVkO1xuICByZXR1cm4geyByZWNvcmRJbnB1dHMsIHJlY29yZE91dHB1dHMgfTtcbn1cblxuLyoqXG4gKiBTZW50cnkgT3BlbkFJIGluc3RydW1lbnRhdGlvbiB1c2luZyBPcGVuVGVsZW1ldHJ5LlxuICovXG5jbGFzcyBTZW50cnlPcGVuQWlJbnN0cnVtZW50YXRpb24gZXh0ZW5kcyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uQmFzZSB7XG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1vcGVuYWknLCBjb3JlLlNES19WRVJTSU9OLCBjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnN0cnVtZW50YXRpb24gYnkgZGVmaW5pbmcgdGhlIG1vZHVsZXMgdG8gYmUgcGF0Y2hlZC5cbiAgICovXG4gICBpbml0KCkge1xuICAgIGNvbnN0IG1vZHVsZSA9IG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ29wZW5haScsIHN1cHBvcnRlZFZlcnNpb25zLCB0aGlzLl9wYXRjaC5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gbW9kdWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcmUgcGF0Y2ggbG9naWMgYXBwbHlpbmcgaW5zdHJ1bWVudGF0aW9uIHRvIHRoZSBPcGVuQUkgY2xpZW50IGNvbnN0cnVjdG9yLlxuICAgKi9cbiAgIF9wYXRjaChleHBvcnRzKSB7XG4gICAgY29uc3QgT3JpZ2luYWwgPSBleHBvcnRzLk9wZW5BSTtcblxuICAgIGNvbnN0IFdyYXBwZWRPcGVuQUkgPSBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gUmVmbGVjdC5jb25zdHJ1Y3QoT3JpZ2luYWwsIGFyZ3MpO1xuICAgICAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgICAgIGNvbnN0IGludGVncmF0aW9uID0gY2xpZW50Py5nZXRJbnRlZ3JhdGlvbkJ5TmFtZShjb3JlLk9QRU5BSV9JTlRFR1JBVElPTl9OQU1FKTtcbiAgICAgIGNvbnN0IGludGVncmF0aW9uT3B0cyA9IGludGVncmF0aW9uPy5vcHRpb25zO1xuICAgICAgY29uc3QgZGVmYXVsdFBpaSA9IEJvb2xlYW4oY2xpZW50Py5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkpO1xuXG4gICAgICBjb25zdCB7IHJlY29yZElucHV0cywgcmVjb3JkT3V0cHV0cyB9ID0gZGV0ZXJtaW5lUmVjb3JkaW5nU2V0dGluZ3MoaW50ZWdyYXRpb25PcHRzLCBkZWZhdWx0UGlpKTtcblxuICAgICAgcmV0dXJuIGNvcmUuaW5zdHJ1bWVudE9wZW5BaUNsaWVudChpbnN0YW5jZSAsIHtcbiAgICAgICAgcmVjb3JkSW5wdXRzLFxuICAgICAgICByZWNvcmRPdXRwdXRzLFxuICAgICAgfSk7XG4gICAgfSA7XG5cbiAgICAvLyBQcmVzZXJ2ZSBzdGF0aWMgYW5kIHByb3RvdHlwZSBjaGFpbnNcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoV3JhcHBlZE9wZW5BSSwgT3JpZ2luYWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkT3BlbkFJLnByb3RvdHlwZSwgT3JpZ2luYWwucHJvdG90eXBlKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9yaWdpbmFsKSkge1xuICAgICAgaWYgKCFbJ2xlbmd0aCcsICduYW1lJywgJ3Byb3RvdHlwZSddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT3JpZ2luYWwsIGtleSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRPcGVuQUksIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBPcGVuQUkgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICB0cnkge1xuICAgICAgZXhwb3J0cy5PcGVuQUkgPSBXcmFwcGVkT3BlbkFJO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiBkaXJlY3QgYXNzaWdubWVudCBmYWlscywgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3JcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnT3BlbkFJJywge1xuICAgICAgICB2YWx1ZTogV3JhcHBlZE9wZW5BSSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdyYXAgdGhlIGRlZmF1bHQgZXhwb3J0IGlmIGl0IHBvaW50cyB0byB0aGUgb3JpZ2luYWwgY29uc3RydWN0b3JcbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBPcGVuQUkgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICBpZiAoZXhwb3J0cy5kZWZhdWx0ID09PSBPcmlnaW5hbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXhwb3J0cy5kZWZhdWx0ID0gV3JhcHBlZE9wZW5BSTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElmIGRpcmVjdCBhc3NpZ25tZW50IGZhaWxzLCBvdmVycmlkZSB0aGUgcHJvcGVydHkgZGVzY3JpcHRvclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2RlZmF1bHQnLCB7XG4gICAgICAgICAgdmFsdWU6IFdyYXBwZWRPcGVuQUksXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfVxufVxuXG5leHBvcnRzLlNlbnRyeU9wZW5BaUluc3RydW1lbnRhdGlvbiA9IFNlbnRyeU9wZW5BaUluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDBCQUEwQixtQkFBTyxDQUFDLG9OQUFtQztBQUNyRSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wb3N0Z3Jlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uUGcgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tcGcnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQb3N0Z3Jlcyc7XG5cbmNvbnN0IGluc3RydW1lbnRQb3N0Z3JlcyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvblBnLlBnSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgICAgcmVxdWVzdEhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5wb3N0Z3JlcycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9wb3N0Z3Jlc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQb3N0Z3JlcygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbcGddKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BnKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcG9zdGdyZXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9wb3N0Z3Jlcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnBvc3RncmVzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBwb3N0Z3Jlc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcG9zdGdyZXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFBvc3RncmVzID0gaW5zdHJ1bWVudFBvc3RncmVzO1xuZXhwb3J0cy5wb3N0Z3Jlc0ludGVncmF0aW9uID0gcG9zdGdyZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvc3RncmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\n// Instrumentation for https://github.com/porsager/postgres\n\nconst INTEGRATION_NAME = 'PostgresJs';\nconst SUPPORTED_VERSIONS = ['>=3.0.0 <4'];\n\nconst instrumentPostgresJs = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (options) =>\n    new PostgresJsInstrumentation({\n      requireParentSpan: options?.requireParentSpan ?? true,\n      requestHook: options?.requestHook,\n    }),\n);\n\n/**\n * Instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n * This instrumentation captures postgresjs queries and their attributes,\n */\nclass PostgresJsInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config) {\n    super('sentry-postgres-js', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation.\n   */\n   init() {\n    const instrumentationModule = new instrumentation.InstrumentationNodeModuleDefinition('postgres', SUPPORTED_VERSIONS);\n\n    ['src', 'cf/src', 'cjs/src'].forEach(path => {\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/connection.js`,\n          ['*'],\n          this._patchConnection.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/query.js`,\n          SUPPORTED_VERSIONS,\n          this._patchQuery.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n    });\n\n    return [instrumentationModule];\n  }\n\n  /**\n   * Determines whether a span should be created based on the current context.\n   * If `requireParentSpan` is set to true in the configuration, a span will\n   * only be created if there is a parent span available.\n   */\n   _shouldCreateSpans() {\n    const config = this.getConfig();\n    const hasParentSpan = api.trace.getSpan(api.context.active()) !== undefined;\n    return hasParentSpan || !config.requireParentSpan;\n  }\n\n  /**\n   * Patches the reject method of the Query class to set the span status and end it\n   */\n   _patchReject(rejectTarget, span) {\n    return new Proxy(rejectTarget, {\n      apply: (\n        rejectTarget,\n        rejectThisArg,\n        rejectArgs\n\n,\n      ) => {\n        span.setStatus({\n          code: core.SPAN_STATUS_ERROR,\n          // This message is the error message from the rejectArgs, when available\n          // e.g \"relation 'User' does not exist\"\n          message: rejectArgs?.[0]?.message || 'unknown_error',\n        });\n\n        const result = Reflect.apply(rejectTarget, rejectThisArg, rejectArgs);\n\n        // This status code is PG error code, e.g. '42P01' for \"relation does not exist\"\n        // https://www.postgresql.org/docs/current/errcodes-appendix.html\n        span.setAttribute(semanticConventions.ATTR_DB_RESPONSE_STATUS_CODE, rejectArgs?.[0]?.code || 'Unknown error');\n        // This is the error type, e.g. 'PostgresError' for a Postgres error\n        span.setAttribute(semanticConventions.ATTR_ERROR_TYPE, rejectArgs?.[0]?.name || 'Unknown error');\n\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the resolve method of the Query class to end the span when the query is resolved.\n   */\n   _patchResolve(resolveTarget, span) {\n    return new Proxy(resolveTarget, {\n      apply: (resolveTarget, resolveThisArg, resolveArgs) => {\n        const result = Reflect.apply(resolveTarget, resolveThisArg, resolveArgs);\n        const sqlCommand = resolveArgs?.[0]?.command;\n\n        if (sqlCommand) {\n          // SQL command is only available when the query is resolved successfully\n          span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, sqlCommand);\n        }\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the Query class to instrument the handle method.\n   */\n   _patchQuery(moduleExports\n\n) {\n    moduleExports.Query.prototype.handle = new Proxy(moduleExports.Query.prototype.handle, {\n      apply: async (\n        handleTarget,\n        handleThisArg\n\n,\n        handleArgs,\n      ) => {\n        if (!this._shouldCreateSpans()) {\n          // If we don't need to create spans, just call the original method\n          return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n        }\n\n        const sanitizedSqlQuery = this._sanitizeSqlQuery(handleThisArg.strings?.[0]);\n\n        return core.startSpanManual(\n          {\n            name: sanitizedSqlQuery || 'postgresjs.query',\n            op: 'db',\n          },\n          (span) => {\n            const scope = core.getCurrentScope();\n            const postgresConnectionContext = scope.getScopeData().contexts['postgresjsConnection']\n\n;\n\n            nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n\n            const { requestHook } = this.getConfig();\n\n            if (requestHook) {\n              instrumentation.safeExecuteInTheMiddle(\n                () => requestHook(span, sanitizedSqlQuery, postgresConnectionContext),\n                error => {\n                  if (error) {\n                    core.debug.error(`Error in requestHook for ${INTEGRATION_NAME} integration:`, error);\n                  }\n                },\n              );\n            }\n\n            // ATTR_DB_NAMESPACE is used to indicate the database name and the schema name\n            // It's only the database name as we don't have the schema information\n            const databaseName = postgresConnectionContext?.ATTR_DB_NAMESPACE || '<unknown database>';\n            const databaseHost = postgresConnectionContext?.ATTR_SERVER_ADDRESS || '<unknown host>';\n            const databasePort = postgresConnectionContext?.ATTR_SERVER_PORT || '<unknown port>';\n\n            span.setAttribute(semanticConventions.ATTR_DB_SYSTEM_NAME, 'postgres');\n            span.setAttribute(semanticConventions.ATTR_DB_NAMESPACE, databaseName);\n            span.setAttribute(semanticConventions.ATTR_SERVER_ADDRESS, databaseHost);\n            span.setAttribute(semanticConventions.ATTR_SERVER_PORT, databasePort);\n            span.setAttribute(semanticConventions.ATTR_DB_QUERY_TEXT, sanitizedSqlQuery);\n\n            handleThisArg.resolve = this._patchResolve(handleThisArg.resolve, span);\n            handleThisArg.reject = this._patchReject(handleThisArg.reject, span);\n\n            try {\n              return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n            } catch (error) {\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n              });\n              span.end();\n              throw error; // Re-throw the error to propagate it\n            }\n          },\n        );\n      },\n    });\n\n    return moduleExports;\n  }\n\n  /**\n   * Patches the Connection class to set the database, host, and port attributes\n   * when a new connection is created.\n   */\n   _patchConnection(Connection) {\n    return new Proxy(Connection, {\n      apply: (connectionTarget, thisArg, connectionArgs) => {\n        const databaseName = connectionArgs[0]?.database || '<unknown database>';\n        const databaseHost = connectionArgs[0]?.host?.[0] || '<unknown host>';\n        const databasePort = connectionArgs[0]?.port?.[0] || '<unknown port>';\n\n        const scope = core.getCurrentScope();\n        scope.setContext('postgresjsConnection', {\n          ATTR_DB_NAMESPACE: databaseName,\n          ATTR_SERVER_ADDRESS: databaseHost,\n          ATTR_SERVER_PORT: databasePort,\n        });\n\n        return Reflect.apply(connectionTarget, thisArg, connectionArgs);\n      },\n    });\n  }\n\n  /**\n   * Sanitize SQL query as per the OTEL semantic conventions\n   * https://opentelemetry.io/docs/specs/semconv/database/database-spans/#sanitization-of-dbquerytext\n   */\n   _sanitizeSqlQuery(sqlQuery) {\n    if (!sqlQuery) {\n      return 'Unknown SQL Query';\n    }\n\n    return (\n      sqlQuery\n        .replace(/\\s+/g, ' ')\n        .trim() // Remove extra spaces including newlines and trim\n        .substring(0, 1024) // Truncate to 1024 characters\n        .replace(/--.*?(\\r?\\n|$)/g, '') // Single line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Multi-line comments\n        .replace(/;\\s*$/, '') // Remove trailing semicolons\n        .replace(/\\b\\d+\\b/g, '?') // Replace standalone numbers\n        // Collapse whitespace to a single space\n        .replace(/\\s+/g, ' ')\n        // Collapse IN and in clauses\n        // eg. IN (?, ?, ?, ?) to IN (?)\n        .replace(/\\bIN\\b\\s*\\(\\s*\\?(?:\\s*,\\s*\\?)*\\s*\\)/g, 'IN (?)')\n    );\n  }\n}\n\nconst _postgresJsIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgresJs();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresJsIntegration()],\n * });\n * ```\n */\n\nconst postgresJsIntegration = core.defineIntegration(_postgresJsIntegration);\n\nexports.PostgresJsInstrumentation = PostgresJsInstrumentation;\nexports.instrumentPostgresJs = instrumentPostgresJs;\nexports.postgresJsIntegration = postgresJsIntegration;\n//# sourceMappingURL=postgresjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@prisma+instrumentation@6.15.0_@opentelemetry+api@1.9.0/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nfunction isPrismaV6TracingHelper(helper) {\n  return !!helper && typeof helper === 'object' && 'dispatchEngineSpans' in helper;\n}\n\nfunction getPrismaTracingHelper() {\n  const prismaInstrumentationObject = (globalThis ).PRISMA_INSTRUMENTATION;\n  const prismaTracingHelper =\n    prismaInstrumentationObject &&\n    typeof prismaInstrumentationObject === 'object' &&\n    'helper' in prismaInstrumentationObject\n      ? prismaInstrumentationObject.helper\n      : undefined;\n\n  return prismaTracingHelper;\n}\n\nclass SentryPrismaInteropInstrumentation extends instrumentation.PrismaInstrumentation {\n   constructor() {\n    super();\n  }\n\n   enable() {\n    super.enable();\n\n    // The PrismaIntegration (super class) defines a global variable `global[\"PRISMA_INSTRUMENTATION\"]` when `enable()` is called. This global variable holds a \"TracingHelper\" which Prisma uses internally to create tracing data. It's their way of not depending on OTEL with their main package. The sucky thing is, prisma broke the interface of the tracing helper with the v6 major update. This means that if you use Prisma 5 with the v6 instrumentation (or vice versa) Prisma just blows up, because tries to call methods on the helper that no longer exist.\n    // Because we actually want to use the v6 instrumentation and not blow up in Prisma 5 user's faces, what we're doing here is backfilling the v5 method (`createEngineSpan`) with a noop so that no longer crashes when it attempts to call that function.\n    const prismaTracingHelper = getPrismaTracingHelper();\n\n    if (isPrismaV6TracingHelper(prismaTracingHelper)) {\n      // Inspired & adjusted from https://github.com/prisma/prisma/tree/5.22.0/packages/instrumentation\n      (prismaTracingHelper ).createEngineSpan = (\n        engineSpanEvent,\n      ) => {\n        const tracer = api.trace.getTracer('prismaV5Compatibility') ;\n\n        // Prisma v5 relies on being able to create spans with a specific span & trace ID\n        // this is no longer possible in OTEL v2, there is no public API to do this anymore\n        // So in order to kind of hack this possibility, we rely on the internal `_idGenerator` property\n        // This is used to generate the random IDs, and we overwrite this temporarily to generate static IDs\n        // This is flawed and may not work, e.g. if the code is bundled and the private property is renamed\n        // in such cases, these spans will not be captured and some Prisma spans will be missing\n        const initialIdGenerator = tracer._idGenerator;\n\n        if (!initialIdGenerator) {\n          core.consoleSandbox(() => {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[Sentry] Could not find _idGenerator on tracer, skipping Prisma v5 compatibility - some Prisma spans may be missing!',\n            );\n          });\n\n          return;\n        }\n\n        try {\n          engineSpanEvent.spans.forEach(engineSpan => {\n            const kind = engineSpanKindToOTELSpanKind(engineSpan.kind);\n\n            const parentSpanId = engineSpan.parent_span_id;\n            const spanId = engineSpan.span_id;\n            const traceId = engineSpan.trace_id;\n\n            const links = engineSpan.links?.map(link => {\n              return {\n                context: {\n                  traceId: link.trace_id,\n                  spanId: link.span_id,\n                  traceFlags: api.TraceFlags.SAMPLED,\n                },\n              };\n            });\n\n            const ctx = api.trace.setSpanContext(api.context.active(), {\n              traceId,\n              spanId: parentSpanId,\n              traceFlags: api.TraceFlags.SAMPLED,\n            });\n\n            api.context.with(ctx, () => {\n              const temporaryIdGenerator = {\n                generateTraceId: () => {\n                  return traceId;\n                },\n                generateSpanId: () => {\n                  return spanId;\n                },\n              };\n\n              tracer._idGenerator = temporaryIdGenerator;\n\n              const span = tracer.startSpan(engineSpan.name, {\n                kind,\n                links,\n                startTime: engineSpan.start_time,\n                attributes: engineSpan.attributes,\n              });\n\n              span.end(engineSpan.end_time);\n\n              tracer._idGenerator = initialIdGenerator;\n            });\n          });\n        } finally {\n          // Ensure we always restore this at the end, even if something errors\n          tracer._idGenerator = initialIdGenerator;\n        }\n      };\n    }\n  }\n}\n\nfunction engineSpanKindToOTELSpanKind(engineSpanKind) {\n  switch (engineSpanKind) {\n    case 'client':\n      return api.SpanKind.CLIENT;\n    case 'internal':\n    default: // Other span kinds aren't currently supported\n      return api.SpanKind.INTERNAL;\n  }\n}\n\nconst instrumentPrisma = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, _options => {\n  return new SentryPrismaInteropInstrumentation();\n});\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * NOTE: By default, this integration works with Prisma version 6.\n * To get performance instrumentation for other Prisma versions,\n * 1. Install the `@prisma/instrumentation` package with the desired version.\n * 1. Pass a `new PrismaInstrumentation()` instance as exported from `@prisma/instrumentation` to the `prismaInstrumentation` option of this integration:\n *\n *    ```js\n *    import { PrismaInstrumentation } from '@prisma/instrumentation'\n *\n *    Sentry.init({\n *      integrations: [\n *        prismaIntegration({\n *          // Override the default instrumentation that Sentry uses\n *          prismaInstrumentation: new PrismaInstrumentation()\n *        })\n *      ]\n *    })\n *    ```\n *\n *    The passed instrumentation instance will override the default instrumentation instance the integration would use, while the `prismaIntegration` will still ensure data compatibility for the various Prisma versions.\n * 1. Depending on your Prisma version (prior to version 6), add `previewFeatures = [\"tracing\"]` to the client generator block of your Prisma schema:\n *\n *    ```\n *    generator client {\n *      provider = \"prisma-client-js\"\n *      previewFeatures = [\"tracing\"]\n *    }\n *    ```\n */\nconst prismaIntegration = core.defineIntegration((_options) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n    setup(client) {\n      // If no tracing helper exists, we skip any work here\n      // this means that prisma is not being used\n      if (!getPrismaTracingHelper()) {\n        return;\n      }\n\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (spanJSON.description?.startsWith('prisma:')) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        // Make sure we use the query text as the span name, for ex. SELECT * FROM \"User\" WHERE \"id\" = $1\n        if (spanJSON.description === 'prisma:engine:db_query' && spanJSON.data['db.query.text']) {\n          span.updateName(spanJSON.data['db.query.text'] );\n        }\n\n        // In Prisma v5.22+, the `db.system` attribute is automatically set\n        // On older versions, this is missing, so we add it here\n        if (spanJSON.description === 'prisma:engine:db_query' && !spanJSON.data['db.system']) {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n});\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis = __webpack_require__(/*! @opentelemetry/instrumentation-redis */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_redisOptions.cachePrefixes ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = core.spanToJSON(span).data['net.peer.name'];\n  const networkPeerPort = core.spanToJSON(span).data['net.peer.port'];\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.IORedis`, () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedisModule = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.Redis`, () => {\n  return new instrumentationRedis.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedisModule();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3JlZGlzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLG1PQUF3QztBQUMvRSw2QkFBNkIsbUJBQU8sQ0FBQyw2TkFBc0M7QUFDM0UsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLDJPQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxpTUFBMkI7O0FBRXREOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrRkFBa0Y7QUFDM0c7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUEsNkRBQTZELGlCQUFpQjtBQUM5RTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQsaUVBQWlFLGlCQUFpQjtBQUNsRjtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QztBQUN4QyxHQUFHO0FBQ0gsSUFBSSxzQkFBc0I7QUFDMUI7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uSW9yZWRpcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1pb3JlZGlzJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb25SZWRpcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1yZWRpcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgcmVkaXNDYWNoZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3JlZGlzQ2FjaGUuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdSZWRpcyc7XG5cbmxldCBfcmVkaXNPcHRpb25zID0ge307XG5cbmNvbnN0IGNhY2hlUmVzcG9uc2VIb29rID0gKHNwYW4sIHJlZGlzQ29tbWFuZCwgY21kQXJncywgcmVzcG9uc2UpID0+IHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5yZWRpcycpO1xuXG4gIGNvbnN0IHNhZmVLZXkgPSByZWRpc0NhY2hlLmdldENhY2hlS2V5U2FmZWx5KHJlZGlzQ29tbWFuZCwgY21kQXJncyk7XG4gIGNvbnN0IGNhY2hlT3BlcmF0aW9uID0gcmVkaXNDYWNoZS5nZXRDYWNoZU9wZXJhdGlvbihyZWRpc0NvbW1hbmQpO1xuXG4gIGlmIChcbiAgICAhc2FmZUtleSB8fFxuICAgICFjYWNoZU9wZXJhdGlvbiB8fFxuICAgICFfcmVkaXNPcHRpb25zLmNhY2hlUHJlZml4ZXMgfHxcbiAgICAhcmVkaXNDYWNoZS5zaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwgc2FmZUtleSwgX3JlZGlzT3B0aW9ucy5jYWNoZVByZWZpeGVzKVxuICApIHtcbiAgICAvLyBub3QgcmVsZXZhbnQgZm9yIGNhY2hlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gb3RlbC9pb3JlZGlzIHNlZW1zIHRvIGJlIHVzaW5nIHRoZSBvbGQgc3RhbmRhcmQsIGFzIHRoZXJlIHdhcyBhIGNoYW5nZSB0byB0aG9zZSBwYXJhbXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LXNwZWNpZmljYXRpb24vaXNzdWVzLzMxOTlcbiAgLy8gV2UgYXJlIHVzaW5nIHBhcmFtcyBiYXNlZCBvbiB0aGUgZG9jczogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9hdHRyaWJ1dGVzLXJlZ2lzdHJ5L25ldHdvcmsvXG4gIGNvbnN0IG5ldHdvcmtQZWVyQWRkcmVzcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhWyduZXQucGVlci5uYW1lJ107XG4gIGNvbnN0IG5ldHdvcmtQZWVyUG9ydCA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhWyduZXQucGVlci5wb3J0J107XG4gIGlmIChuZXR3b3JrUGVlclBvcnQgJiYgbmV0d29ya1BlZXJBZGRyZXNzKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHsgJ25ldHdvcmsucGVlci5hZGRyZXNzJzogbmV0d29ya1BlZXJBZGRyZXNzLCAnbmV0d29yay5wZWVyLnBvcnQnOiBuZXR3b3JrUGVlclBvcnQgfSk7XG4gIH1cblxuICBjb25zdCBjYWNoZUl0ZW1TaXplID0gcmVkaXNDYWNoZS5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKTtcblxuICBpZiAoY2FjaGVJdGVtU2l6ZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSwgY2FjaGVJdGVtU2l6ZSk7XG4gIH1cblxuICBpZiAocmVkaXNDYWNoZS5pc0luQ29tbWFuZHMocmVkaXNDYWNoZS5HRVRfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgY2FjaGVJdGVtU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElULCBjYWNoZUl0ZW1TaXplID4gMCk7XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBjYWNoZU9wZXJhdGlvbixcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZXTogc2FmZUtleSxcbiAgfSk7XG5cbiAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc2FmZUtleS5qb2luKCcsICcpO1xuXG4gIHNwYW4udXBkYXRlTmFtZShjb3JlLnRydW5jYXRlKHNwYW5EZXNjcmlwdGlvbiwgMTAyNCkpO1xufTtcblxuY29uc3QgaW5zdHJ1bWVudElPUmVkaXMgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKGAke0lOVEVHUkFUSU9OX05BTUV9LklPUmVkaXNgLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uSW9yZWRpcy5JT1JlZGlzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICByZXNwb25zZUhvb2s6IGNhY2hlUmVzcG9uc2VIb29rLFxuICB9KTtcbn0pO1xuXG5jb25zdCBpbnN0cnVtZW50UmVkaXNNb2R1bGUgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKGAke0lOVEVHUkFUSU9OX05BTUV9LlJlZGlzYCwgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvblJlZGlzLlJlZGlzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICByZXNwb25zZUhvb2s6IGNhY2hlUmVzcG9uc2VIb29rLFxuICB9KTtcbn0pO1xuXG4vKiogVG8gYmUgYWJsZSB0byBwcmVsb2FkIGFsbCBSZWRpcyBPVGVsIGluc3RydW1lbnRhdGlvbnMgd2l0aCBqdXN0IG9uZSBJRCAoXCJSZWRpc1wiKSwgYWxsIHRoZSBpbnN0cnVtZW50YXRpb25zIGFyZSBnZW5lcmF0ZWQgaW4gdGhpcyBvbmUgZnVuY3Rpb24gICovXG5jb25zdCBpbnN0cnVtZW50UmVkaXMgPSBPYmplY3QuYXNzaWduKFxuICAoKSA9PiB7XG4gICAgaW5zdHJ1bWVudElPUmVkaXMoKTtcbiAgICBpbnN0cnVtZW50UmVkaXNNb2R1bGUoKTtcblxuICAgIC8vIHRvZG86IGltcGxlbWVudCB0aGVtIGdyYWR1YWxseVxuICAgIC8vIG5ldyBMZWdhY3lSZWRpc0luc3RydW1lbnRhdGlvbih7fSksXG4gIH0sXG4gIHsgaWQ6IElOVEVHUkFUSU9OX05BTUUgfSxcbik7XG5cbmNvbnN0IF9yZWRpc0ludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIF9yZWRpc09wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgaW5zdHJ1bWVudFJlZGlzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtyZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVkaXMpIGFuZFxuICogW2lvcmVkaXNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2lvcmVkaXMpIGxpYnJhcmllcy5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHJlZGlzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvcmVkaXMvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5yZWRpc0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcmVkaXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3JlZGlzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRSZWRpcyA9IGluc3RydW1lbnRSZWRpcztcbmV4cG9ydHMucmVkaXNJbnRlZ3JhdGlvbiA9IHJlZGlzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.23.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentTedious();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { description, data } = core.spanToJSON(span);\n          // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n          if (!description || data['db.system'] !== 'mssql') {\n            return;\n          }\n\n          const operation = description.split(' ')[0] || '';\n          if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3RlZGlvdXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsbU9BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsc0lBQXNJOztBQUV0STtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvQkFBb0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uVGVkaW91cyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IFRFRElVU19JTlNUUlVNRU5URURfTUVUSE9EUyA9IG5ldyBTZXQoW1xuICAnY2FsbFByb2NlZHVyZScsXG4gICdleGVjU3FsJyxcbiAgJ2V4ZWNTcWxCYXRjaCcsXG4gICdleGVjQnVsa0xvYWQnLFxuICAncHJlcGFyZScsXG4gICdleGVjdXRlJyxcbl0pO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1RlZGlvdXMnO1xuXG5jb25zdCBpbnN0cnVtZW50VGVkaW91cyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvblRlZGlvdXMuVGVkaW91c0luc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfdGVkaW91c0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudFRlZGlvdXMoKTtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjayA9IG5vZGVDb3JlLmluc3RydW1lbnRXaGVuV3JhcHBlZChpbnN0cnVtZW50YXRpb24pO1xuICAgIH0sXG5cbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaz8uKCgpID0+XG4gICAgICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICAgICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgZGF0YSB9ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICAgIC8vIFRlZGl1cyBpbnRlZ3JhdGlvbiBhbHdheXMgc2V0IGEgc3BhbiBuYW1lIGFuZCBgZGIuc3lzdGVtYCBhdHRyaWJ1dGUgdG8gYG1zc3FsYC5cbiAgICAgICAgICBpZiAoIWRlc2NyaXB0aW9uIHx8IGRhdGFbJ2RiLnN5c3RlbSddICE9PSAnbXNzcWwnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gZGVzY3JpcHRpb24uc3BsaXQoJyAnKVswXSB8fCAnJztcbiAgICAgICAgICBpZiAoVEVESVVTX0lOU1RSVU1FTlRFRF9NRVRIT0RTLmhhcyhvcGVyYXRpb24pKSB7XG4gICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnRlZGlvdXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3RlZGlvdXNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RlZGlvdXMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2B0ZWRpb3VzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvdGVkaW91cy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnRlZGlvdXNJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHRlZGlvdXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3RlZGlvdXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFRlZGlvdXMgPSBpbnN0cnVtZW50VGVkaW91cztcbmV4cG9ydHMudGVkaW91c0ludGVncmF0aW9uID0gdGVkaW91c0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVkaW91cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ZlcmNlbGFpL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1ZlcmNlbEFJJztcblxuZXhwb3J0cy5JTlRFR1JBVElPTl9OQU1FID0gSU5URUdSQVRJT05fTkFNRTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\");\n\nconst instrumentVercelAi = nodeCore.generateInstrumentOnce(constants.INTEGRATION_NAME, () => new instrumentation.SentryVercelAiInstrumentation({}));\n\n/**\n * Determines if the integration should be forced based on environment and package availability.\n * Returns true if the 'ai' package is available.\n */\nfunction shouldForceIntegration(client) {\n  const modules = client.getIntegrationByName('Modules');\n  return !!modules?.getModules?.()?.ai;\n}\n\nconst _vercelAIIntegration = ((options = {}) => {\n  let instrumentation;\n\n  return {\n    name: constants.INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentation = instrumentVercelAi();\n    },\n    afterAllSetup(client) {\n      // Auto-detect if we should force the integration when running with 'ai' package available\n      // Note that this can only be detected if the 'Modules' integration is available, and running in CJS mode\n      const shouldForce = options.force ?? shouldForceIntegration(client);\n\n      if (shouldForce) {\n        core.addVercelAiProcessors(client);\n      } else {\n        instrumentation?.callWhenPatched(() => core.addVercelAiProcessors(client));\n      }\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n * This integration is not enabled by default, you need to manually add it.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * This integration adds tracing support to all `ai` function calls.\n * You need to opt-in to collecting spans for a specific call,\n * you can do so by setting `experimental_telemetry.isEnabled` to `true` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: true },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nconst vercelAIIntegration = core.defineIntegration(_vercelAIIntegration);\n\nexports.instrumentVercelAi = instrumentVercelAi;\nexports.vercelAIIntegration = vercelAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ZlcmNlbGFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMsNk1BQWdCO0FBQzFDLHdCQUF3QixtQkFBTyxDQUFDLHlOQUFzQjs7QUFFdEQsaUpBQWlKOztBQUVqSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwwREFBMEQ7QUFDeEYsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy92ZXJjZWxhaS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMuanMnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IGluc3RydW1lbnRWZXJjZWxBaSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoY29uc3RhbnRzLklOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb24uU2VudHJ5VmVyY2VsQWlJbnN0cnVtZW50YXRpb24oe30pKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnRlZ3JhdGlvbiBzaG91bGQgYmUgZm9yY2VkIGJhc2VkIG9uIGVudmlyb25tZW50IGFuZCBwYWNrYWdlIGF2YWlsYWJpbGl0eS5cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgJ2FpJyBwYWNrYWdlIGlzIGF2YWlsYWJsZS5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkRm9yY2VJbnRlZ3JhdGlvbihjbGllbnQpIHtcbiAgY29uc3QgbW9kdWxlcyA9IGNsaWVudC5nZXRJbnRlZ3JhdGlvbkJ5TmFtZSgnTW9kdWxlcycpO1xuICByZXR1cm4gISFtb2R1bGVzPy5nZXRNb2R1bGVzPy4oKT8uYWk7XG59XG5cbmNvbnN0IF92ZXJjZWxBSUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbjtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IGNvbnN0YW50cy5JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudFZlcmNlbEFpKCk7XG4gICAgfSxcbiAgICBhZnRlckFsbFNldHVwKGNsaWVudCkge1xuICAgICAgLy8gQXV0by1kZXRlY3QgaWYgd2Ugc2hvdWxkIGZvcmNlIHRoZSBpbnRlZ3JhdGlvbiB3aGVuIHJ1bm5pbmcgd2l0aCAnYWknIHBhY2thZ2UgYXZhaWxhYmxlXG4gICAgICAvLyBOb3RlIHRoYXQgdGhpcyBjYW4gb25seSBiZSBkZXRlY3RlZCBpZiB0aGUgJ01vZHVsZXMnIGludGVncmF0aW9uIGlzIGF2YWlsYWJsZSwgYW5kIHJ1bm5pbmcgaW4gQ0pTIG1vZGVcbiAgICAgIGNvbnN0IHNob3VsZEZvcmNlID0gb3B0aW9ucy5mb3JjZSA/PyBzaG91bGRGb3JjZUludGVncmF0aW9uKGNsaWVudCk7XG5cbiAgICAgIGlmIChzaG91bGRGb3JjZSkge1xuICAgICAgICBjb3JlLmFkZFZlcmNlbEFpUHJvY2Vzc29ycyhjbGllbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uPy5jYWxsV2hlblBhdGNoZWQoKCkgPT4gY29yZS5hZGRWZXJjZWxBaVByb2Nlc3NvcnMoY2xpZW50KSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFthaV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYWkpIGxpYnJhcnkuXG4gKiBUaGlzIGludGVncmF0aW9uIGlzIG5vdCBlbmFibGVkIGJ5IGRlZmF1bHQsIHlvdSBuZWVkIHRvIG1hbnVhbGx5IGFkZCBpdC5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGFpYCBkb2N1bWVudGF0aW9uXShodHRwczovL3Nkay52ZXJjZWwuYWkvZG9jcy9haS1zZGstY29yZS90ZWxlbWV0cnkpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnZlcmNlbEFJSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gYWRkcyB0cmFjaW5nIHN1cHBvcnQgdG8gYWxsIGBhaWAgZnVuY3Rpb24gY2FsbHMuXG4gKiBZb3UgbmVlZCB0byBvcHQtaW4gdG8gY29sbGVjdGluZyBzcGFucyBmb3IgYSBzcGVjaWZpYyBjYWxsLFxuICogeW91IGNhbiBkbyBzbyBieSBzZXR0aW5nIGBleHBlcmltZW50YWxfdGVsZW1ldHJ5LmlzRW5hYmxlZGAgdG8gYHRydWVgIGluIHRoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZW5lcmF0ZVRleHQoe1xuICogICBtb2RlbDogb3BlbmFpKCdncHQtNC10dXJibycpLFxuICogICBleHBlcmltZW50YWxfdGVsZW1ldHJ5OiB7IGlzRW5hYmxlZDogdHJ1ZSB9LFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBjb2xsZWN0IGlucHV0cyBhbmQgb3V0cHV0cyBmb3IgYSBzcGVjaWZpYyBjYWxsLCB5b3UgbXVzdCBzcGVjaWZpY2FsbHkgb3B0LWluIHRvIGVhY2hcbiAqIGZ1bmN0aW9uIGNhbGwgYnkgc2V0dGluZyBgZXhwZXJpbWVudGFsX3RlbGVtZXRyeS5yZWNvcmRJbnB1dHNgIGFuZCBgZXhwZXJpbWVudGFsX3RlbGVtZXRyeS5yZWNvcmRPdXRwdXRzYFxuICogdG8gYHRydWVgLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRlVGV4dCh7XG4gKiAgbW9kZWw6IG9wZW5haSgnZ3B0LTQtdHVyYm8nKSxcbiAqICBleHBlcmltZW50YWxfdGVsZW1ldHJ5OiB7IGlzRW5hYmxlZDogdHJ1ZSwgcmVjb3JkSW5wdXRzOiB0cnVlLCByZWNvcmRPdXRwdXRzOiB0cnVlIH0sXG4gKiB9KTtcbiAqL1xuY29uc3QgdmVyY2VsQUlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3ZlcmNlbEFJSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRWZXJjZWxBaSA9IGluc3RydW1lbnRWZXJjZWxBaTtcbmV4cG9ydHMudmVyY2VsQUlJbnRlZ3JhdGlvbiA9IHZlcmNlbEFJSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js ***!
  \**************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\n\n// List of patched methods\n// From: https://sdk.vercel.ai/docs/ai-sdk-core/telemetry#collected-data\nconst INSTRUMENTED_METHODS = [\n  'generateText',\n  'streamText',\n  'generateObject',\n  'streamObject',\n  'embed',\n  'embedMany',\n] ;\n\nfunction isToolError(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const candidate = obj ;\n  return (\n    'type' in candidate &&\n    'error' in candidate &&\n    'toolName' in candidate &&\n    'toolCallId' in candidate &&\n    candidate.type === 'tool-error' &&\n    candidate.error instanceof Error\n  );\n}\n\n/**\n * Check for tool errors in the result and capture them\n * Tool errors are not rejected in Vercel V5, it is added as metadata to the result content\n */\nfunction checkResultForToolErrors(result) {\n  if (typeof result !== 'object' || result === null || !('content' in result)) {\n    return;\n  }\n\n  const resultObj = result ;\n  if (!Array.isArray(resultObj.content)) {\n    return;\n  }\n\n  for (const item of resultObj.content) {\n    if (isToolError(item)) {\n      // Try to get the span associated with this tool call ID\n      const associatedSpan = core._INTERNAL_getSpanForToolCallId(item.toolCallId) ;\n\n      if (associatedSpan) {\n        // We have the span, so link the error using span and trace IDs from the span\n        const spanContext = associatedSpan.spanContext();\n\n        core.withScope(scope => {\n          // Set the span and trace context for proper linking\n          scope.setContext('trace', {\n            trace_id: spanContext.traceId,\n            span_id: spanContext.spanId,\n          });\n\n          scope.setTag('vercel.ai.tool.name', item.toolName);\n          scope.setTag('vercel.ai.tool.callId', item.toolCallId);\n\n          scope.setLevel('error');\n\n          core.captureException(item.error, {\n            mechanism: {\n              type: 'auto.vercelai.otel',\n              handled: false,\n            },\n          });\n        });\n\n        // Clean up the span mapping since we've processed this tool error\n        // We won't get multiple { type: 'tool-error' } parts for the same toolCallId.\n        core._INTERNAL_cleanupToolCallSpan(item.toolCallId);\n      } else {\n        // Fallback: capture without span linking\n        core.withScope(scope => {\n          scope.setTag('vercel.ai.tool.name', item.toolName);\n          scope.setTag('vercel.ai.tool.callId', item.toolCallId);\n          scope.setLevel('error');\n\n          core.captureException(item.error, {\n            mechanism: {\n              type: 'auto.vercelai.otel',\n              handled: false,\n            },\n          });\n        });\n      }\n    }\n  }\n}\n\n/**\n * Determines whether to record inputs and outputs for Vercel AI telemetry based on the configuration hierarchy.\n *\n * The order of precedence is:\n * 1. The vercel ai integration options\n * 2. The experimental_telemetry options in the vercel ai method calls\n * 3. When telemetry is explicitly enabled (isEnabled: true), default to recording\n * 4. Otherwise, use the sendDefaultPii option from client options\n */\nfunction determineRecordingSettings(\n  integrationRecordingOptions,\n  methodTelemetryOptions,\n  telemetryExplicitlyEnabled,\n  defaultRecordingEnabled,\n) {\n  const recordInputs =\n    integrationRecordingOptions?.recordInputs !== undefined\n      ? integrationRecordingOptions.recordInputs\n      : methodTelemetryOptions.recordInputs !== undefined\n        ? methodTelemetryOptions.recordInputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  const recordOutputs =\n    integrationRecordingOptions?.recordOutputs !== undefined\n      ? integrationRecordingOptions.recordOutputs\n      : methodTelemetryOptions.recordOutputs !== undefined\n        ? methodTelemetryOptions.recordOutputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * This detects is added by the Sentry Vercel AI Integration to detect if the integration should\n * be enabled.\n *\n * It also patches the `ai` module to enable Vercel AI telemetry automatically for all methods.\n */\nclass SentryVercelAiInstrumentation extends instrumentation.InstrumentationBase {\n   __init() {this._isPatched = false;}\n   __init2() {this._callbacks = [];}\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-vercel-ai', core.SDK_VERSION, config);SentryVercelAiInstrumentation.prototype.__init.call(this);SentryVercelAiInstrumentation.prototype.__init2.call(this);  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('ai', ['>=3.0.0 <6'], this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Call the provided callback when the module is patched.\n   * If it has already been patched, the callback will be called immediately.\n   */\n   callWhenPatched(callback) {\n    if (this._isPatched) {\n      callback();\n    } else {\n      this._callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Patches module exports to enable Vercel AI telemetry.\n   */\n   _patch(moduleExports) {\n    this._isPatched = true;\n\n    this._callbacks.forEach(callback => callback());\n    this._callbacks = [];\n\n    const generatePatch = (originalMethod) => {\n      return new Proxy(originalMethod, {\n        apply: (target, thisArg, args) => {\n          const existingExperimentalTelemetry = args[0].experimental_telemetry || {};\n          const isEnabled = existingExperimentalTelemetry.isEnabled;\n\n          const client = core.getClient();\n          const integration = client?.getIntegrationByName(constants.INTEGRATION_NAME);\n          const integrationOptions = integration?.options;\n          const shouldRecordInputsAndOutputs = integration ? Boolean(client?.getOptions().sendDefaultPii) : false;\n\n          const { recordInputs, recordOutputs } = determineRecordingSettings(\n            integrationOptions,\n            existingExperimentalTelemetry,\n            isEnabled,\n            shouldRecordInputsAndOutputs,\n          );\n\n          args[0].experimental_telemetry = {\n            ...existingExperimentalTelemetry,\n            isEnabled: isEnabled !== undefined ? isEnabled : true,\n            recordInputs,\n            recordOutputs,\n          };\n\n          return core.handleCallbackErrors(\n            () => Reflect.apply(target, thisArg, args),\n            error => {\n              // This error bubbles up to unhandledrejection handler (if not handled before),\n              // where we do not know the active span anymore\n              // So to circumvent this, we set the active span on the error object\n              // which is picked up by the unhandledrejection handler\n              if (error && typeof error === 'object') {\n                core.addNonEnumerableProperty(error, '_sentry_active_span', core.getActiveSpan());\n              }\n            },\n            () => {},\n            result => {\n              checkResultForToolErrors(result);\n            },\n          );\n        },\n      });\n    };\n\n    // Is this an ESM module?\n    // https://tc39.es/ecma262/#sec-module-namespace-objects\n    if (Object.prototype.toString.call(moduleExports) === '[object Module]') {\n      // In ESM we take the usual route and just replace the exports we want to instrument\n      for (const method of INSTRUMENTED_METHODS) {\n        moduleExports[method] = generatePatch(moduleExports[method]);\n      }\n\n      return moduleExports;\n    } else {\n      // In CJS we can't replace the exports in the original module because they\n      // don't have setters, so we create a new object with the same properties\n      const patchedModuleExports = INSTRUMENTED_METHODS.reduce((acc, curr) => {\n        acc[curr] = generatePatch(moduleExports[curr]);\n        return acc;\n      }, {} );\n\n      return { ...moduleExports, ...patchedModuleExports };\n    }\n  }\n}\n\nexports.SentryVercelAiInstrumentation = SentryVercelAiInstrumentation;\nexports.determineRecordingSettings = determineRecordingSettings;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst http = __webpack_require__(/*! ../integrations/http.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  const nodeCoreIntegrations = nodeCore.getDefaultIntegrations();\n\n  // Filter out the node-core HTTP and NodeFetch integrations and replace them with Node SDK's composite versions\n  return nodeCoreIntegrations\n    .filter(integration => integration.name !== 'Http' && integration.name !== 'NodeFetch')\n    .concat(http.httpIntegration(), nodeFetch.nativeNodeFetchIntegration());\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(core.hasSpansEnabled(options) ? index.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Internal initialization function.\n */\nfunction _init(\n  options = {},\n  getDefaultIntegrationsImpl,\n) {\n  core.applySdkMetadata(options, 'node');\n\n  const client = nodeCore.init({\n    ...options,\n    // Only use Node SDK defaults if none provided\n    defaultIntegrations: options.defaultIntegrations ?? getDefaultIntegrationsImpl(options),\n  });\n\n  // Add Node SDK specific OpenTelemetry setup\n  if (client && !options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client, {\n      spanProcessors: options.openTelemetrySpanProcessors,\n    });\n    nodeCore.validateOpenTelemetrySetup();\n  }\n\n  return client;\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsMk9BQW1CO0FBQzVDLGFBQWEsbUJBQU8sQ0FBQyxnTUFBeUI7QUFDOUMsa0JBQWtCLG1CQUFPLENBQUMsNE1BQStCO0FBQ3pELGNBQWMsbUJBQU8sQ0FBQyxrTkFBa0M7QUFDeEQsaUJBQWlCLG1CQUFPLENBQUMsaUxBQWU7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBOztBQUVBLDhCQUE4QjtBQUM5QixnREFBZ0Q7QUFDaEQsWUFBWTtBQUNaLHNDQUFzQztBQUN0QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9zZGsvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvaHR0cC5qcycpO1xuY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL25vZGUtZmV0Y2guanMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMnKTtcbmNvbnN0IGluaXRPdGVsID0gcmVxdWlyZSgnLi9pbml0T3RlbC5qcycpO1xuXG4vKipcbiAqIEdldCBkZWZhdWx0IGludGVncmF0aW9ucywgZXhjbHVkaW5nIHBlcmZvcm1hbmNlLlxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0SW50ZWdyYXRpb25zV2l0aG91dFBlcmZvcm1hbmNlKCkge1xuICBjb25zdCBub2RlQ29yZUludGVncmF0aW9ucyA9IG5vZGVDb3JlLmdldERlZmF1bHRJbnRlZ3JhdGlvbnMoKTtcblxuICAvLyBGaWx0ZXIgb3V0IHRoZSBub2RlLWNvcmUgSFRUUCBhbmQgTm9kZUZldGNoIGludGVncmF0aW9ucyBhbmQgcmVwbGFjZSB0aGVtIHdpdGggTm9kZSBTREsncyBjb21wb3NpdGUgdmVyc2lvbnNcbiAgcmV0dXJuIG5vZGVDb3JlSW50ZWdyYXRpb25zXG4gICAgLmZpbHRlcihpbnRlZ3JhdGlvbiA9PiBpbnRlZ3JhdGlvbi5uYW1lICE9PSAnSHR0cCcgJiYgaW50ZWdyYXRpb24ubmFtZSAhPT0gJ05vZGVGZXRjaCcpXG4gICAgLmNvbmNhdChodHRwLmh0dHBJbnRlZ3JhdGlvbigpLCBub2RlRmV0Y2gubmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24oKSk7XG59XG5cbi8qKiBHZXQgdGhlIGRlZmF1bHQgaW50ZWdyYXRpb25zIGZvciB0aGUgTm9kZSBTREsuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0SW50ZWdyYXRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIFtcbiAgICAuLi5nZXREZWZhdWx0SW50ZWdyYXRpb25zV2l0aG91dFBlcmZvcm1hbmNlKCksXG4gICAgLy8gV2Ugb25seSBhZGQgcGVyZm9ybWFuY2UgaW50ZWdyYXRpb25zIGlmIHRyYWNpbmcgaXMgZW5hYmxlZFxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1lYW5zIHRoYXQgd2l0aG91dCB0cmFjaW5nIGVuYWJsZWQsIGUuZy4gYGV4cHJlc3NJbnRlZ3JhdGlvbigpYCB3aWxsIG5vdCBiZSBhZGRlZFxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBnZW5lcmFsbHkgcmVxdWVzdCBpc29sYXRpb24gd2lsbCB3b3JrIChiZWNhdXNlIHRoYXQgaXMgZG9uZSBieSBodHRwSW50ZWdyYXRpb24pXG4gICAgLy8gQnV0IGB0cmFuc2FjdGlvbk5hbWVgIHdpbGwgbm90IGJlIHNldCBhdXRvbWF0aWNhbGx5XG4gICAgLi4uKGNvcmUuaGFzU3BhbnNFbmFibGVkKG9wdGlvbnMpID8gaW5kZXguZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zKCkgOiBbXSksXG4gIF07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBTZW50cnkgZm9yIE5vZGUuXG4gKi9cbmZ1bmN0aW9uIGluaXQob3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBfaW5pdChvcHRpb25zLCBnZXREZWZhdWx0SW50ZWdyYXRpb25zKTtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gX2luaXQoXG4gIG9wdGlvbnMgPSB7fSxcbiAgZ2V0RGVmYXVsdEludGVncmF0aW9uc0ltcGwsXG4pIHtcbiAgY29yZS5hcHBseVNka01ldGFkYXRhKG9wdGlvbnMsICdub2RlJyk7XG5cbiAgY29uc3QgY2xpZW50ID0gbm9kZUNvcmUuaW5pdCh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICAvLyBPbmx5IHVzZSBOb2RlIFNESyBkZWZhdWx0cyBpZiBub25lIHByb3ZpZGVkXG4gICAgZGVmYXVsdEludGVncmF0aW9uczogb3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zID8/IGdldERlZmF1bHRJbnRlZ3JhdGlvbnNJbXBsKG9wdGlvbnMpLFxuICB9KTtcblxuICAvLyBBZGQgTm9kZSBTREsgc3BlY2lmaWMgT3BlblRlbGVtZXRyeSBzZXR1cFxuICBpZiAoY2xpZW50ICYmICFvcHRpb25zLnNraXBPcGVuVGVsZW1ldHJ5U2V0dXApIHtcbiAgICBpbml0T3RlbC5pbml0T3BlblRlbGVtZXRyeShjbGllbnQsIHtcbiAgICAgIHNwYW5Qcm9jZXNzb3JzOiBvcHRpb25zLm9wZW5UZWxlbWV0cnlTcGFuUHJvY2Vzc29ycyxcbiAgICB9KTtcbiAgICBub2RlQ29yZS52YWxpZGF0ZU9wZW5UZWxlbWV0cnlTZXR1cCgpO1xuICB9XG5cbiAgcmV0dXJuIGNsaWVudDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFNlbnRyeSBmb3IgTm9kZSwgd2l0aG91dCBhbnkgaW50ZWdyYXRpb25zIGFkZGVkIGJ5IGRlZmF1bHQuXG4gKi9cbmZ1bmN0aW9uIGluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucyhvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIF9pbml0KG9wdGlvbnMsICgpID0+IFtdKTtcbn1cblxuZXhwb3J0cy5nZXREZWZhdWx0SW50ZWdyYXRpb25zID0gZ2V0RGVmYXVsdEludGVncmF0aW9ucztcbmV4cG9ydHMuZ2V0RGVmYXVsdEludGVncmF0aW9uc1dpdGhvdXRQZXJmb3JtYW5jZSA9IGdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2U7XG5leHBvcnRzLmluaXQgPSBpbml0O1xuZXhwb3J0cy5pbml0V2l0aG91dERlZmF1bHRJbnRlZ3JhdGlvbnMgPSBpbml0V2l0aG91dERlZmF1bHRJbnRlZ3JhdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\n\n// About 277h - this must fit into new Array(len)!\nconst MAX_MAX_SPAN_WAIT_DURATION = 1000000;\n\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client, options = {}) {\n  if (client.getOptions().debug) {\n    nodeCore.setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client, options);\n  client.traceProvider = provider;\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.debug.enable();\n  }\n\n  nodeCore.initializeEsmLoader();\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.debug.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  // We match exact matches of instrumentation, but also match prefixes, e.g. \"Fastify.v5\" will match \"Fastify\"\n  return instruments.filter(instrumentation => {\n    const id = instrumentation.id;\n    return integrationNames.some(integrationName => id === integrationName || id.startsWith(`${integrationName}.`));\n  });\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client, options = {}) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: resources.defaultResource().merge(\n      resources.resourceFromAttributes({\n        [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n        [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n      }),\n    ),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new opentelemetry.SentrySpanProcessor({\n        timeout: _clampSpanProcessorTimeout(client.getOptions().maxSpanWaitDuration),\n      }),\n      ...(options.spanProcessors || []),\n    ],\n  });\n\n  // Register as globals\n  api.trace.setGlobalTracerProvider(provider);\n  api.propagation.setGlobalPropagator(new opentelemetry.SentryPropagator());\n  api.context.setGlobalContextManager(new nodeCore.SentryContextManager());\n\n  return provider;\n}\n\n/** Just exported for tests. */\nfunction _clampSpanProcessorTimeout(maxSpanWaitDuration) {\n  if (maxSpanWaitDuration == null) {\n    return undefined;\n  }\n\n  // We guard for a max. value here, because we create an array with this length\n  // So if this value is too large, this would fail\n  if (maxSpanWaitDuration > MAX_MAX_SPAN_WAIT_DURATION) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(`\\`maxSpanWaitDuration\\` is too high, using the maximum value of ${MAX_MAX_SPAN_WAIT_DURATION}`);\n    return MAX_MAX_SPAN_WAIT_DURATION;\n  } else if (maxSpanWaitDuration <= 0 || Number.isNaN(maxSpanWaitDuration)) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('`maxSpanWaitDuration` must be a positive number, using default value instead.');\n    return undefined;\n  }\n\n  return maxSpanWaitDuration;\n}\n\nexports._clampSpanProcessorTimeout = _clampSpanProcessorTimeout;\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbml0T3RlbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsNklBQW9CO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLHdMQUEwQjtBQUNwRCxxQkFBcUIsbUJBQU8sQ0FBQyx1TUFBK0I7QUFDNUQsNEJBQTRCLG1CQUFPLENBQUMsaU1BQXFDO0FBQ3pFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQywyT0FBbUI7QUFDNUMsc0JBQXNCLG1CQUFPLENBQUMsbVBBQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLG9MQUFtQjtBQUM5QyxjQUFjLG1CQUFPLENBQUMsa05BQWtDOztBQUV4RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsVUFBVSxRQUFROztBQUVsQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLE9BQU87QUFDbEQ7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGLGdCQUFnQjtBQUMvRyxHQUFHO0FBQ0g7O0FBRUE7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUZBQXlGLDJCQUEyQjtBQUNwSDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEMseUJBQXlCO0FBQ3pCLDRCQUE0QjtBQUM1QixpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2luaXRPdGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcbmNvbnN0IHJlc291cmNlcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3Jlc291cmNlcycpO1xuY29uc3Qgc2RrVHJhY2VCYXNlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UnKTtcbmNvbnN0IHNlbWFudGljQ29udmVudGlvbnMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy90cmFjaW5nL2luZGV4LmpzJyk7XG5cbi8vIEFib3V0IDI3N2ggLSB0aGlzIG11c3QgZml0IGludG8gbmV3IEFycmF5KGxlbikhXG5jb25zdCBNQVhfTUFYX1NQQU5fV0FJVF9EVVJBVElPTiA9IDEwMDAwMDA7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBPcGVuVGVsZW1ldHJ5IGZvciBOb2RlLlxuICovXG5mdW5jdGlvbiBpbml0T3BlblRlbGVtZXRyeShjbGllbnQsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoY2xpZW50LmdldE9wdGlvbnMoKS5kZWJ1Zykge1xuICAgIG5vZGVDb3JlLnNldHVwT3BlblRlbGVtZXRyeUxvZ2dlcigpO1xuICB9XG5cbiAgY29uc3QgcHJvdmlkZXIgPSBzZXR1cE90ZWwoY2xpZW50LCBvcHRpb25zKTtcbiAgY2xpZW50LnRyYWNlUHJvdmlkZXIgPSBwcm92aWRlcjtcbn1cblxuLyoqXG4gKiBQcmVsb2FkIE9wZW5UZWxlbWV0cnkgZm9yIE5vZGUuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHByZWxvYWQgaW5zdHJ1bWVudGF0aW9uIGVhcmx5LCBidXQgc2V0IHVwIFNlbnRyeSBsYXRlci5cbiAqIEJ5IHByZWxvYWRpbmcgdGhlIE9URUwgaW5zdHJ1bWVudGF0aW9uIHdyYXBwaW5nIHN0aWxsIGhhcHBlbnMgZWFybHkgZW5vdWdoIHRoYXQgZXZlcnl0aGluZyB3b3Jrcy5cbiAqL1xuZnVuY3Rpb24gcHJlbG9hZE9wZW5UZWxlbWV0cnkob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgZGVidWcgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKGRlYnVnKSB7XG4gICAgY29yZS5kZWJ1Zy5lbmFibGUoKTtcbiAgfVxuXG4gIG5vZGVDb3JlLmluaXRpYWxpemVFc21Mb2FkZXIoKTtcblxuICAvLyBUaGVzZSBhcmUgYWxsIGludGVncmF0aW9ucyB0aGF0IHdlIG5lZWQgdG8gcHJlLWxvYWQgdG8gZW5zdXJlIHRoZXkgYXJlIHNldCB1cCBiZWZvcmUgYW55IG90aGVyIGNvZGUgcnVuc1xuICBnZXRQcmVsb2FkTWV0aG9kcyhvcHRpb25zLmludGVncmF0aW9ucykuZm9yRWFjaChmbiA9PiB7XG4gICAgZm4oKTtcblxuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29yZS5kZWJ1Zy5sb2coYFtTZW50cnldIFByZWxvYWRlZCAke2ZuLmlkfSBpbnN0cnVtZW50YXRpb25gKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRQcmVsb2FkTWV0aG9kcyhpbnRlZ3JhdGlvbk5hbWVzKSB7XG4gIGNvbnN0IGluc3RydW1lbnRzID0gaW5kZXguZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZCgpO1xuXG4gIGlmICghaW50ZWdyYXRpb25OYW1lcykge1xuICAgIHJldHVybiBpbnN0cnVtZW50cztcbiAgfVxuXG4gIC8vIFdlIG1hdGNoIGV4YWN0IG1hdGNoZXMgb2YgaW5zdHJ1bWVudGF0aW9uLCBidXQgYWxzbyBtYXRjaCBwcmVmaXhlcywgZS5nLiBcIkZhc3RpZnkudjVcIiB3aWxsIG1hdGNoIFwiRmFzdGlmeVwiXG4gIHJldHVybiBpbnN0cnVtZW50cy5maWx0ZXIoaW5zdHJ1bWVudGF0aW9uID0+IHtcbiAgICBjb25zdCBpZCA9IGluc3RydW1lbnRhdGlvbi5pZDtcbiAgICByZXR1cm4gaW50ZWdyYXRpb25OYW1lcy5zb21lKGludGVncmF0aW9uTmFtZSA9PiBpZCA9PT0gaW50ZWdyYXRpb25OYW1lIHx8IGlkLnN0YXJ0c1dpdGgoYCR7aW50ZWdyYXRpb25OYW1lfS5gKSk7XG4gIH0pO1xufVxuXG4vKiogSnVzdCBleHBvcnRlZCBmb3IgdGVzdHMuICovXG5mdW5jdGlvbiBzZXR1cE90ZWwoY2xpZW50LCBvcHRpb25zID0ge30pIHtcbiAgLy8gQ3JlYXRlIGFuZCBjb25maWd1cmUgTm9kZVRyYWNlclByb3ZpZGVyXG4gIGNvbnN0IHByb3ZpZGVyID0gbmV3IHNka1RyYWNlQmFzZS5CYXNpY1RyYWNlclByb3ZpZGVyKHtcbiAgICBzYW1wbGVyOiBuZXcgb3BlbnRlbGVtZXRyeS5TZW50cnlTYW1wbGVyKGNsaWVudCksXG4gICAgcmVzb3VyY2U6IHJlc291cmNlcy5kZWZhdWx0UmVzb3VyY2UoKS5tZXJnZShcbiAgICAgIHJlc291cmNlcy5yZXNvdXJjZUZyb21BdHRyaWJ1dGVzKHtcbiAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiAnbm9kZScsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5TRU1SRVNBVFRSU19TRVJWSUNFX05BTUVTUEFDRV06ICdzZW50cnknLFxuICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfVkVSU0lPTl06IGNvcmUuU0RLX1ZFUlNJT04sXG4gICAgICB9KSxcbiAgICApLFxuICAgIGZvcmNlRmx1c2hUaW1lb3V0TWlsbGlzOiA1MDAsXG4gICAgc3BhblByb2Nlc3NvcnM6IFtcbiAgICAgIG5ldyBvcGVudGVsZW1ldHJ5LlNlbnRyeVNwYW5Qcm9jZXNzb3Ioe1xuICAgICAgICB0aW1lb3V0OiBfY2xhbXBTcGFuUHJvY2Vzc29yVGltZW91dChjbGllbnQuZ2V0T3B0aW9ucygpLm1heFNwYW5XYWl0RHVyYXRpb24pLFxuICAgICAgfSksXG4gICAgICAuLi4ob3B0aW9ucy5zcGFuUHJvY2Vzc29ycyB8fCBbXSksXG4gICAgXSxcbiAgfSk7XG5cbiAgLy8gUmVnaXN0ZXIgYXMgZ2xvYmFsc1xuICBhcGkudHJhY2Uuc2V0R2xvYmFsVHJhY2VyUHJvdmlkZXIocHJvdmlkZXIpO1xuICBhcGkucHJvcGFnYXRpb24uc2V0R2xvYmFsUHJvcGFnYXRvcihuZXcgb3BlbnRlbGVtZXRyeS5TZW50cnlQcm9wYWdhdG9yKCkpO1xuICBhcGkuY29udGV4dC5zZXRHbG9iYWxDb250ZXh0TWFuYWdlcihuZXcgbm9kZUNvcmUuU2VudHJ5Q29udGV4dE1hbmFnZXIoKSk7XG5cbiAgcmV0dXJuIHByb3ZpZGVyO1xufVxuXG4vKiogSnVzdCBleHBvcnRlZCBmb3IgdGVzdHMuICovXG5mdW5jdGlvbiBfY2xhbXBTcGFuUHJvY2Vzc29yVGltZW91dChtYXhTcGFuV2FpdER1cmF0aW9uKSB7XG4gIGlmIChtYXhTcGFuV2FpdER1cmF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gV2UgZ3VhcmQgZm9yIGEgbWF4LiB2YWx1ZSBoZXJlLCBiZWNhdXNlIHdlIGNyZWF0ZSBhbiBhcnJheSB3aXRoIHRoaXMgbGVuZ3RoXG4gIC8vIFNvIGlmIHRoaXMgdmFsdWUgaXMgdG9vIGxhcmdlLCB0aGlzIHdvdWxkIGZhaWxcbiAgaWYgKG1heFNwYW5XYWl0RHVyYXRpb24gPiBNQVhfTUFYX1NQQU5fV0FJVF9EVVJBVElPTikge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgIGNvcmUuZGVidWcud2FybihgXFxgbWF4U3BhbldhaXREdXJhdGlvblxcYCBpcyB0b28gaGlnaCwgdXNpbmcgdGhlIG1heGltdW0gdmFsdWUgb2YgJHtNQVhfTUFYX1NQQU5fV0FJVF9EVVJBVElPTn1gKTtcbiAgICByZXR1cm4gTUFYX01BWF9TUEFOX1dBSVRfRFVSQVRJT047XG4gIH0gZWxzZSBpZiAobWF4U3BhbldhaXREdXJhdGlvbiA8PSAwIHx8IE51bWJlci5pc05hTihtYXhTcGFuV2FpdER1cmF0aW9uKSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy53YXJuKCdgbWF4U3BhbldhaXREdXJhdGlvbmAgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciwgdXNpbmcgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLicpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gbWF4U3BhbldhaXREdXJhdGlvbjtcbn1cblxuZXhwb3J0cy5fY2xhbXBTcGFuUHJvY2Vzc29yVGltZW91dCA9IF9jbGFtcFNwYW5Qcm9jZXNzb3JUaW1lb3V0O1xuZXhwb3J0cy5pbml0T3BlblRlbGVtZXRyeSA9IGluaXRPcGVuVGVsZW1ldHJ5O1xuZXhwb3J0cy5wcmVsb2FkT3BlblRlbGVtZXRyeSA9IHByZWxvYWRPcGVuVGVsZW1ldHJ5O1xuZXhwb3J0cy5zZXR1cE90ZWwgPSBzZXR1cE90ZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0T3RlbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nfunction flatten(input) {\n  const result = [];\n\n  const flattenHelper = (input) => {\n    input.forEach((el) => {\n      if (Array.isArray(el)) {\n        flattenHelper(el);\n      } else {\n        result.push(el);\n      }\n    });\n  };\n\n  flattenHelper(input);\n  return result;\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL3JlZGlzQ2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9yZWRpc0NhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBTSU5HTEVfQVJHX0NPTU1BTkRTID0gWydnZXQnLCAnc2V0JywgJ3NldGV4J107XG5cbmNvbnN0IEdFVF9DT01NQU5EUyA9IFsnZ2V0JywgJ21nZXQnXTtcbmNvbnN0IFNFVF9DT01NQU5EUyA9IFsnc2V0JywgJ3NldGV4J107XG4vLyB0b2RvOiBkZWwsIGV4cGlyZVxuXG4vKiogQ2hlY2tzIGlmIGEgZ2l2ZW4gY29tbWFuZCBpcyBpbiB0aGUgbGlzdCBvZiByZWRpcyBjb21tYW5kcy5cbiAqICBVc2VmdWwgYmVjYXVzZSBjb21tYW5kcyBjYW4gY29tZSBpbiBsb3dlcmNhc2Ugb3IgdXBwZXJjYXNlIChkZXBlbmRpbmcgb24gdGhlIGxpYnJhcnkpLiAqL1xuZnVuY3Rpb24gaXNJbkNvbW1hbmRzKHJlZGlzQ29tbWFuZHMsIGNvbW1hbmQpIHtcbiAgcmV0dXJuIHJlZGlzQ29tbWFuZHMuaW5jbHVkZXMoY29tbWFuZC50b0xvd2VyQ2FzZSgpKTtcbn1cblxuLyoqIERldGVybWluZSBjYWNoZSBvcGVyYXRpb24gYmFzZWQgb24gcmVkaXMgc3RhdGVtZW50ICovXG5mdW5jdGlvbiBnZXRDYWNoZU9wZXJhdGlvbihcbiAgY29tbWFuZCxcbikge1xuICBpZiAoaXNJbkNvbW1hbmRzKEdFVF9DT01NQU5EUywgY29tbWFuZCkpIHtcbiAgICByZXR1cm4gJ2NhY2hlLmdldCc7XG4gIH0gZWxzZSBpZiAoaXNJbkNvbW1hbmRzKFNFVF9DT01NQU5EUywgY29tbWFuZCkpIHtcbiAgICByZXR1cm4gJ2NhY2hlLnB1dCc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBrZXlIYXNQcmVmaXgoa2V5LCBwcmVmaXhlcykge1xuICByZXR1cm4gcHJlZml4ZXMuc29tZShwcmVmaXggPT4ga2V5LnN0YXJ0c1dpdGgocHJlZml4KSk7XG59XG5cbi8qKiBTYWZlbHkgY29udmVydHMgYSByZWRpcyBrZXkgdG8gYSBzdHJpbmcgKGNvbW1hLXNlcGFyYXRlZCBpZiB0aGVyZSBhcmUgbXVsdGlwbGUga2V5cykgKi9cbmZ1bmN0aW9uIGdldENhY2hlS2V5U2FmZWx5KHJlZGlzQ29tbWFuZCwgY21kQXJncykge1xuICB0cnkge1xuICAgIGlmIChjbWRBcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGNvbnN0IHByb2Nlc3NBcmcgPSAoYXJnKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgQnVmZmVyLmlzQnVmZmVyKGFyZykpIHtcbiAgICAgICAgcmV0dXJuIFthcmcudG9TdHJpbmcoKV07XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICByZXR1cm4gZmxhdHRlbihhcmcubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbJzx1bmtub3duPiddO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBmaXJzdEFyZyA9IGNtZEFyZ3NbMF07XG4gICAgaWYgKGlzSW5Db21tYW5kcyhTSU5HTEVfQVJHX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGZpcnN0QXJnICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzQXJnKGZpcnN0QXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmxhdHRlbihjbWRBcmdzLm1hcChhcmcgPT4gcHJvY2Vzc0FyZyhhcmcpKSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqIERldGVybWluZXMgd2hldGhlciBhIHJlZGlzIG9wZXJhdGlvbiBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBcImNhY2hlIG9wZXJhdGlvblwiIGJ5IGNoZWNraW5nIGlmIGEga2V5IGlzIHByZWZpeGVkLlxuICogIFdlIG9ubHkgc3VwcG9ydCBjZXJ0YWluIGNvbW1hbmRzIChzdWNoIGFzICdzZXQnLCAnZ2V0JywgJ21nZXQnKS4gKi9cbmZ1bmN0aW9uIHNob3VsZENvbnNpZGVyRm9yQ2FjaGUocmVkaXNDb21tYW5kLCBrZXlzLCBwcmVmaXhlcykge1xuICBpZiAoIWdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKGtleUhhc1ByZWZpeChrZXksIHByZWZpeGVzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqIENhbGN1bGF0ZXMgc2l6ZSBiYXNlZCBvbiB0aGUgY2FjaGUgcmVzcG9uc2UgdmFsdWUgKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNhY2hlSXRlbVNpemUocmVzcG9uc2UpIHtcbiAgY29uc3QgZ2V0U2l6ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkgcmV0dXJuIHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWUubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoO1xuICAgICAgZWxzZSBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpLmxlbmd0aDtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3BvbnNlKVxuICAgID8gcmVzcG9uc2UucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGdldFNpemUoY3Vycik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicgPyAoYWNjICE9PSB1bmRlZmluZWQgPyBhY2MgKyBzaXplIDogc2l6ZSkgOiBhY2M7XG4gICAgICB9LCAwKVxuICAgIDogZ2V0U2l6ZShyZXNwb25zZSk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oaW5wdXQpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgY29uc3QgZmxhdHRlbkhlbHBlciA9IChpbnB1dCkgPT4ge1xuICAgIGlucHV0LmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICAgICAgZmxhdHRlbkhlbHBlcihlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQucHVzaChlbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgZmxhdHRlbkhlbHBlcihpbnB1dCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydHMuR0VUX0NPTU1BTkRTID0gR0VUX0NPTU1BTkRTO1xuZXhwb3J0cy5TRVRfQ09NTUFORFMgPSBTRVRfQ09NTUFORFM7XG5leHBvcnRzLmNhbGN1bGF0ZUNhY2hlSXRlbVNpemUgPSBjYWxjdWxhdGVDYWNoZUl0ZW1TaXplO1xuZXhwb3J0cy5nZXRDYWNoZUtleVNhZmVseSA9IGdldENhY2hlS2V5U2FmZWx5O1xuZXhwb3J0cy5nZXRDYWNoZU9wZXJhdGlvbiA9IGdldENhY2hlT3BlcmF0aW9uO1xuZXhwb3J0cy5pc0luQ29tbWFuZHMgPSBpc0luQ29tbWFuZHM7XG5leHBvcnRzLnNob3VsZENvbnNpZGVyRm9yQ2FjaGUgPSBzaG91bGRDb25zaWRlckZvckNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXNDYWNoZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0cy5ERUJVR19CVUlMRCA9IERFQlVHX0JVSUxEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! ./integrations/http.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index = __webpack_require__(/*! ./integrations/tracing/fastify/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./integrations/tracing/postgresjs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/tracing/hono/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/vercelai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\nconst index$4 = __webpack_require__(/*! ./integrations/tracing/openai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/anthropic-ai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\");\nconst index$6 = __webpack_require__(/*! ./integrations/tracing/claude-code/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\");\nconst helpers = __webpack_require__(/*! ./integrations/tracing/claude-code/helpers.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js\");\nconst index$7 = __webpack_require__(/*! ./integrations/tracing/openai-codex/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\");\nconst helpers$1 = __webpack_require__(/*! ./integrations/tracing/openai-codex/helpers.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js\");\nconst index$8 = __webpack_require__(/*! ./integrations/tracing/google-genai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\");\nconst launchDarkly = __webpack_require__(/*! ./integrations/featureFlagShims/launchDarkly.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\");\nconst openFeature = __webpack_require__(/*! ./integrations/featureFlagShims/openFeature.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\");\nconst statsig = __webpack_require__(/*! ./integrations/featureFlagShims/statsig.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\");\nconst unleash = __webpack_require__(/*! ./integrations/featureFlagShims/unleash.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\");\nconst firebase = __webpack_require__(/*! ./integrations/tracing/firebase/firebase.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst index$9 = __webpack_require__(/*! ./sdk/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$a = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./integrations/tracing/claude-code/instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\");\nconst instrumentation$1 = __webpack_require__(/*! ./integrations/tracing/openai-codex/instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\");\n\n\n\nexports.httpIntegration = http.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = index.fastifyIntegration;\nexports.setupFastifyErrorHandler = index.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.postgresJsIntegration = postgresjs.postgresJsIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$1.hapiIntegration;\nexports.setupHapiErrorHandler = index$1.setupHapiErrorHandler;\nexports.honoIntegration = index$2.honoIntegration;\nexports.setupHonoErrorHandler = index$2.setupHonoErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.vercelAIIntegration = index$3.vercelAIIntegration;\nexports.openAIIntegration = index$4.openAIIntegration;\nexports.anthropicAIIntegration = index$5.anthropicAIIntegration;\nexports.claudeCodeIntegration = index$6.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = helpers.createInstrumentedClaudeQuery;\nexports.openaiCodexIntegration = index$7.openaiCodexIntegration;\nexports.createInstrumentedCodex = helpers$1.createInstrumentedCodex;\nexports.googleGenAIIntegration = index$8.googleGenAIIntegration;\nexports.buildLaunchDarklyFlagUsedHandler = launchDarkly.buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegration = launchDarkly.launchDarklyIntegrationShim;\nexports.OpenFeatureIntegrationHook = openFeature.OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegration = openFeature.openFeatureIntegrationShim;\nexports.statsigIntegration = statsig.statsigIntegrationShim;\nexports.unleashIntegration = unleash.unleashIntegrationShim;\nexports.firebaseIntegration = firebase.firebaseIntegration;\nexports.getDefaultIntegrations = index$9.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$9.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$9.init;\nexports.initWithoutDefaultIntegrations = index$9.initWithoutDefaultIntegrations;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$a.getAutoPerformanceIntegrations;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.consoleIntegration = core.consoleIntegration;\nexports.consoleLoggingIntegration = core.consoleLoggingIntegration;\nexports.continueTrace = core.continueTrace;\nexports.createConsolaReporter = core.createConsolaReporter;\nexports.createTransport = core.createTransport;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.eventFiltersIntegration = core.eventFiltersIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.featureFlagsIntegration = core.featureFlagsIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.httpHeadersToSpanAttributes = core.httpHeadersToSpanAttributes;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.instrumentSupabaseClient = core.instrumentSupabaseClient;\nexports.isEnabled = core.isEnabled;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.supabaseIntegration = core.supabaseIntegration;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.winterCGHeadersToDict = core.winterCGHeadersToDict;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.wrapMcpServerWithSentry = core.wrapMcpServerWithSentry;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.NODE_VERSION = nodeCore.NODE_VERSION;\nexports.NodeClient = nodeCore.NodeClient;\nexports.SentryContextManager = nodeCore.SentryContextManager;\nexports.anrIntegration = nodeCore.anrIntegration;\nexports.childProcessIntegration = nodeCore.childProcessIntegration;\nexports.contextLinesIntegration = nodeCore.contextLinesIntegration;\nexports.createGetModuleFromFilename = nodeCore.createGetModuleFromFilename;\nexports.createSentryWinstonTransport = nodeCore.createSentryWinstonTransport;\nexports.cron = nodeCore.cron;\nexports.defaultStackParser = nodeCore.defaultStackParser;\nexports.disableAnrDetectionForCallback = nodeCore.disableAnrDetectionForCallback;\nexports.generateInstrumentOnce = nodeCore.generateInstrumentOnce;\nexports.getSentryRelease = nodeCore.getSentryRelease;\nexports.httpServerIntegration = nodeCore.httpServerIntegration;\nexports.httpServerSpansIntegration = nodeCore.httpServerSpansIntegration;\nexports.localVariablesIntegration = nodeCore.localVariablesIntegration;\nexports.logger = nodeCore.logger;\nexports.makeNodeTransport = nodeCore.makeNodeTransport;\nexports.modulesIntegration = nodeCore.modulesIntegration;\nexports.nodeContextIntegration = nodeCore.nodeContextIntegration;\nexports.onUncaughtExceptionIntegration = nodeCore.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = nodeCore.onUnhandledRejectionIntegration;\nexports.spotlightIntegration = nodeCore.spotlightIntegration;\nexports.systemErrorIntegration = nodeCore.systemErrorIntegration;\nexports.validateOpenTelemetrySetup = nodeCore.validateOpenTelemetrySetup;\nexports.patchClaudeCodeQuery = instrumentation.patchClaudeCodeQuery;\nexports.patchCodexConstructor = instrumentation$1.patchCodexConstructor;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the LaunchDarkly integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst launchDarklyIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The launchDarklyIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'LaunchDarkly',\n  };\n});\n\n/**\n * This is a shim for the LaunchDarkly flag used handler.\n */\nfunction buildLaunchDarklyFlagUsedHandlerShim() {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The buildLaunchDarklyFlagUsedHandler() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'sentry-flag-auditor',\n    type: 'flag-used',\n    synchronous: true,\n    method: () => null,\n  };\n}\n\nexports.buildLaunchDarklyFlagUsedHandlerShim = buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegrationShim = launchDarklyIntegrationShim;\n//# sourceMappingURL=launchDarkly.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvbGF1bmNoRGFya2x5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEM7QUFDNUMsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mZWF0dXJlRmxhZ1NoaW1zL2xhdW5jaERhcmtseS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgTGF1bmNoRGFya2x5IGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IGxhdW5jaERhcmtseUludGVncmF0aW9uU2hpbSA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKF9vcHRpb25zKSA9PiB7XG4gIGlmICghY29yZS5pc0Jyb3dzZXIoKSkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybignVGhlIGxhdW5jaERhcmtseUludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ0xhdW5jaERhcmtseScsXG4gIH07XG59KTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIExhdW5jaERhcmtseSBmbGFnIHVzZWQgaGFuZGxlci5cbiAqL1xuZnVuY3Rpb24gYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXJTaGltKCkge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBidWlsZExhdW5jaERhcmtseUZsYWdVc2VkSGFuZGxlcigpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdzZW50cnktZmxhZy1hdWRpdG9yJyxcbiAgICB0eXBlOiAnZmxhZy11c2VkJyxcbiAgICBzeW5jaHJvbm91czogdHJ1ZSxcbiAgICBtZXRob2Q6ICgpID0+IG51bGwsXG4gIH07XG59XG5cbmV4cG9ydHMuYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXJTaGltID0gYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXJTaGltO1xuZXhwb3J0cy5sYXVuY2hEYXJrbHlJbnRlZ3JhdGlvblNoaW0gPSBsYXVuY2hEYXJrbHlJbnRlZ3JhdGlvblNoaW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXVuY2hEYXJrbHkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the OpenFeature integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst openFeatureIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The openFeatureIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'OpenFeature',\n  };\n});\n\n/**\n * This is a shim for the OpenFeature integration hook.\n */\nclass OpenFeatureIntegrationHookShim {\n  /**\n   *\n   */\n   constructor() {\n    if (!core.isBrowser()) {\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('The OpenFeatureIntegrationHook can only be used in the browser.');\n      });\n    }\n  }\n\n  /**\n   *\n   */\n   after() {\n    // No-op\n  }\n\n  /**\n   *\n   */\n   error() {\n    // No-op\n  }\n}\n\nexports.OpenFeatureIntegrationHookShim = OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegrationShim = openFeatureIntegrationShim;\n//# sourceMappingURL=openFeature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvb3BlbkZlYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy9vcGVuRmVhdHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgT3BlbkZlYXR1cmUgaW50ZWdyYXRpb24uXG4gKiBXZSBuZWVkIHRoaXMgaW4gb3JkZXIgdG8gbm90IHRocm93IHJ1bnRpbWUgZXJyb3JzIHdoZW4gYWNjaWRlbnRhbGx5IGltcG9ydGluZyB0aGlzIG9uIHRoZSBzZXJ2ZXIgdGhyb3VnaCBhIG1ldGEgZnJhbWV3b3JrIGxpa2UgTmV4dC5qcy5cbiAqL1xuY29uc3Qgb3BlbkZlYXR1cmVJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBvcGVuRmVhdHVyZUludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ09wZW5GZWF0dXJlJyxcbiAgfTtcbn0pO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgT3BlbkZlYXR1cmUgaW50ZWdyYXRpb24gaG9vay5cbiAqL1xuY2xhc3MgT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2tTaGltIHtcbiAgLyoqXG4gICAqXG4gICAqL1xuICAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2sgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgIGFmdGVyKCkge1xuICAgIC8vIE5vLW9wXG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gICBlcnJvcigpIHtcbiAgICAvLyBOby1vcFxuICB9XG59XG5cbmV4cG9ydHMuT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2tTaGltID0gT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2tTaGltO1xuZXhwb3J0cy5vcGVuRmVhdHVyZUludGVncmF0aW9uU2hpbSA9IG9wZW5GZWF0dXJlSW50ZWdyYXRpb25TaGltO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbkZlYXR1cmUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Statsig integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst statsigIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The statsigIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Statsig',\n  };\n});\n\nexports.statsigIntegrationShim = statsigIntegrationShim;\n//# sourceMappingURL=statsig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvc3RhdHNpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy9zdGF0c2lnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNoaW0gZm9yIHRoZSBTdGF0c2lnIGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IHN0YXRzaWdJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBzdGF0c2lnSW50ZWdyYXRpb24oKSBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBicm93c2VyLicpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnU3RhdHNpZycsXG4gIH07XG59KTtcblxuZXhwb3J0cy5zdGF0c2lnSW50ZWdyYXRpb25TaGltID0gc3RhdHNpZ0ludGVncmF0aW9uU2hpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRzaWcuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Unleash integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst unleashIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The unleashIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Unleash',\n  };\n});\n\nexports.unleashIntegrationShim = unleashIntegrationShim;\n//# sourceMappingURL=unleash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvdW5sZWFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy91bmxlYXNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNoaW0gZm9yIHRoZSBVbmxlYXNoIGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IHVubGVhc2hJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSB1bmxlYXNoSW50ZWdyYXRpb24oKSBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBicm93c2VyLicpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnVW5sZWFzaCcsXG4gIH07XG59KTtcblxuZXhwb3J0cy51bmxlYXNoSW50ZWdyYXRpb25TaGltID0gdW5sZWFzaEludGVncmF0aW9uU2hpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVubGVhc2guanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.24.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        nodeCore.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new nodeCore.SentryHttpInstrumentation(options);\n  },\n);\n\nconst instrumentOtelHttp = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation({\n    ...config,\n    // This is hard-coded and can never be overridden by the user\n    disableIncomingRequestInstrumentation: true,\n  });\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/** Exported only for tests. */\nfunction _shouldUseOtelHttpInstrumentation(\n  options,\n  clientOptions = {},\n) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  if (typeof options.spans === 'boolean') {\n    return options.spans;\n  }\n\n  if (clientOptions.skipOpenTelemetrySetup) {\n    return false;\n  }\n\n  // IMPORTANT: We only disable span instrumentation when spans are not enabled _and_ we are on Node 22+,\n  // as otherwise the necessary diagnostics channel is not available yet\n  if (!core.hasSpansEnabled(clientOptions) && nodeCore.NODE_VERSION.major >= 22) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  const spans = options.spans ?? true;\n  const disableIncomingRequestSpans = options.disableIncomingRequestSpans;\n\n  const serverOptions = {\n    sessions: options.trackIncomingRequestsAsSessions,\n    sessionFlushingDelayMS: options.sessionFlushingDelayMS,\n    ignoreRequestBody: options.ignoreIncomingRequestBody,\n    maxRequestBodySize: options.maxIncomingRequestBodySize,\n  } ;\n\n  const serverSpansOptions = {\n    ignoreIncomingRequests: options.ignoreIncomingRequests,\n    ignoreStaticAssets: options.ignoreStaticAssets,\n    ignoreStatusCodes: options.dropSpansForIncomingRequestStatusCodes,\n    instrumentation: options.instrumentation,\n    onSpanCreated: options.incomingRequestSpanHook,\n  } ;\n\n  const server = nodeCore.httpServerIntegration(serverOptions);\n  const serverSpans = nodeCore.httpServerSpansIntegration(serverSpansOptions);\n\n  const enableServerSpans = spans && !disableIncomingRequestSpans;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (enableServerSpans && core.hasSpansEnabled(clientOptions)) {\n        serverSpans.setup(client);\n      }\n    },\n    setupOnce() {\n      const clientOptions = (core.getClient()?.getOptions() || {}) ;\n      const useOtelHttpInstrumentation = _shouldUseOtelHttpInstrumentation(options, clientOptions);\n\n      server.setupOnce();\n\n      const sentryHttpInstrumentationOptions = {\n        breadcrumbs: options.breadcrumbs,\n        propagateTraceInOutgoingRequests: !useOtelHttpInstrumentation,\n        ignoreOutgoingRequests: options.ignoreOutgoingRequests,\n      } ;\n\n      // This is Sentry-specific instrumentation for outgoing request breadcrumbs & trace propagation\n      instrumentSentryHttp(sentryHttpInstrumentationOptions);\n\n      // This is the \"regular\" OTEL instrumentation that emits outgoing request spans\n      if (useOtelHttpInstrumentation) {\n        const instrumentationConfig = getConfigWithDefaults(options);\n        instrumentOtelHttp(instrumentationConfig);\n      }\n    },\n    processEvent(event) {\n      // Note: We always run this, even if spans are disabled\n      // The reason being that e.g. the remix integration disables span creation here but still wants to use the ignore status codes option\n      return serverSpans.processEvent(event);\n    },\n  };\n});\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ignoreOutgoingRequestHook: request => {\n      const url = nodeCore.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests?.(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requestHook: (span, req) => {\n      nodeCore.addOriginToSpan(span, 'auto.http.otel.http');\n\n      options.instrumentation?.requestHook?.(span, req);\n    },\n    responseHook: (span, res) => {\n      options.instrumentation?.responseHook?.(span, res);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      options.instrumentation?.applyCustomAttributesOnSpan?.(span, request, response);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports._shouldUseOtelHttpInstrumentation = _shouldUseOtelHttpInstrumentation;\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsWUFBWSxtQkFBTyxDQUFDLHNJQUFvQjtBQUN4Qyw0QkFBNEIsbUJBQU8sQ0FBQyxvTkFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUVBQWlFO0FBQ2pFOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUEseUNBQXlDO0FBQ3pDLHVCQUF1QjtBQUN2QiwwQkFBMEI7QUFDMUIsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9odHRwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbkh0dHAgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0h0dHAnO1xuXG5jb25zdCBJTlNUUlVNRU5UQVRJT05fTkFNRSA9ICdAb3BlbnRlbGVtZXRyeV9zZW50cnktcGF0Y2hlZC9pbnN0cnVtZW50YXRpb24taHR0cCc7XG5cbmNvbnN0IGluc3RydW1lbnRTZW50cnlIdHRwID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgYCR7SU5URUdSQVRJT05fTkFNRX0uc2VudHJ5YCxcbiAgb3B0aW9ucyA9PiB7XG4gICAgcmV0dXJuIG5ldyBub2RlQ29yZS5TZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uKG9wdGlvbnMpO1xuICB9LFxuKTtcblxuY29uc3QgaW5zdHJ1bWVudE90ZWxIdHRwID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCBjb25maWcgPT4ge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBuZXcgaW5zdHJ1bWVudGF0aW9uSHR0cC5IdHRwSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAuLi5jb25maWcsXG4gICAgLy8gVGhpcyBpcyBoYXJkLWNvZGVkIGFuZCBjYW4gbmV2ZXIgYmUgb3ZlcnJpZGRlbiBieSB0aGUgdXNlclxuICAgIGRpc2FibGVJbmNvbWluZ1JlcXVlc3RJbnN0cnVtZW50YXRpb246IHRydWUsXG4gIH0pO1xuXG4gIC8vIFdlIHdhbnQgdG8gdXBkYXRlIHRoZSBsb2dnZXIgbmFtZXNwYWNlIHNvIHdlIGNhbiBiZXR0ZXIgaWRlbnRpZnkgd2hhdCBpcyBoYXBwZW5pbmcgaGVyZVxuICB0cnkge1xuICAgIGluc3RydW1lbnRhdGlvblsnX2RpYWcnXSA9IGFwaS5kaWFnLmNyZWF0ZUNvbXBvbmVudExvZ2dlcih7XG4gICAgICBuYW1lc3BhY2U6IElOU1RSVU1FTlRBVElPTl9OQU1FLFxuICAgIH0pO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgYXJlIHdyaXRpbmcgYSByZWFkLW9ubHkgcHJvcGVydHkgaGVyZS4uLlxuICAgIGluc3RydW1lbnRhdGlvbi5pbnN0cnVtZW50YXRpb25OYW1lID0gSU5TVFJVTUVOVEFUSU9OX05BTUU7XG4gIH0gY2F0Y2gge1xuICAgIC8vIGlnbm9yZSBlcnJvcnMgaGVyZS4uLlxuICB9XG5cbiAgcmV0dXJuIGluc3RydW1lbnRhdGlvbjtcbn0pO1xuXG4vKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG5mdW5jdGlvbiBfc2hvdWxkVXNlT3RlbEh0dHBJbnN0cnVtZW50YXRpb24oXG4gIG9wdGlvbnMsXG4gIGNsaWVudE9wdGlvbnMgPSB7fSxcbikge1xuICAvLyBJZiBgc3BhbnNgIGlzIHBhc3NlZCBpbiwgaXQgdGFrZXMgcHJlY2VkZW5jZVxuICAvLyBFbHNlLCB3ZSBieSBkZWZhdWx0IGVtaXQgc3BhbnMsIHVubGVzcyBgc2tpcE9wZW5UZWxlbWV0cnlTZXR1cGAgaXMgc2V0IHRvIGB0cnVlYCBvciBzcGFucyBhcmUgbm90IGVuYWJsZWRcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnNwYW5zID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5zcGFucztcbiAgfVxuXG4gIGlmIChjbGllbnRPcHRpb25zLnNraXBPcGVuVGVsZW1ldHJ5U2V0dXApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBJTVBPUlRBTlQ6IFdlIG9ubHkgZGlzYWJsZSBzcGFuIGluc3RydW1lbnRhdGlvbiB3aGVuIHNwYW5zIGFyZSBub3QgZW5hYmxlZCBfYW5kXyB3ZSBhcmUgb24gTm9kZSAyMissXG4gIC8vIGFzIG90aGVyd2lzZSB0aGUgbmVjZXNzYXJ5IGRpYWdub3N0aWNzIGNoYW5uZWwgaXMgbm90IGF2YWlsYWJsZSB5ZXRcbiAgaWYgKCFjb3JlLmhhc1NwYW5zRW5hYmxlZChjbGllbnRPcHRpb25zKSAmJiBub2RlQ29yZS5OT0RFX1ZFUlNJT04ubWFqb3IgPj0gMjIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBUaGUgaHR0cCBpbnRlZ3JhdGlvbiBpbnN0cnVtZW50cyBOb2RlJ3MgaW50ZXJuYWwgaHR0cCBhbmQgaHR0cHMgbW9kdWxlcy5cbiAqIEl0IGNyZWF0ZXMgYnJlYWRjcnVtYnMgYW5kIHNwYW5zIGZvciBvdXRnb2luZyBIVFRQIHJlcXVlc3RzIHdoaWNoIHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnRseSBhY3RpdmUgc3Bhbi5cbiAqL1xuY29uc3QgaHR0cEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHNwYW5zID0gb3B0aW9ucy5zcGFucyA/PyB0cnVlO1xuICBjb25zdCBkaXNhYmxlSW5jb21pbmdSZXF1ZXN0U3BhbnMgPSBvcHRpb25zLmRpc2FibGVJbmNvbWluZ1JlcXVlc3RTcGFucztcblxuICBjb25zdCBzZXJ2ZXJPcHRpb25zID0ge1xuICAgIHNlc3Npb25zOiBvcHRpb25zLnRyYWNrSW5jb21pbmdSZXF1ZXN0c0FzU2Vzc2lvbnMsXG4gICAgc2Vzc2lvbkZsdXNoaW5nRGVsYXlNUzogb3B0aW9ucy5zZXNzaW9uRmx1c2hpbmdEZWxheU1TLFxuICAgIGlnbm9yZVJlcXVlc3RCb2R5OiBvcHRpb25zLmlnbm9yZUluY29taW5nUmVxdWVzdEJvZHksXG4gICAgbWF4UmVxdWVzdEJvZHlTaXplOiBvcHRpb25zLm1heEluY29taW5nUmVxdWVzdEJvZHlTaXplLFxuICB9IDtcblxuICBjb25zdCBzZXJ2ZXJTcGFuc09wdGlvbnMgPSB7XG4gICAgaWdub3JlSW5jb21pbmdSZXF1ZXN0czogb3B0aW9ucy5pZ25vcmVJbmNvbWluZ1JlcXVlc3RzLFxuICAgIGlnbm9yZVN0YXRpY0Fzc2V0czogb3B0aW9ucy5pZ25vcmVTdGF0aWNBc3NldHMsXG4gICAgaWdub3JlU3RhdHVzQ29kZXM6IG9wdGlvbnMuZHJvcFNwYW5zRm9ySW5jb21pbmdSZXF1ZXN0U3RhdHVzQ29kZXMsXG4gICAgaW5zdHJ1bWVudGF0aW9uOiBvcHRpb25zLmluc3RydW1lbnRhdGlvbixcbiAgICBvblNwYW5DcmVhdGVkOiBvcHRpb25zLmluY29taW5nUmVxdWVzdFNwYW5Ib29rLFxuICB9IDtcblxuICBjb25zdCBzZXJ2ZXIgPSBub2RlQ29yZS5odHRwU2VydmVySW50ZWdyYXRpb24oc2VydmVyT3B0aW9ucyk7XG4gIGNvbnN0IHNlcnZlclNwYW5zID0gbm9kZUNvcmUuaHR0cFNlcnZlclNwYW5zSW50ZWdyYXRpb24oc2VydmVyU3BhbnNPcHRpb25zKTtcblxuICBjb25zdCBlbmFibGVTZXJ2ZXJTcGFucyA9IHNwYW5zICYmICFkaXNhYmxlSW5jb21pbmdSZXF1ZXN0U3BhbnM7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY29uc3QgY2xpZW50T3B0aW9ucyA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG5cbiAgICAgIGlmIChlbmFibGVTZXJ2ZXJTcGFucyAmJiBjb3JlLmhhc1NwYW5zRW5hYmxlZChjbGllbnRPcHRpb25zKSkge1xuICAgICAgICBzZXJ2ZXJTcGFucy5zZXR1cChjbGllbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgY2xpZW50T3B0aW9ucyA9IChjb3JlLmdldENsaWVudCgpPy5nZXRPcHRpb25zKCkgfHwge30pIDtcbiAgICAgIGNvbnN0IHVzZU90ZWxIdHRwSW5zdHJ1bWVudGF0aW9uID0gX3Nob3VsZFVzZU90ZWxIdHRwSW5zdHJ1bWVudGF0aW9uKG9wdGlvbnMsIGNsaWVudE9wdGlvbnMpO1xuXG4gICAgICBzZXJ2ZXIuc2V0dXBPbmNlKCk7XG5cbiAgICAgIGNvbnN0IHNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb25PcHRpb25zID0ge1xuICAgICAgICBicmVhZGNydW1iczogb3B0aW9ucy5icmVhZGNydW1icyxcbiAgICAgICAgcHJvcGFnYXRlVHJhY2VJbk91dGdvaW5nUmVxdWVzdHM6ICF1c2VPdGVsSHR0cEluc3RydW1lbnRhdGlvbixcbiAgICAgICAgaWdub3JlT3V0Z29pbmdSZXF1ZXN0czogb3B0aW9ucy5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzLFxuICAgICAgfSA7XG5cbiAgICAgIC8vIFRoaXMgaXMgU2VudHJ5LXNwZWNpZmljIGluc3RydW1lbnRhdGlvbiBmb3Igb3V0Z29pbmcgcmVxdWVzdCBicmVhZGNydW1icyAmIHRyYWNlIHByb3BhZ2F0aW9uXG4gICAgICBpbnN0cnVtZW50U2VudHJ5SHR0cChzZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uT3B0aW9ucyk7XG5cbiAgICAgIC8vIFRoaXMgaXMgdGhlIFwicmVndWxhclwiIE9URUwgaW5zdHJ1bWVudGF0aW9uIHRoYXQgZW1pdHMgb3V0Z29pbmcgcmVxdWVzdCBzcGFuc1xuICAgICAgaWYgKHVzZU90ZWxIdHRwSW5zdHJ1bWVudGF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbkNvbmZpZyA9IGdldENvbmZpZ1dpdGhEZWZhdWx0cyhvcHRpb25zKTtcbiAgICAgICAgaW5zdHJ1bWVudE90ZWxIdHRwKGluc3RydW1lbnRhdGlvbkNvbmZpZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcm9jZXNzRXZlbnQoZXZlbnQpIHtcbiAgICAgIC8vIE5vdGU6IFdlIGFsd2F5cyBydW4gdGhpcywgZXZlbiBpZiBzcGFucyBhcmUgZGlzYWJsZWRcbiAgICAgIC8vIFRoZSByZWFzb24gYmVpbmcgdGhhdCBlLmcuIHRoZSByZW1peCBpbnRlZ3JhdGlvbiBkaXNhYmxlcyBzcGFuIGNyZWF0aW9uIGhlcmUgYnV0IHN0aWxsIHdhbnRzIHRvIHVzZSB0aGUgaWdub3JlIHN0YXR1cyBjb2RlcyBvcHRpb25cbiAgICAgIHJldHVybiBzZXJ2ZXJTcGFucy5wcm9jZXNzRXZlbnQoZXZlbnQpO1xuICAgIH0sXG4gIH07XG59KTtcblxuZnVuY3Rpb24gZ2V0Q29uZmlnV2l0aERlZmF1bHRzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25Db25maWcgPSB7XG4gICAgaWdub3JlT3V0Z29pbmdSZXF1ZXN0SG9vazogcmVxdWVzdCA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBub2RlQ29yZS5nZXRSZXF1ZXN0VXJsKHJlcXVlc3QpO1xuXG4gICAgICBpZiAoIXVybCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzID0gb3B0aW9ucy5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzO1xuICAgICAgaWYgKF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzPy4odXJsLCByZXF1ZXN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICByZXF1aXJlUGFyZW50Zm9yT3V0Z29pbmdTcGFuczogZmFsc2UsXG4gICAgcmVxdWVzdEhvb2s6IChzcGFuLCByZXEpID0+IHtcbiAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5odHRwLm90ZWwuaHR0cCcpO1xuXG4gICAgICBvcHRpb25zLmluc3RydW1lbnRhdGlvbj8ucmVxdWVzdEhvb2s/LihzcGFuLCByZXEpO1xuICAgIH0sXG4gICAgcmVzcG9uc2VIb29rOiAoc3BhbiwgcmVzKSA9PiB7XG4gICAgICBvcHRpb25zLmluc3RydW1lbnRhdGlvbj8ucmVzcG9uc2VIb29rPy4oc3BhbiwgcmVzKTtcbiAgICB9LFxuICAgIGFwcGx5Q3VzdG9tQXR0cmlidXRlc09uU3BhbjogKFxuICAgICAgc3BhbixcbiAgICAgIHJlcXVlc3QsXG4gICAgICByZXNwb25zZSxcbiAgICApID0+IHtcbiAgICAgIG9wdGlvbnMuaW5zdHJ1bWVudGF0aW9uPy5hcHBseUN1c3RvbUF0dHJpYnV0ZXNPblNwYW4/LihzcGFuLCByZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgfSxcbiAgfSA7XG5cbiAgcmV0dXJuIGluc3RydW1lbnRhdGlvbkNvbmZpZztcbn1cblxuZXhwb3J0cy5fc2hvdWxkVXNlT3RlbEh0dHBJbnN0cnVtZW50YXRpb24gPSBfc2hvdWxkVXNlT3RlbEh0dHBJbnN0cnVtZW50YXRpb247XG5leHBvcnRzLmh0dHBJbnRlZ3JhdGlvbiA9IGh0dHBJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudE90ZWxIdHRwID0gaW5zdHJ1bWVudE90ZWxIdHRwO1xuZXhwb3J0cy5pbnN0cnVtZW50U2VudHJ5SHR0cCA9IGluc3RydW1lbnRTZW50cnlIdHRwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.15.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\nconst instrumentOtelNodeFetch = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationUndici.UndiciInstrumentation,\n  (options) => {\n    return getConfigWithDefaults(options);\n  },\n);\n\nconst instrumentSentryNodeFetch = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  nodeCore.SentryNodeFetchInstrumentation,\n  (options) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, core.getClient()?.getOptions());\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        instrumentOtelNodeFetch(options);\n      }\n\n      // This is the Sentry-specific instrumentation that creates breadcrumbs & propagates traces\n      // This must be registered after the OTEL one, to ensure that the core trace propagation logic takes presedence\n      // Otherwise, the sentry-trace header may be set multiple times\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nfunction _shouldInstrumentSpans(options, clientOptions = {}) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  return typeof options.spans === 'boolean'\n    ? options.spans\n    : !clientOptions.skipOpenTelemetrySetup && core.hasSpansEnabled(clientOptions);\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    requireParentforSpans: false,\n    ignoreRequestHook: request => {\n      const url = getAbsoluteUrl(request.origin, request.path);\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n      return !!shouldIgnore;\n    },\n    startSpanHook: () => {\n      return {\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n      };\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2guanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsOEJBQThCLG1CQUFPLENBQUMseU5BQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87O0FBRXhCO0FBQ0EsY0FBYyxJQUFJLEVBQUUsY0FBYztBQUNsQzs7QUFFQTtBQUNBLGNBQWMsSUFBSSxHQUFHLGNBQWM7QUFDbkM7O0FBRUEsWUFBWSxJQUFJLEVBQUUsS0FBSztBQUN2Qjs7QUFFQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblVuZGljaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi11bmRpY2knKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdOb2RlRmV0Y2gnO1xuXG5jb25zdCBpbnN0cnVtZW50T3RlbE5vZGVGZXRjaCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gIGluc3RydW1lbnRhdGlvblVuZGljaS5VbmRpY2lJbnN0cnVtZW50YXRpb24sXG4gIChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGdldENvbmZpZ1dpdGhEZWZhdWx0cyhvcHRpb25zKTtcbiAgfSxcbik7XG5cbmNvbnN0IGluc3RydW1lbnRTZW50cnlOb2RlRmV0Y2ggPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBgJHtJTlRFR1JBVElPTl9OQU1FfS5zZW50cnlgLFxuICBub2RlQ29yZS5TZW50cnlOb2RlRmV0Y2hJbnN0cnVtZW50YXRpb24sXG4gIChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH0sXG4pO1xuXG5jb25zdCBfbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdOb2RlRmV0Y2gnLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRTcGFucyA9IF9zaG91bGRJbnN0cnVtZW50U3BhbnMob3B0aW9ucywgY29yZS5nZXRDbGllbnQoKT8uZ2V0T3B0aW9ucygpKTtcblxuICAgICAgLy8gVGhpcyBpcyB0aGUgXCJyZWd1bGFyXCIgT1RFTCBpbnN0cnVtZW50YXRpb24gdGhhdCBlbWl0cyBzcGFuc1xuICAgICAgaWYgKGluc3RydW1lbnRTcGFucykge1xuICAgICAgICBpbnN0cnVtZW50T3RlbE5vZGVGZXRjaChvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhpcyBpcyB0aGUgU2VudHJ5LXNwZWNpZmljIGluc3RydW1lbnRhdGlvbiB0aGF0IGNyZWF0ZXMgYnJlYWRjcnVtYnMgJiBwcm9wYWdhdGVzIHRyYWNlc1xuICAgICAgLy8gVGhpcyBtdXN0IGJlIHJlZ2lzdGVyZWQgYWZ0ZXIgdGhlIE9URUwgb25lLCB0byBlbnN1cmUgdGhhdCB0aGUgY29yZSB0cmFjZSBwcm9wYWdhdGlvbiBsb2dpYyB0YWtlcyBwcmVzZWRlbmNlXG4gICAgICAvLyBPdGhlcndpc2UsIHRoZSBzZW50cnktdHJhY2UgaGVhZGVyIG1heSBiZSBzZXQgbXVsdGlwbGUgdGltZXNcbiAgICAgIGluc3RydW1lbnRTZW50cnlOb2RlRmV0Y2gob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3QgbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbik7XG5cbi8vIE1hdGNoaW5nIHRoZSBiZWhhdmlvciBvZiB0aGUgYmFzZSBpbnN0cnVtZW50YXRpb25cbmZ1bmN0aW9uIGdldEFic29sdXRlVXJsKG9yaWdpbiwgcGF0aCA9ICcvJykge1xuICBjb25zdCB1cmwgPSBgJHtvcmlnaW59YDtcblxuICBpZiAodXJsLmVuZHNXaXRoKCcvJykgJiYgcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICByZXR1cm4gYCR7dXJsfSR7cGF0aC5zbGljZSgxKX1gO1xuICB9XG5cbiAgaWYgKCF1cmwuZW5kc1dpdGgoJy8nKSAmJiAhcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICByZXR1cm4gYCR7dXJsfS8ke3BhdGguc2xpY2UoMSl9YDtcbiAgfVxuXG4gIHJldHVybiBgJHt1cmx9JHtwYXRofWA7XG59XG5cbmZ1bmN0aW9uIF9zaG91bGRJbnN0cnVtZW50U3BhbnMob3B0aW9ucywgY2xpZW50T3B0aW9ucyA9IHt9KSB7XG4gIC8vIElmIGBzcGFuc2AgaXMgcGFzc2VkIGluLCBpdCB0YWtlcyBwcmVjZWRlbmNlXG4gIC8vIEVsc2UsIHdlIGJ5IGRlZmF1bHQgZW1pdCBzcGFucywgdW5sZXNzIGBza2lwT3BlblRlbGVtZXRyeVNldHVwYCBpcyBzZXQgdG8gYHRydWVgIG9yIHNwYW5zIGFyZSBub3QgZW5hYmxlZFxuICByZXR1cm4gdHlwZW9mIG9wdGlvbnMuc3BhbnMgPT09ICdib29sZWFuJ1xuICAgID8gb3B0aW9ucy5zcGFuc1xuICAgIDogIWNsaWVudE9wdGlvbnMuc2tpcE9wZW5UZWxlbWV0cnlTZXR1cCAmJiBjb3JlLmhhc1NwYW5zRW5hYmxlZChjbGllbnRPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnV2l0aERlZmF1bHRzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25Db25maWcgPSB7XG4gICAgcmVxdWlyZVBhcmVudGZvclNwYW5zOiBmYWxzZSxcbiAgICBpZ25vcmVSZXF1ZXN0SG9vazogcmVxdWVzdCA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBnZXRBYnNvbHV0ZVVybChyZXF1ZXN0Lm9yaWdpbiwgcmVxdWVzdC5wYXRoKTtcbiAgICAgIGNvbnN0IF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzID0gb3B0aW9ucy5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzO1xuICAgICAgY29uc3Qgc2hvdWxkSWdub3JlID0gX2lnbm9yZU91dGdvaW5nUmVxdWVzdHMgJiYgdXJsICYmIF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzKHVybCk7XG5cbiAgICAgIHJldHVybiAhIXNob3VsZElnbm9yZTtcbiAgICB9LFxuICAgIHN0YXJ0U3Bhbkhvb2s6ICgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLm5vZGVfZmV0Y2gnLFxuICAgICAgfTtcbiAgICB9LFxuICB9IDtcblxuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9uQ29uZmlnO1xufVxuXG5leHBvcnRzLm5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLWZldGNoLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25BbXFwbGliID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWFtcXBsaWInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdBbXFwbGliJztcblxuY29uc3QgY29uZmlnID0ge1xuICBjb25zdW1lRW5kSG9vazogKHNwYW4pID0+IHtcbiAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uYW1xcGxpYi5vdGVsLmNvbnN1bWVyJyk7XG4gIH0sXG4gIHB1Ymxpc2hIb29rOiAoc3BhbikgPT4ge1xuICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5hbXFwbGliLm90ZWwucHVibGlzaGVyJyk7XG4gIH0sXG59O1xuXG5jb25zdCBpbnN0cnVtZW50QW1xcGxpYiA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkFtcXBsaWIuQW1xcGxpYkluc3RydW1lbnRhdGlvbihjb25maWcpKTtcblxuY29uc3QgX2FtcXBsaWJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50QW1xcGxpYigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbYW1xcGxpYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYW1xcGxpYikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGFtcXBsaWJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9hbXFwbGliLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuYW1xcGxpYkludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgYW1xcGxpYkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfYW1xcGxpYkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5hbXFwbGliSW50ZWdyYXRpb24gPSBhbXFwbGliSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudEFtcXBsaWI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbXFwbGliLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js\");\n\nconst instrumentAnthropicAi = nodeCore.generateInstrumentOnce(\n  core.ANTHROPIC_AI_INTEGRATION_NAME,\n  options => new instrumentation.SentryAnthropicAiInstrumentation(options),\n);\n\nconst _anthropicAIIntegration = ((options = {}) => {\n  return {\n    name: core.ANTHROPIC_AI_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentAnthropicAi(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Anthropic AI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments Anthropic AI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.anthropicAIIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.anthropicAIIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.anthropicAIIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst anthropicAIIntegration = core.defineIntegration(_anthropicAIIntegration);\n\nexports.anthropicAIIntegration = anthropicAIIntegration;\nexports.instrumentAnthropicAi = instrumentAnthropicAi;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW50aHJvcGljLWFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsc05BQXNCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2FudGhyb3BpYy1haS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgaW5zdHJ1bWVudEFudGhyb3BpY0FpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgY29yZS5BTlRIUk9QSUNfQUlfSU5URUdSQVRJT05fTkFNRSxcbiAgb3B0aW9ucyA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uLlNlbnRyeUFudGhyb3BpY0FpSW5zdHJ1bWVudGF0aW9uKG9wdGlvbnMpLFxuKTtcblxuY29uc3QgX2FudGhyb3BpY0FJSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGNvcmUuQU5USFJPUElDX0FJX0lOVEVHUkFUSU9OX05BTUUsXG4gICAgb3B0aW9ucyxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50QW50aHJvcGljQWkob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIEFudGhyb3BpYyBBSSBTREsuXG4gKlxuICogVGhpcyBpbnRlZ3JhdGlvbiBpcyBlbmFibGVkIGJ5IGRlZmF1bHQuXG4gKlxuICogV2hlbiBjb25maWd1cmVkLCB0aGlzIGludGVncmF0aW9uIGF1dG9tYXRpY2FsbHkgaW5zdHJ1bWVudHMgQW50aHJvcGljIEFJIFNESyBjbGllbnQgaW5zdGFuY2VzXG4gKiB0byBjYXB0dXJlIHRlbGVtZXRyeSBkYXRhIGZvbGxvd2luZyBPcGVuVGVsZW1ldHJ5IFNlbWFudGljIENvbnZlbnRpb25zIGZvciBHZW5lcmF0aXZlIEFJLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5hbnRocm9waWNBSUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAjIyBPcHRpb25zXG4gKlxuICogLSBgcmVjb3JkSW5wdXRzYDogV2hldGhlciB0byByZWNvcmQgcHJvbXB0IG1lc3NhZ2VzIChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKiAtIGByZWNvcmRPdXRwdXRzYDogV2hldGhlciB0byByZWNvcmQgcmVzcG9uc2UgdGV4dCAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICpcbiAqICMjIyBEZWZhdWx0IEJlaGF2aW9yXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGludGVncmF0aW9uIHdpbGw6XG4gKiAtIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgT05MWSBpZiBgc2VuZERlZmF1bHRQaWlgIGlzIHNldCB0byBgdHJ1ZWAgaW4geW91ciBTZW50cnkgY2xpZW50IG9wdGlvbnNcbiAqIC0gT3RoZXJ3aXNlLCBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIE5PVCByZWNvcmRlZCB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgd2hlbiBzZW5kRGVmYXVsdFBpaSBpcyBmYWxzZVxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuYW50aHJvcGljQUlJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IHRydWUsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiB0cnVlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICpcbiAqIC8vIE5ldmVyIHJlY29yZCBpbnB1dHMvb3V0cHV0cyByZWdhcmRsZXNzIG9mIHNlbmREZWZhdWx0UGlpXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIHNlbmREZWZhdWx0UGlpOiB0cnVlLFxuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuYW50aHJvcGljQUlJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IGZhbHNlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogZmFsc2VcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKi9cbmNvbnN0IGFudGhyb3BpY0FJSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9hbnRocm9waWNBSUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5hbnRocm9waWNBSUludGVncmF0aW9uID0gYW50aHJvcGljQUlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEFudGhyb3BpY0FpID0gaW5zdHJ1bWVudEFudGhyb3BpY0FpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=0.19.2 <1.0.0'];\n\n/**\n * Sentry Anthropic AI instrumentation using OpenTelemetry.\n */\nclass SentryAnthropicAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-anthropic-ai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition(\n      '@anthropic-ai/sdk',\n      supportedVersions,\n      this._patch.bind(this),\n    );\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the Anthropic AI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.Anthropic;\n\n    const config = this.getConfig();\n\n    const WrappedAnthropic = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const recordInputs = config.recordInputs ?? defaultPii;\n      const recordOutputs = config.recordOutputs ?? defaultPii;\n\n      return core.instrumentAnthropicAiClient(instance , {\n        recordInputs,\n        recordOutputs,\n      });\n    } ;\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedAnthropic, Original);\n    Object.setPrototypeOf(WrappedAnthropic.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedAnthropic, key, descriptor);\n        }\n      }\n    }\n\n    // Constructor replacement - handle read-only properties\n    // The Anthropic property might have only a getter, so use defineProperty\n    try {\n      exports.Anthropic = WrappedAnthropic;\n    } catch (error) {\n      // If direct assignment fails, override the property descriptor\n      Object.defineProperty(exports, 'Anthropic', {\n        value: WrappedAnthropic,\n        writable: true,\n        configurable: true,\n        enumerable: true,\n      });\n    }\n\n    // Wrap the default export if it points to the original constructor\n    // Constructor replacement - handle read-only properties\n    // The Anthropic property might have only a getter, so use defineProperty\n    if (exports.default === Original) {\n      try {\n        exports.default = WrappedAnthropic;\n      } catch (error) {\n        // If direct assignment fails, override the property descriptor\n        Object.defineProperty(exports, 'default', {\n          value: WrappedAnthropic,\n          writable: true,\n          configurable: true,\n          enumerable: true,\n        });\n      }\n    }\n    return exports;\n  }\n}\n\nexports.SentryAnthropicAiInstrumentation = SentryAnthropicAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW50aHJvcGljLWFpL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxDQUFDLG9EQUFvRCx5Q0FBeUMsMENBQTBDLDhDQUE4QyxvREFBb0QscURBQXFELGlCQUFpQjs7QUFFaFQsd0JBQXdCLG1CQUFPLENBQUMscU1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0M7QUFDeEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW50aHJvcGljLWFpL2luc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlOZXh0SnNWZXJzaW9uXCJdID0gXCIxNS41LjRcIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3Qgc3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49MC4xOS4yIDwxLjAuMCddO1xuXG4vKipcbiAqIFNlbnRyeSBBbnRocm9waWMgQUkgaW5zdHJ1bWVudGF0aW9uIHVzaW5nIE9wZW5UZWxlbWV0cnkuXG4gKi9cbmNsYXNzIFNlbnRyeUFudGhyb3BpY0FpSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICBzdXBlcignQHNlbnRyeS9pbnN0cnVtZW50YXRpb24tYW50aHJvcGljLWFpJywgY29yZS5TREtfVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW5zdHJ1bWVudGF0aW9uIGJ5IGRlZmluaW5nIHRoZSBtb2R1bGVzIHRvIGJlIHBhdGNoZWQuXG4gICAqL1xuICAgaW5pdCgpIHtcbiAgICBjb25zdCBtb2R1bGUgPSBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICAgJ0BhbnRocm9waWMtYWkvc2RrJyxcbiAgICAgIHN1cHBvcnRlZFZlcnNpb25zLFxuICAgICAgdGhpcy5fcGF0Y2guYmluZCh0aGlzKSxcbiAgICApO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBwYXRjaCBsb2dpYyBhcHBseWluZyBpbnN0cnVtZW50YXRpb24gdG8gdGhlIEFudGhyb3BpYyBBSSBjbGllbnQgY29uc3RydWN0b3IuXG4gICAqL1xuICAgX3BhdGNoKGV4cG9ydHMpIHtcbiAgICBjb25zdCBPcmlnaW5hbCA9IGV4cG9ydHMuQW50aHJvcGljO1xuXG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgIGNvbnN0IFdyYXBwZWRBbnRocm9waWMgPSBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gUmVmbGVjdC5jb25zdHJ1Y3QoT3JpZ2luYWwsIGFyZ3MpO1xuICAgICAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRQaWkgPSBCb29sZWFuKGNsaWVudD8uZ2V0T3B0aW9ucygpLnNlbmREZWZhdWx0UGlpKTtcblxuICAgICAgY29uc3QgcmVjb3JkSW5wdXRzID0gY29uZmlnLnJlY29yZElucHV0cyA/PyBkZWZhdWx0UGlpO1xuICAgICAgY29uc3QgcmVjb3JkT3V0cHV0cyA9IGNvbmZpZy5yZWNvcmRPdXRwdXRzID8/IGRlZmF1bHRQaWk7XG5cbiAgICAgIHJldHVybiBjb3JlLmluc3RydW1lbnRBbnRocm9waWNBaUNsaWVudChpbnN0YW5jZSAsIHtcbiAgICAgICAgcmVjb3JkSW5wdXRzLFxuICAgICAgICByZWNvcmRPdXRwdXRzLFxuICAgICAgfSk7XG4gICAgfSA7XG5cbiAgICAvLyBQcmVzZXJ2ZSBzdGF0aWMgYW5kIHByb3RvdHlwZSBjaGFpbnNcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoV3JhcHBlZEFudGhyb3BpYywgT3JpZ2luYWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkQW50aHJvcGljLnByb3RvdHlwZSwgT3JpZ2luYWwucHJvdG90eXBlKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9yaWdpbmFsKSkge1xuICAgICAgaWYgKCFbJ2xlbmd0aCcsICduYW1lJywgJ3Byb3RvdHlwZSddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT3JpZ2luYWwsIGtleSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRBbnRocm9waWMsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBBbnRocm9waWMgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICB0cnkge1xuICAgICAgZXhwb3J0cy5BbnRocm9waWMgPSBXcmFwcGVkQW50aHJvcGljO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiBkaXJlY3QgYXNzaWdubWVudCBmYWlscywgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3JcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQW50aHJvcGljJywge1xuICAgICAgICB2YWx1ZTogV3JhcHBlZEFudGhyb3BpYyxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdyYXAgdGhlIGRlZmF1bHQgZXhwb3J0IGlmIGl0IHBvaW50cyB0byB0aGUgb3JpZ2luYWwgY29uc3RydWN0b3JcbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBBbnRocm9waWMgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICBpZiAoZXhwb3J0cy5kZWZhdWx0ID09PSBPcmlnaW5hbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXhwb3J0cy5kZWZhdWx0ID0gV3JhcHBlZEFudGhyb3BpYztcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElmIGRpcmVjdCBhc3NpZ25tZW50IGZhaWxzLCBvdmVycmlkZSB0aGUgcHJvcGVydHkgZGVzY3JpcHRvclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2RlZmF1bHQnLCB7XG4gICAgICAgICAgdmFsdWU6IFdyYXBwZWRBbnRocm9waWMsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfVxufVxuXG5leHBvcnRzLlNlbnRyeUFudGhyb3BpY0FpSW5zdHJ1bWVudGF0aW9uID0gU2VudHJ5QW50aHJvcGljQWlJbnN0cnVtZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0cnVtZW50YXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\");\n\nconst CLAUDE_CODE_INTEGRATION_NAME = 'ClaudeCode';\n\n// Global singleton - only patch once per application instance\nlet _globalPatchedQuery = null;\nlet _initPromise = null;\n\n/**\n * Lazily loads and patches the Claude Code SDK.\n * Ensures only one patched instance exists globally.\n */\nasync function ensurePatchedQuery() {\n  if (_globalPatchedQuery) {\n    return;\n  }\n\n  if (_initPromise) {\n    return _initPromise;\n  }\n\n  _initPromise = (async () => {\n    try {\n      // Use webpackIgnore to prevent webpack from trying to resolve this at build time\n      // The import resolves at runtime from the user's node_modules\n      const sdkPath = '@anthropic-ai/claude-agent-sdk';\n      const claudeSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n      if (!claudeSDK || typeof claudeSDK.query !== 'function') {\n        throw new Error(\n          `Failed to find 'query' function in @anthropic-ai/claude-agent-sdk.\\n` +\n            `Make sure you have version >=0.1.0 installed.`,\n        );\n      }\n\n      const client = core.getClient();\n      const integration = client?.getIntegrationByName(CLAUDE_CODE_INTEGRATION_NAME);\n      const options = (integration )?.options  || {};\n\n      _globalPatchedQuery = instrumentation.patchClaudeCodeQuery(claudeSDK.query, options);\n    } catch (error) {\n      // Reset state on failure to allow retry on next call\n      _initPromise = null;\n\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Unknown error occurred while loading @anthropic-ai/claude-agent-sdk';\n\n      throw new Error(\n        `Failed to instrument Claude Code SDK:\\n${errorMessage}\\n\\n` +\n          `Make sure @anthropic-ai/claude-agent-sdk is installed:\\n` +\n          `  npm install @anthropic-ai/claude-agent-sdk\\n` +\n          `  # or\\n` +\n          `  yarn add @anthropic-ai/claude-agent-sdk`,\n      );\n    }\n  })();\n\n  return _initPromise;\n}\n\n/**\n * Creates a Sentry-instrumented query function for the Claude Code SDK.\n *\n * This is a convenience helper that reduces boilerplate to a single line.\n * The SDK is lazily loaded on first query call, and the patched version is cached globally.\n *\n * **Important**: This helper is NOT automatic. You must call it in your code.\n * The Claude Code SDK cannot be automatically instrumented due to ESM module\n * and webpack bundling limitations.\n *\n * @param options - Optional configuration for this specific agent instance\n * @param options.name - Custom agent name for differentiation (defaults to 'claude-code')\n * @returns An instrumented query function ready to use\n *\n * @example\n * ```typescript\n * import { createInstrumentedClaudeQuery } from '@sentry/node';\n *\n * // Default agent name ('claude-code')\n * const query = createInstrumentedClaudeQuery();\n *\n * // Custom agent name for differentiation\n * const appBuilder = createInstrumentedClaudeQuery({ name: 'app-builder' });\n * const chatAgent = createInstrumentedClaudeQuery({ name: 'chat-assistant' });\n *\n * // Use as normal - automatically instrumented!\n * for await (const message of query({\n *   prompt: 'Hello',\n *   options: { model: 'claude-sonnet-4-5' }\n * })) {\n *   console.log(message);\n * }\n * ```\n *\n * Configuration is automatically pulled from your `claudeCodeIntegration()` setup:\n *\n * @example\n * ```typescript\n * Sentry.init({\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,   // These options are used\n *       recordOutputs: true,  // by createInstrumentedClaudeQuery()\n *     })\n *   ]\n * });\n * ```\n */\nfunction createInstrumentedClaudeQuery(\n  options = {}\n) {\n  const agentName = options.name ?? 'claude-code';\n\n  return async function* query(...args) {\n    await ensurePatchedQuery();\n\n    if (!_globalPatchedQuery) {\n      throw new Error('[Sentry] Failed to initialize instrumented Claude Code query function');\n    }\n\n    // Create a new patched instance with custom agent name\n    const client = core.getClient();\n    const integration = client?.getIntegrationByName(CLAUDE_CODE_INTEGRATION_NAME);\n    const integrationOptions = (integration )?.options  || {};\n\n    // Import SDK again to get fresh query function\n    const sdkPath = '@anthropic-ai/claude-agent-sdk';\n    const claudeSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n    // Patch with custom agent name\n    const customPatchedQuery = instrumentation.patchClaudeCodeQuery(claudeSDK.query, {\n      ...integrationOptions,\n      agentName,\n    });\n\n    yield* customPatchedQuery(...args);\n  };\n}\n\nexports.createInstrumentedClaudeQuery = createInstrumentedClaudeQuery;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst CLAUDE_CODE_INTEGRATION_NAME = 'ClaudeCode';\n\nconst _claudeCodeIntegration = ((options = {}) => {\n  return {\n    name: CLAUDE_CODE_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      // Note: Automatic patching via require hooks doesn't work for ESM modules\n      // or webpack-bundled dependencies. Users must manually patch using patchClaudeCodeQuery()\n      // in their route files.\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Claude Code SDK.\n *\n * **Important**: Due to ESM module and bundler limitations, this integration requires\n * using the `createInstrumentedClaudeQuery()` helper function in your code.\n * See the example below for proper usage.\n *\n * This integration captures telemetry data following OpenTelemetry Semantic Conventions\n * for Generative AI, including:\n * - Agent invocation spans (`invoke_agent`)\n * - LLM chat spans (`chat`)\n * - Tool execution spans (`execute_tool`)\n * - Token usage, model info, and session tracking\n *\n * @example\n * ```typescript\n * // Step 1: Configure the integration\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   dsn: 'your-dsn',\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Step 2: Use the helper in your routes\n * import { createInstrumentedClaudeQuery } from '@sentry/node';\n *\n * const query = createInstrumentedClaudeQuery();\n *\n * // Use query as normal - automatically instrumented!\n * for await (const message of query({\n *   prompt: 'Hello',\n *   options: { model: 'claude-sonnet-4-5' }\n * })) {\n *   console.log(message);\n * }\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text, tool calls, and outputs (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```typescript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n * @see https://docs.sentry.io/platforms/javascript/guides/node/ai-monitoring/\n */\nconst claudeCodeIntegration = core.defineIntegration(_claudeCodeIntegration);\n\nexports.claudeCodeIntegration = claudeCodeIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY2xhdWRlLWNvZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjOztBQUVuQzs7QUFFQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jbGF1ZGUtY29kZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBDTEFVREVfQ09ERV9JTlRFR1JBVElPTl9OQU1FID0gJ0NsYXVkZUNvZGUnO1xuXG5jb25zdCBfY2xhdWRlQ29kZUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBDTEFVREVfQ09ERV9JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gTm90ZTogQXV0b21hdGljIHBhdGNoaW5nIHZpYSByZXF1aXJlIGhvb2tzIGRvZXNuJ3Qgd29yayBmb3IgRVNNIG1vZHVsZXNcbiAgICAgIC8vIG9yIHdlYnBhY2stYnVuZGxlZCBkZXBlbmRlbmNpZXMuIFVzZXJzIG11c3QgbWFudWFsbHkgcGF0Y2ggdXNpbmcgcGF0Y2hDbGF1ZGVDb2RlUXVlcnkoKVxuICAgICAgLy8gaW4gdGhlaXIgcm91dGUgZmlsZXMuXG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIENsYXVkZSBDb2RlIFNESy5cbiAqXG4gKiAqKkltcG9ydGFudCoqOiBEdWUgdG8gRVNNIG1vZHVsZSBhbmQgYnVuZGxlciBsaW1pdGF0aW9ucywgdGhpcyBpbnRlZ3JhdGlvbiByZXF1aXJlc1xuICogdXNpbmcgdGhlIGBjcmVhdGVJbnN0cnVtZW50ZWRDbGF1ZGVRdWVyeSgpYCBoZWxwZXIgZnVuY3Rpb24gaW4geW91ciBjb2RlLlxuICogU2VlIHRoZSBleGFtcGxlIGJlbG93IGZvciBwcm9wZXIgdXNhZ2UuXG4gKlxuICogVGhpcyBpbnRlZ3JhdGlvbiBjYXB0dXJlcyB0ZWxlbWV0cnkgZGF0YSBmb2xsb3dpbmcgT3BlblRlbGVtZXRyeSBTZW1hbnRpYyBDb252ZW50aW9uc1xuICogZm9yIEdlbmVyYXRpdmUgQUksIGluY2x1ZGluZzpcbiAqIC0gQWdlbnQgaW52b2NhdGlvbiBzcGFucyAoYGludm9rZV9hZ2VudGApXG4gKiAtIExMTSBjaGF0IHNwYW5zIChgY2hhdGApXG4gKiAtIFRvb2wgZXhlY3V0aW9uIHNwYW5zIChgZXhlY3V0ZV90b29sYClcbiAqIC0gVG9rZW4gdXNhZ2UsIG1vZGVsIGluZm8sIGFuZCBzZXNzaW9uIHRyYWNraW5nXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFN0ZXAgMTogQ29uZmlndXJlIHRoZSBpbnRlZ3JhdGlvblxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBkc246ICd5b3VyLWRzbicsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5jbGF1ZGVDb2RlSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBTdGVwIDI6IFVzZSB0aGUgaGVscGVyIGluIHlvdXIgcm91dGVzXG4gKiBpbXBvcnQgeyBjcmVhdGVJbnN0cnVtZW50ZWRDbGF1ZGVRdWVyeSB9IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogY29uc3QgcXVlcnkgPSBjcmVhdGVJbnN0cnVtZW50ZWRDbGF1ZGVRdWVyeSgpO1xuICpcbiAqIC8vIFVzZSBxdWVyeSBhcyBub3JtYWwgLSBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRlZCFcbiAqIGZvciBhd2FpdCAoY29uc3QgbWVzc2FnZSBvZiBxdWVyeSh7XG4gKiAgIHByb21wdDogJ0hlbGxvJyxcbiAqICAgb3B0aW9uczogeyBtb2RlbDogJ2NsYXVkZS1zb25uZXQtNC01JyB9XG4gKiB9KSkge1xuICogICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiAtIGByZWNvcmRJbnB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCBwcm9tcHQgbWVzc2FnZXMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYHJlY29yZE91dHB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCByZXNwb25zZSB0ZXh0LCB0b29sIGNhbGxzLCBhbmQgb3V0cHV0cyAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICpcbiAqICMjIyBEZWZhdWx0IEJlaGF2aW9yXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGludGVncmF0aW9uIHdpbGw6XG4gKiAtIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgT05MWSBpZiBgc2VuZERlZmF1bHRQaWlgIGlzIHNldCB0byBgdHJ1ZWAgaW4geW91ciBTZW50cnkgY2xpZW50IG9wdGlvbnNcbiAqIC0gT3RoZXJ3aXNlLCBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIE5PVCByZWNvcmRlZCB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgd2hlbiBzZW5kRGVmYXVsdFBpaSBpcyBmYWxzZVxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuY2xhdWRlQ29kZUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogdHJ1ZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IHRydWVcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gTmV2ZXIgcmVjb3JkIGlucHV0cy9vdXRwdXRzIHJlZ2FyZGxlc3Mgb2Ygc2VuZERlZmF1bHRQaWlcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgc2VuZERlZmF1bHRQaWk6IHRydWUsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5jbGF1ZGVDb2RlSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiBmYWxzZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IGZhbHNlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSBodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2FpLW1vbml0b3JpbmcvXG4gKi9cbmNvbnN0IGNsYXVkZUNvZGVJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2NsYXVkZUNvZGVJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuY2xhdWRlQ29kZUludGVncmF0aW9uID0gY2xhdWRlQ29kZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst GEN_AI_ATTRIBUTES = {\n  SYSTEM: 'gen_ai.system',\n  OPERATION_NAME: 'gen_ai.operation.name',\n  REQUEST_MODEL: 'gen_ai.request.model',\n  REQUEST_MESSAGES: 'gen_ai.request.messages',\n  RESPONSE_TEXT: 'gen_ai.response.text',\n  RESPONSE_TOOL_CALLS: 'gen_ai.response.tool_calls',\n  RESPONSE_ID: 'gen_ai.response.id',\n  RESPONSE_MODEL: 'gen_ai.response.model',\n  USAGE_INPUT_TOKENS: 'gen_ai.usage.input_tokens',\n  USAGE_OUTPUT_TOKENS: 'gen_ai.usage.output_tokens',\n  USAGE_TOTAL_TOKENS: 'gen_ai.usage.total_tokens',\n  TOOL_NAME: 'gen_ai.tool.name',\n  TOOL_TYPE: 'gen_ai.tool.type',\n  TOOL_INPUT: 'gen_ai.tool.input',\n  TOOL_OUTPUT: 'gen_ai.tool.output',\n  AGENT_NAME: 'gen_ai.agent.name',\n} ;\n\nconst SENTRY_ORIGIN = 'auto.ai.claude-code';\n\n/**\n * Maps Claude Code tool names to OpenTelemetry tool types.\n *\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/\n * @param toolName - The name of the tool (e.g., 'Bash', 'Read', 'WebSearch')\n * @returns The OpenTelemetry tool type: 'function', 'extension', or 'datastore'\n */\nfunction getToolType(toolName) {\n  // Client-side execution tools - functions that run on the client\n  const functionTools = new Set([\n    'Bash', 'BashOutput', 'KillShell', // Shell/process tools\n    'Read', 'Write', 'Edit', // File operations\n    'Glob', 'Grep', // File search\n    'Task', 'ExitPlanMode', 'TodoWrite', // Agent control\n    'NotebookEdit', 'SlashCommand', // Specialized operations\n  ]);\n\n  // Agent-side API calls - external service integrations\n  const extensionTools = new Set([\n    'WebSearch', 'WebFetch',\n  ]);\n\n  // Data access tools - database/structured data operations\n  // (Currently none in Claude Code, but future-proofing)\n  const datastoreTools = new Set([]);\n\n  if (functionTools.has(toolName)) return 'function';\n  if (extensionTools.has(toolName)) return 'extension';\n  if (datastoreTools.has(toolName)) return 'datastore';\n\n  // Default to function for unknown tools (safest assumption)\n  return 'function';\n}\n\nfunction setTokenUsageAttributes(\n  span,\n  inputTokens,\n  outputTokens,\n  cacheCreationTokens,\n  cacheReadTokens,\n) {\n  const attrs = {};\n\n  if (typeof inputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_INPUT_TOKENS] = inputTokens;\n  }\n  if (typeof outputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_OUTPUT_TOKENS] = outputTokens;\n  }\n\n  const total = (inputTokens ?? 0) + (outputTokens ?? 0) + (cacheCreationTokens ?? 0) + (cacheReadTokens ?? 0);\n  if (total > 0) {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_TOTAL_TOKENS] = total;\n  }\n\n  if (Object.keys(attrs).length > 0) {\n    span.setAttributes(attrs);\n  }\n}\n\n/**\n * Patches the Claude Code SDK query function with Sentry instrumentation.\n * This function can be called directly to patch an imported query function.\n */\nfunction patchClaudeCodeQuery(\n  queryFunction,\n  options = {},\n) {\n  const patchedQuery = function ( ...args) {\n    const client = core.getClient();\n    const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n    const recordInputs = options.recordInputs ?? defaultPii;\n    const recordOutputs = options.recordOutputs ?? defaultPii;\n    const agentName = options.agentName ?? 'claude-code';\n\n    // Parse query arguments\n    const [queryParams] = args ;\n    const { options: queryOptions, inputMessages } = queryParams || {};\n    const model = (queryOptions )?.model ?? 'sonnet';\n\n    // Create original query instance\n    const originalQueryInstance = queryFunction.apply(this, args);\n\n    // Create instrumented generator\n    const instrumentedGenerator = _createInstrumentedGenerator(\n      originalQueryInstance,\n      model ,\n      { recordInputs, recordOutputs, inputMessages, agentName },\n    );\n\n    // Preserve Query interface methods\n    if (typeof (originalQueryInstance ).interrupt === 'function') {\n      (instrumentedGenerator ).interrupt = (\n        (originalQueryInstance ).interrupt\n      ).bind(originalQueryInstance);\n    }\n    if (typeof (originalQueryInstance ).setPermissionMode === 'function') {\n      (instrumentedGenerator ).setPermissionMode = (\n        (originalQueryInstance ).setPermissionMode\n      ).bind(originalQueryInstance);\n    }\n\n    return instrumentedGenerator;\n  };\n\n  return patchedQuery ;\n}\n\n/**\n * Creates an instrumented async generator that wraps the original query.\n */\nfunction _createInstrumentedGenerator(\n  originalQuery,\n  model,\n  instrumentationOptions\n\n,\n) {\n    const agentName = instrumentationOptions.agentName ?? 'claude-code';\n\n    return core.startSpanManual(\n      {\n        name: `invoke_agent ${agentName}`,\n        op: 'gen_ai.invoke_agent',\n        attributes: {\n          [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n          [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n          [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n          [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        },\n      },\n      async function* (span) {\n        // State accumulation\n        let sessionId = null;\n        let currentLLMSpan = null;\n        let currentTurnContent = '';\n        let currentTurnTools = [];\n        let currentTurnId = null;\n        let currentTurnModel = null;\n        let inputMessagesCaptured = false;\n        let finalResult = null;\n        let previousLLMSpan = null;\n        let previousTurnTools = [];\n\n        try {\n          for await (const message of originalQuery) {\n            const msg = message ;\n\n            // Extract session ID from system message\n            if (msg.type === 'system' && msg.session_id) {\n              sessionId = msg.session_id ;\n\n              if (\n                !inputMessagesCaptured &&\n                instrumentationOptions.recordInputs &&\n                msg.conversation_history\n              ) {\n                span.setAttributes({\n                  [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify(msg.conversation_history),\n                });\n                inputMessagesCaptured = true;\n              }\n            }\n\n            // Handle assistant messages\n            if (msg.type === 'assistant') {\n              // Close previous LLM span if still open\n              if (previousLLMSpan) {\n                previousLLMSpan.setStatus({ code: 1 });\n                previousLLMSpan.end();\n                previousLLMSpan = null;\n                previousTurnTools = [];\n              }\n\n              // Create new LLM span\n              if (!currentLLMSpan) {\n                currentLLMSpan = core.withActiveSpan(span, () => {\n                  return core.startSpanManual(\n                    {\n                      name: `chat ${model}`,\n                      op: 'gen_ai.chat',\n                      attributes: {\n                        [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n                        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n                        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                      },\n                    },\n                    (childSpan) => {\n                      if (instrumentationOptions.recordInputs && instrumentationOptions.inputMessages) {\n                        childSpan.setAttributes({\n                          [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify(\n                            instrumentationOptions.inputMessages,\n                          ),\n                        });\n                      }\n                      return childSpan;\n                    },\n                  );\n                });\n\n                currentTurnContent = '';\n                currentTurnTools = [];\n              }\n\n              // Accumulate content\n              const content = (msg.message )?.content ;\n              if (Array.isArray(content)) {\n                const textContent = content\n                  .filter((c) => (c ).type === 'text')\n                  .map((c) => (c ).text )\n                  .join('');\n                if (textContent) {\n                  currentTurnContent += textContent;\n                }\n\n                const tools = content.filter((c) => (c ).type === 'tool_use');\n                if (tools.length > 0) {\n                  currentTurnTools.push(...tools);\n                }\n              }\n\n              if ((msg.message )?.id) {\n                currentTurnId = (msg.message ).id ;\n              }\n              if ((msg.message )?.model) {\n                currentTurnModel = (msg.message ).model ;\n              }\n            }\n\n            // Handle result messages\n            if (msg.type === 'result') {\n              if (msg.result) {\n                finalResult = msg.result ;\n              }\n\n              // Close previous LLM span\n              if (previousLLMSpan) {\n                previousLLMSpan.setStatus({ code: 1 });\n                previousLLMSpan.end();\n                previousLLMSpan = null;\n                previousTurnTools = [];\n              }\n\n              // Finalize current LLM span\n              if (currentLLMSpan) {\n                if (instrumentationOptions.recordOutputs && currentTurnContent) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: currentTurnContent,\n                  });\n                }\n\n                if (instrumentationOptions.recordOutputs && currentTurnTools.length > 0) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_TOOL_CALLS]: JSON.stringify(currentTurnTools),\n                  });\n                }\n\n                if (currentTurnId) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_ID]: currentTurnId,\n                  });\n                }\n                if (currentTurnModel) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_MODEL]: currentTurnModel,\n                  });\n                }\n\n                if (msg.usage) {\n                  const usage = msg.usage ;\n                  setTokenUsageAttributes(\n                    currentLLMSpan,\n                    usage.input_tokens,\n                    usage.output_tokens,\n                    usage.cache_creation_input_tokens,\n                    usage.cache_read_input_tokens,\n                  );\n                }\n\n                currentLLMSpan.setStatus({ code: 1 });\n                currentLLMSpan.end();\n\n                previousLLMSpan = currentLLMSpan;\n                previousTurnTools = currentTurnTools;\n\n                currentLLMSpan = null;\n                currentTurnContent = '';\n                currentTurnTools = [];\n                currentTurnId = null;\n                currentTurnModel = null;\n              }\n            }\n\n            // Handle tool results\n            if (msg.type === 'user' && (msg.message )?.content) {\n              const content = (msg.message ).content ;\n              const toolResults = Array.isArray(content)\n                ? content.filter((c) => (c ).type === 'tool_result')\n                : [];\n\n              for (const toolResult of toolResults) {\n                const tr = toolResult ;\n                let matchingTool = currentTurnTools.find(\n                  (t) => (t ).id === tr.tool_use_id,\n                ) ;\n                let parentLLMSpan = currentLLMSpan;\n\n                if (!matchingTool && previousTurnTools.length > 0) {\n                  matchingTool = previousTurnTools.find(\n                    (t) => (t ).id === tr.tool_use_id,\n                  ) ;\n                  parentLLMSpan = previousLLMSpan;\n                }\n\n                if (matchingTool && parentLLMSpan) {\n                  core.withActiveSpan(parentLLMSpan, () => {\n                    const toolName = matchingTool.name ;\n                    const toolType = getToolType(toolName);\n\n                    core.startSpan(\n                      {\n                        name: `execute_tool ${toolName}`,\n                        op: 'gen_ai.execute_tool',\n                        attributes: {\n                          [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n                          [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n                          [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                          [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                          [GEN_AI_ATTRIBUTES.TOOL_NAME]: toolName,\n                          [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                        },\n                      },\n                      (toolSpan) => {\n                        if (instrumentationOptions.recordInputs && matchingTool.input) {\n                          toolSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_INPUT]: JSON.stringify(matchingTool.input),\n                          });\n                        }\n\n                        if (instrumentationOptions.recordOutputs && tr.content) {\n                          toolSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]:\n                              typeof tr.content === 'string' ? tr.content : JSON.stringify(tr.content),\n                          });\n                        }\n\n                        // Set span status explicitly\n                        if (tr.is_error) {\n                          toolSpan.setStatus({ code: 2, message: 'Tool execution error' });\n                        } else {\n                          toolSpan.setStatus({ code: 1 }); // Explicit success status\n                        }\n                      },\n                    );\n                  });\n                }\n              }\n            }\n\n            yield message;\n          }\n\n          if (instrumentationOptions.recordOutputs && finalResult) {\n            span.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: finalResult,\n            });\n          }\n\n          if (sessionId) {\n            span.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_ID]: sessionId,\n            });\n          }\n\n          span.setStatus({ code: 1 });\n        } catch (error) {\n          // Capture exception to Sentry with proper metadata\n          core.captureException(error, {\n            mechanism: {\n              type: SENTRY_ORIGIN,\n              handled: false,\n            },\n          });\n\n          span.setStatus({ code: 2, message: (error ).message });\n          throw error;\n        } finally {\n          // Ensure all child spans are closed even if generator exits early\n          if (currentLLMSpan && currentLLMSpan.isRecording()) {\n            currentLLMSpan.setStatus({ code: 1 });\n            currentLLMSpan.end();\n          }\n\n          if (previousLLMSpan && previousLLMSpan.isRecording()) {\n            previousLLMSpan.setStatus({ code: 1 });\n            previousLLMSpan.end();\n          }\n\n          span.end();\n        }\n      },\n    );\n}\n\nexports.patchClaudeCodeQuery = patchClaudeCodeQuery;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err, {\n    mechanism: {\n      handled: false,\n      type: 'auto.middleware.connect',\n    },\n  });\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  nodeCore.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need the \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pELEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Nvbm5lY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkNvbm5lY3QgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tY29ubmVjdCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0Nvbm5lY3QnO1xuXG5jb25zdCBpbnN0cnVtZW50Q29ubmVjdCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkNvbm5lY3QuQ29ubmVjdEluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2Nvbm5lY3RJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50Q29ubmVjdCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtDb25uZWN0XShodHRwczovL2dpdGh1Yi5jb20vc2VuY2hhbGFicy9jb25uZWN0LykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBpbml0aWFsaXplIHlvdXIgY29ubmVjdCBhcHAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Nvbm5lY3QgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvY29ubmVjdC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5jb25uZWN0SW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2Nvbm5lY3RJbnRlZ3JhdGlvbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBjb25uZWN0RXJyb3JNaWRkbGV3YXJlKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVyciwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICB0eXBlOiAnYXV0by5taWRkbGV3YXJlLmNvbm5lY3QnLFxuICAgIH0sXG4gIH0pO1xuICBuZXh0KGVycik7XG59XG5cbi8qKlxuICogQWRkIGEgQ29ubmVjdCBtaWRkbGV3YXJlIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBDb25uZWN0IGFwcCB0byBhdHRhY2ggdGhlIGVycm9yIGhhbmRsZXIgdG9cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBjb25uZWN0ID0gcmVxdWlyZShcImNvbm5lY3RcIik7XG4gKlxuICogY29uc3QgYXBwID0gY29ubmVjdCgpO1xuICpcbiAqIFNlbnRyeS5zZXR1cENvbm5lY3RFcnJvckhhbmRsZXIoYXBwKTtcbiAqXG4gKiAvLyBBZGQgeW91IGNvbm5lY3Qgcm91dGVzIGhlcmVcbiAqXG4gKiBhcHAubGlzdGVuKDMwMDApO1xuICogYGBgXG4gKi9cbmNvbnN0IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShjb25uZWN0RXJyb3JNaWRkbGV3YXJlKTtcblxuICAvLyBTYWRseSwgQ29ubmVjdEluc3RydW1lbnRhdGlvbiBoYXMgbm8gcmVxdWVzdEhvb2ssIHNvIHdlIG5lZWQgdG8gYWRkIHRoZSBhdHRyaWJ1dGVzIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGNvbm5lY3RcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICBub2RlQ29yZS5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2Nvbm5lY3QnKTtcbn07XG5cbmZ1bmN0aW9uIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcmVxdWVzdF9oYW5kbGVyXG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydjb25uZWN0LnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIGNvbm5lY3Qgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmNvbm5lY3QnLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBgJHt0eXBlfS5jb25uZWN0YCxcbiAgfSk7XG5cbiAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWUsIHdlIGRvbid0IG5lZWQgdGhlIFwibWlkZGxld2FyZSAtIFwiIHByZWZpeFxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1snY29ubmVjdC5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSk7XG4gIH1cbn1cblxuZXhwb3J0cy5jb25uZWN0SW50ZWdyYXRpb24gPSBjb25uZWN0SW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRDb25uZWN0ID0gaW5zdHJ1bWVudENvbm5lY3Q7XG5leHBvcnRzLnNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3QuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.22.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentDataloader();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      // This is called either immediately or when the instrumentation is wrapped\n      instrumentationWrappedCallback?.(() => {\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n          if (spanJSON.description?.startsWith('dataloader')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n          }\n\n          // These are all possible dataloader span descriptions\n          // Still checking for the future versions\n          // in case they add support for `clear` and `prime`\n          if (\n            spanJSON.description === 'dataloader.load' ||\n            spanJSON.description === 'dataloader.loadMany' ||\n            spanJSON.description === 'dataloader.batch'\n          ) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n            // TODO: We can try adding `key` to the `data` attribute upstream.\n            // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n          }\n        });\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQ0FBa0MsbUJBQU8sQ0FBQyxxT0FBMkM7QUFDckYsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRGF0YWxvYWRlcic7XG5cbmNvbnN0IGluc3RydW1lbnREYXRhbG9hZGVyID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlci5EYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIGxldCBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IGluc3RydW1lbnREYXRhbG9hZGVyKCk7XG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2sgPSBub2RlQ29yZS5pbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICAvLyBUaGlzIGlzIGNhbGxlZCBlaXRoZXIgaW1tZWRpYXRlbHkgb3Igd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIHdyYXBwZWRcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaz8uKCgpID0+IHtcbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgICBpZiAoc3BhbkpTT04uZGVzY3JpcHRpb24/LnN0YXJ0c1dpdGgoJ2RhdGFsb2FkZXInKSkge1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5kYXRhbG9hZGVyJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlc2UgYXJlIGFsbCBwb3NzaWJsZSBkYXRhbG9hZGVyIHNwYW4gZGVzY3JpcHRpb25zXG4gICAgICAgICAgLy8gU3RpbGwgY2hlY2tpbmcgZm9yIHRoZSBmdXR1cmUgdmVyc2lvbnNcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZXkgYWRkIHN1cHBvcnQgZm9yIGBjbGVhcmAgYW5kIGBwcmltZWBcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZCcgfHxcbiAgICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5sb2FkTWFueScgfHxcbiAgICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5iYXRjaCdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2NhY2hlLmdldCcpO1xuICAgICAgICAgICAgLy8gVE9ETzogV2UgY2FuIHRyeSBhZGRpbmcgYGtleWAgdG8gdGhlIGBkYXRhYCBhdHRyaWJ1dGUgdXBzdHJlYW0uXG4gICAgICAgICAgICAvLyBPciBhbHRlcm5hdGl2ZWx5LCB3ZSBjYW4gYWRkIGByZXF1ZXN0SG9va2AgdG8gdGhlIGRhdGFsb2FkZXIgaW5zdHJ1bWVudGF0aW9uLlxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2RhdGFsb2FkZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2RhdGFsb2FkZXIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BkYXRhbG9hZGVySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZGF0YWxvYWRlci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmRhdGFsb2FkZXJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZGF0YWxvYWRlckludGVncmF0aW9uID0gZGF0YWxvYWRlckludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnREYXRhbG9hZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWxvYWRlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nfunction requestHook(span) {\n  nodeCore.addOriginToSpan(span, 'auto.http.otel.express');\n\n  const attributes = core.spanToJSON(span).data;\n  // this is one of: middleware, request_handler, router\n  const type = attributes['express.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n  }\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['express.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nfunction spanNameHook(info, defaultName) {\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n    return defaultName;\n  }\n  if (info.layerType === 'request_handler') {\n    // type cast b/c Otel unfortunately types info.request as any :(\n    const req = info.request ;\n    const method = req.method ? req.method.toUpperCase() : 'GET';\n    core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n  }\n  return defaultName;\n}\n\nconst instrumentExpress = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    request,\n    res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    // When an error happens, the `expressRequestHandler` middleware does not run, so we set it here too\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const eventId = core.captureException(error, { mechanism: { type: 'auto.middleware.express', handled: false } });\n      (res ).sentry = eventId;\n    }\n\n    next(error);\n  };\n}\n\nfunction expressRequestHandler() {\n  return function sentryRequestMiddleware(\n    request,\n    _res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    next();\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressRequestHandler());\n  app.use(expressErrorHandler(options));\n  nodeCore.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || error.output?.statusCode;\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst minimatch = __webpack_require__(/*! minimatch */ \"(rsc)/../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/commonjs/index.js\");\n\n/*\nVendored in and modified from @fastify/otel version 0.8.0\nhttps://github.com/fastify/otel/releases/tag/v0.8.0\n\nTried not to modify the original code too much keeping it as a JavaScript CJS module to make it easier to update when required\n\nModifications include:\n- Removed reading of package.json to get the version and package name\n\nMIT License\n\nCopyright (c) 2024 Fastify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n// SENTRY VENDOR NOTE\n// Instead of using the package.json file, we hard code the package name and version here.\nconst PACKAGE_NAME = '@fastify/otel';\nconst PACKAGE_VERSION = '0.8.0';\n\n// Constants\nconst SUPPORTED_VERSIONS = '>=4.0.0 <6';\nconst FASTIFY_HOOKS = [\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preHandler',\n  'preSerialization',\n  'onSend',\n  'onResponse',\n  'onError',\n];\nconst ATTRIBUTE_NAMES = {\n  HOOK_NAME: 'hook.name',\n  FASTIFY_TYPE: 'fastify.type',\n  HOOK_CALLBACK_NAME: 'hook.callback.name',\n  ROOT: 'fastify.root',\n};\nconst HOOK_TYPES = {\n  ROUTE: 'route-hook',\n  INSTANCE: 'hook',\n  HANDLER: 'request-handler',\n};\nconst ANONYMOUS_FUNCTION_NAME = 'anonymous';\n\n// Symbols\nconst kInstrumentation = Symbol('fastify otel instance');\nconst kRequestSpan = Symbol('fastify otel request spans');\nconst kRequestContext = Symbol('fastify otel request context');\nconst kAddHookOriginal = Symbol('fastify otel addhook original');\nconst kSetNotFoundOriginal = Symbol('fastify otel setnotfound original');\nconst kIgnorePaths = Symbol('fastify otel ignore path');\n\nclass FastifyOtelInstrumentation extends instrumentation.InstrumentationBase {\n  constructor(config) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n    this.servername = config?.servername ?? process.env.OTEL_SERVICE_NAME ?? 'fastify';\n    this[kIgnorePaths] = null;\n    this._logger = api.diag.createComponentLogger({ namespace: PACKAGE_NAME });\n\n    if (config?.ignorePaths != null || process.env.OTEL_FASTIFY_IGNORE_PATHS != null) {\n      const ignorePaths = config?.ignorePaths ?? process.env.OTEL_FASTIFY_IGNORE_PATHS;\n\n      if ((typeof ignorePaths !== 'string' || ignorePaths.length === 0) && typeof ignorePaths !== 'function') {\n        throw new TypeError('ignorePaths must be a string or a function');\n      }\n\n      const globMatcher = minimatch.minimatch;\n\n      this[kIgnorePaths] = routeOptions => {\n        if (typeof ignorePaths === 'function') {\n          return ignorePaths(routeOptions);\n        } else {\n          return globMatcher(routeOptions.url, ignorePaths);\n        }\n      };\n    }\n  }\n\n  enable() {\n    if (this._handleInitialization === undefined && this.getConfig().registerOnInitialization) {\n      const FastifyInstrumentationPlugin = this.plugin();\n      this._handleInitialization = message => {\n        message.fastify.register(FastifyInstrumentationPlugin);\n      };\n      dc.default.subscribe('fastify.initialization', this._handleInitialization);\n    }\n    return super.enable();\n  }\n\n  disable() {\n    if (this._handleInitialization) {\n      dc.default.unsubscribe('fastify.initialization', this._handleInitialization);\n      this._handleInitialization = undefined;\n    }\n    return super.disable();\n  }\n\n  // We do not do patching in this instrumentation\n  init() {\n    return [];\n  }\n\n  plugin() {\n    const instrumentation = this;\n\n    FastifyInstrumentationPlugin[Symbol.for('skip-override')] = true;\n    FastifyInstrumentationPlugin[Symbol.for('fastify.display-name')] = '@fastify/otel';\n    FastifyInstrumentationPlugin[Symbol.for('plugin-meta')] = {\n      fastify: SUPPORTED_VERSIONS,\n      name: '@fastify/otel',\n    };\n\n    return FastifyInstrumentationPlugin;\n\n    function FastifyInstrumentationPlugin(instance, opts, done) {\n      instance.decorate(kInstrumentation, instrumentation);\n      // addHook and notfoundHandler are essentially inherited from the prototype\n      // what is important is to bound it to the right instance\n      instance.decorate(kAddHookOriginal, instance.addHook);\n      instance.decorate(kSetNotFoundOriginal, instance.setNotFoundHandler);\n      instance.decorateRequest('opentelemetry', function openetelemetry() {\n        const ctx = this[kRequestContext];\n        const span = this[kRequestSpan];\n        return {\n          span,\n          tracer: instrumentation.tracer,\n          context: ctx,\n          inject: (carrier, setter) => {\n            return api.propagation.inject(ctx, carrier, setter);\n          },\n          extract: (carrier, getter) => {\n            return api.propagation.extract(ctx, carrier, getter);\n          },\n        };\n      });\n      instance.decorateRequest(kRequestSpan, null);\n      instance.decorateRequest(kRequestContext, null);\n\n      instance.addHook('onRoute', function (routeOptions) {\n        if (instrumentation[kIgnorePaths]?.(routeOptions) === true) {\n          instrumentation._logger.debug(\n            `Ignoring route instrumentation ${routeOptions.method} ${routeOptions.url} because it matches the ignore path`,\n          );\n          return;\n        }\n\n        for (const hook of FASTIFY_HOOKS) {\n          if (routeOptions[hook] != null) {\n            const handlerLike = routeOptions[hook];\n\n            if (typeof handlerLike === 'function') {\n              routeOptions[hook] = handlerWrapper(handlerLike, {\n                [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                  handlerLike.name?.length > 0 ? handlerLike.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n              });\n            } else if (Array.isArray(handlerLike)) {\n              const wrappedHandlers = [];\n\n              for (const handler of handlerLike) {\n                wrappedHandlers.push(\n                  handlerWrapper(handler, {\n                    [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                    [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                    [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                    [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                    [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                      handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME,\n                  }),\n                );\n              }\n\n              routeOptions[hook] = wrappedHandlers;\n            }\n          }\n        }\n\n        // We always want to add the onSend hook to the route to be executed last\n        if (routeOptions.onSend != null) {\n          routeOptions.onSend = Array.isArray(routeOptions.onSend)\n            ? [...routeOptions.onSend, onSendHook]\n            : [routeOptions.onSend, onSendHook];\n        } else {\n          routeOptions.onSend = onSendHook;\n        }\n\n        // We always want to add the onError hook to the route to be executed last\n        if (routeOptions.onError != null) {\n          routeOptions.onError = Array.isArray(routeOptions.onError)\n            ? [...routeOptions.onError, onErrorHook]\n            : [routeOptions.onError, onErrorHook];\n        } else {\n          routeOptions.onError = onErrorHook;\n        }\n\n        routeOptions.handler = handlerWrapper(routeOptions.handler, {\n          [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n          [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route-handler`,\n          [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.HANDLER,\n          [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n          [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n            routeOptions.handler.name.length > 0 ? routeOptions.handler.name : ANONYMOUS_FUNCTION_NAME,\n        });\n      });\n\n      instance.addHook('onRequest', function (request, _reply, hookDone) {\n        if (this[kInstrumentation].isEnabled() === false) {\n          return hookDone();\n        } else if (\n          this[kInstrumentation][kIgnorePaths]?.({\n            url: request.url,\n            method: request.method,\n          }) === true\n        ) {\n          this[kInstrumentation]._logger.debug(\n            `Ignoring request ${request.method} ${request.url} because it matches the ignore path`,\n          );\n          return hookDone();\n        }\n\n        let ctx = api.context.active();\n\n        if (api.trace.getSpan(ctx) == null) {\n          ctx = api.propagation.extract(ctx, request.headers);\n        }\n\n        const rpcMetadata = core.getRPCMetadata(ctx);\n\n        if (request.routeOptions.url != null && rpcMetadata?.type === core.RPCType.HTTP) {\n          rpcMetadata.route = request.routeOptions.url;\n        }\n\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = this[kInstrumentation].tracer.startSpan(\n          'request',\n          {\n            attributes: {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.ROOT]: '@fastify/otel',\n              [semanticConventions.ATTR_HTTP_ROUTE]: request.url,\n              [semanticConventions.ATTR_HTTP_REQUEST_METHOD]: request.method,\n            },\n          },\n          ctx,\n        );\n\n        request[kRequestContext] = api.trace.setSpan(ctx, span);\n        request[kRequestSpan] = span;\n\n        api.context.with(request[kRequestContext], () => {\n          hookDone();\n        });\n      });\n\n      // onResponse is the last hook to be executed, only added for 404 handlers\n      instance.addHook('onResponse', function (request, reply, hookDone) {\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.OK,\n            message: 'OK',\n          });\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: 404,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone();\n      });\n\n      instance.addHook = addHookPatched;\n      instance.setNotFoundHandler = setNotFoundHandlerPatched;\n\n      done();\n\n      function onSendHook(request, reply, payload, hookDone) {\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          if (reply.statusCode < 500) {\n            span.setStatus({\n              code: api.SpanStatusCode.OK,\n              message: 'OK',\n            });\n          }\n\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: reply.statusCode,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone(null, payload);\n      }\n\n      function onErrorHook(request, reply, error, hookDone) {\n        /** @type {Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message: error.message,\n          });\n          span.recordException(error);\n        }\n\n        hookDone();\n      }\n\n      function addHookPatched(name, hook) {\n        const addHookOriginal = this[kAddHookOriginal];\n\n        if (FASTIFY_HOOKS.includes(name)) {\n          return addHookOriginal.call(\n            this,\n            name,\n            handlerWrapper(hook, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - ${name}`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hook.name?.length > 0 ? hook.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            }),\n          );\n        } else {\n          return addHookOriginal.call(this, name, hook);\n        }\n      }\n\n      function setNotFoundHandlerPatched(hooks, handler) {\n        const setNotFoundHandlerOriginal = this[kSetNotFoundOriginal];\n        if (typeof hooks === 'function') {\n          handler = handlerWrapper(hooks, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              hooks.name?.length > 0 ? hooks.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, handler);\n        } else {\n          if (hooks.preValidation != null) {\n            hooks.preValidation = handlerWrapper(hooks.preValidation, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preValidation`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preValidation.name?.length > 0\n                  ? hooks.preValidation.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          if (hooks.preHandler != null) {\n            hooks.preHandler = handlerWrapper(hooks.preHandler, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preHandler`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preHandler.name?.length > 0\n                  ? hooks.preHandler.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          handler = handlerWrapper(handler, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, hooks, handler);\n        }\n      }\n\n      function handlerWrapper(handler, spanAttributes = {}) {\n        return function handlerWrapped(...args) {\n          /** @type {FastifyOtelInstrumentation} */\n          const instrumentation = this[kInstrumentation];\n          const [request] = args;\n\n          if (instrumentation.isEnabled() === false) {\n            return handler.call(this, ...args);\n          }\n\n          const ctx = request[kRequestContext] ?? api.context.active();\n          const span = instrumentation.tracer.startSpan(\n            `handler - ${\n              handler.name?.length > 0\n                ? handler.name\n                : (this.pluginName /* c8 ignore next */ ?? ANONYMOUS_FUNCTION_NAME) /* c8 ignore next */\n            }`,\n            {\n              attributes: spanAttributes,\n            },\n            ctx,\n          );\n\n          return api.context.with(\n            api.trace.setSpan(ctx, span),\n            function () {\n              try {\n                const res = handler.call(this, ...args);\n\n                if (typeof res?.then === 'function') {\n                  return res.then(\n                    result => {\n                      span.end();\n                      return result;\n                    },\n                    error => {\n                      span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: error.message,\n                      });\n                      span.recordException(error);\n                      span.end();\n                      return Promise.reject(error);\n                    },\n                  );\n                }\n\n                span.end();\n                return res;\n              } catch (error) {\n                span.setStatus({\n                  code: api.SpanStatusCode.ERROR,\n                  message: error.message,\n                });\n                span.recordException(error);\n                span.end();\n                throw error;\n              }\n            },\n            this,\n          );\n        };\n      }\n    }\n  }\n}\n\nexports.FastifyOtelInstrumentation = FastifyOtelInstrumentation;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS9mYXN0aWZ5LW90ZWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsV0FBVyxtQkFBTyxDQUFDLDBEQUEwQjtBQUM3QyxZQUFZLG1CQUFPLENBQUMsc0lBQW9CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxrS0FBcUI7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMscU1BQWdDO0FBQ2hFLDRCQUE0QixtQkFBTyxDQUFDLDBMQUFxQztBQUN6RSxrQkFBa0IsbUJBQU8sQ0FBQywrR0FBVzs7QUFFckM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QseUJBQXlCOztBQUU3RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxxQkFBcUIsRUFBRSxrQkFBa0I7QUFDdkY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsaUJBQWlCLGFBQWEsS0FBSztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsaUJBQWlCLGFBQWEsS0FBSztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxpQkFBaUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0JBQWdCLEVBQUUsYUFBYTtBQUMvRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsbUNBQW1DO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG1CQUFtQixtQ0FBbUM7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixNQUFNO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxpQkFBaUIsSUFBSSxLQUFLO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxpQkFBaUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsaUJBQWlCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQSwwREFBMEQ7QUFDMUQ7QUFDQSxxQkFBcUIsNEJBQTRCO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L2Zhc3RpZnktb3RlbC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgZGMgPSByZXF1aXJlKCdub2RlOmRpYWdub3N0aWNzX2NoYW5uZWwnKTtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBtaW5pbWF0Y2ggPSByZXF1aXJlKCdtaW5pbWF0Y2gnKTtcblxuLypcblZlbmRvcmVkIGluIGFuZCBtb2RpZmllZCBmcm9tIEBmYXN0aWZ5L290ZWwgdmVyc2lvbiAwLjguMFxuaHR0cHM6Ly9naXRodWIuY29tL2Zhc3RpZnkvb3RlbC9yZWxlYXNlcy90YWcvdjAuOC4wXG5cblRyaWVkIG5vdCB0byBtb2RpZnkgdGhlIG9yaWdpbmFsIGNvZGUgdG9vIG11Y2gga2VlcGluZyBpdCBhcyBhIEphdmFTY3JpcHQgQ0pTIG1vZHVsZSB0byBtYWtlIGl0IGVhc2llciB0byB1cGRhdGUgd2hlbiByZXF1aXJlZFxuXG5Nb2RpZmljYXRpb25zIGluY2x1ZGU6XG4tIFJlbW92ZWQgcmVhZGluZyBvZiBwYWNrYWdlLmpzb24gdG8gZ2V0IHRoZSB2ZXJzaW9uIGFuZCBwYWNrYWdlIG5hbWVcblxuTUlUIExpY2Vuc2VcblxuQ29weXJpZ2h0IChjKSAyMDI0IEZhc3RpZnlcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuXG4vLyBTRU5UUlkgVkVORE9SIE5PVEVcbi8vIEluc3RlYWQgb2YgdXNpbmcgdGhlIHBhY2thZ2UuanNvbiBmaWxlLCB3ZSBoYXJkIGNvZGUgdGhlIHBhY2thZ2UgbmFtZSBhbmQgdmVyc2lvbiBoZXJlLlxuY29uc3QgUEFDS0FHRV9OQU1FID0gJ0BmYXN0aWZ5L290ZWwnO1xuY29uc3QgUEFDS0FHRV9WRVJTSU9OID0gJzAuOC4wJztcblxuLy8gQ29uc3RhbnRzXG5jb25zdCBTVVBQT1JURURfVkVSU0lPTlMgPSAnPj00LjAuMCA8Nic7XG5jb25zdCBGQVNUSUZZX0hPT0tTID0gW1xuICAnb25SZXF1ZXN0JyxcbiAgJ3ByZVBhcnNpbmcnLFxuICAncHJlVmFsaWRhdGlvbicsXG4gICdwcmVIYW5kbGVyJyxcbiAgJ3ByZVNlcmlhbGl6YXRpb24nLFxuICAnb25TZW5kJyxcbiAgJ29uUmVzcG9uc2UnLFxuICAnb25FcnJvcicsXG5dO1xuY29uc3QgQVRUUklCVVRFX05BTUVTID0ge1xuICBIT09LX05BTUU6ICdob29rLm5hbWUnLFxuICBGQVNUSUZZX1RZUEU6ICdmYXN0aWZ5LnR5cGUnLFxuICBIT09LX0NBTExCQUNLX05BTUU6ICdob29rLmNhbGxiYWNrLm5hbWUnLFxuICBST09UOiAnZmFzdGlmeS5yb290Jyxcbn07XG5jb25zdCBIT09LX1RZUEVTID0ge1xuICBST1VURTogJ3JvdXRlLWhvb2snLFxuICBJTlNUQU5DRTogJ2hvb2snLFxuICBIQU5ETEVSOiAncmVxdWVzdC1oYW5kbGVyJyxcbn07XG5jb25zdCBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSA9ICdhbm9ueW1vdXMnO1xuXG4vLyBTeW1ib2xzXG5jb25zdCBrSW5zdHJ1bWVudGF0aW9uID0gU3ltYm9sKCdmYXN0aWZ5IG90ZWwgaW5zdGFuY2UnKTtcbmNvbnN0IGtSZXF1ZXN0U3BhbiA9IFN5bWJvbCgnZmFzdGlmeSBvdGVsIHJlcXVlc3Qgc3BhbnMnKTtcbmNvbnN0IGtSZXF1ZXN0Q29udGV4dCA9IFN5bWJvbCgnZmFzdGlmeSBvdGVsIHJlcXVlc3QgY29udGV4dCcpO1xuY29uc3Qga0FkZEhvb2tPcmlnaW5hbCA9IFN5bWJvbCgnZmFzdGlmeSBvdGVsIGFkZGhvb2sgb3JpZ2luYWwnKTtcbmNvbnN0IGtTZXROb3RGb3VuZE9yaWdpbmFsID0gU3ltYm9sKCdmYXN0aWZ5IG90ZWwgc2V0bm90Zm91bmQgb3JpZ2luYWwnKTtcbmNvbnN0IGtJZ25vcmVQYXRocyA9IFN5bWJvbCgnZmFzdGlmeSBvdGVsIGlnbm9yZSBwYXRoJyk7XG5cbmNsYXNzIEZhc3RpZnlPdGVsSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcihQQUNLQUdFX05BTUUsIFBBQ0tBR0VfVkVSU0lPTiwgY29uZmlnKTtcbiAgICB0aGlzLnNlcnZlcm5hbWUgPSBjb25maWc/LnNlcnZlcm5hbWUgPz8gcHJvY2Vzcy5lbnYuT1RFTF9TRVJWSUNFX05BTUUgPz8gJ2Zhc3RpZnknO1xuICAgIHRoaXNba0lnbm9yZVBhdGhzXSA9IG51bGw7XG4gICAgdGhpcy5fbG9nZ2VyID0gYXBpLmRpYWcuY3JlYXRlQ29tcG9uZW50TG9nZ2VyKHsgbmFtZXNwYWNlOiBQQUNLQUdFX05BTUUgfSk7XG5cbiAgICBpZiAoY29uZmlnPy5pZ25vcmVQYXRocyAhPSBudWxsIHx8IHByb2Nlc3MuZW52Lk9URUxfRkFTVElGWV9JR05PUkVfUEFUSFMgIT0gbnVsbCkge1xuICAgICAgY29uc3QgaWdub3JlUGF0aHMgPSBjb25maWc/Lmlnbm9yZVBhdGhzID8/IHByb2Nlc3MuZW52Lk9URUxfRkFTVElGWV9JR05PUkVfUEFUSFM7XG5cbiAgICAgIGlmICgodHlwZW9mIGlnbm9yZVBhdGhzICE9PSAnc3RyaW5nJyB8fCBpZ25vcmVQYXRocy5sZW5ndGggPT09IDApICYmIHR5cGVvZiBpZ25vcmVQYXRocyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpZ25vcmVQYXRocyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZ2xvYk1hdGNoZXIgPSBtaW5pbWF0Y2gubWluaW1hdGNoO1xuXG4gICAgICB0aGlzW2tJZ25vcmVQYXRoc10gPSByb3V0ZU9wdGlvbnMgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGlnbm9yZVBhdGhzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGlnbm9yZVBhdGhzKHJvdXRlT3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGdsb2JNYXRjaGVyKHJvdXRlT3B0aW9ucy51cmwsIGlnbm9yZVBhdGhzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBlbmFibGUoKSB7XG4gICAgaWYgKHRoaXMuX2hhbmRsZUluaXRpYWxpemF0aW9uID09PSB1bmRlZmluZWQgJiYgdGhpcy5nZXRDb25maWcoKS5yZWdpc3Rlck9uSW5pdGlhbGl6YXRpb24pIHtcbiAgICAgIGNvbnN0IEZhc3RpZnlJbnN0cnVtZW50YXRpb25QbHVnaW4gPSB0aGlzLnBsdWdpbigpO1xuICAgICAgdGhpcy5faGFuZGxlSW5pdGlhbGl6YXRpb24gPSBtZXNzYWdlID0+IHtcbiAgICAgICAgbWVzc2FnZS5mYXN0aWZ5LnJlZ2lzdGVyKEZhc3RpZnlJbnN0cnVtZW50YXRpb25QbHVnaW4pO1xuICAgICAgfTtcbiAgICAgIGRjLmRlZmF1bHQuc3Vic2NyaWJlKCdmYXN0aWZ5LmluaXRpYWxpemF0aW9uJywgdGhpcy5faGFuZGxlSW5pdGlhbGl6YXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuZW5hYmxlKCk7XG4gIH1cblxuICBkaXNhYmxlKCkge1xuICAgIGlmICh0aGlzLl9oYW5kbGVJbml0aWFsaXphdGlvbikge1xuICAgICAgZGMuZGVmYXVsdC51bnN1YnNjcmliZSgnZmFzdGlmeS5pbml0aWFsaXphdGlvbicsIHRoaXMuX2hhbmRsZUluaXRpYWxpemF0aW9uKTtcbiAgICAgIHRoaXMuX2hhbmRsZUluaXRpYWxpemF0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuZGlzYWJsZSgpO1xuICB9XG5cbiAgLy8gV2UgZG8gbm90IGRvIHBhdGNoaW5nIGluIHRoaXMgaW5zdHJ1bWVudGF0aW9uXG4gIGluaXQoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcGx1Z2luKCkge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG5cbiAgICBGYXN0aWZ5SW5zdHJ1bWVudGF0aW9uUGx1Z2luW1N5bWJvbC5mb3IoJ3NraXAtb3ZlcnJpZGUnKV0gPSB0cnVlO1xuICAgIEZhc3RpZnlJbnN0cnVtZW50YXRpb25QbHVnaW5bU3ltYm9sLmZvcignZmFzdGlmeS5kaXNwbGF5LW5hbWUnKV0gPSAnQGZhc3RpZnkvb3RlbCc7XG4gICAgRmFzdGlmeUluc3RydW1lbnRhdGlvblBsdWdpbltTeW1ib2wuZm9yKCdwbHVnaW4tbWV0YScpXSA9IHtcbiAgICAgIGZhc3RpZnk6IFNVUFBPUlRFRF9WRVJTSU9OUyxcbiAgICAgIG5hbWU6ICdAZmFzdGlmeS9vdGVsJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIEZhc3RpZnlJbnN0cnVtZW50YXRpb25QbHVnaW47XG5cbiAgICBmdW5jdGlvbiBGYXN0aWZ5SW5zdHJ1bWVudGF0aW9uUGx1Z2luKGluc3RhbmNlLCBvcHRzLCBkb25lKSB7XG4gICAgICBpbnN0YW5jZS5kZWNvcmF0ZShrSW5zdHJ1bWVudGF0aW9uLCBpbnN0cnVtZW50YXRpb24pO1xuICAgICAgLy8gYWRkSG9vayBhbmQgbm90Zm91bmRIYW5kbGVyIGFyZSBlc3NlbnRpYWxseSBpbmhlcml0ZWQgZnJvbSB0aGUgcHJvdG90eXBlXG4gICAgICAvLyB3aGF0IGlzIGltcG9ydGFudCBpcyB0byBib3VuZCBpdCB0byB0aGUgcmlnaHQgaW5zdGFuY2VcbiAgICAgIGluc3RhbmNlLmRlY29yYXRlKGtBZGRIb29rT3JpZ2luYWwsIGluc3RhbmNlLmFkZEhvb2spO1xuICAgICAgaW5zdGFuY2UuZGVjb3JhdGUoa1NldE5vdEZvdW5kT3JpZ2luYWwsIGluc3RhbmNlLnNldE5vdEZvdW5kSGFuZGxlcik7XG4gICAgICBpbnN0YW5jZS5kZWNvcmF0ZVJlcXVlc3QoJ29wZW50ZWxlbWV0cnknLCBmdW5jdGlvbiBvcGVuZXRlbGVtZXRyeSgpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpc1trUmVxdWVzdENvbnRleHRdO1xuICAgICAgICBjb25zdCBzcGFuID0gdGhpc1trUmVxdWVzdFNwYW5dO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNwYW4sXG4gICAgICAgICAgdHJhY2VyOiBpbnN0cnVtZW50YXRpb24udHJhY2VyLFxuICAgICAgICAgIGNvbnRleHQ6IGN0eCxcbiAgICAgICAgICBpbmplY3Q6IChjYXJyaWVyLCBzZXR0ZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhcGkucHJvcGFnYXRpb24uaW5qZWN0KGN0eCwgY2Fycmllciwgc2V0dGVyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGV4dHJhY3Q6IChjYXJyaWVyLCBnZXR0ZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhcGkucHJvcGFnYXRpb24uZXh0cmFjdChjdHgsIGNhcnJpZXIsIGdldHRlcik7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgaW5zdGFuY2UuZGVjb3JhdGVSZXF1ZXN0KGtSZXF1ZXN0U3BhbiwgbnVsbCk7XG4gICAgICBpbnN0YW5jZS5kZWNvcmF0ZVJlcXVlc3Qoa1JlcXVlc3RDb250ZXh0LCBudWxsKTtcblxuICAgICAgaW5zdGFuY2UuYWRkSG9vaygnb25Sb3V0ZScsIGZ1bmN0aW9uIChyb3V0ZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGluc3RydW1lbnRhdGlvbltrSWdub3JlUGF0aHNdPy4ocm91dGVPcHRpb25zKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGluc3RydW1lbnRhdGlvbi5fbG9nZ2VyLmRlYnVnKFxuICAgICAgICAgICAgYElnbm9yaW5nIHJvdXRlIGluc3RydW1lbnRhdGlvbiAke3JvdXRlT3B0aW9ucy5tZXRob2R9ICR7cm91dGVPcHRpb25zLnVybH0gYmVjYXVzZSBpdCBtYXRjaGVzIHRoZSBpZ25vcmUgcGF0aGAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgRkFTVElGWV9IT09LUykge1xuICAgICAgICAgIGlmIChyb3V0ZU9wdGlvbnNbaG9va10gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlckxpa2UgPSByb3V0ZU9wdGlvbnNbaG9va107XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlckxpa2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcm91dGVPcHRpb25zW2hvb2tdID0gaGFuZGxlcldyYXBwZXIoaGFuZGxlckxpa2UsIHtcbiAgICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06IGluc3RhbmNlW2tJbnN0cnVtZW50YXRpb25dLnNlcnZlcm5hbWUsXG4gICAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX05BTUVdOiBgJHt0aGlzLnBsdWdpbk5hbWV9IC0gcm91dGUgLT4gJHtob29rfWAsXG4gICAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5GQVNUSUZZX1RZUEVdOiBIT09LX1RZUEVTLlJPVVRFLFxuICAgICAgICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV06IHJvdXRlT3B0aW9ucy51cmwsXG4gICAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX0NBTExCQUNLX05BTUVdOlxuICAgICAgICAgICAgICAgICAgaGFuZGxlckxpa2UubmFtZT8ubGVuZ3RoID4gMCA/IGhhbmRsZXJMaWtlLm5hbWUgOiBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSAvKiBjOCBpZ25vcmUgbmV4dCAqLyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlckxpa2UpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHdyYXBwZWRIYW5kbGVycyA9IFtdO1xuXG4gICAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlciBvZiBoYW5kbGVyTGlrZSkge1xuICAgICAgICAgICAgICAgIHdyYXBwZWRIYW5kbGVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgaGFuZGxlcldyYXBwZXIoaGFuZGxlciwge1xuICAgICAgICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06IGluc3RhbmNlW2tJbnN0cnVtZW50YXRpb25dLnNlcnZlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19OQU1FXTogYCR7dGhpcy5wbHVnaW5OYW1lfSAtIHJvdXRlIC0+ICR7aG9va31gLFxuICAgICAgICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkZBU1RJRllfVFlQRV06IEhPT0tfVFlQRVMuUk9VVEUsXG4gICAgICAgICAgICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV06IHJvdXRlT3B0aW9ucy51cmwsXG4gICAgICAgICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19DQUxMQkFDS19OQU1FXTpcbiAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLm5hbWU/Lmxlbmd0aCA+IDAgPyBoYW5kbGVyLm5hbWUgOiBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByb3V0ZU9wdGlvbnNbaG9va10gPSB3cmFwcGVkSGFuZGxlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgYWx3YXlzIHdhbnQgdG8gYWRkIHRoZSBvblNlbmQgaG9vayB0byB0aGUgcm91dGUgdG8gYmUgZXhlY3V0ZWQgbGFzdFxuICAgICAgICBpZiAocm91dGVPcHRpb25zLm9uU2VuZCAhPSBudWxsKSB7XG4gICAgICAgICAgcm91dGVPcHRpb25zLm9uU2VuZCA9IEFycmF5LmlzQXJyYXkocm91dGVPcHRpb25zLm9uU2VuZClcbiAgICAgICAgICAgID8gWy4uLnJvdXRlT3B0aW9ucy5vblNlbmQsIG9uU2VuZEhvb2tdXG4gICAgICAgICAgICA6IFtyb3V0ZU9wdGlvbnMub25TZW5kLCBvblNlbmRIb29rXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZU9wdGlvbnMub25TZW5kID0gb25TZW5kSG9vaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIGFsd2F5cyB3YW50IHRvIGFkZCB0aGUgb25FcnJvciBob29rIHRvIHRoZSByb3V0ZSB0byBiZSBleGVjdXRlZCBsYXN0XG4gICAgICAgIGlmIChyb3V0ZU9wdGlvbnMub25FcnJvciAhPSBudWxsKSB7XG4gICAgICAgICAgcm91dGVPcHRpb25zLm9uRXJyb3IgPSBBcnJheS5pc0FycmF5KHJvdXRlT3B0aW9ucy5vbkVycm9yKVxuICAgICAgICAgICAgPyBbLi4ucm91dGVPcHRpb25zLm9uRXJyb3IsIG9uRXJyb3JIb29rXVxuICAgICAgICAgICAgOiBbcm91dGVPcHRpb25zLm9uRXJyb3IsIG9uRXJyb3JIb29rXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZU9wdGlvbnMub25FcnJvciA9IG9uRXJyb3JIb29rO1xuICAgICAgICB9XG5cbiAgICAgICAgcm91dGVPcHRpb25zLmhhbmRsZXIgPSBoYW5kbGVyV3JhcHBlcihyb3V0ZU9wdGlvbnMuaGFuZGxlciwge1xuICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfU0VSVklDRV9OQU1FXTogaW5zdGFuY2Vba0luc3RydW1lbnRhdGlvbl0uc2VydmVybmFtZSxcbiAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfTkFNRV06IGAke3RoaXMucGx1Z2luTmFtZX0gLSByb3V0ZS1oYW5kbGVyYCxcbiAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkZBU1RJRllfVFlQRV06IEhPT0tfVFlQRVMuSEFORExFUixcbiAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUk9VVEVdOiByb3V0ZU9wdGlvbnMudXJsLFxuICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19DQUxMQkFDS19OQU1FXTpcbiAgICAgICAgICAgIHJvdXRlT3B0aW9ucy5oYW5kbGVyLm5hbWUubGVuZ3RoID4gMCA/IHJvdXRlT3B0aW9ucy5oYW5kbGVyLm5hbWUgOiBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaW5zdGFuY2UuYWRkSG9vaygnb25SZXF1ZXN0JywgZnVuY3Rpb24gKHJlcXVlc3QsIF9yZXBseSwgaG9va0RvbmUpIHtcbiAgICAgICAgaWYgKHRoaXNba0luc3RydW1lbnRhdGlvbl0uaXNFbmFibGVkKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGhvb2tEb25lKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgdGhpc1trSW5zdHJ1bWVudGF0aW9uXVtrSWdub3JlUGF0aHNdPy4oe1xuICAgICAgICAgICAgdXJsOiByZXF1ZXN0LnVybCxcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgfSkgPT09IHRydWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpc1trSW5zdHJ1bWVudGF0aW9uXS5fbG9nZ2VyLmRlYnVnKFxuICAgICAgICAgICAgYElnbm9yaW5nIHJlcXVlc3QgJHtyZXF1ZXN0Lm1ldGhvZH0gJHtyZXF1ZXN0LnVybH0gYmVjYXVzZSBpdCBtYXRjaGVzIHRoZSBpZ25vcmUgcGF0aGAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gaG9va0RvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcblxuICAgICAgICBpZiAoYXBpLnRyYWNlLmdldFNwYW4oY3R4KSA9PSBudWxsKSB7XG4gICAgICAgICAgY3R4ID0gYXBpLnByb3BhZ2F0aW9uLmV4dHJhY3QoY3R4LCByZXF1ZXN0LmhlYWRlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcnBjTWV0YWRhdGEgPSBjb3JlLmdldFJQQ01ldGFkYXRhKGN0eCk7XG5cbiAgICAgICAgaWYgKHJlcXVlc3Qucm91dGVPcHRpb25zLnVybCAhPSBudWxsICYmIHJwY01ldGFkYXRhPy50eXBlID09PSBjb3JlLlJQQ1R5cGUuSFRUUCkge1xuICAgICAgICAgIHJwY01ldGFkYXRhLnJvdXRlID0gcmVxdWVzdC5yb3V0ZU9wdGlvbnMudXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoJ0BvcGVudGVsZW1ldHJ5L2FwaScpLlNwYW59ICovXG4gICAgICAgIGNvbnN0IHNwYW4gPSB0aGlzW2tJbnN0cnVtZW50YXRpb25dLnRyYWNlci5zdGFydFNwYW4oXG4gICAgICAgICAgJ3JlcXVlc3QnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiBpbnN0YW5jZVtrSW5zdHJ1bWVudGF0aW9uXS5zZXJ2ZXJuYW1lLFxuICAgICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLlJPT1RdOiAnQGZhc3RpZnkvb3RlbCcsXG4gICAgICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV06IHJlcXVlc3QudXJsLFxuICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RdOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjdHgsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmVxdWVzdFtrUmVxdWVzdENvbnRleHRdID0gYXBpLnRyYWNlLnNldFNwYW4oY3R4LCBzcGFuKTtcbiAgICAgICAgcmVxdWVzdFtrUmVxdWVzdFNwYW5dID0gc3BhbjtcblxuICAgICAgICBhcGkuY29udGV4dC53aXRoKHJlcXVlc3Rba1JlcXVlc3RDb250ZXh0XSwgKCkgPT4ge1xuICAgICAgICAgIGhvb2tEb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIG9uUmVzcG9uc2UgaXMgdGhlIGxhc3QgaG9vayB0byBiZSBleGVjdXRlZCwgb25seSBhZGRlZCBmb3IgNDA0IGhhbmRsZXJzXG4gICAgICBpbnN0YW5jZS5hZGRIb29rKCdvblJlc3BvbnNlJywgZnVuY3Rpb24gKHJlcXVlc3QsIHJlcGx5LCBob29rRG9uZSkge1xuICAgICAgICBjb25zdCBzcGFuID0gcmVxdWVzdFtrUmVxdWVzdFNwYW5dO1xuXG4gICAgICAgIGlmIChzcGFuICE9IG51bGwpIHtcbiAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuT0ssXG4gICAgICAgICAgICBtZXNzYWdlOiAnT0snLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUkVTUE9OU0VfU1RBVFVTX0NPREVdOiA0MDQsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3Rba1JlcXVlc3RTcGFuXSA9IG51bGw7XG5cbiAgICAgICAgaG9va0RvbmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnN0YW5jZS5hZGRIb29rID0gYWRkSG9va1BhdGNoZWQ7XG4gICAgICBpbnN0YW5jZS5zZXROb3RGb3VuZEhhbmRsZXIgPSBzZXROb3RGb3VuZEhhbmRsZXJQYXRjaGVkO1xuXG4gICAgICBkb25lKCk7XG5cbiAgICAgIGZ1bmN0aW9uIG9uU2VuZEhvb2socmVxdWVzdCwgcmVwbHksIHBheWxvYWQsIGhvb2tEb25lKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCdAb3BlbnRlbGVtZXRyeS9hcGknKS5TcGFufSAqL1xuICAgICAgICBjb25zdCBzcGFuID0gcmVxdWVzdFtrUmVxdWVzdFNwYW5dO1xuXG4gICAgICAgIGlmIChzcGFuICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVwbHkuc3RhdHVzQ29kZSA8IDUwMCkge1xuICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuT0ssXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdPSycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFXTogcmVwbHkuc3RhdHVzQ29kZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdFtrUmVxdWVzdFNwYW5dID0gbnVsbDtcblxuICAgICAgICBob29rRG9uZShudWxsLCBwYXlsb2FkKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25FcnJvckhvb2socmVxdWVzdCwgcmVwbHksIGVycm9yLCBob29rRG9uZSkge1xuICAgICAgICAvKiogQHR5cGUge1NwYW59ICovXG4gICAgICAgIGNvbnN0IHNwYW4gPSByZXF1ZXN0W2tSZXF1ZXN0U3Bhbl07XG5cbiAgICAgICAgaWYgKHNwYW4gIT0gbnVsbCkge1xuICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaG9va0RvbmUoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkSG9va1BhdGNoZWQobmFtZSwgaG9vaykge1xuICAgICAgICBjb25zdCBhZGRIb29rT3JpZ2luYWwgPSB0aGlzW2tBZGRIb29rT3JpZ2luYWxdO1xuXG4gICAgICAgIGlmIChGQVNUSUZZX0hPT0tTLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGFkZEhvb2tPcmlnaW5hbC5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBoYW5kbGVyV3JhcHBlcihob29rLCB7XG4gICAgICAgICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfU0VSVklDRV9OQU1FXTogaW5zdGFuY2Vba0luc3RydW1lbnRhdGlvbl0uc2VydmVybmFtZSxcbiAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX05BTUVdOiBgJHt0aGlzLnBsdWdpbk5hbWV9IC0gJHtuYW1lfWAsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuRkFTVElGWV9UWVBFXTogSE9PS19UWVBFUy5JTlNUQU5DRSxcbiAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX0NBTExCQUNLX05BTUVdOlxuICAgICAgICAgICAgICAgIGhvb2submFtZT8ubGVuZ3RoID4gMCA/IGhvb2submFtZSA6IEFOT05ZTU9VU19GVU5DVElPTl9OQU1FIC8qIGM4IGlnbm9yZSBuZXh0ICovLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYWRkSG9va09yaWdpbmFsLmNhbGwodGhpcywgbmFtZSwgaG9vayk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0Tm90Rm91bmRIYW5kbGVyUGF0Y2hlZChob29rcywgaGFuZGxlcikge1xuICAgICAgICBjb25zdCBzZXROb3RGb3VuZEhhbmRsZXJPcmlnaW5hbCA9IHRoaXNba1NldE5vdEZvdW5kT3JpZ2luYWxdO1xuICAgICAgICBpZiAodHlwZW9mIGhvb2tzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJXcmFwcGVyKGhvb2tzLCB7XG4gICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06IGluc3RhbmNlW2tJbnN0cnVtZW50YXRpb25dLnNlcnZlcm5hbWUsXG4gICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfTkFNRV06IGAke3RoaXMucGx1Z2luTmFtZX0gLSBub3QtZm91bmQtaGFuZGxlcmAsXG4gICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkZBU1RJRllfVFlQRV06IEhPT0tfVFlQRVMuSU5TVEFOQ0UsXG4gICAgICAgICAgICBbQVRUUklCVVRFX05BTUVTLkhPT0tfQ0FMTEJBQ0tfTkFNRV06XG4gICAgICAgICAgICAgIGhvb2tzLm5hbWU/Lmxlbmd0aCA+IDAgPyBob29rcy5uYW1lIDogQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUgLyogYzggaWdub3JlIG5leHQgKi8sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2V0Tm90Rm91bmRIYW5kbGVyT3JpZ2luYWwuY2FsbCh0aGlzLCBoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaG9va3MucHJlVmFsaWRhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5wcmVWYWxpZGF0aW9uID0gaGFuZGxlcldyYXBwZXIoaG9va3MucHJlVmFsaWRhdGlvbiwge1xuICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06IGluc3RhbmNlW2tJbnN0cnVtZW50YXRpb25dLnNlcnZlcm5hbWUsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19OQU1FXTogYCR7dGhpcy5wbHVnaW5OYW1lfSAtIG5vdC1mb3VuZC1oYW5kbGVyIC0gcHJlVmFsaWRhdGlvbmAsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuRkFTVElGWV9UWVBFXTogSE9PS19UWVBFUy5JTlNUQU5DRSxcbiAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX0NBTExCQUNLX05BTUVdOlxuICAgICAgICAgICAgICAgIGhvb2tzLnByZVZhbGlkYXRpb24ubmFtZT8ubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgPyBob29rcy5wcmVWYWxpZGF0aW9uLm5hbWVcbiAgICAgICAgICAgICAgICAgIDogQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUgLyogYzggaWdub3JlIG5leHQgKi8sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaG9va3MucHJlSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5wcmVIYW5kbGVyID0gaGFuZGxlcldyYXBwZXIoaG9va3MucHJlSGFuZGxlciwge1xuICAgICAgICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06IGluc3RhbmNlW2tJbnN0cnVtZW50YXRpb25dLnNlcnZlcm5hbWUsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuSE9PS19OQU1FXTogYCR7dGhpcy5wbHVnaW5OYW1lfSAtIG5vdC1mb3VuZC1oYW5kbGVyIC0gcHJlSGFuZGxlcmAsXG4gICAgICAgICAgICAgIFtBVFRSSUJVVEVfTkFNRVMuRkFTVElGWV9UWVBFXTogSE9PS19UWVBFUy5JTlNUQU5DRSxcbiAgICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX0NBTExCQUNLX05BTUVdOlxuICAgICAgICAgICAgICAgIGhvb2tzLnByZUhhbmRsZXIubmFtZT8ubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgPyBob29rcy5wcmVIYW5kbGVyLm5hbWVcbiAgICAgICAgICAgICAgICAgIDogQU5PTllNT1VTX0ZVTkNUSU9OX05BTUUgLyogYzggaWdub3JlIG5leHQgKi8sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoYW5kbGVyID0gaGFuZGxlcldyYXBwZXIoaGFuZGxlciwge1xuICAgICAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9TRVJWSUNFX05BTUVdOiBpbnN0YW5jZVtrSW5zdHJ1bWVudGF0aW9uXS5zZXJ2ZXJuYW1lLFxuICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX05BTUVdOiBgJHt0aGlzLnBsdWdpbk5hbWV9IC0gbm90LWZvdW5kLWhhbmRsZXJgLFxuICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5GQVNUSUZZX1RZUEVdOiBIT09LX1RZUEVTLklOU1RBTkNFLFxuICAgICAgICAgICAgW0FUVFJJQlVURV9OQU1FUy5IT09LX0NBTExCQUNLX05BTUVdOlxuICAgICAgICAgICAgICBoYW5kbGVyLm5hbWU/Lmxlbmd0aCA+IDAgPyBoYW5kbGVyLm5hbWUgOiBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSAvKiBjOCBpZ25vcmUgbmV4dCAqLyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZXROb3RGb3VuZEhhbmRsZXJPcmlnaW5hbC5jYWxsKHRoaXMsIGhvb2tzLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyV3JhcHBlcihoYW5kbGVyLCBzcGFuQXR0cmlidXRlcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyV3JhcHBlZCguLi5hcmdzKSB7XG4gICAgICAgICAgLyoqIEB0eXBlIHtGYXN0aWZ5T3RlbEluc3RydW1lbnRhdGlvbn0gKi9cbiAgICAgICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzW2tJbnN0cnVtZW50YXRpb25dO1xuICAgICAgICAgIGNvbnN0IFtyZXF1ZXN0XSA9IGFyZ3M7XG5cbiAgICAgICAgICBpZiAoaW5zdHJ1bWVudGF0aW9uLmlzRW5hYmxlZCgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbCh0aGlzLCAuLi5hcmdzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjdHggPSByZXF1ZXN0W2tSZXF1ZXN0Q29udGV4dF0gPz8gYXBpLmNvbnRleHQuYWN0aXZlKCk7XG4gICAgICAgICAgY29uc3Qgc3BhbiA9IGluc3RydW1lbnRhdGlvbi50cmFjZXIuc3RhcnRTcGFuKFxuICAgICAgICAgICAgYGhhbmRsZXIgLSAke1xuICAgICAgICAgICAgICBoYW5kbGVyLm5hbWU/Lmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IGhhbmRsZXIubmFtZVxuICAgICAgICAgICAgICAgIDogKHRoaXMucGx1Z2luTmFtZSAvKiBjOCBpZ25vcmUgbmV4dCAqLyA/PyBBTk9OWU1PVVNfRlVOQ1RJT05fTkFNRSkgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgIH1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBzcGFuQXR0cmlidXRlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKFxuICAgICAgICAgICAgYXBpLnRyYWNlLnNldFNwYW4oY3R4LCBzcGFuKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBoYW5kbGVyLmNhbGwodGhpcywgLi4uYXJncyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlcz8udGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy50aGVuKFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyb3IpO1xuICAgICAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuRmFzdGlmeU90ZWxJbnN0cnVtZW50YXRpb24gPSBGYXN0aWZ5T3RlbEluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ./fastify-otel/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\");\nconst instrumentation = __webpack_require__(/*! ./v3/instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\");\n\n/**\n * Options for the Fastify integration.\n *\n * `shouldHandleError` - Callback method deciding whether error should be captured and sent to Sentry\n * This is used on Fastify v5 where Sentry handles errors in the diagnostics channel.\n * Fastify v3 and v4 use `setupFastifyErrorHandler` instead.\n *\n * @example\n *\n * ```javascript\n * Sentry.init({\n *   integrations: [\n *     Sentry.fastifyIntegration({\n *       shouldHandleError(_error, _request, reply) {\n *         return reply.statusCode >= 500;\n *       },\n *     });\n *   },\n * });\n * ```\n *\n */\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastifyV3 = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.v3`,\n  () => new instrumentation.FastifyInstrumentationV3(),\n);\n\nfunction getFastifyIntegration() {\n  const client = core.getClient();\n  if (!client) {\n    return undefined;\n  } else {\n    return client.getIntegrationByName(INTEGRATION_NAME);\n  }\n}\n\nfunction handleFastifyError(\n\n  error,\n  request,\n  reply,\n  handlerOrigin,\n) {\n  const shouldHandleError = getFastifyIntegration()?.getShouldHandleError() || defaultShouldHandleError;\n  // Diagnostics channel runs before the onError hook, so we can use it to check if the handler was already registered\n  if (handlerOrigin === 'diagnostics-channel') {\n    this.diagnosticsChannelExists = true;\n  }\n\n  if (this.diagnosticsChannelExists && handlerOrigin === 'onError-hook') {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        'Fastify error handler was already registered via diagnostics channel.',\n        'You can safely remove `setupFastifyErrorHandler` call and set `shouldHandleError` on the integration options.',\n      );\n\n    // If the diagnostics channel already exists, we don't need to handle the error again\n    return;\n  }\n\n  if (shouldHandleError(error, request, reply)) {\n    core.captureException(error, { mechanism: { handled: false, type: 'auto.function.fastify' } });\n  }\n}\n\nconst instrumentFastify = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.v5`, () => {\n  const fastifyOtelInstrumentationInstance = new index.FastifyOtelInstrumentation();\n  const plugin = fastifyOtelInstrumentationInstance.plugin();\n\n  // This message handler works for Fastify versions 3, 4 and 5\n  dc.subscribe('fastify.initialization', message => {\n    const fastifyInstance = (message ).fastify;\n\n    fastifyInstance?.register(plugin).after(err => {\n      if (err) {\n        debugBuild.DEBUG_BUILD && core.debug.error('Failed to setup Fastify instrumentation', err);\n      } else {\n        instrumentClient();\n\n        if (fastifyInstance) {\n          instrumentOnRequest(fastifyInstance);\n        }\n      }\n    });\n  });\n\n  // This diagnostics channel only works on Fastify version 5\n  // For versions 3 and 4, we use `setupFastifyErrorHandler` instead\n  dc.subscribe('tracing:fastify.request.handler:error', message => {\n    const { error, request, reply } = message\n\n;\n\n    handleFastifyError.call(handleFastifyError, error, request, reply, 'diagnostics-channel');\n  });\n\n  // Returning this as unknown not to deal with the internal types of the FastifyOtelInstrumentation\n  return fastifyOtelInstrumentationInstance ;\n});\n\nconst _fastifyIntegration = (({ shouldHandleError }) => {\n  let _shouldHandleError;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _shouldHandleError = shouldHandleError || defaultShouldHandleError;\n\n      instrumentFastifyV3();\n      instrumentFastify();\n    },\n    getShouldHandleError() {\n      return _shouldHandleError;\n    },\n    setShouldHandleError(fn) {\n      _shouldHandleError = fn;\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration((options = {}) =>\n  _fastifyIntegration(options),\n);\n\n/**\n * Default function to determine if an error should be sent to Sentry\n *\n * 3xx and 4xx errors are not sent by default.\n */\nfunction defaultShouldHandleError(_error, _request, reply) {\n  const statusCode = reply.statusCode;\n  // 3xx and 4xx errors are not sent by default.\n  return statusCode >= 500 || statusCode <= 299;\n}\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify, options) {\n  if (options?.shouldHandleError) {\n    getFastifyIntegration()?.setShouldHandleError(options.shouldHandleError);\n  }\n\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (request, reply, error) => {\n        handleFastifyError.call(handleFastifyError, error, request, reply, 'onError-hook');\n      });\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fastify.register(plugin);\n}\n\nfunction addFastifySpanAttributes(span) {\n  const spanJSON = core.spanToJSON(span);\n  const spanName = spanJSON.description;\n  const attributes = spanJSON.data;\n\n  const type = attributes['fastify.type'];\n\n  const isHook = type === 'hook';\n  const isHandler = type === spanName?.startsWith('handler -');\n  // In @fastify/otel `request-handler` is separated by dash, not underscore\n  const isRequestHandler = spanName === 'request' || type === 'request-handler';\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || (!isHandler && !isRequestHandler && !isHook)) {\n    return;\n  }\n\n  const opPrefix = isHook ? 'hook' : isHandler ? 'middleware' : isRequestHandler ? 'request-handler' : '<unknown>';\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${opPrefix}.fastify`,\n  });\n\n  const attrName = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof attrName === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = attrName.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nfunction instrumentClient() {\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifySpanAttributes(span);\n    });\n  }\n}\n\nfunction instrumentOnRequest(fastify) {\n  fastify.addHook('onRequest', async (request, _reply) => {\n    if (request.opentelemetry) {\n      const { span } = request.opentelemetry();\n\n      if (span) {\n        addFastifySpanAttributes(span);\n      }\n    }\n\n    const routeName = request.routeOptions?.url;\n    const method = request.method || 'GET';\n\n    core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n  });\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.instrumentFastifyV3 = instrumentFastifyV3;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/constants.ts\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst spanRequestSymbol = Symbol('opentelemetry.instrumentation.fastify.request_active_span');\n\nexports.spanRequestSymbol = spanRequestSymbol;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Zhc3RpZnkvdjMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vLyBWZW5kb3JlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi80MDdmNjE1OTFiYTY5YTM5YTY5MDgyNjQzNzlkNGQ5OGE0OGRiZWM0L3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0aWZ5L3NyYy9jb25zdGFudHMudHNcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNvbnN0IHNwYW5SZXF1ZXN0U3ltYm9sID0gU3ltYm9sKCdvcGVudGVsZW1ldHJ5Lmluc3RydW1lbnRhdGlvbi5mYXN0aWZ5LnJlcXVlc3RfYWN0aXZlX3NwYW4nKTtcblxuZXhwb3J0cy5zcGFuUmVxdWVzdFN5bWJvbCA9IHNwYW5SZXF1ZXN0U3ltYm9sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/enums/AttributeNames.ts\n//\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.AttributeNames = void 0; (function (AttributeNames) {\n  const FASTIFY_NAME = 'fastify.name'; AttributeNames[\"FASTIFY_NAME\"] = FASTIFY_NAME;\n  const FASTIFY_TYPE = 'fastify.type'; AttributeNames[\"FASTIFY_TYPE\"] = FASTIFY_TYPE;\n  const HOOK_NAME = 'hook.name'; AttributeNames[\"HOOK_NAME\"] = HOOK_NAME;\n  const PLUGIN_NAME = 'plugin.name'; AttributeNames[\"PLUGIN_NAME\"] = PLUGIN_NAME;\n})(exports.AttributeNames || (exports.AttributeNames = {}));\n\nexports.FastifyTypes = void 0; (function (FastifyTypes) {\n  const MIDDLEWARE = 'middleware'; FastifyTypes[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request_handler'; FastifyTypes[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyTypes || (exports.FastifyTypes = {}));\n\nexports.FastifyNames = void 0; (function (FastifyNames) {\n  const MIDDLEWARE = 'middleware'; FastifyNames[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request handler'; FastifyNames[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyNames || (exports.FastifyNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixXQUFXO0FBQ2pDLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLHFDQUFxQztBQUNyQyxDQUFDLDZCQUE2QixzQkFBc0IsS0FBSzs7QUFFekQsb0JBQW9CLFdBQVc7QUFDL0IsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3QyxDQUFDLDJCQUEyQixvQkFBb0IsS0FBSzs7QUFFckQsb0JBQW9CLFdBQVc7QUFDL0IsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3QyxDQUFDLDJCQUEyQixvQkFBb0IsS0FBSztBQUNyRCIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vLyBWZW5kb3JlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi80MDdmNjE1OTFiYTY5YTM5YTY5MDgyNjQzNzlkNGQ5OGE0OGRiZWM0L3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0aWZ5L3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy50c1xuLy9cbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7IChmdW5jdGlvbiAoQXR0cmlidXRlTmFtZXMpIHtcbiAgY29uc3QgRkFTVElGWV9OQU1FID0gJ2Zhc3RpZnkubmFtZSc7IEF0dHJpYnV0ZU5hbWVzW1wiRkFTVElGWV9OQU1FXCJdID0gRkFTVElGWV9OQU1FO1xuICBjb25zdCBGQVNUSUZZX1RZUEUgPSAnZmFzdGlmeS50eXBlJzsgQXR0cmlidXRlTmFtZXNbXCJGQVNUSUZZX1RZUEVcIl0gPSBGQVNUSUZZX1RZUEU7XG4gIGNvbnN0IEhPT0tfTkFNRSA9ICdob29rLm5hbWUnOyBBdHRyaWJ1dGVOYW1lc1tcIkhPT0tfTkFNRVwiXSA9IEhPT0tfTkFNRTtcbiAgY29uc3QgUExVR0lOX05BTUUgPSAncGx1Z2luLm5hbWUnOyBBdHRyaWJ1dGVOYW1lc1tcIlBMVUdJTl9OQU1FXCJdID0gUExVR0lOX05BTUU7XG59KShleHBvcnRzLkF0dHJpYnV0ZU5hbWVzIHx8IChleHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0ge30pKTtcblxuZXhwb3J0cy5GYXN0aWZ5VHlwZXMgPSB2b2lkIDA7IChmdW5jdGlvbiAoRmFzdGlmeVR5cGVzKSB7XG4gIGNvbnN0IE1JRERMRVdBUkUgPSAnbWlkZGxld2FyZSc7IEZhc3RpZnlUeXBlc1tcIk1JRERMRVdBUkVcIl0gPSBNSURETEVXQVJFO1xuICBjb25zdCBSRVFVRVNUX0hBTkRMRVIgPSAncmVxdWVzdF9oYW5kbGVyJzsgRmFzdGlmeVR5cGVzW1wiUkVRVUVTVF9IQU5ETEVSXCJdID0gUkVRVUVTVF9IQU5ETEVSO1xufSkoZXhwb3J0cy5GYXN0aWZ5VHlwZXMgfHwgKGV4cG9ydHMuRmFzdGlmeVR5cGVzID0ge30pKTtcblxuZXhwb3J0cy5GYXN0aWZ5TmFtZXMgPSB2b2lkIDA7IChmdW5jdGlvbiAoRmFzdGlmeU5hbWVzKSB7XG4gIGNvbnN0IE1JRERMRVdBUkUgPSAnbWlkZGxld2FyZSc7IEZhc3RpZnlOYW1lc1tcIk1JRERMRVdBUkVcIl0gPSBNSURETEVXQVJFO1xuICBjb25zdCBSRVFVRVNUX0hBTkRMRVIgPSAncmVxdWVzdCBoYW5kbGVyJzsgRmFzdGlmeU5hbWVzW1wiUkVRVUVTVF9IQU5ETEVSXCJdID0gUkVRVUVTVF9IQU5ETEVSO1xufSkoZXhwb3J0cy5GYXN0aWZ5TmFtZXMgfHwgKGV4cG9ydHMuRmFzdGlmeU5hbWVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0dHJpYnV0ZU5hbWVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst AttributeNames = __webpack_require__(/*! ./enums/AttributeNames.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** @knipignore */\n\nconst PACKAGE_VERSION = '0.1.0';\n\nconst PACKAGE_NAME = '@sentry/instrumentation-fastify-v3';\nconst ANONYMOUS_NAME = 'anonymous';\n\n// The instrumentation creates a span for invocations of lifecycle hook handlers\n// that take `(request, reply, ...[, done])` arguments. Currently this is all\n// lifecycle hooks except `onRequestAbort`.\n// https://fastify.dev/docs/latest/Reference/Hooks\nconst hooksNamesToWrap = new Set([\n  'onTimeout',\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preSerialization',\n  'preHandler',\n  'onSend',\n  'onResponse',\n  'onError',\n]);\n\n/**\n * Fastify instrumentation for OpenTelemetry\n */\nclass FastifyInstrumentationV3 extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('fastify', ['>=3.0.0 <4'], moduleExports => {\n        return this._patchConstructor(moduleExports);\n      }),\n    ];\n  }\n\n   _hookOnRequest() {\n    const instrumentation = this;\n\n    return function onRequest(request, reply, done) {\n      if (!instrumentation.isEnabled()) {\n        return done();\n      }\n      instrumentation._wrap(reply, 'send', instrumentation._patchSend());\n\n      const anyRequest = request ;\n\n      const rpcMetadata = core.getRPCMetadata(api.context.active());\n      const routeName = anyRequest.routeOptions\n        ? anyRequest.routeOptions.url // since fastify@4.10.0\n        : request.routerPath;\n      if (routeName && rpcMetadata?.type === core.RPCType.HTTP) {\n        rpcMetadata.route = routeName;\n      }\n\n      const method = request.method || 'GET';\n\n      core$1.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      done();\n    };\n  }\n\n   _wrapHandler(\n    pluginName,\n    hookName,\n    original,\n    syncFunctionWithDone,\n  ) {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify route.handler function');\n\n    return function ( ...args) {\n      if (!instrumentation.isEnabled()) {\n        return original.apply(this, args);\n      }\n\n      const name = original.name || pluginName || ANONYMOUS_NAME;\n      const spanName = `${AttributeNames.FastifyNames.MIDDLEWARE} - ${name}`;\n\n      const reply = args[1] ;\n\n      const span = utils.startSpan(reply, instrumentation.tracer, spanName, {\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.MIDDLEWARE,\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: pluginName,\n        [AttributeNames.AttributeNames.HOOK_NAME]: hookName,\n      });\n\n      const origDone = syncFunctionWithDone && (args[args.length - 1] );\n      if (origDone) {\n        args[args.length - 1] = function (...doneArgs) {\n          utils.endSpan(reply);\n          origDone.apply(this, doneArgs);\n        };\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return utils.safeExecuteInTheMiddleMaybePromise(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (err instanceof Error) {\n              span.setStatus({\n                code: api.SpanStatusCode.ERROR,\n                message: err.message,\n              });\n              span.recordException(err);\n            }\n            // async hooks should end the span as soon as the promise is resolved\n            if (!syncFunctionWithDone) {\n              utils.endSpan(reply);\n            }\n          },\n        );\n      });\n    };\n  }\n\n   _wrapAddHook() {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify server.addHook function');\n\n    // biome-ignore lint/complexity/useArrowFunction: <explanation>\n    return function (original) {\n      return function wrappedAddHook( ...args) {\n        const name = args[0] ;\n        const handler = args[1] ;\n        const pluginName = this.pluginName;\n        if (!hooksNamesToWrap.has(name)) {\n          return original.apply(this, args);\n        }\n\n        const syncFunctionWithDone =\n          typeof args[args.length - 1] === 'function' && handler.constructor.name !== 'AsyncFunction';\n\n        return original.apply(this, [\n          name,\n          instrumentation._wrapHandler(pluginName, name, handler, syncFunctionWithDone),\n        ] );\n      };\n    };\n  }\n\n   _patchConstructor(moduleExports\n\n) {\n    const instrumentation = this;\n\n    function fastify( ...args) {\n      const app = moduleExports.fastify.apply(this, args);\n      app.addHook('onRequest', instrumentation._hookOnRequest());\n      app.addHook('preHandler', instrumentation._hookPreHandler());\n\n      instrumentClient();\n\n      instrumentation._wrap(app, 'addHook', instrumentation._wrapAddHook());\n\n      return app;\n    }\n\n    if (moduleExports.errorCodes !== undefined) {\n      fastify.errorCodes = moduleExports.errorCodes;\n    }\n    fastify.fastify = fastify;\n    fastify.default = fastify;\n    return fastify;\n  }\n\n   _patchSend() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify reply.send function');\n\n    return function patchSend(original) {\n      return function send( ...args) {\n        const maybeError = args[0];\n\n        if (!instrumentation$1.isEnabled()) {\n          return original.apply(this, args);\n        }\n\n        return instrumentation.safeExecuteInTheMiddle(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (!err && maybeError instanceof Error) {\n              // eslint-disable-next-line no-param-reassign\n              err = maybeError;\n            }\n            utils.endSpan(this, err);\n          },\n        );\n      };\n    };\n  }\n\n   _hookPreHandler() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify preHandler function');\n\n    return function preHandler( request, reply, done) {\n      if (!instrumentation$1.isEnabled()) {\n        return done();\n      }\n      const anyRequest = request ;\n\n      const handler = anyRequest.routeOptions?.handler || anyRequest.context?.handler;\n      const handlerName = handler?.name.startsWith('bound ') ? handler.name.substring(6) : handler?.name;\n      const spanName = `${AttributeNames.FastifyNames.REQUEST_HANDLER} - ${handlerName || this.pluginName || ANONYMOUS_NAME}`;\n\n      const spanAttributes = {\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: this.pluginName,\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.REQUEST_HANDLER,\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMATTRS_HTTP_ROUTE]: anyRequest.routeOptions\n          ? anyRequest.routeOptions.url // since fastify@4.10.0\n          : request.routerPath,\n      };\n      if (handlerName) {\n        spanAttributes[AttributeNames.AttributeNames.FASTIFY_NAME] = handlerName;\n      }\n      const span = utils.startSpan(reply, instrumentation$1.tracer, spanName, spanAttributes);\n\n      addFastifyV3SpanAttributes(span);\n\n      const { requestHook } = instrumentation$1.getConfig();\n      if (requestHook) {\n        instrumentation.safeExecuteInTheMiddle(\n          () => requestHook(span, { request }),\n          e => {\n            if (e) {\n              instrumentation$1._diag.error('request hook failed', e);\n            }\n          },\n          true,\n        );\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        done();\n      });\n    };\n  }\n}\n\nfunction instrumentClient() {\n  const client = core$1.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifyV3SpanAttributes(span);\n    });\n  }\n}\n\nfunction addFastifyV3SpanAttributes(span) {\n  const attributes = core$1.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = name.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nexports.FastifyInstrumentationV3 = FastifyInstrumentationV3;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9pbnN0cnVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxvREFBb0QseUNBQXlDLDBDQUEwQyw4Q0FBOEMsb0RBQW9ELHFEQUFxRCxpQkFBaUI7O0FBRWhULFlBQVksbUJBQU8sQ0FBQyxzSUFBb0I7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLGtLQUFxQjtBQUMxQyx3QkFBd0IsbUJBQU8sQ0FBQyxxTUFBZ0M7QUFDaEUsNEJBQTRCLG1CQUFPLENBQUMsMExBQXFDO0FBQ3pFLGVBQWUsbUJBQU8sQ0FBQyxzSEFBYztBQUNyQyx1QkFBdUIsbUJBQU8sQ0FBQyw4TkFBMkI7QUFDMUQsY0FBYyxtQkFBTyxDQUFDLGdNQUFZOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsdURBQXVELFFBQVEsRUFBRSxVQUFVO0FBQzNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLHdDQUF3QyxJQUFJLEtBQUs7O0FBRTNFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCLDZDQUE2QyxJQUFJLGlEQUFpRDs7QUFFNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGNBQWMsY0FBYztBQUM1QjtBQUNBO0FBQ0Esb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhDQUE4QyxLQUFLO0FBQ25ELEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2luc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlOZXh0SnNWZXJzaW9uXCJdID0gXCIxNS41LjRcIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IHNlbWFudGljQ29udmVudGlvbnMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucycpO1xuY29uc3QgY29yZSQxID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBBdHRyaWJ1dGVOYW1lcyA9IHJlcXVpcmUoJy4vZW51bXMvQXR0cmlidXRlTmFtZXMuanMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5qcycpO1xuXG4vLyBWZW5kb3JlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvaW5zdHJ1bWVudGF0aW9uLnRzXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhcyAqL1xuLyogZXNsaW50LWRpc2FibGUganNkb2MvcmVxdWlyZS1qc2RvYyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cblxuLyoqIEBrbmlwaWdub3JlICovXG5cbmNvbnN0IFBBQ0tBR0VfVkVSU0lPTiA9ICcwLjEuMCc7XG5cbmNvbnN0IFBBQ0tBR0VfTkFNRSA9ICdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1mYXN0aWZ5LXYzJztcbmNvbnN0IEFOT05ZTU9VU19OQU1FID0gJ2Fub255bW91cyc7XG5cbi8vIFRoZSBpbnN0cnVtZW50YXRpb24gY3JlYXRlcyBhIHNwYW4gZm9yIGludm9jYXRpb25zIG9mIGxpZmVjeWNsZSBob29rIGhhbmRsZXJzXG4vLyB0aGF0IHRha2UgYChyZXF1ZXN0LCByZXBseSwgLi4uWywgZG9uZV0pYCBhcmd1bWVudHMuIEN1cnJlbnRseSB0aGlzIGlzIGFsbFxuLy8gbGlmZWN5Y2xlIGhvb2tzIGV4Y2VwdCBgb25SZXF1ZXN0QWJvcnRgLlxuLy8gaHR0cHM6Ly9mYXN0aWZ5LmRldi9kb2NzL2xhdGVzdC9SZWZlcmVuY2UvSG9va3NcbmNvbnN0IGhvb2tzTmFtZXNUb1dyYXAgPSBuZXcgU2V0KFtcbiAgJ29uVGltZW91dCcsXG4gICdvblJlcXVlc3QnLFxuICAncHJlUGFyc2luZycsXG4gICdwcmVWYWxpZGF0aW9uJyxcbiAgJ3ByZVNlcmlhbGl6YXRpb24nLFxuICAncHJlSGFuZGxlcicsXG4gICdvblNlbmQnLFxuICAnb25SZXNwb25zZScsXG4gICdvbkVycm9yJyxcbl0pO1xuXG4vKipcbiAqIEZhc3RpZnkgaW5zdHJ1bWVudGF0aW9uIGZvciBPcGVuVGVsZW1ldHJ5XG4gKi9cbmNsYXNzIEZhc3RpZnlJbnN0cnVtZW50YXRpb25WMyBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoUEFDS0FHRV9OQU1FLCBQQUNLQUdFX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAgaW5pdCgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbignZmFzdGlmeScsIFsnPj0zLjAuMCA8NCddLCBtb2R1bGVFeHBvcnRzID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhdGNoQ29uc3RydWN0b3IobW9kdWxlRXhwb3J0cyk7XG4gICAgICB9KSxcbiAgICBdO1xuICB9XG5cbiAgIF9ob29rT25SZXF1ZXN0KCkge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gb25SZXF1ZXN0KHJlcXVlc3QsIHJlcGx5LCBkb25lKSB7XG4gICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5pc0VuYWJsZWQoKSkge1xuICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgfVxuICAgICAgaW5zdHJ1bWVudGF0aW9uLl93cmFwKHJlcGx5LCAnc2VuZCcsIGluc3RydW1lbnRhdGlvbi5fcGF0Y2hTZW5kKCkpO1xuXG4gICAgICBjb25zdCBhbnlSZXF1ZXN0ID0gcmVxdWVzdCA7XG5cbiAgICAgIGNvbnN0IHJwY01ldGFkYXRhID0gY29yZS5nZXRSUENNZXRhZGF0YShhcGkuY29udGV4dC5hY3RpdmUoKSk7XG4gICAgICBjb25zdCByb3V0ZU5hbWUgPSBhbnlSZXF1ZXN0LnJvdXRlT3B0aW9uc1xuICAgICAgICA/IGFueVJlcXVlc3Qucm91dGVPcHRpb25zLnVybCAvLyBzaW5jZSBmYXN0aWZ5QDQuMTAuMFxuICAgICAgICA6IHJlcXVlc3Qucm91dGVyUGF0aDtcbiAgICAgIGlmIChyb3V0ZU5hbWUgJiYgcnBjTWV0YWRhdGE/LnR5cGUgPT09IGNvcmUuUlBDVHlwZS5IVFRQKSB7XG4gICAgICAgIHJwY01ldGFkYXRhLnJvdXRlID0gcm91dGVOYW1lO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZCB8fCAnR0VUJztcblxuICAgICAgY29yZSQxLmdldElzb2xhdGlvblNjb3BlKCkuc2V0VHJhbnNhY3Rpb25OYW1lKGAke21ldGhvZH0gJHtyb3V0ZU5hbWV9YCk7XG4gICAgICBkb25lKCk7XG4gICAgfTtcbiAgfVxuXG4gICBfd3JhcEhhbmRsZXIoXG4gICAgcGx1Z2luTmFtZSxcbiAgICBob29rTmFtZSxcbiAgICBvcmlnaW5hbCxcbiAgICBzeW5jRnVuY3Rpb25XaXRoRG9uZSxcbiAgKSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gdGhpcztcbiAgICB0aGlzLl9kaWFnLmRlYnVnKCdQYXRjaGluZyBmYXN0aWZ5IHJvdXRlLmhhbmRsZXIgZnVuY3Rpb24nKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgIGlmICghaW5zdHJ1bWVudGF0aW9uLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmFtZSA9IG9yaWdpbmFsLm5hbWUgfHwgcGx1Z2luTmFtZSB8fCBBTk9OWU1PVVNfTkFNRTtcbiAgICAgIGNvbnN0IHNwYW5OYW1lID0gYCR7QXR0cmlidXRlTmFtZXMuRmFzdGlmeU5hbWVzLk1JRERMRVdBUkV9IC0gJHtuYW1lfWA7XG5cbiAgICAgIGNvbnN0IHJlcGx5ID0gYXJnc1sxXSA7XG5cbiAgICAgIGNvbnN0IHNwYW4gPSB1dGlscy5zdGFydFNwYW4ocmVwbHksIGluc3RydW1lbnRhdGlvbi50cmFjZXIsIHNwYW5OYW1lLCB7XG4gICAgICAgIFtBdHRyaWJ1dGVOYW1lcy5BdHRyaWJ1dGVOYW1lcy5GQVNUSUZZX1RZUEVdOiBBdHRyaWJ1dGVOYW1lcy5GYXN0aWZ5VHlwZXMuTUlERExFV0FSRSxcbiAgICAgICAgW0F0dHJpYnV0ZU5hbWVzLkF0dHJpYnV0ZU5hbWVzLlBMVUdJTl9OQU1FXTogcGx1Z2luTmFtZSxcbiAgICAgICAgW0F0dHJpYnV0ZU5hbWVzLkF0dHJpYnV0ZU5hbWVzLkhPT0tfTkFNRV06IGhvb2tOYW1lLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG9yaWdEb25lID0gc3luY0Z1bmN0aW9uV2l0aERvbmUgJiYgKGFyZ3NbYXJncy5sZW5ndGggLSAxXSApO1xuICAgICAgaWYgKG9yaWdEb25lKSB7XG4gICAgICAgIGFyZ3NbYXJncy5sZW5ndGggLSAxXSA9IGZ1bmN0aW9uICguLi5kb25lQXJncykge1xuICAgICAgICAgIHV0aWxzLmVuZFNwYW4ocmVwbHkpO1xuICAgICAgICAgIG9yaWdEb25lLmFwcGx5KHRoaXMsIGRvbmVBcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoYXBpLnRyYWNlLnNldFNwYW4oYXBpLmNvbnRleHQuYWN0aXZlKCksIHNwYW4pLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiB1dGlscy5zYWZlRXhlY3V0ZUluVGhlTWlkZGxlTWF5YmVQcm9taXNlKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICAgICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHNwYW4ucmVjb3JkRXhjZXB0aW9uKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhc3luYyBob29rcyBzaG91bGQgZW5kIHRoZSBzcGFuIGFzIHNvb24gYXMgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWRcbiAgICAgICAgICAgIGlmICghc3luY0Z1bmN0aW9uV2l0aERvbmUpIHtcbiAgICAgICAgICAgICAgdXRpbHMuZW5kU3BhbihyZXBseSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICAgX3dyYXBBZGRIb29rKCkge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgdGhpcy5fZGlhZy5kZWJ1ZygnUGF0Y2hpbmcgZmFzdGlmeSBzZXJ2ZXIuYWRkSG9vayBmdW5jdGlvbicpO1xuXG4gICAgLy8gYmlvbWUtaWdub3JlIGxpbnQvY29tcGxleGl0eS91c2VBcnJvd0Z1bmN0aW9uOiA8ZXhwbGFuYXRpb24+XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBwZWRBZGRIb29rKCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBhcmdzWzBdIDtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGFyZ3NbMV0gO1xuICAgICAgICBjb25zdCBwbHVnaW5OYW1lID0gdGhpcy5wbHVnaW5OYW1lO1xuICAgICAgICBpZiAoIWhvb2tzTmFtZXNUb1dyYXAuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3luY0Z1bmN0aW9uV2l0aERvbmUgPVxuICAgICAgICAgIHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicgJiYgaGFuZGxlci5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnQXN5bmNGdW5jdGlvbic7XG5cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIFtcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGluc3RydW1lbnRhdGlvbi5fd3JhcEhhbmRsZXIocGx1Z2luTmFtZSwgbmFtZSwgaGFuZGxlciwgc3luY0Z1bmN0aW9uV2l0aERvbmUpLFxuICAgICAgICBdICk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICAgX3BhdGNoQ29uc3RydWN0b3IobW9kdWxlRXhwb3J0c1xuXG4pIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gZmFzdGlmeSggLi4uYXJncykge1xuICAgICAgY29uc3QgYXBwID0gbW9kdWxlRXhwb3J0cy5mYXN0aWZ5LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgYXBwLmFkZEhvb2soJ29uUmVxdWVzdCcsIGluc3RydW1lbnRhdGlvbi5faG9va09uUmVxdWVzdCgpKTtcbiAgICAgIGFwcC5hZGRIb29rKCdwcmVIYW5kbGVyJywgaW5zdHJ1bWVudGF0aW9uLl9ob29rUHJlSGFuZGxlcigpKTtcblxuICAgICAgaW5zdHJ1bWVudENsaWVudCgpO1xuXG4gICAgICBpbnN0cnVtZW50YXRpb24uX3dyYXAoYXBwLCAnYWRkSG9vaycsIGluc3RydW1lbnRhdGlvbi5fd3JhcEFkZEhvb2soKSk7XG5cbiAgICAgIHJldHVybiBhcHA7XG4gICAgfVxuXG4gICAgaWYgKG1vZHVsZUV4cG9ydHMuZXJyb3JDb2RlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmYXN0aWZ5LmVycm9yQ29kZXMgPSBtb2R1bGVFeHBvcnRzLmVycm9yQ29kZXM7XG4gICAgfVxuICAgIGZhc3RpZnkuZmFzdGlmeSA9IGZhc3RpZnk7XG4gICAgZmFzdGlmeS5kZWZhdWx0ID0gZmFzdGlmeTtcbiAgICByZXR1cm4gZmFzdGlmeTtcbiAgfVxuXG4gICBfcGF0Y2hTZW5kKCkge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiQxID0gdGhpcztcbiAgICB0aGlzLl9kaWFnLmRlYnVnKCdQYXRjaGluZyBmYXN0aWZ5IHJlcGx5LnNlbmQgZnVuY3Rpb24nKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBwYXRjaFNlbmQob3JpZ2luYWwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZW5kKCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG1heWJlRXJyb3IgPSBhcmdzWzBdO1xuXG4gICAgICAgIGlmICghaW5zdHJ1bWVudGF0aW9uJDEuaXNFbmFibGVkKCkpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdHJ1bWVudGF0aW9uLnNhZmVFeGVjdXRlSW5UaGVNaWRkbGUoXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyICYmIG1heWJlRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgICAgZXJyID0gbWF5YmVFcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHV0aWxzLmVuZFNwYW4odGhpcywgZXJyKTtcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgIF9ob29rUHJlSGFuZGxlcigpIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24kMSA9IHRoaXM7XG4gICAgdGhpcy5fZGlhZy5kZWJ1ZygnUGF0Y2hpbmcgZmFzdGlmeSBwcmVIYW5kbGVyIGZ1bmN0aW9uJyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gcHJlSGFuZGxlciggcmVxdWVzdCwgcmVwbHksIGRvbmUpIHtcbiAgICAgIGlmICghaW5zdHJ1bWVudGF0aW9uJDEuaXNFbmFibGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFueVJlcXVlc3QgPSByZXF1ZXN0IDtcblxuICAgICAgY29uc3QgaGFuZGxlciA9IGFueVJlcXVlc3Qucm91dGVPcHRpb25zPy5oYW5kbGVyIHx8IGFueVJlcXVlc3QuY29udGV4dD8uaGFuZGxlcjtcbiAgICAgIGNvbnN0IGhhbmRsZXJOYW1lID0gaGFuZGxlcj8ubmFtZS5zdGFydHNXaXRoKCdib3VuZCAnKSA/IGhhbmRsZXIubmFtZS5zdWJzdHJpbmcoNikgOiBoYW5kbGVyPy5uYW1lO1xuICAgICAgY29uc3Qgc3Bhbk5hbWUgPSBgJHtBdHRyaWJ1dGVOYW1lcy5GYXN0aWZ5TmFtZXMuUkVRVUVTVF9IQU5ETEVSfSAtICR7aGFuZGxlck5hbWUgfHwgdGhpcy5wbHVnaW5OYW1lIHx8IEFOT05ZTU9VU19OQU1FfWA7XG5cbiAgICAgIGNvbnN0IHNwYW5BdHRyaWJ1dGVzID0ge1xuICAgICAgICBbQXR0cmlidXRlTmFtZXMuQXR0cmlidXRlTmFtZXMuUExVR0lOX05BTUVdOiB0aGlzLnBsdWdpbk5hbWUsXG4gICAgICAgIFtBdHRyaWJ1dGVOYW1lcy5BdHRyaWJ1dGVOYW1lcy5GQVNUSUZZX1RZUEVdOiBBdHRyaWJ1dGVOYW1lcy5GYXN0aWZ5VHlwZXMuUkVRVUVTVF9IQU5ETEVSLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgW3NlbWFudGljQ29udmVudGlvbnMuU0VNQVRUUlNfSFRUUF9ST1VURV06IGFueVJlcXVlc3Qucm91dGVPcHRpb25zXG4gICAgICAgICAgPyBhbnlSZXF1ZXN0LnJvdXRlT3B0aW9ucy51cmwgLy8gc2luY2UgZmFzdGlmeUA0LjEwLjBcbiAgICAgICAgICA6IHJlcXVlc3Qucm91dGVyUGF0aCxcbiAgICAgIH07XG4gICAgICBpZiAoaGFuZGxlck5hbWUpIHtcbiAgICAgICAgc3BhbkF0dHJpYnV0ZXNbQXR0cmlidXRlTmFtZXMuQXR0cmlidXRlTmFtZXMuRkFTVElGWV9OQU1FXSA9IGhhbmRsZXJOYW1lO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3BhbiA9IHV0aWxzLnN0YXJ0U3BhbihyZXBseSwgaW5zdHJ1bWVudGF0aW9uJDEudHJhY2VyLCBzcGFuTmFtZSwgc3BhbkF0dHJpYnV0ZXMpO1xuXG4gICAgICBhZGRGYXN0aWZ5VjNTcGFuQXR0cmlidXRlcyhzcGFuKTtcblxuICAgICAgY29uc3QgeyByZXF1ZXN0SG9vayB9ID0gaW5zdHJ1bWVudGF0aW9uJDEuZ2V0Q29uZmlnKCk7XG4gICAgICBpZiAocmVxdWVzdEhvb2spIHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uLnNhZmVFeGVjdXRlSW5UaGVNaWRkbGUoXG4gICAgICAgICAgKCkgPT4gcmVxdWVzdEhvb2soc3BhbiwgeyByZXF1ZXN0IH0pLFxuICAgICAgICAgIGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgaW5zdHJ1bWVudGF0aW9uJDEuX2RpYWcuZXJyb3IoJ3JlcXVlc3QgaG9vayBmYWlsZWQnLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKGFwaS50cmFjZS5zZXRTcGFuKGFwaS5jb250ZXh0LmFjdGl2ZSgpLCBzcGFuKSwgKCkgPT4ge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc3RydW1lbnRDbGllbnQoKSB7XG4gIGNvbnN0IGNsaWVudCA9IGNvcmUkMS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0JywgKHNwYW4pID0+IHtcbiAgICAgIGFkZEZhc3RpZnlWM1NwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZEZhc3RpZnlWM1NwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUkMS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG5cbiAgLy8gdGhpcyBpcyBvbmUgb2Y6IG1pZGRsZXdhcmUsIHJlcXVlc3RfaGFuZGxlclxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snZmFzdGlmeS50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBmYXN0aWZ5IHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlJDEuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlJDEuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuZmFzdGlmeScsXG4gICAgW2NvcmUkMS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uZmFzdGlmeWAsXG4gIH0pO1xuXG4gIC8vIEFsc28gdXBkYXRlIHRoZSBuYW1lLCB3ZSBkb24ndCBuZWVkIHRvIFwibWlkZGxld2FyZSAtIFwiIHByZWZpeFxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1snZmFzdGlmeS5uYW1lJ10gfHwgYXR0cmlidXRlc1sncGx1Z2luLm5hbWUnXSB8fCBhdHRyaWJ1dGVzWydob29rLm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIC8vIFRyeSByZW1vdmluZyBgZmFzdGlmeSAtPiBgIGFuZCBgQGZhc3RpZnkvb3RlbCAtPiBgIHByZWZpeGVzXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2ssIGFuZCBub3QgYWx3YXlzIHdvcmtpbmcgZm9yIGFsbCBzcGFuc1xuICAgIC8vIEJ1dCBpdCdzIHRoZSBiZXN0IHdlIGNhbiBkbyB3aXRob3V0IGEgcHJvcGVyIEFQSVxuICAgIGNvbnN0IHVwZGF0ZWROYW1lID0gbmFtZS5yZXBsYWNlKC9eZmFzdGlmeSAtPiAvLCAnJykucmVwbGFjZSgvXkBmYXN0aWZ5XFwvb3RlbCAtPiAvLCAnJyk7XG5cbiAgICBzcGFuLnVwZGF0ZU5hbWUodXBkYXRlZE5hbWUpO1xuICB9XG59XG5cbmV4cG9ydHMuRmFzdGlmeUluc3RydW1lbnRhdGlvblYzID0gRmFzdGlmeUluc3RydW1lbnRhdGlvblYzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/utils.ts\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Starts Span\n * @param reply - reply function\n * @param tracer - tracer\n * @param spanName - span name\n * @param spanAttributes - span attributes\n */\nfunction startSpan(\n  reply,\n  tracer,\n  spanName,\n  spanAttributes = {},\n) {\n  const span = tracer.startSpan(spanName, { attributes: spanAttributes });\n\n  const spans = reply[constants.spanRequestSymbol] || [];\n  spans.push(span);\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(reply, constants.spanRequestSymbol, {\n    enumerable: false,\n    configurable: true,\n    value: spans,\n  });\n\n  return span;\n}\n\n/**\n * Ends span\n * @param reply - reply function\n * @param err - error\n */\nfunction endSpan(reply, err) {\n  const spans = reply[constants.spanRequestSymbol] || [];\n  // there is no active span, or it has already ended\n  if (!spans.length) {\n    return;\n  }\n  // biome-ignore lint/complexity/noForEach: <explanation>\n  spans.forEach((span) => {\n    if (err) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: err.message,\n      });\n      span.recordException(err);\n    }\n    span.end();\n  });\n  delete reply[constants.spanRequestSymbol];\n}\n\n// @TODO after approve add this to instrumentation package and replace usage\n// when it will be released\n\n/**\n * This function handles the missing case from instrumentation package when\n * execute can either return a promise or void. And using async is not an\n * option as it is producing unwanted side effects.\n * @param execute - function to be executed\n * @param onFinish - function called when function executed\n * @param preventThrowingError - prevent to throw error when execute\n * function fails\n */\n\nfunction safeExecuteInTheMiddleMaybePromise(\n  execute,\n  onFinish,\n  preventThrowingError,\n) {\n  let error;\n  let result = undefined;\n  try {\n    result = execute();\n\n    if (isPromise(result)) {\n      result.then(\n        res => onFinish(undefined, res),\n        err => onFinish(err),\n      );\n    }\n  } catch (e) {\n    error = e;\n  } finally {\n    if (!isPromise(result)) {\n      onFinish(error, result);\n      if (error && true) {\n        // eslint-disable-next-line no-unsafe-finally\n        throw error;\n      }\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n\nfunction isPromise(val) {\n  return (\n    (typeof val === 'object' && val && typeof Object.getOwnPropertyDescriptor(val, 'then')?.value === 'function') ||\n    false\n  );\n}\n\nexports.endSpan = endSpan;\nexports.safeExecuteInTheMiddleMaybePromise = safeExecuteInTheMiddleMaybePromise;\nexports.startSpan = startSpan;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsc0lBQW9CO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLHdNQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDRDQUE0Qyw0QkFBNEI7O0FBRXhFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmLDBDQUEwQztBQUMxQyxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuXG4vLyBWZW5kb3JlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvdXRpbHMudHNcbi8qIGVzbGludC1kaXNhYmxlIGpzZG9jL3JlcXVpcmUtanNkb2MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBTdGFydHMgU3BhblxuICogQHBhcmFtIHJlcGx5IC0gcmVwbHkgZnVuY3Rpb25cbiAqIEBwYXJhbSB0cmFjZXIgLSB0cmFjZXJcbiAqIEBwYXJhbSBzcGFuTmFtZSAtIHNwYW4gbmFtZVxuICogQHBhcmFtIHNwYW5BdHRyaWJ1dGVzIC0gc3BhbiBhdHRyaWJ1dGVzXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0U3BhbihcbiAgcmVwbHksXG4gIHRyYWNlcixcbiAgc3Bhbk5hbWUsXG4gIHNwYW5BdHRyaWJ1dGVzID0ge30sXG4pIHtcbiAgY29uc3Qgc3BhbiA9IHRyYWNlci5zdGFydFNwYW4oc3Bhbk5hbWUsIHsgYXR0cmlidXRlczogc3BhbkF0dHJpYnV0ZXMgfSk7XG5cbiAgY29uc3Qgc3BhbnMgPSByZXBseVtjb25zdGFudHMuc3BhblJlcXVlc3RTeW1ib2xdIHx8IFtdO1xuICBzcGFucy5wdXNoKHNwYW4pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcGx5LCBjb25zdGFudHMuc3BhblJlcXVlc3RTeW1ib2wsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHNwYW5zLFxuICB9KTtcblxuICByZXR1cm4gc3Bhbjtcbn1cblxuLyoqXG4gKiBFbmRzIHNwYW5cbiAqIEBwYXJhbSByZXBseSAtIHJlcGx5IGZ1bmN0aW9uXG4gKiBAcGFyYW0gZXJyIC0gZXJyb3JcbiAqL1xuZnVuY3Rpb24gZW5kU3BhbihyZXBseSwgZXJyKSB7XG4gIGNvbnN0IHNwYW5zID0gcmVwbHlbY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sXSB8fCBbXTtcbiAgLy8gdGhlcmUgaXMgbm8gYWN0aXZlIHNwYW4sIG9yIGl0IGhhcyBhbHJlYWR5IGVuZGVkXG4gIGlmICghc3BhbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGJpb21lLWlnbm9yZSBsaW50L2NvbXBsZXhpdHkvbm9Gb3JFYWNoOiA8ZXhwbGFuYXRpb24+XG4gIHNwYW5zLmZvckVhY2goKHNwYW4pID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICB9KTtcbiAgICAgIHNwYW4ucmVjb3JkRXhjZXB0aW9uKGVycik7XG4gICAgfVxuICAgIHNwYW4uZW5kKCk7XG4gIH0pO1xuICBkZWxldGUgcmVwbHlbY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sXTtcbn1cblxuLy8gQFRPRE8gYWZ0ZXIgYXBwcm92ZSBhZGQgdGhpcyB0byBpbnN0cnVtZW50YXRpb24gcGFja2FnZSBhbmQgcmVwbGFjZSB1c2FnZVxuLy8gd2hlbiBpdCB3aWxsIGJlIHJlbGVhc2VkXG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHRoZSBtaXNzaW5nIGNhc2UgZnJvbSBpbnN0cnVtZW50YXRpb24gcGFja2FnZSB3aGVuXG4gKiBleGVjdXRlIGNhbiBlaXRoZXIgcmV0dXJuIGEgcHJvbWlzZSBvciB2b2lkLiBBbmQgdXNpbmcgYXN5bmMgaXMgbm90IGFuXG4gKiBvcHRpb24gYXMgaXQgaXMgcHJvZHVjaW5nIHVud2FudGVkIHNpZGUgZWZmZWN0cy5cbiAqIEBwYXJhbSBleGVjdXRlIC0gZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAqIEBwYXJhbSBvbkZpbmlzaCAtIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIGZ1bmN0aW9uIGV4ZWN1dGVkXG4gKiBAcGFyYW0gcHJldmVudFRocm93aW5nRXJyb3IgLSBwcmV2ZW50IHRvIHRocm93IGVycm9yIHdoZW4gZXhlY3V0ZVxuICogZnVuY3Rpb24gZmFpbHNcbiAqL1xuXG5mdW5jdGlvbiBzYWZlRXhlY3V0ZUluVGhlTWlkZGxlTWF5YmVQcm9taXNlKFxuICBleGVjdXRlLFxuICBvbkZpbmlzaCxcbiAgcHJldmVudFRocm93aW5nRXJyb3IsXG4pIHtcbiAgbGV0IGVycm9yO1xuICBsZXQgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICB0cnkge1xuICAgIHJlc3VsdCA9IGV4ZWN1dGUoKTtcblxuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgcmVzdWx0LnRoZW4oXG4gICAgICAgIHJlcyA9PiBvbkZpbmlzaCh1bmRlZmluZWQsIHJlcyksXG4gICAgICAgIGVyciA9PiBvbkZpbmlzaChlcnIpLFxuICAgICAgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgb25GaW5pc2goZXJyb3IsIHJlc3VsdCk7XG4gICAgICBpZiAoZXJyb3IgJiYgdHJ1ZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnNhZmUtZmluYWxseVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlKHZhbCkge1xuICByZXR1cm4gKFxuICAgICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsLCAndGhlbicpPy52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG5leHBvcnRzLmVuZFNwYW4gPSBlbmRTcGFuO1xuZXhwb3J0cy5zYWZlRXhlY3V0ZUluVGhlTWlkZGxlTWF5YmVQcm9taXNlID0gc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZTtcbmV4cG9ydHMuc3RhcnRTcGFuID0gc3RhcnRTcGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst firebaseInstrumentation = __webpack_require__(/*! ./otel/firebaseInstrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Firebase';\n\nconst config = {\n  firestoreSpanCreationHook: span => {\n    nodeCore.addOriginToSpan(span, 'auto.firebase.otel.firestore');\n\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'db.query');\n  },\n};\n\nconst instrumentFirebase = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new firebaseInstrumentation.FirebaseInstrumentation(config));\n\nconst _firebaseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFirebase();\n    },\n  };\n}) ;\n\nconst firebaseIntegration = core.defineIntegration(_firebaseIntegration);\n\nexports.firebaseIntegration = firebaseIntegration;\nexports.instrumentFirebase = instrumentFirebase;\n//# sourceMappingURL=firebase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2UvZmlyZWJhc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxnQ0FBZ0MsbUJBQU8sQ0FBQyw0T0FBbUM7O0FBRTNFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2ZpcmViYXNlL2ZpcmViYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBmaXJlYmFzZUluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vb3RlbC9maXJlYmFzZUluc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0ZpcmViYXNlJztcblxuY29uc3QgY29uZmlnID0ge1xuICBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rOiBzcGFuID0+IHtcbiAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZmlyZWJhc2Uub3RlbC5maXJlc3RvcmUnKTtcblxuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2RiLnF1ZXJ5Jyk7XG4gIH0sXG59O1xuXG5jb25zdCBpbnN0cnVtZW50RmlyZWJhc2UgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBmaXJlYmFzZUluc3RydW1lbnRhdGlvbi5GaXJlYmFzZUluc3RydW1lbnRhdGlvbihjb25maWcpKTtcblxuY29uc3QgX2ZpcmViYXNlSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEZpcmViYXNlKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3QgZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2ZpcmViYXNlSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmZpcmViYXNlSW50ZWdyYXRpb24gPSBmaXJlYmFzZUludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50RmlyZWJhc2UgPSBpbnN0cnVtZW50RmlyZWJhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJlYmFzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst firestore = __webpack_require__(/*! ./patches/firestore.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\");\n\nconst DefaultFirebaseInstrumentationConfig = {};\nconst firestoreSupportedVersions = ['>=3.0.0 <5']; // firebase 9+\n\n/**\n * Instrumentation for Firebase services, specifically Firestore.\n */\nclass FirebaseInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = DefaultFirebaseInstrumentationConfig) {\n    super('@sentry/instrumentation-firebase', core.SDK_VERSION, config);\n  }\n\n  /**\n   * sets config\n   * @param config\n   */\n    setConfig(config = {}) {\n    super.setConfig({ ...DefaultFirebaseInstrumentationConfig, ...config });\n  }\n\n  /**\n   *\n   * @protected\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n   init() {\n    const modules = [];\n\n    modules.push(firestore.patchFirestore(this.tracer, firestoreSupportedVersions, this._wrap, this._unwrap, this.getConfig()));\n\n    return modules;\n  }\n}\n\nexports.FirebaseInstrumentation = FirebaseInstrumentation;\n//# sourceMappingURL=firebaseInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2Uvb3RlbC9maXJlYmFzZUluc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSx3QkFBd0IsbUJBQU8sQ0FBQyxxTUFBZ0M7QUFDaEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGtCQUFrQixtQkFBTyxDQUFDLDJOQUF3Qjs7QUFFbEQ7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHNCQUFzQixvREFBb0Q7QUFDMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9maXJlYmFzZS9vdGVsL2ZpcmViYXNlSW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGZpcmVzdG9yZSA9IHJlcXVpcmUoJy4vcGF0Y2hlcy9maXJlc3RvcmUuanMnKTtcblxuY29uc3QgRGVmYXVsdEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uQ29uZmlnID0ge307XG5jb25zdCBmaXJlc3RvcmVTdXBwb3J0ZWRWZXJzaW9ucyA9IFsnPj0zLjAuMCA8NSddOyAvLyBmaXJlYmFzZSA5K1xuXG4vKipcbiAqIEluc3RydW1lbnRhdGlvbiBmb3IgRmlyZWJhc2Ugc2VydmljZXMsIHNwZWNpZmljYWxseSBGaXJlc3RvcmUuXG4gKi9cbmNsYXNzIEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgY29uc3RydWN0b3IoY29uZmlnID0gRGVmYXVsdEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uQ29uZmlnKSB7XG4gICAgc3VwZXIoJ0BzZW50cnkvaW5zdHJ1bWVudGF0aW9uLWZpcmViYXNlJywgY29yZS5TREtfVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXRzIGNvbmZpZ1xuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqL1xuICAgIHNldENvbmZpZyhjb25maWcgPSB7fSkge1xuICAgIHN1cGVyLnNldENvbmZpZyh7IC4uLkRlZmF1bHRGaXJlYmFzZUluc3RydW1lbnRhdGlvbkNvbmZpZywgLi4uY29uZmlnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgIGluaXQoKSB7XG4gICAgY29uc3QgbW9kdWxlcyA9IFtdO1xuXG4gICAgbW9kdWxlcy5wdXNoKGZpcmVzdG9yZS5wYXRjaEZpcmVzdG9yZSh0aGlzLnRyYWNlciwgZmlyZXN0b3JlU3VwcG9ydGVkVmVyc2lvbnMsIHRoaXMuX3dyYXAsIHRoaXMuX3Vud3JhcCwgdGhpcy5nZXRDb25maWcoKSkpO1xuXG4gICAgcmV0dXJuIG1vZHVsZXM7XG4gIH1cbn1cblxuZXhwb3J0cy5GaXJlYmFzZUluc3RydW1lbnRhdGlvbiA9IEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlyZWJhc2VJbnN0cnVtZW50YXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n\n// Inline minimal types used from `shimmer` to avoid importing shimmer's types directly.\n// We only need the shape for `wrap` and `unwrap` used in this file.\n\n/**\n *\n * @param tracer - Opentelemetry Tracer\n * @param firestoreSupportedVersions - supported version of firebase/firestore\n * @param wrap - reference to native instrumentation wrap function\n * @param unwrap - reference to native instrumentation wrap function\n */\nfunction patchFirestore(\n  tracer,\n  firestoreSupportedVersions,\n  wrap,\n  unwrap,\n  config,\n) {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const defaultFirestoreSpanCreationHook = () => {};\n\n  let firestoreSpanCreationHook = defaultFirestoreSpanCreationHook;\n  const configFirestoreSpanCreationHook = config.firestoreSpanCreationHook;\n\n  if (typeof configFirestoreSpanCreationHook === 'function') {\n    firestoreSpanCreationHook = (span) => {\n      instrumentation.safeExecuteInTheMiddle(\n        () => configFirestoreSpanCreationHook(span),\n        error => {\n          if (!error) {\n            return;\n          }\n          api.diag.error(error?.message);\n        },\n        true,\n      );\n    };\n  }\n\n  const moduleFirestoreCJS = new instrumentation.InstrumentationNodeModuleDefinition(\n    '@firebase/firestore',\n    firestoreSupportedVersions,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (moduleExports) => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n  );\n  const files = [\n    '@firebase/firestore/dist/lite/index.node.cjs.js',\n    '@firebase/firestore/dist/lite/index.node.mjs.js',\n    '@firebase/firestore/dist/lite/index.rn.esm2017.js',\n    '@firebase/firestore/dist/lite/index.cjs.js',\n  ];\n\n  for (const file of files) {\n    moduleFirestoreCJS.files.push(\n      new instrumentation.InstrumentationNodeModuleFile(\n        file,\n        firestoreSupportedVersions,\n        moduleExports => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n        moduleExports => unwrapMethods(moduleExports, unwrap),\n      ),\n    );\n  }\n\n  return moduleFirestoreCJS;\n}\n\nfunction wrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  wrap,\n  unwrap,\n  tracer,\n  firestoreSpanCreationHook,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  unwrapMethods(moduleExports, unwrap);\n\n  wrap(moduleExports, 'addDoc', patchAddDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'getDocs', patchGetDocs(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'setDoc', patchSetDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'deleteDoc', patchDeleteDoc(tracer, firestoreSpanCreationHook));\n\n  return moduleExports;\n}\n\nfunction unwrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  unwrap,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  for (const method of ['addDoc', 'getDocs', 'setDoc', 'deleteDoc']) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (instrumentation.isWrapped(moduleExports[method])) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      unwrap(moduleExports, method);\n    }\n  }\n  return moduleExports;\n}\n\nfunction patchAddDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function addDoc(original) {\n    return function (\n      reference,\n      data,\n    ) {\n      const span = startDBSpan(tracer, 'addDoc', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference, data);\n      });\n    };\n  };\n}\n\nfunction patchDeleteDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function deleteDoc(original) {\n    return function (reference) {\n      const span = startDBSpan(tracer, 'deleteDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchGetDocs(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function getDocs(original) {\n    return function (\n      reference,\n    ) {\n      const span = startDBSpan(tracer, 'getDocs', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchSetDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function setDoc(original) {\n    return function (\n      reference,\n      data,\n      options,\n    ) {\n      const span = startDBSpan(tracer, 'setDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n\n      return executeContextWithSpan(span, () => {\n        return typeof options !== 'undefined' ? original(reference, data, options) : original(reference, data);\n      });\n    };\n  };\n}\n\nfunction executeContextWithSpan(span, callback) {\n  return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n    return instrumentation.safeExecuteInTheMiddle(\n      () => {\n        return callback();\n      },\n      err => {\n        if (err) {\n          span.recordException(err);\n        }\n        span.end();\n      },\n      true,\n    );\n  });\n}\n\nfunction startDBSpan(\n  tracer,\n  spanName,\n  reference,\n) {\n  const span = tracer.startSpan(`${spanName} ${reference.path}`, { kind: api.SpanKind.CLIENT });\n  addAttributes(span, reference);\n  span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, spanName);\n  return span;\n}\n\n/**\n * Gets the server address and port attributes from the Firestore settings.\n * It's best effort to extract the address and port from the settings, especially for IPv6.\n * @param span - The span to set attributes on.\n * @param settings - The Firestore settings containing host information.\n */\nfunction getPortAndAddress(settings)\n\n {\n  let address;\n  let port;\n\n  if (typeof settings.host === 'string') {\n    if (settings.host.startsWith('[')) {\n      // IPv6 addresses can be enclosed in square brackets, e.g., [2001:db8::1]:8080\n      if (settings.host.endsWith(']')) {\n        // IPv6 with square brackets without port\n        address = settings.host.replace(/^\\[|\\]$/g, '');\n      } else if (settings.host.includes(']:')) {\n        // IPv6 with square brackets with port\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(1, lastColonIndex).replace(/^\\[|\\]$/g, '');\n          port = settings.host.slice(lastColonIndex + 1);\n        }\n      }\n    } else {\n      // IPv4 or IPv6 without square brackets\n      // If it's an IPv6 address without square brackets, we assume it does not have a port.\n      if (net.isIPv6(settings.host)) {\n        address = settings.host;\n      }\n      // If it's an IPv4 address, we can extract the port if it exists.\n      else {\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(0, lastColonIndex);\n          port = settings.host.slice(lastColonIndex + 1);\n        } else {\n          address = settings.host;\n        }\n      }\n    }\n  }\n  return {\n    address: address,\n    port: port ? parseInt(port, 10) : undefined,\n  };\n}\n\nfunction addAttributes(\n  span,\n  reference,\n) {\n  const firestoreApp = reference.firestore.app;\n  const firestoreOptions = firestoreApp.options;\n  const json = reference.firestore.toJSON() || {};\n  const settings = json.settings || {};\n\n  const attributes = {\n    [semanticConventions.ATTR_DB_COLLECTION_NAME]: reference.path,\n    [semanticConventions.ATTR_DB_NAMESPACE]: firestoreApp.name,\n    [semanticConventions.ATTR_DB_SYSTEM_NAME]: 'firebase.firestore',\n    'firebase.firestore.type': reference.type,\n    'firebase.firestore.options.projectId': firestoreOptions.projectId,\n    'firebase.firestore.options.appId': firestoreOptions.appId,\n    'firebase.firestore.options.messagingSenderId': firestoreOptions.messagingSenderId,\n    'firebase.firestore.options.storageBucket': firestoreOptions.storageBucket,\n  };\n\n  const { address, port } = getPortAndAddress(settings);\n\n  if (address) {\n    attributes[semanticConventions.ATTR_SERVER_ADDRESS] = address;\n  }\n  if (port) {\n    attributes[semanticConventions.ATTR_SERVER_PORT] = port;\n  }\n\n  span.setAttributes(attributes);\n}\n\nexports.getPortAndAddress = getPortAndAddress;\nexports.patchFirestore = patchFirestore;\n//# sourceMappingURL=firestore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2Uvb3RlbC9wYXRjaGVzL2ZpcmVzdG9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsMEJBQVU7QUFDOUIsWUFBWSxtQkFBTyxDQUFDLHNJQUFvQjtBQUN4Qyx3QkFBd0IsbUJBQU8sQ0FBQyxxTUFBZ0M7QUFDaEUsNEJBQTRCLG1CQUFPLENBQUMsMExBQXFDOztBQUV6RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxVQUFVLEVBQUUsZUFBZSxLQUFLLDJCQUEyQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLGdCQUFnQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9maXJlYmFzZS9vdGVsL3BhdGNoZXMvZmlyZXN0b3JlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBuZXQgPSByZXF1aXJlKCdub2RlOm5ldCcpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IHNlbWFudGljQ29udmVudGlvbnMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucycpO1xuXG4vLyBJbmxpbmUgbWluaW1hbCB0eXBlcyB1c2VkIGZyb20gYHNoaW1tZXJgIHRvIGF2b2lkIGltcG9ydGluZyBzaGltbWVyJ3MgdHlwZXMgZGlyZWN0bHkuXG4vLyBXZSBvbmx5IG5lZWQgdGhlIHNoYXBlIGZvciBgd3JhcGAgYW5kIGB1bndyYXBgIHVzZWQgaW4gdGhpcyBmaWxlLlxuXG4vKipcbiAqXG4gKiBAcGFyYW0gdHJhY2VyIC0gT3BlbnRlbGVtZXRyeSBUcmFjZXJcbiAqIEBwYXJhbSBmaXJlc3RvcmVTdXBwb3J0ZWRWZXJzaW9ucyAtIHN1cHBvcnRlZCB2ZXJzaW9uIG9mIGZpcmViYXNlL2ZpcmVzdG9yZVxuICogQHBhcmFtIHdyYXAgLSByZWZlcmVuY2UgdG8gbmF0aXZlIGluc3RydW1lbnRhdGlvbiB3cmFwIGZ1bmN0aW9uXG4gKiBAcGFyYW0gdW53cmFwIC0gcmVmZXJlbmNlIHRvIG5hdGl2ZSBpbnN0cnVtZW50YXRpb24gd3JhcCBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBwYXRjaEZpcmVzdG9yZShcbiAgdHJhY2VyLFxuICBmaXJlc3RvcmVTdXBwb3J0ZWRWZXJzaW9ucyxcbiAgd3JhcCxcbiAgdW53cmFwLFxuICBjb25maWcsXG4pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICBjb25zdCBkZWZhdWx0RmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vayA9ICgpID0+IHt9O1xuXG4gIGxldCBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rID0gZGVmYXVsdEZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2s7XG4gIGNvbnN0IGNvbmZpZ0ZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2sgPSBjb25maWcuZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vaztcblxuICBpZiAodHlwZW9mIGNvbmZpZ0ZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rID0gKHNwYW4pID0+IHtcbiAgICAgIGluc3RydW1lbnRhdGlvbi5zYWZlRXhlY3V0ZUluVGhlTWlkZGxlKFxuICAgICAgICAoKSA9PiBjb25maWdGaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rKHNwYW4pLFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhcGkuZGlhZy5lcnJvcihlcnJvcj8ubWVzc2FnZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRydWUsXG4gICAgICApO1xuICAgIH07XG4gIH1cblxuICBjb25zdCBtb2R1bGVGaXJlc3RvcmVDSlMgPSBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICdAZmlyZWJhc2UvZmlyZXN0b3JlJyxcbiAgICBmaXJlc3RvcmVTdXBwb3J0ZWRWZXJzaW9ucyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIChtb2R1bGVFeHBvcnRzKSA9PiB3cmFwTWV0aG9kcyhtb2R1bGVFeHBvcnRzLCB3cmFwLCB1bndyYXAsIHRyYWNlciwgZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vayksXG4gICk7XG4gIGNvbnN0IGZpbGVzID0gW1xuICAgICdAZmlyZWJhc2UvZmlyZXN0b3JlL2Rpc3QvbGl0ZS9pbmRleC5ub2RlLmNqcy5qcycsXG4gICAgJ0BmaXJlYmFzZS9maXJlc3RvcmUvZGlzdC9saXRlL2luZGV4Lm5vZGUubWpzLmpzJyxcbiAgICAnQGZpcmViYXNlL2ZpcmVzdG9yZS9kaXN0L2xpdGUvaW5kZXgucm4uZXNtMjAxNy5qcycsXG4gICAgJ0BmaXJlYmFzZS9maXJlc3RvcmUvZGlzdC9saXRlL2luZGV4LmNqcy5qcycsXG4gIF07XG5cbiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgbW9kdWxlRmlyZXN0b3JlQ0pTLmZpbGVzLnB1c2goXG4gICAgICBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVGaWxlKFxuICAgICAgICBmaWxlLFxuICAgICAgICBmaXJlc3RvcmVTdXBwb3J0ZWRWZXJzaW9ucyxcbiAgICAgICAgbW9kdWxlRXhwb3J0cyA9PiB3cmFwTWV0aG9kcyhtb2R1bGVFeHBvcnRzLCB3cmFwLCB1bndyYXAsIHRyYWNlciwgZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vayksXG4gICAgICAgIG1vZHVsZUV4cG9ydHMgPT4gdW53cmFwTWV0aG9kcyhtb2R1bGVFeHBvcnRzLCB1bndyYXApLFxuICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG1vZHVsZUZpcmVzdG9yZUNKUztcbn1cblxuZnVuY3Rpb24gd3JhcE1ldGhvZHMoXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIG1vZHVsZUV4cG9ydHMsXG4gIHdyYXAsXG4gIHVud3JhcCxcbiAgdHJhY2VyLFxuICBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuKSB7XG4gIHVud3JhcE1ldGhvZHMobW9kdWxlRXhwb3J0cywgdW53cmFwKTtcblxuICB3cmFwKG1vZHVsZUV4cG9ydHMsICdhZGREb2MnLCBwYXRjaEFkZERvYyh0cmFjZXIsIGZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2spKTtcbiAgd3JhcChtb2R1bGVFeHBvcnRzLCAnZ2V0RG9jcycsIHBhdGNoR2V0RG9jcyh0cmFjZXIsIGZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2spKTtcbiAgd3JhcChtb2R1bGVFeHBvcnRzLCAnc2V0RG9jJywgcGF0Y2hTZXREb2ModHJhY2VyLCBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rKSk7XG4gIHdyYXAobW9kdWxlRXhwb3J0cywgJ2RlbGV0ZURvYycsIHBhdGNoRGVsZXRlRG9jKHRyYWNlciwgZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vaykpO1xuXG4gIHJldHVybiBtb2R1bGVFeHBvcnRzO1xufVxuXG5mdW5jdGlvbiB1bndyYXBNZXRob2RzKFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBtb2R1bGVFeHBvcnRzLFxuICB1bndyYXAsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4pIHtcbiAgZm9yIChjb25zdCBtZXRob2Qgb2YgWydhZGREb2MnLCAnZ2V0RG9jcycsICdzZXREb2MnLCAnZGVsZXRlRG9jJ10pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgaWYgKGluc3RydW1lbnRhdGlvbi5pc1dyYXBwZWQobW9kdWxlRXhwb3J0c1ttZXRob2RdKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgIHVud3JhcChtb2R1bGVFeHBvcnRzLCBtZXRob2QpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kdWxlRXhwb3J0cztcbn1cblxuZnVuY3Rpb24gcGF0Y2hBZGREb2MoXG4gIHRyYWNlcixcbiAgZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vayxcbilcblxuIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFkZERvYyhvcmlnaW5hbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICByZWZlcmVuY2UsXG4gICAgICBkYXRhLFxuICAgICkge1xuICAgICAgY29uc3Qgc3BhbiA9IHN0YXJ0REJTcGFuKHRyYWNlciwgJ2FkZERvYycsIHJlZmVyZW5jZSk7XG4gICAgICBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rKHNwYW4pO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVDb250ZXh0V2l0aFNwYW4oc3BhbiwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwocmVmZXJlbmNlLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhdGNoRGVsZXRlRG9jKFxuICB0cmFjZXIsXG4gIGZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2ssXG4pXG5cbiB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWxldGVEb2Mob3JpZ2luYWwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlZmVyZW5jZSkge1xuICAgICAgY29uc3Qgc3BhbiA9IHN0YXJ0REJTcGFuKHRyYWNlciwgJ2RlbGV0ZURvYycsIHJlZmVyZW5jZS5wYXJlbnQgfHwgcmVmZXJlbmNlKTtcbiAgICAgIGZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2soc3Bhbik7XG4gICAgICByZXR1cm4gZXhlY3V0ZUNvbnRleHRXaXRoU3BhbihzcGFuLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbChyZWZlcmVuY2UpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGF0Y2hHZXREb2NzKFxuICB0cmFjZXIsXG4gIGZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2ssXG4pXG5cbiB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXREb2NzKG9yaWdpbmFsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChcbiAgICAgIHJlZmVyZW5jZSxcbiAgICApIHtcbiAgICAgIGNvbnN0IHNwYW4gPSBzdGFydERCU3Bhbih0cmFjZXIsICdnZXREb2NzJywgcmVmZXJlbmNlKTtcbiAgICAgIGZpcmVzdG9yZVNwYW5DcmVhdGlvbkhvb2soc3Bhbik7XG4gICAgICByZXR1cm4gZXhlY3V0ZUNvbnRleHRXaXRoU3BhbihzcGFuLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbChyZWZlcmVuY2UpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGF0Y2hTZXREb2MoXG4gIHRyYWNlcixcbiAgZmlyZXN0b3JlU3BhbkNyZWF0aW9uSG9vayxcbilcblxuIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNldERvYyhvcmlnaW5hbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICByZWZlcmVuY2UsXG4gICAgICBkYXRhLFxuICAgICAgb3B0aW9ucyxcbiAgICApIHtcbiAgICAgIGNvbnN0IHNwYW4gPSBzdGFydERCU3Bhbih0cmFjZXIsICdzZXREb2MnLCByZWZlcmVuY2UucGFyZW50IHx8IHJlZmVyZW5jZSk7XG4gICAgICBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rKHNwYW4pO1xuXG4gICAgICByZXR1cm4gZXhlY3V0ZUNvbnRleHRXaXRoU3BhbihzcGFuLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcgPyBvcmlnaW5hbChyZWZlcmVuY2UsIGRhdGEsIG9wdGlvbnMpIDogb3JpZ2luYWwocmVmZXJlbmNlLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVDb250ZXh0V2l0aFNwYW4oc3BhbiwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoYXBpLnRyYWNlLnNldFNwYW4oYXBpLmNvbnRleHQuYWN0aXZlKCksIHNwYW4pLCAoKSA9PiB7XG4gICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbi5zYWZlRXhlY3V0ZUluVGhlTWlkZGxlKFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgIH0sXG4gICAgICBlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgc3Bhbi5yZWNvcmRFeGNlcHRpb24oZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgfSxcbiAgICAgIHRydWUsXG4gICAgKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0REJTcGFuKFxuICB0cmFjZXIsXG4gIHNwYW5OYW1lLFxuICByZWZlcmVuY2UsXG4pIHtcbiAgY29uc3Qgc3BhbiA9IHRyYWNlci5zdGFydFNwYW4oYCR7c3Bhbk5hbWV9ICR7cmVmZXJlbmNlLnBhdGh9YCwgeyBraW5kOiBhcGkuU3BhbktpbmQuQ0xJRU5UIH0pO1xuICBhZGRBdHRyaWJ1dGVzKHNwYW4sIHJlZmVyZW5jZSk7XG4gIHNwYW4uc2V0QXR0cmlidXRlKHNlbWFudGljQ29udmVudGlvbnMuQVRUUl9EQl9PUEVSQVRJT05fTkFNRSwgc3Bhbk5hbWUpO1xuICByZXR1cm4gc3Bhbjtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzZXJ2ZXIgYWRkcmVzcyBhbmQgcG9ydCBhdHRyaWJ1dGVzIGZyb20gdGhlIEZpcmVzdG9yZSBzZXR0aW5ncy5cbiAqIEl0J3MgYmVzdCBlZmZvcnQgdG8gZXh0cmFjdCB0aGUgYWRkcmVzcyBhbmQgcG9ydCBmcm9tIHRoZSBzZXR0aW5ncywgZXNwZWNpYWxseSBmb3IgSVB2Ni5cbiAqIEBwYXJhbSBzcGFuIC0gVGhlIHNwYW4gdG8gc2V0IGF0dHJpYnV0ZXMgb24uXG4gKiBAcGFyYW0gc2V0dGluZ3MgLSBUaGUgRmlyZXN0b3JlIHNldHRpbmdzIGNvbnRhaW5pbmcgaG9zdCBpbmZvcm1hdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0UG9ydEFuZEFkZHJlc3Moc2V0dGluZ3MpXG5cbiB7XG4gIGxldCBhZGRyZXNzO1xuICBsZXQgcG9ydDtcblxuICBpZiAodHlwZW9mIHNldHRpbmdzLmhvc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHNldHRpbmdzLmhvc3Quc3RhcnRzV2l0aCgnWycpKSB7XG4gICAgICAvLyBJUHY2IGFkZHJlc3NlcyBjYW4gYmUgZW5jbG9zZWQgaW4gc3F1YXJlIGJyYWNrZXRzLCBlLmcuLCBbMjAwMTpkYjg6OjFdOjgwODBcbiAgICAgIGlmIChzZXR0aW5ncy5ob3N0LmVuZHNXaXRoKCddJykpIHtcbiAgICAgICAgLy8gSVB2NiB3aXRoIHNxdWFyZSBicmFja2V0cyB3aXRob3V0IHBvcnRcbiAgICAgICAgYWRkcmVzcyA9IHNldHRpbmdzLmhvc3QucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MuaG9zdC5pbmNsdWRlcygnXTonKSkge1xuICAgICAgICAvLyBJUHY2IHdpdGggc3F1YXJlIGJyYWNrZXRzIHdpdGggcG9ydFxuICAgICAgICBjb25zdCBsYXN0Q29sb25JbmRleCA9IHNldHRpbmdzLmhvc3QubGFzdEluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGxhc3RDb2xvbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIGFkZHJlc3MgPSBzZXR0aW5ncy5ob3N0LnNsaWNlKDEsIGxhc3RDb2xvbkluZGV4KS5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICAgIHBvcnQgPSBzZXR0aW5ncy5ob3N0LnNsaWNlKGxhc3RDb2xvbkluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSVB2NCBvciBJUHY2IHdpdGhvdXQgc3F1YXJlIGJyYWNrZXRzXG4gICAgICAvLyBJZiBpdCdzIGFuIElQdjYgYWRkcmVzcyB3aXRob3V0IHNxdWFyZSBicmFja2V0cywgd2UgYXNzdW1lIGl0IGRvZXMgbm90IGhhdmUgYSBwb3J0LlxuICAgICAgaWYgKG5ldC5pc0lQdjYoc2V0dGluZ3MuaG9zdCkpIHtcbiAgICAgICAgYWRkcmVzcyA9IHNldHRpbmdzLmhvc3Q7XG4gICAgICB9XG4gICAgICAvLyBJZiBpdCdzIGFuIElQdjQgYWRkcmVzcywgd2UgY2FuIGV4dHJhY3QgdGhlIHBvcnQgaWYgaXQgZXhpc3RzLlxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGxhc3RDb2xvbkluZGV4ID0gc2V0dGluZ3MuaG9zdC5sYXN0SW5kZXhPZignOicpO1xuICAgICAgICBpZiAobGFzdENvbG9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgYWRkcmVzcyA9IHNldHRpbmdzLmhvc3Quc2xpY2UoMCwgbGFzdENvbG9uSW5kZXgpO1xuICAgICAgICAgIHBvcnQgPSBzZXR0aW5ncy5ob3N0LnNsaWNlKGxhc3RDb2xvbkluZGV4ICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkcmVzcyA9IHNldHRpbmdzLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgIHBvcnQ6IHBvcnQgPyBwYXJzZUludChwb3J0LCAxMCkgOiB1bmRlZmluZWQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJpYnV0ZXMoXG4gIHNwYW4sXG4gIHJlZmVyZW5jZSxcbikge1xuICBjb25zdCBmaXJlc3RvcmVBcHAgPSByZWZlcmVuY2UuZmlyZXN0b3JlLmFwcDtcbiAgY29uc3QgZmlyZXN0b3JlT3B0aW9ucyA9IGZpcmVzdG9yZUFwcC5vcHRpb25zO1xuICBjb25zdCBqc29uID0gcmVmZXJlbmNlLmZpcmVzdG9yZS50b0pTT04oKSB8fCB7fTtcbiAgY29uc3Qgc2V0dGluZ3MgPSBqc29uLnNldHRpbmdzIHx8IHt9O1xuXG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSB7XG4gICAgW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9EQl9DT0xMRUNUSU9OX05BTUVdOiByZWZlcmVuY2UucGF0aCxcbiAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0RCX05BTUVTUEFDRV06IGZpcmVzdG9yZUFwcC5uYW1lLFxuICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfREJfU1lTVEVNX05BTUVdOiAnZmlyZWJhc2UuZmlyZXN0b3JlJyxcbiAgICAnZmlyZWJhc2UuZmlyZXN0b3JlLnR5cGUnOiByZWZlcmVuY2UudHlwZSxcbiAgICAnZmlyZWJhc2UuZmlyZXN0b3JlLm9wdGlvbnMucHJvamVjdElkJzogZmlyZXN0b3JlT3B0aW9ucy5wcm9qZWN0SWQsXG4gICAgJ2ZpcmViYXNlLmZpcmVzdG9yZS5vcHRpb25zLmFwcElkJzogZmlyZXN0b3JlT3B0aW9ucy5hcHBJZCxcbiAgICAnZmlyZWJhc2UuZmlyZXN0b3JlLm9wdGlvbnMubWVzc2FnaW5nU2VuZGVySWQnOiBmaXJlc3RvcmVPcHRpb25zLm1lc3NhZ2luZ1NlbmRlcklkLFxuICAgICdmaXJlYmFzZS5maXJlc3RvcmUub3B0aW9ucy5zdG9yYWdlQnVja2V0JzogZmlyZXN0b3JlT3B0aW9ucy5zdG9yYWdlQnVja2V0LFxuICB9O1xuXG4gIGNvbnN0IHsgYWRkcmVzcywgcG9ydCB9ID0gZ2V0UG9ydEFuZEFkZHJlc3Moc2V0dGluZ3MpO1xuXG4gIGlmIChhZGRyZXNzKSB7XG4gICAgYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfU0VSVkVSX0FERFJFU1NdID0gYWRkcmVzcztcbiAgfVxuICBpZiAocG9ydCkge1xuICAgIGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZFUl9QT1JUXSA9IHBvcnQ7XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoYXR0cmlidXRlcyk7XG59XG5cbmV4cG9ydHMuZ2V0UG9ydEFuZEFkZHJlc3MgPSBnZXRQb3J0QW5kQWRkcmVzcztcbmV4cG9ydHMucGF0Y2hGaXJlc3RvcmUgPSBwYXRjaEZpcmVzdG9yZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpcmVzdG9yZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentGenericPool();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n\n          const spanDescription = spanJSON.description;\n\n          // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n          const isGenericPoolSpan =\n            spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n          if (isGenericPoolSpan) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsbUNBQW1DLG1CQUFPLENBQUMsMk9BQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBLGtKQUFrSjs7QUFFbEo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dlbmVyaWNQb29sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2wnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdHZW5lcmljUG9vbCc7XG5cbmNvbnN0IGluc3RydW1lbnRHZW5lcmljUG9vbCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkdlbmVyaWNQb29sLkdlbmVyaWNQb29sSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9nZW5lcmljUG9vbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudEdlbmVyaWNQb29sKCk7XG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2sgPSBub2RlQ29yZS5pbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s/LigoKSA9PlxuICAgICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuXG4gICAgICAgICAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc3BhbkpTT04uZGVzY3JpcHRpb247XG5cbiAgICAgICAgICAvLyB0eXBvIGluIGVtaXR0ZWQgc3BhbiBmb3IgdmVyc2lvbiA8PSAwLjM4LjAgb2YgQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbFxuICAgICAgICAgIGNvbnN0IGlzR2VuZXJpY1Bvb2xTcGFuID1cbiAgICAgICAgICAgIHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hcXVpcmUnIHx8IHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hY3F1aXJlJztcblxuICAgICAgICAgIGlmIChpc0dlbmVyaWNQb29sU3Bhbikge1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5nZW5lcmljX3Bvb2wnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2dlbmVyaWMtcG9vbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2VuZXJpYy1wb29sKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9nZW5lcmljcG9vbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBnZW5lcmljUG9vbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGdlbmVyaWNQb29sSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHZW5lcmljUG9vbCA9IGluc3RydW1lbnRHZW5lcmljUG9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyaWNQb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js\");\n\nconst instrumentGoogleGenAI = nodeCore.generateInstrumentOnce(\n  core.GOOGLE_GENAI_INTEGRATION_NAME,\n  options => new instrumentation.SentryGoogleGenAiInstrumentation(options),\n);\n\nconst _googleGenAIIntegration = ((options = {}) => {\n  return {\n    name: core.GOOGLE_GENAI_INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGoogleGenAI(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Google Generative AI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments Google GenAI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.googleGenAiIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.googleGenAiIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.googleGenAiIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst googleGenAIIntegration = core.defineIntegration(_googleGenAIIntegration);\n\nexports.googleGenAIIntegration = googleGenAIIntegration;\nexports.instrumentGoogleGenAI = instrumentGoogleGenAI;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ29vZ2xlLWdlbmFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsc05BQXNCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nb29nbGUtZ2VuYWkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IGluc3RydW1lbnRHb29nbGVHZW5BSSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIGNvcmUuR09PR0xFX0dFTkFJX0lOVEVHUkFUSU9OX05BTUUsXG4gIG9wdGlvbnMgPT4gbmV3IGluc3RydW1lbnRhdGlvbi5TZW50cnlHb29nbGVHZW5BaUluc3RydW1lbnRhdGlvbihvcHRpb25zKSxcbik7XG5cbmNvbnN0IF9nb29nbGVHZW5BSUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBjb3JlLkdPT0dMRV9HRU5BSV9JTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRHb29nbGVHZW5BSShvcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgR29vZ2xlIEdlbmVyYXRpdmUgQUkgU0RLLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gaXMgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIFdoZW4gY29uZmlndXJlZCwgdGhpcyBpbnRlZ3JhdGlvbiBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRzIEdvb2dsZSBHZW5BSSBTREsgY2xpZW50IGluc3RhbmNlc1xuICogdG8gY2FwdHVyZSB0ZWxlbWV0cnkgZGF0YSBmb2xsb3dpbmcgT3BlblRlbGVtZXRyeSBTZW1hbnRpYyBDb252ZW50aW9ucyBmb3IgR2VuZXJhdGl2ZSBBSS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuZ29vZ2xlR2VuQWlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogIyMgT3B0aW9uc1xuICpcbiAqIC0gYHJlY29yZElucHV0c2A6IFdoZXRoZXIgdG8gcmVjb3JkIHByb21wdCBtZXNzYWdlcyAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICogLSBgcmVjb3JkT3V0cHV0c2A6IFdoZXRoZXIgdG8gcmVjb3JkIHJlc3BvbnNlIHRleHQgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqXG4gKiAjIyMgRGVmYXVsdCBCZWhhdmlvclxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBpbnRlZ3JhdGlvbiB3aWxsOlxuICogLSBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIE9OTFkgaWYgYHNlbmREZWZhdWx0UGlpYCBpcyBzZXQgdG8gYHRydWVgIGluIHlvdXIgU2VudHJ5IGNsaWVudCBvcHRpb25zXG4gKiAtIE90aGVyd2lzZSwgaW5wdXRzIGFuZCBvdXRwdXRzIGFyZSBOT1QgcmVjb3JkZWQgdW5sZXNzIGV4cGxpY2l0bHkgZW5hYmxlZFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIHdoZW4gc2VuZERlZmF1bHRQaWkgaXMgZmFsc2VcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lmdvb2dsZUdlbkFpSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBOZXZlciByZWNvcmQgaW5wdXRzL291dHB1dHMgcmVnYXJkbGVzcyBvZiBzZW5kRGVmYXVsdFBpaVxuICogU2VudHJ5LmluaXQoe1xuICogICBzZW5kRGVmYXVsdFBpaTogdHJ1ZSxcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lmdvb2dsZUdlbkFpSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiBmYWxzZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IGZhbHNlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5jb25zdCBnb29nbGVHZW5BSUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbiA9IGdvb2dsZUdlbkFJSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHb29nbGVHZW5BSSA9IGluc3RydW1lbnRHb29nbGVHZW5BSTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=0.10.0 <2'];\n\n/**\n * Represents the patched shape of the Google GenAI module export.\n */\n\n/**\n * Sentry Google GenAI instrumentation using OpenTelemetry.\n */\nclass SentryGoogleGenAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-google-genai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition(\n      '@google/genai',\n      supportedVersions,\n      exports => this._patch(exports),\n      exports => exports,\n      // In CJS, @google/genai re-exports from (dist/node/index.cjs) file.\n      // Patching only the root module sometimes misses the real implementation or\n      // gets overwritten when that file is loaded. We add a file-level patch so that\n      // _patch runs again on the concrete implementation\n      [\n        new instrumentation.InstrumentationNodeModuleFile(\n          '@google/genai/dist/node/index.cjs',\n          supportedVersions,\n          exports => this._patch(exports),\n          exports => exports,\n        ),\n      ],\n    );\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the Google GenAI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.GoogleGenAI;\n    const config = this.getConfig();\n\n    if (typeof Original !== 'function') {\n      return exports;\n    }\n\n    const WrappedGoogleGenAI = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const typedConfig = config;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const recordInputs = typedConfig?.recordInputs ?? defaultPii;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const recordOutputs = typedConfig?.recordOutputs ?? defaultPii;\n\n      return core.instrumentGoogleGenAIClient(instance, {\n        recordInputs,\n        recordOutputs,\n      });\n    };\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedGoogleGenAI, Original);\n    Object.setPrototypeOf(WrappedGoogleGenAI.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedGoogleGenAI, key, descriptor);\n        }\n      }\n    }\n\n    // Replace google genai exports with the wrapped constructor\n    core.replaceExports(exports, 'GoogleGenAI', WrappedGoogleGenAI);\n\n    return exports;\n  }\n}\n\nexports.SentryGoogleGenAiInstrumentation = SentryGoogleGenAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ29vZ2xlLWdlbmFpL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxDQUFDLG9EQUFvRCx5Q0FBeUMsMENBQTBDLDhDQUE4QyxvREFBb0QscURBQXFELGlCQUFpQjs7QUFFaFQsd0JBQXdCLG1CQUFPLENBQUMscU1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dvb2dsZS1nZW5haS9pbnN0cnVtZW50YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJTRU5UUllfUkVMRUFTRVwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeUJhc2VQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5TmV4dEpzVmVyc2lvblwiXSA9IFwiMTUuNS40XCI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlRnJhbWVzRGlzdERpclwiXSA9IFwiLm5leHRcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IHN1cHBvcnRlZFZlcnNpb25zID0gWyc+PTAuMTAuMCA8MiddO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHBhdGNoZWQgc2hhcGUgb2YgdGhlIEdvb2dsZSBHZW5BSSBtb2R1bGUgZXhwb3J0LlxuICovXG5cbi8qKlxuICogU2VudHJ5IEdvb2dsZSBHZW5BSSBpbnN0cnVtZW50YXRpb24gdXNpbmcgT3BlblRlbGVtZXRyeS5cbiAqL1xuY2xhc3MgU2VudHJ5R29vZ2xlR2VuQWlJbnN0cnVtZW50YXRpb24gZXh0ZW5kcyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uQmFzZSB7XG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1nb29nbGUtZ2VuYWknLCBjb3JlLlNES19WRVJTSU9OLCBjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnN0cnVtZW50YXRpb24gYnkgZGVmaW5pbmcgdGhlIG1vZHVsZXMgdG8gYmUgcGF0Y2hlZC5cbiAgICovXG4gICBpbml0KCkge1xuICAgIGNvbnN0IG1vZHVsZSA9IG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oXG4gICAgICAnQGdvb2dsZS9nZW5haScsXG4gICAgICBzdXBwb3J0ZWRWZXJzaW9ucyxcbiAgICAgIGV4cG9ydHMgPT4gdGhpcy5fcGF0Y2goZXhwb3J0cyksXG4gICAgICBleHBvcnRzID0+IGV4cG9ydHMsXG4gICAgICAvLyBJbiBDSlMsIEBnb29nbGUvZ2VuYWkgcmUtZXhwb3J0cyBmcm9tIChkaXN0L25vZGUvaW5kZXguY2pzKSBmaWxlLlxuICAgICAgLy8gUGF0Y2hpbmcgb25seSB0aGUgcm9vdCBtb2R1bGUgc29tZXRpbWVzIG1pc3NlcyB0aGUgcmVhbCBpbXBsZW1lbnRhdGlvbiBvclxuICAgICAgLy8gZ2V0cyBvdmVyd3JpdHRlbiB3aGVuIHRoYXQgZmlsZSBpcyBsb2FkZWQuIFdlIGFkZCBhIGZpbGUtbGV2ZWwgcGF0Y2ggc28gdGhhdFxuICAgICAgLy8gX3BhdGNoIHJ1bnMgYWdhaW4gb24gdGhlIGNvbmNyZXRlIGltcGxlbWVudGF0aW9uXG4gICAgICBbXG4gICAgICAgIG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZUZpbGUoXG4gICAgICAgICAgJ0Bnb29nbGUvZ2VuYWkvZGlzdC9ub2RlL2luZGV4LmNqcycsXG4gICAgICAgICAgc3VwcG9ydGVkVmVyc2lvbnMsXG4gICAgICAgICAgZXhwb3J0cyA9PiB0aGlzLl9wYXRjaChleHBvcnRzKSxcbiAgICAgICAgICBleHBvcnRzID0+IGV4cG9ydHMsXG4gICAgICAgICksXG4gICAgICBdLFxuICAgICk7XG4gICAgcmV0dXJuIG1vZHVsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3JlIHBhdGNoIGxvZ2ljIGFwcGx5aW5nIGluc3RydW1lbnRhdGlvbiB0byB0aGUgR29vZ2xlIEdlbkFJIGNsaWVudCBjb25zdHJ1Y3Rvci5cbiAgICovXG4gICBfcGF0Y2goZXhwb3J0cykge1xuICAgIGNvbnN0IE9yaWdpbmFsID0gZXhwb3J0cy5Hb29nbGVHZW5BSTtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgaWYgKHR5cGVvZiBPcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHM7XG4gICAgfVxuXG4gICAgY29uc3QgV3JhcHBlZEdvb2dsZUdlbkFJID0gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IFJlZmxlY3QuY29uc3RydWN0KE9yaWdpbmFsLCBhcmdzKTtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gICAgICBjb25zdCBkZWZhdWx0UGlpID0gQm9vbGVhbihjbGllbnQ/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaSk7XG5cbiAgICAgIGNvbnN0IHR5cGVkQ29uZmlnID0gY29uZmlnO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgY29uc3QgcmVjb3JkSW5wdXRzID0gdHlwZWRDb25maWc/LnJlY29yZElucHV0cyA/PyBkZWZhdWx0UGlpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgY29uc3QgcmVjb3JkT3V0cHV0cyA9IHR5cGVkQ29uZmlnPy5yZWNvcmRPdXRwdXRzID8/IGRlZmF1bHRQaWk7XG5cbiAgICAgIHJldHVybiBjb3JlLmluc3RydW1lbnRHb29nbGVHZW5BSUNsaWVudChpbnN0YW5jZSwge1xuICAgICAgICByZWNvcmRJbnB1dHMsXG4gICAgICAgIHJlY29yZE91dHB1dHMsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gUHJlc2VydmUgc3RhdGljIGFuZCBwcm90b3R5cGUgY2hhaW5zXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFdyYXBwZWRHb29nbGVHZW5BSSwgT3JpZ2luYWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkR29vZ2xlR2VuQUkucHJvdG90eXBlLCBPcmlnaW5hbC5wcm90b3R5cGUpO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT3JpZ2luYWwpKSB7XG4gICAgICBpZiAoIVsnbGVuZ3RoJywgJ25hbWUnLCAncHJvdG90eXBlJ10uaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPcmlnaW5hbCwga2V5KTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZEdvb2dsZUdlbkFJLCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVwbGFjZSBnb29nbGUgZ2VuYWkgZXhwb3J0cyB3aXRoIHRoZSB3cmFwcGVkIGNvbnN0cnVjdG9yXG4gICAgY29yZS5yZXBsYWNlRXhwb3J0cyhleHBvcnRzLCAnR29vZ2xlR2VuQUknLCBXcmFwcGVkR29vZ2xlR2VuQUkpO1xuXG4gICAgcmV0dXJuIGV4cG9ydHM7XG4gIH1cbn1cblxuZXhwb3J0cy5TZW50cnlHb29nbGVHZW5BaUluc3RydW1lbnRhdGlvbiA9IFNlbnRyeUdvb2dsZUdlbkFpSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationGraphql.GraphQLInstrumentation,\n  (_options) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return {\n      ...options,\n      responseHook(span, result) {\n        nodeCore.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        // We want to ensure spans are marked as errored if there are errors in the result\n        // We only do that if the span is not already marked with a status\n        const resultWithMaybeError = result ;\n        if (resultWithMaybeError.errors?.length && !core.spanToJSON(span).status) {\n          span.setStatus({ code: api.SpanStatusCode.ERROR });\n        }\n\n        const attributes = core.spanToJSON(span).data;\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            (existingOperations ).push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (typeof existingOperations === 'string') {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n\n          if (!core.spanToJSON(rootSpan).data['original-description']) {\n            rootSpan.setAttribute('original-description', core.spanToJSON(rootSpan).description);\n          }\n          // Important for e.g. @sentry/aws-serverless because this would otherwise overwrite the name again\n          rootSpan.updateName(\n            `${core.spanToJSON(rootSpan).data['original-description']} (${getGraphqlOperationNamesFromAttribute(\n              existingOperations,\n            )})`,\n          );\n        }\n      },\n    };\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\n// copy from packages/opentelemetry/utils\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return !!(event && typeof event === 'object' && 'error' in event && event.error);\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'auto.function.hapi',\n      handled: false,\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route.path) {\n          core.getIsolationScope().setTransactionName(`${route.method.toUpperCase()} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.debug.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  nodeCore.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQyxtTkFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxtTEFBeUI7O0FBRXBEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixzQ0FBc0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EseURBQXlELDRCQUE0QixFQUFFLFdBQVc7QUFDbEc7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHO0FBQ0g7O0FBRUEsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hhcGkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkhhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnSGFwaSc7XG5cbmNvbnN0IGluc3RydW1lbnRIYXBpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uSGFwaS5IYXBpSW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfaGFwaUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIYXBpKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0hhcGldKGh0dHBzOi8vaGFwaS5kZXYvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEhhcGlFcnJvckhhbmRsZXIoc2VydmVyKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbaGFwaSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9oYXBpLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmhhcGlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3QgaGFwaUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfaGFwaUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gaXNFcnJvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICdlcnJvcicgaW4gZXZlbnQgJiYgZXZlbnQuZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBzZW5kRXJyb3JUb1NlbnRyeShlcnJvckRhdGEpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yRGF0YSwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24uaGFwaScsXG4gICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICB9LFxuICB9KTtcbn1cblxuY29uc3QgaGFwaUVycm9yUGx1Z2luID0ge1xuICBuYW1lOiAnU2VudHJ5SGFwaUVycm9yUGx1Z2luJyxcbiAgdmVyc2lvbjogY29yZS5TREtfVkVSU0lPTixcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgcmVnaXN0ZXI6IGFzeW5jIGZ1bmN0aW9uIChzZXJ2ZXJBcmcpIHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJBcmcgO1xuXG4gICAgc2VydmVyLmV2ZW50cy5vbih7IG5hbWU6ICdyZXF1ZXN0JywgY2hhbm5lbHM6IFsnZXJyb3InXSB9LCAocmVxdWVzdCwgZXZlbnQpID0+IHtcbiAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgIT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgY29uc3Qgcm91dGUgPSByZXF1ZXN0LnJvdXRlO1xuICAgICAgICBpZiAocm91dGUucGF0aCkge1xuICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7cm91dGUubWV0aG9kLnRvVXBwZXJDYXNlKCl9ICR7cm91dGUucGF0aH1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgICAgIGNvcmUuZGVidWcud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIHN0aWxsIHRoZSBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Vycm9yRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIHNlbmRFcnJvclRvU2VudHJ5KGV2ZW50LmVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cbi8qKlxuICogQWRkIGEgSGFwaSBwbHVnaW4gdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXIgVGhlIEhhcGkgc2VydmVyIHRvIGF0dGFjaCB0aGUgZXJyb3IgaGFuZGxlciB0b1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IEhhcGkgPSByZXF1aXJlKCdAaGFwaS9oYXBpJyk7XG4gKlxuICogY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcbiAqICAgY29uc3Qgc2VydmVyID0gSGFwaS5zZXJ2ZXIoKTtcbiAqXG4gKiAgIC8vIGFsbCB5b3VyIHJvdXRlcyBoZXJlXG4gKlxuICogICBhd2FpdCBTZW50cnkuc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcik7XG4gKlxuICogICBhd2FpdCBzZXJ2ZXIuc3RhcnQoKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcikge1xuICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoaGFwaUVycm9yUGx1Z2luKTtcblxuICAvLyBTYWRseSwgbWlkZGxld2FyZSBzcGFucyBkbyBub3QgZ28gdGhyb3VnaCBgcmVxdWVzdEhvb2tgLCBzbyB3ZSBoYW5kbGUgdGhvc2UgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgaGFwaVxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgbm9kZUNvcmUuZW5zdXJlSXNXcmFwcGVkKHNlcnZlci5yZWdpc3RlciwgJ2hhcGknKTtcbn1cblxuZnVuY3Rpb24gYWRkSGFwaVNwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiByb3V0ZXIsIHBsdWdpbiwgc2VydmVyLmV4dFxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snaGFwaS50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBIYXBpIHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5oYXBpJyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uaGFwaWAsXG4gIH0pO1xufVxuXG5leHBvcnRzLmhhcGlFcnJvclBsdWdpbiA9IGhhcGlFcnJvclBsdWdpbjtcbmV4cG9ydHMuaGFwaUludGVncmF0aW9uID0gaGFwaUludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50SGFwaSA9IGluc3RydW1lbnRIYXBpO1xuZXhwb3J0cy5zZXR1cEhhcGlFcnJvckhhbmRsZXIgPSBzZXR1cEhhcGlFcnJvckhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst AttributeNames = {\n  HONO_TYPE: 'hono.type',\n  HONO_NAME: 'hono.name',\n} ;\n\nconst HonoTypes = {\n  MIDDLEWARE: 'middleware',\n  REQUEST_HANDLER: 'request_handler',\n} ;\n\nexports.AttributeNames = AttributeNames;\nexports.HonoTypes = HonoTypes;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9ob25vL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgQXR0cmlidXRlTmFtZXMgPSB7XG4gIEhPTk9fVFlQRTogJ2hvbm8udHlwZScsXG4gIEhPTk9fTkFNRTogJ2hvbm8ubmFtZScsXG59IDtcblxuY29uc3QgSG9ub1R5cGVzID0ge1xuICBNSURETEVXQVJFOiAnbWlkZGxld2FyZScsXG4gIFJFUVVFU1RfSEFORExFUjogJ3JlcXVlc3RfaGFuZGxlcicsXG59IDtcblxuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IEF0dHJpYnV0ZU5hbWVzO1xuZXhwb3J0cy5Ib25vVHlwZXMgPSBIb25vVHlwZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Hono';\n\nfunction addHonoSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n  const type = attributes[constants.AttributeNames.HONO_TYPE];\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hono',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hono`,\n  });\n\n  const name = attributes[constants.AttributeNames.HONO_NAME];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n    return;\n  }\n\n  const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n  const method = attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD];\n  if (typeof route === 'string' && typeof method === 'string') {\n    core.getIsolationScope().setTransactionName(`${method} ${route}`);\n  }\n}\n\nconst instrumentHono = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentation.HonoInstrumentation({\n      responseHook: span => {\n        addHonoSpanAttributes(span);\n      },\n    }),\n);\n\nconst _honoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHono();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hono](https://hono.dev/).\n *\n * If you also want to capture errors, you need to call `setupHonoErrorHandler(app)` after you set up your Hono server.\n *\n * For more information, see the [hono documentation](https://docs.sentry.io/platforms/javascript/guides/hono/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.honoIntegration()],\n * })\n * ```\n */\nconst honoIntegration = core.defineIntegration(_honoIntegration);\n\nfunction honoRequestHandler() {\n  return async function sentryRequestMiddleware(context, next) {\n    const normalizedRequest = core.httpRequestToRequestData(context.req);\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n    await next();\n  };\n}\n\nfunction defaultShouldHandleError(context) {\n  const statusCode = context.res.status;\n  return statusCode >= 500;\n}\n\nfunction honoErrorHandler(options) {\n  return async function sentryErrorMiddleware(context, next) {\n    await next();\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n    if (shouldHandleError(context)) {\n      (context.res ).sentry = core.captureException(context.error, {\n        mechanism: {\n          type: 'auto.middleware.hono',\n          handled: false,\n        },\n      });\n    }\n  };\n}\n\n/**\n * Add a Hono error handler to capture errors to Sentry.\n *\n * @param app The Hono instances\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const { Hono } = require(\"hono\");\n *\n * const app = new Hono();\n *\n * Sentry.setupHonoErrorHandler(app);\n *\n * // Add your routes, etc.\n * ```\n */\nfunction setupHonoErrorHandler(\n  app,\n  options,\n) {\n  app.use(honoRequestHandler());\n  app.use(honoErrorHandler(options));\n  nodeCore.ensureIsWrapped(app.use, 'hono');\n}\n\nexports.honoIntegration = honoIntegration;\nexports.instrumentHono = instrumentHono;\nexports.setupHonoErrorHandler = setupHonoErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQywwTEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxtTEFBeUI7QUFDcEQsa0JBQWtCLG1CQUFPLENBQUMsa01BQWdCO0FBQzFDLHdCQUF3QixtQkFBTyxDQUFDLDhNQUFzQjs7QUFFdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxRQUFRLEVBQUUsTUFBTTtBQUNuRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxtQkFBbUI7QUFDM0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2luc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0hvbm8nO1xuXG5mdW5jdGlvbiBhZGRIb25vU3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzW2NvbnN0YW50cy5BdHRyaWJ1dGVOYW1lcy5IT05PX1RZUEVdO1xuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5ob25vJyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uaG9ub2AsXG4gIH0pO1xuXG4gIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzW2NvbnN0YW50cy5BdHRyaWJ1dGVOYW1lcy5IT05PX05BTUVdO1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUpO1xuICB9XG5cbiAgaWYgKGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSA9PT0gY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy53YXJuKCdJc29sYXRpb24gc2NvcGUgaXMgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJvdXRlID0gYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV07XG4gIGNvbnN0IG1ldGhvZCA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RdO1xuICBpZiAodHlwZW9mIHJvdXRlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykge1xuICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3JvdXRlfWApO1xuICB9XG59XG5cbmNvbnN0IGluc3RydW1lbnRIb25vID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uLkhvbm9JbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rOiBzcGFuID0+IHtcbiAgICAgICAgYWRkSG9ub1NwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9ob25vSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEhvbm8oKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbSG9ub10oaHR0cHM6Ly9ob25vLmRldi8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwSG9ub0Vycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3Ugc2V0IHVwIHlvdXIgSG9ubyBzZXJ2ZXIuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2hvbm8gZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvaG9uby8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5ob25vSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGhvbm9JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2hvbm9JbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGhvbm9SZXF1ZXN0SGFuZGxlcigpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHNlbnRyeVJlcXVlc3RNaWRkbGV3YXJlKGNvbnRleHQsIG5leHQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkUmVxdWVzdCA9IGNvcmUuaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKGNvbnRleHQucmVxKTtcbiAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHsgbm9ybWFsaXplZFJlcXVlc3QgfSk7XG4gICAgYXdhaXQgbmV4dCgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U2hvdWxkSGFuZGxlRXJyb3IoY29udGV4dCkge1xuICBjb25zdCBzdGF0dXNDb2RlID0gY29udGV4dC5yZXMuc3RhdHVzO1xuICByZXR1cm4gc3RhdHVzQ29kZSA+PSA1MDA7XG59XG5cbmZ1bmN0aW9uIGhvbm9FcnJvckhhbmRsZXIob3B0aW9ucykge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gc2VudHJ5RXJyb3JNaWRkbGV3YXJlKGNvbnRleHQsIG5leHQpIHtcbiAgICBhd2FpdCBuZXh0KCk7XG5cbiAgICBjb25zdCBzaG91bGRIYW5kbGVFcnJvciA9IG9wdGlvbnM/LnNob3VsZEhhbmRsZUVycm9yIHx8IGRlZmF1bHRTaG91bGRIYW5kbGVFcnJvcjtcbiAgICBpZiAoc2hvdWxkSGFuZGxlRXJyb3IoY29udGV4dCkpIHtcbiAgICAgIChjb250ZXh0LnJlcyApLnNlbnRyeSA9IGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihjb250ZXh0LmVycm9yLCB7XG4gICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgIHR5cGU6ICdhdXRvLm1pZGRsZXdhcmUuaG9ubycsXG4gICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQWRkIGEgSG9ubyBlcnJvciBoYW5kbGVyIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBIb25vIGluc3RhbmNlc1xuICogQHBhcmFtIG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgaGFuZGxlclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IHsgSG9ubyB9ID0gcmVxdWlyZShcImhvbm9cIik7XG4gKlxuICogY29uc3QgYXBwID0gbmV3IEhvbm8oKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBIb25vRXJyb3JIYW5kbGVyKGFwcCk7XG4gKlxuICogLy8gQWRkIHlvdXIgcm91dGVzLCBldGMuXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gc2V0dXBIb25vRXJyb3JIYW5kbGVyKFxuICBhcHAsXG4gIG9wdGlvbnMsXG4pIHtcbiAgYXBwLnVzZShob25vUmVxdWVzdEhhbmRsZXIoKSk7XG4gIGFwcC51c2UoaG9ub0Vycm9ySGFuZGxlcihvcHRpb25zKSk7XG4gIG5vZGVDb3JlLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAnaG9ubycpO1xufVxuXG5leHBvcnRzLmhvbm9JbnRlZ3JhdGlvbiA9IGhvbm9JbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhvbm8gPSBpbnN0cnVtZW50SG9ubztcbmV4cG9ydHMuc2V0dXBIb25vRXJyb3JIYW5kbGVyID0gc2V0dXBIb25vRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\");\n\nconst PACKAGE_NAME = '@sentry/instrumentation-hono';\nconst PACKAGE_VERSION = '0.0.1';\n\n/**\n * Hono instrumentation for OpenTelemetry\n */\nclass HonoInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  /**\n   * Initialize the instrumentation.\n   */\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('hono', ['>=4.0.0 <5'], moduleExports => this._patch(moduleExports)),\n    ];\n  }\n\n  /**\n   * Patches the module exports to instrument Hono.\n   */\n   _patch(moduleExports) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    class WrappedHono extends moduleExports.Hono {\n       constructor(...args) {\n        super(...args);\n\n        instrumentation._wrap(this, 'get', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'post', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'put', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'delete', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'options', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'patch', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'all', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'on', instrumentation._patchOnHandler());\n        instrumentation._wrap(this, 'use', instrumentation._patchMiddlewareHandler());\n      }\n    }\n\n    try {\n      moduleExports.Hono = WrappedHono;\n    } catch {\n      // This is a workaround for environments where direct assignment is not allowed.\n      return { ...moduleExports, Hono: WrappedHono };\n    }\n\n    return moduleExports;\n  }\n\n  /**\n   * Patches the route handler to instrument it.\n   */\n   _patchHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        if (typeof args[0] === 'string') {\n          const path = args[0];\n          if (args.length === 1) {\n            return original.apply(this, [path]);\n          }\n\n          const handlers = args.slice(1);\n          return original.apply(this, [\n            path,\n            ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n          ]);\n        }\n\n        return original.apply(\n          this,\n          args.map(handler => instrumentation._wrapHandler(handler )),\n        );\n      };\n    };\n  }\n\n  /**\n   * Patches the 'on' handler to instrument it.\n   */\n   _patchOnHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        const handlers = args.slice(2);\n        return original.apply(this, [\n          ...args.slice(0, 2),\n          ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n        ]);\n      };\n    };\n  }\n\n  /**\n   * Patches the middleware handler to instrument it.\n   */\n   _patchMiddlewareHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        if (typeof args[0] === 'string') {\n          const path = args[0];\n          if (args.length === 1) {\n            return original.apply(this, [path]);\n          }\n\n          const handlers = args.slice(1);\n          return original.apply(this, [\n            path,\n            ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n          ]);\n        }\n\n        return original.apply(\n          this,\n          args.map(handler => instrumentation._wrapHandler(handler )),\n        );\n      };\n    };\n  }\n\n  /**\n   * Wraps a handler or middleware handler to apply instrumentation.\n   */\n   _wrapHandler(handler) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function ( c, next) {\n      if (!instrumentation.isEnabled()) {\n        return handler.apply(this, [c, next]);\n      }\n\n      const path = c.req.path;\n      const span = instrumentation.tracer.startSpan(path);\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return instrumentation._safeExecute(\n          () => {\n            const result = handler.apply(this, [c, next]);\n            if (core.isThenable(result)) {\n              return result.then(result => {\n                const type = instrumentation._determineHandlerType(result);\n                span.setAttributes({\n                  [constants.AttributeNames.HONO_TYPE]: type,\n                  [constants.AttributeNames.HONO_NAME]: type === constants.HonoTypes.REQUEST_HANDLER ? path : handler.name || 'anonymous',\n                });\n                instrumentation.getConfig().responseHook?.(span);\n                return result;\n              });\n            } else {\n              const type = instrumentation._determineHandlerType(result);\n              span.setAttributes({\n                [constants.AttributeNames.HONO_TYPE]: type,\n                [constants.AttributeNames.HONO_NAME]: type === constants.HonoTypes.REQUEST_HANDLER ? path : handler.name || 'anonymous',\n              });\n              instrumentation.getConfig().responseHook?.(span);\n              return result;\n            }\n          },\n          () => span.end(),\n          error => {\n            instrumentation._handleError(span, error);\n            span.end();\n          },\n        );\n      });\n    };\n  }\n\n  /**\n   * Safely executes a function and handles errors.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _safeExecute(execute, onSuccess, onFailure) {\n    try {\n      const result = execute();\n\n      if (core.isThenable(result)) {\n        result.then(\n          () => onSuccess(),\n          (error) => onFailure(error),\n        );\n      } else {\n        onSuccess();\n      }\n\n      return result;\n    } catch (error) {\n      onFailure(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Determines the handler type based on the result.\n   * @param result\n   * @private\n   */\n   _determineHandlerType(result) {\n    return result === undefined ? constants.HonoTypes.MIDDLEWARE : constants.HonoTypes.REQUEST_HANDLER;\n  }\n\n  /**\n   * Handles errors by setting the span status and recording the exception.\n   */\n   _handleError(span, error) {\n    if (error instanceof Error) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: error.message,\n      });\n      span.recordException(error);\n    }\n  }\n}\n\nexports.HonoInstrumentation = HonoInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! ../http.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst index$5 = __webpack_require__(/*! ./anthropic-ai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\");\nconst index$7 = __webpack_require__(/*! ./claude-code/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst index$8 = __webpack_require__(/*! ./openai-codex/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index = __webpack_require__(/*! ./fastify/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst firebase = __webpack_require__(/*! ./firebase/firebase.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst index$6 = __webpack_require__(/*! ./google-genai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index$1 = __webpack_require__(/*! ./hapi/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst index$2 = __webpack_require__(/*! ./hono/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst index$4 = __webpack_require__(/*! ./openai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./postgresjs.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./prisma.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst index$3 = __webpack_require__(/*! ./vercelai/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    index.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    index$2.honoIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    prisma.prismaIntegration(),\n    index$1.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n    index$3.vercelAIIntegration(),\n    index$4.openAIIntegration(),\n    postgresjs.postgresJsIntegration(),\n    firebase.firebaseIntegration(),\n    index$5.anthropicAIIntegration(),\n    index$6.googleGenAIIntegration(),\n    index$7.claudeCodeIntegration(),\n    index$8.openaiCodexIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    http.instrumentSentryHttp,\n    http.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    index.instrumentFastify,\n    index.instrumentFastifyV3,\n    index$1.instrumentHapi,\n    index$2.instrumentHono,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index$1.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n    index$3.instrumentVercelAi,\n    index$4.instrumentOpenAi,\n    postgresjs.instrumentPostgresJs,\n    firebase.instrumentFirebase,\n    index$5.instrumentAnthropicAi,\n    index$6.instrumentGoogleGenAI,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDRLQUFZO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHlMQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLCtNQUF5QjtBQUNqRCxnQkFBZ0IsbUJBQU8sQ0FBQyw2TUFBd0I7QUFDaEQsZ0JBQWdCLG1CQUFPLENBQUMseUxBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK01BQXlCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLHlMQUFjO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxxTUFBb0I7QUFDMUMsaUJBQWlCLG1CQUFPLENBQUMsNk1BQXdCO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLGlNQUFrQjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQywrTUFBeUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMseUxBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK0xBQWlCO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLCtMQUFpQjtBQUN6QyxjQUFjLG1CQUFPLENBQUMscUxBQVk7QUFDbEMsWUFBWSxtQkFBTyxDQUFDLGlMQUFVO0FBQzlCLG9CQUFvQixtQkFBTyxDQUFDLGlNQUFrQjtBQUM5QyxjQUFjLG1CQUFPLENBQUMscUxBQVk7QUFDbEMsaUJBQWlCLG1CQUFPLENBQUMsMkxBQWU7QUFDeEMsY0FBYyxtQkFBTyxDQUFDLHFMQUFZO0FBQ2xDLGVBQWUsbUJBQU8sQ0FBQyx1TEFBYTtBQUNwQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtTUFBbUI7QUFDM0MsaUJBQWlCLG1CQUFPLENBQUMsMkxBQWU7QUFDeEMsbUJBQW1CLG1CQUFPLENBQUMsK0xBQWlCO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQyx1TEFBYTtBQUNwQyxjQUFjLG1CQUFPLENBQUMscUxBQVk7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMseUxBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsdU1BQXFCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDLGdEQUFnRDtBQUNoRCIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4uL2h0dHAuanMnKTtcbmNvbnN0IGFtcXBsaWIgPSByZXF1aXJlKCcuL2FtcXBsaWIuanMnKTtcbmNvbnN0IGluZGV4JDUgPSByZXF1aXJlKCcuL2FudGhyb3BpYy1haS9pbmRleC5qcycpO1xuY29uc3QgaW5kZXgkNyA9IHJlcXVpcmUoJy4vY2xhdWRlLWNvZGUvaW5kZXguanMnKTtcbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2Nvbm5lY3QuanMnKTtcbmNvbnN0IGluZGV4JDggPSByZXF1aXJlKCcuL29wZW5haS1jb2RleC9pbmRleC5qcycpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJy4vZXhwcmVzcy5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL2Zhc3RpZnkvaW5kZXguanMnKTtcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZSgnLi9maXJlYmFzZS9maXJlYmFzZS5qcycpO1xuY29uc3QgZ2VuZXJpY1Bvb2wgPSByZXF1aXJlKCcuL2dlbmVyaWNQb29sLmpzJyk7XG5jb25zdCBpbmRleCQ2ID0gcmVxdWlyZSgnLi9nb29nbGUtZ2VuYWkvaW5kZXguanMnKTtcbmNvbnN0IGdyYXBocWwgPSByZXF1aXJlKCcuL2dyYXBocWwuanMnKTtcbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuL2hhcGkvaW5kZXguanMnKTtcbmNvbnN0IGluZGV4JDIgPSByZXF1aXJlKCcuL2hvbm8vaW5kZXguanMnKTtcbmNvbnN0IGthZmthID0gcmVxdWlyZSgnLi9rYWZrYS5qcycpO1xuY29uc3Qga29hID0gcmVxdWlyZSgnLi9rb2EuanMnKTtcbmNvbnN0IGxydW1lbW9pemVyID0gcmVxdWlyZSgnLi9scnVtZW1vaXplci5qcycpO1xuY29uc3QgbW9uZ28gPSByZXF1aXJlKCcuL21vbmdvLmpzJyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJy4vbW9uZ29vc2UuanMnKTtcbmNvbnN0IG15c3FsID0gcmVxdWlyZSgnLi9teXNxbC5qcycpO1xuY29uc3QgbXlzcWwyID0gcmVxdWlyZSgnLi9teXNxbDIuanMnKTtcbmNvbnN0IGluZGV4JDQgPSByZXF1aXJlKCcuL29wZW5haS9pbmRleC5qcycpO1xuY29uc3QgcG9zdGdyZXMgPSByZXF1aXJlKCcuL3Bvc3RncmVzLmpzJyk7XG5jb25zdCBwb3N0Z3Jlc2pzID0gcmVxdWlyZSgnLi9wb3N0Z3Jlc2pzLmpzJyk7XG5jb25zdCBwcmlzbWEgPSByZXF1aXJlKCcuL3ByaXNtYS5qcycpO1xuY29uc3QgcmVkaXMgPSByZXF1aXJlKCcuL3JlZGlzLmpzJyk7XG5jb25zdCB0ZWRpb3VzID0gcmVxdWlyZSgnLi90ZWRpb3VzLmpzJyk7XG5jb25zdCBpbmRleCQzID0gcmVxdWlyZSgnLi92ZXJjZWxhaS9pbmRleC5qcycpO1xuXG4vKipcbiAqIFdpdGggT1RFTCwgYWxsIHBlcmZvcm1hbmNlIGludGVncmF0aW9ucyB3aWxsIGJlIGFkZGVkLCBhcyBPVEVMIG9ubHkgaW5pdGlhbGl6ZXMgdGhlbSB3aGVuIHRoZSBwYXRjaGVkIHBhY2thZ2UgaXMgYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucygpIHtcbiAgcmV0dXJuIFtcbiAgICBleHByZXNzLmV4cHJlc3NJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4LmZhc3RpZnlJbnRlZ3JhdGlvbigpLFxuICAgIGdyYXBocWwuZ3JhcGhxbEludGVncmF0aW9uKCksXG4gICAgaW5kZXgkMi5ob25vSW50ZWdyYXRpb24oKSxcbiAgICBtb25nby5tb25nb0ludGVncmF0aW9uKCksXG4gICAgbW9uZ29vc2UubW9uZ29vc2VJbnRlZ3JhdGlvbigpLFxuICAgIG15c3FsLm15c3FsSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbDIubXlzcWwySW50ZWdyYXRpb24oKSxcbiAgICByZWRpcy5yZWRpc0ludGVncmF0aW9uKCksXG4gICAgcG9zdGdyZXMucG9zdGdyZXNJbnRlZ3JhdGlvbigpLFxuICAgIHByaXNtYS5wcmlzbWFJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDEuaGFwaUludGVncmF0aW9uKCksXG4gICAga29hLmtvYUludGVncmF0aW9uKCksXG4gICAgY29ubmVjdC5jb25uZWN0SW50ZWdyYXRpb24oKSxcbiAgICB0ZWRpb3VzLnRlZGlvdXNJbnRlZ3JhdGlvbigpLFxuICAgIGdlbmVyaWNQb29sLmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKSxcbiAgICBrYWZrYS5rYWZrYUludGVncmF0aW9uKCksXG4gICAgYW1xcGxpYi5hbXFwbGliSW50ZWdyYXRpb24oKSxcbiAgICBscnVtZW1vaXplci5scnVNZW1vaXplckludGVncmF0aW9uKCksXG4gICAgaW5kZXgkMy52ZXJjZWxBSUludGVncmF0aW9uKCksXG4gICAgaW5kZXgkNC5vcGVuQUlJbnRlZ3JhdGlvbigpLFxuICAgIHBvc3RncmVzanMucG9zdGdyZXNKc0ludGVncmF0aW9uKCksXG4gICAgZmlyZWJhc2UuZmlyZWJhc2VJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDUuYW50aHJvcGljQUlJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDYuZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDcuY2xhdWRlQ29kZUludGVncmF0aW9uKCksXG4gICAgaW5kZXgkOC5vcGVuYWlDb2RleEludGVncmF0aW9uKCksXG4gIF07XG59XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBtZXRob2RzIHRvIGluc3RydW1lbnQgT1RFTCwgd2hlbiBwcmVsb2FkIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQoKSB7XG4gIHJldHVybiBbXG4gICAgaHR0cC5pbnN0cnVtZW50U2VudHJ5SHR0cCxcbiAgICBodHRwLmluc3RydW1lbnRPdGVsSHR0cCxcbiAgICBleHByZXNzLmluc3RydW1lbnRFeHByZXNzLFxuICAgIGNvbm5lY3QuaW5zdHJ1bWVudENvbm5lY3QsXG4gICAgaW5kZXguaW5zdHJ1bWVudEZhc3RpZnksXG4gICAgaW5kZXguaW5zdHJ1bWVudEZhc3RpZnlWMyxcbiAgICBpbmRleCQxLmluc3RydW1lbnRIYXBpLFxuICAgIGluZGV4JDIuaW5zdHJ1bWVudEhvbm8sXG4gICAga2Fma2EuaW5zdHJ1bWVudEthZmthLFxuICAgIGtvYS5pbnN0cnVtZW50S29hLFxuICAgIGxydW1lbW9pemVyLmluc3RydW1lbnRMcnVNZW1vaXplcixcbiAgICBtb25nby5pbnN0cnVtZW50TW9uZ28sXG4gICAgbW9uZ29vc2UuaW5zdHJ1bWVudE1vbmdvb3NlLFxuICAgIG15c3FsLmluc3RydW1lbnRNeXNxbCxcbiAgICBteXNxbDIuaW5zdHJ1bWVudE15c3FsMixcbiAgICBwb3N0Z3Jlcy5pbnN0cnVtZW50UG9zdGdyZXMsXG4gICAgaW5kZXgkMS5pbnN0cnVtZW50SGFwaSxcbiAgICBncmFwaHFsLmluc3RydW1lbnRHcmFwaHFsLFxuICAgIHJlZGlzLmluc3RydW1lbnRSZWRpcyxcbiAgICB0ZWRpb3VzLmluc3RydW1lbnRUZWRpb3VzLFxuICAgIGdlbmVyaWNQb29sLmluc3RydW1lbnRHZW5lcmljUG9vbCxcbiAgICBhbXFwbGliLmluc3RydW1lbnRBbXFwbGliLFxuICAgIGluZGV4JDMuaW5zdHJ1bWVudFZlcmNlbEFpLFxuICAgIGluZGV4JDQuaW5zdHJ1bWVudE9wZW5BaSxcbiAgICBwb3N0Z3Jlc2pzLmluc3RydW1lbnRQb3N0Z3Jlc0pzLFxuICAgIGZpcmViYXNlLmluc3RydW1lbnRGaXJlYmFzZSxcbiAgICBpbmRleCQ1Lmluc3RydW1lbnRBbnRocm9waWNBaSxcbiAgICBpbmRleCQ2Lmluc3RydW1lbnRHb29nbGVHZW5BSSxcbiAgXTtcbn1cblxuZXhwb3J0cy5nZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMgPSBnZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLmdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQgPSBnZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.14.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rYWZrYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS2Fma2FqcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS2Fma2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S2Fma2EgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25LYWZrYWpzLkthZmthSnNJbnN0cnVtZW50YXRpb24oe1xuICAgICAgY29uc3VtZXJIb29rKHNwYW4pIHtcbiAgICAgICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmthZmthanMub3RlbC5jb25zdW1lcicpO1xuICAgICAgfSxcbiAgICAgIHByb2R1Y2VySG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwucHJvZHVjZXInKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfa2Fma2FJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S2Fma2EoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2thZmthanNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2thZmthanMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BrYWZrYUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2thZmthLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua2Fma2FJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICovXG5jb25zdCBrYWZrYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa2Fma2FJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEthZmthID0gaW5zdHJ1bWVudEthZmthO1xuZXhwb3J0cy5rYWZrYUludGVncmF0aW9uID0ga2Fma2FJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWthZmthLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-knex@0.49.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentKnex();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { data } = core.spanToJSON(span);\n          // knex.version is always set in the span data\n          // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n          if ('knex.version' in data) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQyxtTkFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUI7QUFDL0U7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tuZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbktuZXggPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta25leCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0tuZXgnO1xuXG5jb25zdCBpbnN0cnVtZW50S25leCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25LbmV4LktuZXhJbnN0cnVtZW50YXRpb24oeyByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSB9KSxcbik7XG5cbmNvbnN0IF9rbmV4SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50S25leCgpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgICAvLyBrbmV4LnZlcnNpb24gaXMgYWx3YXlzIHNldCBpbiB0aGUgc3BhbiBkYXRhXG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzAzMDljYWVhZmM0NGFjOWNiMTNhMzM0NWI3OTBiMDFiNzZkMDQ5N2QvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWtuZXgvc3JjL2luc3RydW1lbnRhdGlvbi50cyNMMTM4XG4gICAgICAgICAgaWYgKCdrbmV4LnZlcnNpb24nIGluIGRhdGEpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwua25leCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogS25leCBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBbS25leF0oaHR0cHM6Ly9rbmV4anMub3JnLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua25leEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3Qga25leEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa25leEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S25leCA9IGluc3RydW1lbnRLbmV4O1xuZXhwb3J0cy5rbmV4SW50ZWdyYXRpb24gPSBrbmV4SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rbmV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationKoa.KoaInstrumentation,\n  (options = {}) => {\n    return {\n      ignoreLayersType: options.ignoreLayersType ,\n      requestHook(span, info) {\n        nodeCore.addOriginToSpan(span, 'auto.http.otel.koa');\n\n        const attributes = core.spanToJSON(span).data;\n\n        // this is one of: middleware, router\n        const type = attributes['koa.type'];\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n        }\n\n        // Also update the name\n        const name = attributes['koa.name'];\n        if (typeof name === 'string') {\n          // Somehow, name is sometimes `''` for middleware spans\n          // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n          span.updateName(name || '< unknown >');\n        }\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = info.context?.request?.method?.toUpperCase() || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    } ;\n  },\n);\n\nconst _koaIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @param {KoaOptions} options Configuration options for the Koa integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n *\n * @example\n * ```javascript\n * // To ignore middleware spans\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [\n *     Sentry.koaIntegration({\n *       ignoreLayersType: ['middleware']\n *     })\n *   ],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error, {\n        mechanism: {\n          handled: false,\n          type: 'auto.middleware.koa',\n        },\n      });\n      throw error;\n    }\n  });\n\n  nodeCore.ensureIsWrapped(app.use, 'koa');\n};\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLGdOQUFvQztBQUN2RSw0QkFBNEIsbUJBQU8sQ0FBQywwTEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxnTEFBc0I7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsS0FBSztBQUN2RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFFBQVEsRUFBRSxNQUFNO0FBQ3pFO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQixzQkFBc0I7QUFDdEIsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tvYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS29hID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtvYScpO1xuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vZGVidWctYnVpbGQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLb2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S29hID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgaW5zdHJ1bWVudGF0aW9uS29hLktvYUluc3RydW1lbnRhdGlvbixcbiAgKG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZ25vcmVMYXllcnNUeXBlOiBvcHRpb25zLmlnbm9yZUxheWVyc1R5cGUgLFxuICAgICAgcmVxdWVzdEhvb2soc3BhbiwgaW5mbykge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uaHR0cC5vdGVsLmtvYScpO1xuXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAgICAgICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcm91dGVyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydrb2EudHlwZSddO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgYCR7dHlwZX0ua29hYCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZVxuICAgICAgICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1sna29hLm5hbWUnXTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIFNvbWVob3csIG5hbWUgaXMgc29tZXRpbWVzIGAnJ2AgZm9yIG1pZGRsZXdhcmUgc3BhbnNcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvaXNzdWVzLzIyMjBcbiAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSB8fCAnPCB1bmtub3duID4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgPT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlIC0gc2tpcHBpbmcgc2V0dGluZyB0cmFuc2FjdGlvbk5hbWUnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm91dGUgPSBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JPVVRFXTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBjb25zdCBtZXRob2QgPSBpbmZvLmNvbnRleHQ/LnJlcXVlc3Q/Lm1ldGhvZD8udG9VcHBlckNhc2UoKSB8fCAnR0VUJztcbiAgICAgICAgaWYgKHJvdXRlKSB7XG4gICAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHttZXRob2R9ICR7cm91dGV9YCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSA7XG4gIH0sXG4pO1xuXG5jb25zdCBfa29hSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEtvYShvcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbS29hXShodHRwczovL2tvYWpzLmNvbS8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwS29hRXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBLb2Egc2VydmVyLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtrb2EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMva29hLykuXG4gKlxuICogQHBhcmFtIHtLb2FPcHRpb25zfSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIEtvYSBpbnRlZ3JhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua29hSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFRvIGlnbm9yZSBtaWRkbGV3YXJlIHNwYW5zXG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5rb2FJbnRlZ3JhdGlvbih7XG4gKiAgICAgICBpZ25vcmVMYXllcnNUeXBlOiBbJ21pZGRsZXdhcmUnXVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGtvYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa29hSW50ZWdyYXRpb24pO1xuXG4vKipcbiAqIEFkZCBhbiBLb2EgZXJyb3IgaGFuZGxlciB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKlxuICogVGhlIGVycm9yIGhhbmRsZXIgbXVzdCBiZSBiZWZvcmUgYW55IG90aGVyIG1pZGRsZXdhcmUgYW5kIGFmdGVyIGFsbCBjb250cm9sbGVycy5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBFeHByZXNzIGluc3RhbmNlc1xuICogQHBhcmFtIG9wdGlvbnMge0V4cHJlc3NIYW5kbGVyT3B0aW9uc30gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgaGFuZGxlclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IEtvYSA9IHJlcXVpcmUoXCJrb2FcIik7XG4gKlxuICogY29uc3QgYXBwID0gbmV3IEtvYSgpO1xuICpcbiAqIFNlbnRyeS5zZXR1cEtvYUVycm9ySGFuZGxlcihhcHApO1xuICpcbiAqIC8vIEFkZCB5b3VyIHJvdXRlcywgZXRjLlxuICpcbiAqIGFwcC5saXN0ZW4oMzAwMCk7XG4gKiBgYGBcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IHNldHVwS29hRXJyb3JIYW5kbGVyID0gKGFwcCkgPT4ge1xuICBhcHAudXNlKGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgbmV4dCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgdHlwZTogJ2F1dG8ubWlkZGxld2FyZS5rb2EnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0pO1xuXG4gIG5vZGVDb3JlLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAna29hJyk7XG59O1xuXG5leHBvcnRzLmluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50S29hO1xuZXhwb3J0cy5rb2FJbnRlZ3JhdGlvbiA9IGtvYUludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cEtvYUVycm9ySGFuZGxlciA9IHNldHVwS29hRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a29hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.49.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsbUNBQW1DLG1CQUFPLENBQUMsMk9BQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2xydW1lbW9pemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMcnVNZW1vaXplcic7XG5cbmNvbnN0IGluc3RydW1lbnRMcnVNZW1vaXplciA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkxydU1lbW9pemVyLkxydU1lbW9pemVySW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50THJ1TWVtb2l6ZXIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2xydS1tZW1vaXplcl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbHJ1LW1lbW9pemVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9scnVtZW1vaXplci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmxydU1lbW9pemVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3QgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2xydU1lbW9pemVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRMcnVNZW1vaXplciA9IGluc3RydW1lbnRMcnVNZW1vaXplcjtcbmV4cG9ydHMubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGxydU1lbW9pemVySW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scnVtZW1vaXplci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk1vbmdvZGIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vbmdvJztcblxuY29uc3QgaW5zdHJ1bWVudE1vbmdvID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYi5Nb25nb0RCSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGRiU3RhdGVtZW50U2VyaWFsaXplcjogX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIsXG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nbycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbi8qKlxuICogUmVwbGFjZXMgdmFsdWVzIGluIGRvY3VtZW50IHdpdGggJz8nLCBoaWRpbmcgUElJIGFuZCBoZWxwaW5nIGdyb3VwaW5nLlxuICovXG5mdW5jdGlvbiBfZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplcihjb21tYW5kT2JqKSB7XG4gIGNvbnN0IHJlc3VsdE9iaiA9IF9zY3J1YlN0YXRlbWVudChjb21tYW5kT2JqKTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdE9iaik7XG59XG5cbmZ1bmN0aW9uIF9zY3J1YlN0YXRlbWVudCh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGVsZW1lbnQgPT4gX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpKTtcbiAgfVxuXG4gIGlmIChpc0NvbW1hbmRPYmoodmFsdWUpKSB7XG4gICAgY29uc3QgaW5pdGlhbCA9IHt9O1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh2YWx1ZSlcbiAgICAgIC5tYXAoKFtrZXksIGVsZW1lbnRdKSA9PiBba2V5LCBfc2NydWJTdGF0ZW1lbnQoZWxlbWVudCldKVxuICAgICAgLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICBpZiAoaXNDb21tYW5kRW50cnkoY3VycmVudCkpIHtcbiAgICAgICAgICBwcmV2W2N1cnJlbnRbMF1dID0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH0sIGluaXRpYWwpO1xuICB9XG5cbiAgLy8gQSB2YWx1ZSBsaWtlIHN0cmluZyBvciBudW1iZXIsIHBvc3NpYmxlIGNvbnRhaW5zIFBJSSwgc2NydWIgaXRcbiAgcmV0dXJuICc/Jztcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kT2JqKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFpc0J1ZmZlcih2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbHVlKSB7XG4gIGxldCBpc0J1ZmZlciA9IGZhbHNlO1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGlzQnVmZmVyO1xufVxuXG5mdW5jdGlvbiBpc0NvbW1hbmRFbnRyeSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbmNvbnN0IF9tb25nb0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nbygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29kYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29kYikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG1vbmdvSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbW9uZ28vKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5tb25nb0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbW9uZ29JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX21vbmdvSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLl9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyID0gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXI7XG5leHBvcnRzLmluc3RydW1lbnRNb25nbyA9IGluc3RydW1lbnRNb25nbztcbmV4cG9ydHMubW9uZ29JbnRlZ3JhdGlvbiA9IG1vbmdvSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nby5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0NBQWdDLG1CQUFPLENBQUMsK05BQXlDO0FBQ2pGLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nb29zZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTW9uZ29vc2UgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29vc2UnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nb29zZSc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nb29zZSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlLk1vbmdvb3NlSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm1vbmdvb3NlJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX21vbmdvb3NlSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE1vbmdvb3NlKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFttb25nb29zZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29vc2UpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb29zZUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvb3NlLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29vc2VJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvb3NlSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb29zZUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50TW9uZ29vc2U7XG5leHBvcnRzLm1vbmdvb3NlSW50ZWdyYXRpb24gPSBtb25nb29zZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29vc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.50.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsNkJBQTZCLG1CQUFPLENBQUMsc05BQXNDO0FBQzNFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBLGdJQUFnSTs7QUFFaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNeXNxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbk15c3FsLk15U1FMSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9teXNxbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbXlzcWxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL215c3FsKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbXlzcWxJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9teXNxbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm15c3FsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBteXNxbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWxJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE15c3FsID0gaW5zdHJ1bWVudE15c3FsO1xuZXhwb3J0cy5teXNxbEludGVncmF0aW9uID0gbXlzcWxJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDhCQUE4QixtQkFBTyxDQUFDLHlOQUF1QztBQUM3RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsb09BQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25NeXNxbDIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwyJztcblxuY29uc3QgaW5zdHJ1bWVudE15c3FsMiA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk15c3FsMi5NeVNRTDJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubXlzcWwyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX215c3FsMkludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbDIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW215c3FsMl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbXlzcWwySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbXlzcWwyLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubXlzcWxJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG15c3FsMkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWwySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50TXlzcWwyO1xuZXhwb3J0cy5teXNxbDJJbnRlZ3JhdGlvbiA9IG15c3FsMkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\");\n\nconst OPENAI_CODEX_INTEGRATION_NAME = 'OpenAiCodex';\n\n// Global singleton - only patch once per application instance\nlet _globalInstrumentedCodex = null;\nlet _initPromise = null;\n\n/**\n * Lazily loads and patches the OpenAI Codex SDK.\n * Ensures only one patched instance exists globally.\n */\nasync function ensurePatchedCodex() {\n  if (_globalInstrumentedCodex) {\n    return _globalInstrumentedCodex;\n  }\n\n  if (_initPromise) {\n    await _initPromise;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return _globalInstrumentedCodex;\n  }\n\n  _initPromise = (async () => {\n    try {\n      // Use webpackIgnore to prevent webpack from trying to resolve this at build time\n      // The import resolves at runtime from the user's node_modules\n      const sdkPath = '@openai/codex-sdk';\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const codexSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (!codexSDK || typeof codexSDK.Codex !== 'function') {\n        throw new Error(\n          'Failed to find \\'Codex\\' class in @openai/codex-sdk.\\n' +\n            'Make sure you have the package installed.',\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      _globalInstrumentedCodex = codexSDK.Codex;\n    } catch (error) {\n      // Reset state on failure to allow retry on next call\n      _initPromise = null;\n\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Unknown error occurred while loading @openai/codex-sdk';\n\n      throw new Error(\n        `Failed to instrument OpenAI Codex SDK:\\n${errorMessage}\\n\\n` +\n          'Make sure @openai/codex-sdk is installed:\\n' +\n          '  npm install @openai/codex-sdk\\n' +\n          '  # or\\n' +\n          '  yarn add @openai/codex-sdk',\n      );\n    }\n  })();\n\n  await _initPromise;\n  return _globalInstrumentedCodex;\n}\n\n/**\n * Creates a Sentry-instrumented Codex instance for the OpenAI Codex SDK.\n *\n * This is a convenience helper that reduces boilerplate to a single line.\n * The SDK is lazily loaded on first use, and instances are instrumented automatically.\n *\n * **Important**: This helper is NOT automatic. You must call it in your code.\n * The OpenAI Codex SDK cannot be automatically instrumented due to ESM module\n * and webpack bundling limitations.\n *\n * @param codexOptions - Options to pass to the Codex constructor\n * @param instrumentationOptions - Optional configuration for this specific agent instance\n * @param instrumentationOptions.name - Custom agent name for differentiation (defaults to 'openai-codex')\n * @param instrumentationOptions.recordInputs - Whether to record input prompts (defaults to sendDefaultPii)\n * @param instrumentationOptions.recordOutputs - Whether to record outputs (defaults to sendDefaultPii)\n * @returns An instrumented Codex instance ready to use\n *\n * @example\n * ```typescript\n * import { createInstrumentedCodex } from '@sentry/node';\n *\n * // Default agent name ('openai-codex')\n * const codex = await createInstrumentedCodex();\n * const thread = codex.startThread();\n * const result = await thread.run('Diagnose the test failure');\n *\n * // Custom agent name for differentiation\n * const devAgent = await createInstrumentedCodex({}, { name: 'dev-agent' });\n * const qaAgent = await createInstrumentedCodex({}, { name: 'qa-agent' });\n *\n * // Streaming mode\n * const thread = codex.startThread();\n * for await (const event of thread.runStreamed('Fix the bug')) {\n *   console.log(event);\n * }\n * ```\n *\n * Configuration is automatically pulled from your `openaiCodexIntegration()` setup:\n *\n * @example\n * ```typescript\n * Sentry.init({\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,   // These options are used\n *       recordOutputs: true,  // by createInstrumentedCodex()\n *     })\n *   ]\n * });\n * ```\n */\nasync function createInstrumentedCodex(\n  codexOptions,\n  instrumentationOptions = {},\n) {\n  await ensurePatchedCodex();\n\n  if (!_globalInstrumentedCodex) {\n    throw new Error('[Sentry] Failed to initialize instrumented OpenAI Codex SDK');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const CodexConstructor = _globalInstrumentedCodex;\n\n  const client = core.getClient();\n  const integration = client?.getIntegrationByName(OPENAI_CODEX_INTEGRATION_NAME);\n  const integrationOptions = (integration )?.options  || {};\n\n  // Merge options: integration options < instrumentation options\n  const finalOptions = {\n    ...integrationOptions,\n    ...(instrumentationOptions.recordInputs !== undefined && { recordInputs: instrumentationOptions.recordInputs }),\n    ...(instrumentationOptions.recordOutputs !== undefined && { recordOutputs: instrumentationOptions.recordOutputs }),\n    agentName: instrumentationOptions.name ?? integrationOptions.agentName ?? 'openai-codex',\n  };\n\n  // Create instance and instrument it\n  const codexInstance = new CodexConstructor(codexOptions);\n  return instrumentation.instrumentCodexInstance(codexInstance, finalOptions);\n}\n\nexports.createInstrumentedCodex = createInstrumentedCodex;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst OPENAI_CODEX_INTEGRATION_NAME = 'OpenAiCodex';\n\nconst _openaiCodexIntegration = ((options = {}) => {\n  return {\n    name: OPENAI_CODEX_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      // Note: Automatic patching via require hooks doesn't work for ESM modules\n      // or webpack-bundled dependencies. Users must manually use createInstrumentedCodex()\n      // in their code.\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the OpenAI Codex SDK.\n *\n * **Important**: Due to ESM module and bundler limitations, this integration requires\n * using the `createInstrumentedCodex()` helper function in your code.\n * See the example below for proper usage.\n *\n * This integration captures telemetry data following OpenTelemetry Semantic Conventions\n * for Generative AI, including:\n * - Agent invocation spans (`invoke_agent`)\n * - Chat spans (`chat`) for turn completions\n * - Tool execution spans (`execute_tool`) for commands, web searches, file changes, etc.\n * - Token usage, model info, and session tracking\n *\n * @example\n * ```typescript\n * // Step 1: Configure the integration\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   dsn: 'your-dsn',\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Step 2: Use the helper in your code\n * import { createInstrumentedCodex } from '@sentry/node';\n *\n * const codex = await createInstrumentedCodex();\n *\n * // Use Codex as normal - automatically instrumented!\n * const thread = codex.startThread();\n * const result = await thread.run('Diagnose the test failure and propose a fix');\n * console.log(result.finalResponse);\n *\n * // Or use streaming mode\n * for await (const event of thread.runStreamed('Fix the bug')) {\n *   if (event.type === 'item.completed') {\n *     console.log('Tool completed:', event.item);\n *   }\n * }\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text, tool calls, and outputs (default: respects `sendDefaultPii` client option)\n * - `agentName`: Custom agent name for differentiation (default: 'openai-codex')\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```typescript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n *\n * // Use custom agent name for multiple agents\n * const devAgent = await createInstrumentedCodex({}, { name: 'dev-agent' });\n * const qaAgent = await createInstrumentedCodex({}, { name: 'qa-agent' });\n * ```\n *\n * ## Captured Events\n *\n * The integration captures the following Codex events as spans:\n *\n * ### Agent Invocation (invoke_agent)\n * - Tracks the entire agent interaction lifecycle\n * - Captures thread ID and session information\n *\n * ### Chat Turns (chat)\n * - Tracks individual turns in the conversation\n * - Captures token usage (input, output, cached tokens)\n * - Records response text (when recordOutputs is enabled)\n *\n * ### Tool Executions (execute_tool)\n * - `command_execution`: Shell commands with exit codes\n * - `file_change`: File modifications with change details\n * - `web_search`: Web search queries\n * - `mcp_tool_call`: MCP tool calls with server/tool names\n * - `agent_message`: Agent messages and reasoning\n * - `todo_list`: Task list management\n *\n * @see https://docs.sentry.io/platforms/javascript/guides/node/ai-monitoring/\n */\nconst openaiCodexIntegration = core.defineIntegration(_openaiCodexIntegration);\n\nexports.openaiCodexIntegration = openaiCodexIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpLWNvZGV4L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUEsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsWUFBWSwwQkFBMEI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLG9EQUFvRCxJQUFJLG1CQUFtQjtBQUMzRSxtREFBbUQsSUFBSSxrQkFBa0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpLWNvZGV4L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IE9QRU5BSV9DT0RFWF9JTlRFR1JBVElPTl9OQU1FID0gJ09wZW5BaUNvZGV4JztcblxuY29uc3QgX29wZW5haUNvZGV4SW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IE9QRU5BSV9DT0RFWF9JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gTm90ZTogQXV0b21hdGljIHBhdGNoaW5nIHZpYSByZXF1aXJlIGhvb2tzIGRvZXNuJ3Qgd29yayBmb3IgRVNNIG1vZHVsZXNcbiAgICAgIC8vIG9yIHdlYnBhY2stYnVuZGxlZCBkZXBlbmRlbmNpZXMuIFVzZXJzIG11c3QgbWFudWFsbHkgdXNlIGNyZWF0ZUluc3RydW1lbnRlZENvZGV4KClcbiAgICAgIC8vIGluIHRoZWlyIGNvZGUuXG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIE9wZW5BSSBDb2RleCBTREsuXG4gKlxuICogKipJbXBvcnRhbnQqKjogRHVlIHRvIEVTTSBtb2R1bGUgYW5kIGJ1bmRsZXIgbGltaXRhdGlvbnMsIHRoaXMgaW50ZWdyYXRpb24gcmVxdWlyZXNcbiAqIHVzaW5nIHRoZSBgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXgoKWAgaGVscGVyIGZ1bmN0aW9uIGluIHlvdXIgY29kZS5cbiAqIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgcHJvcGVyIHVzYWdlLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gY2FwdHVyZXMgdGVsZW1ldHJ5IGRhdGEgZm9sbG93aW5nIE9wZW5UZWxlbWV0cnkgU2VtYW50aWMgQ29udmVudGlvbnNcbiAqIGZvciBHZW5lcmF0aXZlIEFJLCBpbmNsdWRpbmc6XG4gKiAtIEFnZW50IGludm9jYXRpb24gc3BhbnMgKGBpbnZva2VfYWdlbnRgKVxuICogLSBDaGF0IHNwYW5zIChgY2hhdGApIGZvciB0dXJuIGNvbXBsZXRpb25zXG4gKiAtIFRvb2wgZXhlY3V0aW9uIHNwYW5zIChgZXhlY3V0ZV90b29sYCkgZm9yIGNvbW1hbmRzLCB3ZWIgc2VhcmNoZXMsIGZpbGUgY2hhbmdlcywgZXRjLlxuICogLSBUb2tlbiB1c2FnZSwgbW9kZWwgaW5mbywgYW5kIHNlc3Npb24gdHJhY2tpbmdcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gU3RlcCAxOiBDb25maWd1cmUgdGhlIGludGVncmF0aW9uXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGRzbjogJ3lvdXItZHNuJyxcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lm9wZW5haUNvZGV4SW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBTdGVwIDI6IFVzZSB0aGUgaGVscGVyIGluIHlvdXIgY29kZVxuICogaW1wb3J0IHsgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXggfSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIGNvbnN0IGNvZGV4ID0gYXdhaXQgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXgoKTtcbiAqXG4gKiAvLyBVc2UgQ29kZXggYXMgbm9ybWFsIC0gYXV0b21hdGljYWxseSBpbnN0cnVtZW50ZWQhXG4gKiBjb25zdCB0aHJlYWQgPSBjb2RleC5zdGFydFRocmVhZCgpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhyZWFkLnJ1bignRGlhZ25vc2UgdGhlIHRlc3QgZmFpbHVyZSBhbmQgcHJvcG9zZSBhIGZpeCcpO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZpbmFsUmVzcG9uc2UpO1xuICpcbiAqIC8vIE9yIHVzZSBzdHJlYW1pbmcgbW9kZVxuICogZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiB0aHJlYWQucnVuU3RyZWFtZWQoJ0ZpeCB0aGUgYnVnJykpIHtcbiAqICAgaWYgKGV2ZW50LnR5cGUgPT09ICdpdGVtLmNvbXBsZXRlZCcpIHtcbiAqICAgICBjb25zb2xlLmxvZygnVG9vbCBjb21wbGV0ZWQ6JywgZXZlbnQuaXRlbSk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiAtIGByZWNvcmRJbnB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCBwcm9tcHQgbWVzc2FnZXMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYHJlY29yZE91dHB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCByZXNwb25zZSB0ZXh0LCB0b29sIGNhbGxzLCBhbmQgb3V0cHV0cyAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICogLSBgYWdlbnROYW1lYDogQ3VzdG9tIGFnZW50IG5hbWUgZm9yIGRpZmZlcmVudGlhdGlvbiAoZGVmYXVsdDogJ29wZW5haS1jb2RleCcpXG4gKlxuICogIyMjIERlZmF1bHQgQmVoYXZpb3JcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgaW50ZWdyYXRpb24gd2lsbDpcbiAqIC0gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyBPTkxZIGlmIGBzZW5kRGVmYXVsdFBpaWAgaXMgc2V0IHRvIGB0cnVlYCBpbiB5b3VyIFNlbnRyeSBjbGllbnQgb3B0aW9uc1xuICogLSBPdGhlcndpc2UsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgTk9UIHJlY29yZGVkIHVubGVzcyBleHBsaWNpdGx5IGVuYWJsZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyB3aGVuIHNlbmREZWZhdWx0UGlpIGlzIGZhbHNlXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5vcGVuYWlDb2RleEludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogdHJ1ZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IHRydWVcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gTmV2ZXIgcmVjb3JkIGlucHV0cy9vdXRwdXRzIHJlZ2FyZGxlc3Mgb2Ygc2VuZERlZmF1bHRQaWlcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgc2VuZERlZmF1bHRQaWk6IHRydWUsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5vcGVuYWlDb2RleEludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogZmFsc2UsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiBmYWxzZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBVc2UgY3VzdG9tIGFnZW50IG5hbWUgZm9yIG11bHRpcGxlIGFnZW50c1xuICogY29uc3QgZGV2QWdlbnQgPSBhd2FpdCBjcmVhdGVJbnN0cnVtZW50ZWRDb2RleCh7fSwgeyBuYW1lOiAnZGV2LWFnZW50JyB9KTtcbiAqIGNvbnN0IHFhQWdlbnQgPSBhd2FpdCBjcmVhdGVJbnN0cnVtZW50ZWRDb2RleCh7fSwgeyBuYW1lOiAncWEtYWdlbnQnIH0pO1xuICogYGBgXG4gKlxuICogIyMgQ2FwdHVyZWQgRXZlbnRzXG4gKlxuICogVGhlIGludGVncmF0aW9uIGNhcHR1cmVzIHRoZSBmb2xsb3dpbmcgQ29kZXggZXZlbnRzIGFzIHNwYW5zOlxuICpcbiAqICMjIyBBZ2VudCBJbnZvY2F0aW9uIChpbnZva2VfYWdlbnQpXG4gKiAtIFRyYWNrcyB0aGUgZW50aXJlIGFnZW50IGludGVyYWN0aW9uIGxpZmVjeWNsZVxuICogLSBDYXB0dXJlcyB0aHJlYWQgSUQgYW5kIHNlc3Npb24gaW5mb3JtYXRpb25cbiAqXG4gKiAjIyMgQ2hhdCBUdXJucyAoY2hhdClcbiAqIC0gVHJhY2tzIGluZGl2aWR1YWwgdHVybnMgaW4gdGhlIGNvbnZlcnNhdGlvblxuICogLSBDYXB0dXJlcyB0b2tlbiB1c2FnZSAoaW5wdXQsIG91dHB1dCwgY2FjaGVkIHRva2VucylcbiAqIC0gUmVjb3JkcyByZXNwb25zZSB0ZXh0ICh3aGVuIHJlY29yZE91dHB1dHMgaXMgZW5hYmxlZClcbiAqXG4gKiAjIyMgVG9vbCBFeGVjdXRpb25zIChleGVjdXRlX3Rvb2wpXG4gKiAtIGBjb21tYW5kX2V4ZWN1dGlvbmA6IFNoZWxsIGNvbW1hbmRzIHdpdGggZXhpdCBjb2Rlc1xuICogLSBgZmlsZV9jaGFuZ2VgOiBGaWxlIG1vZGlmaWNhdGlvbnMgd2l0aCBjaGFuZ2UgZGV0YWlsc1xuICogLSBgd2ViX3NlYXJjaGA6IFdlYiBzZWFyY2ggcXVlcmllc1xuICogLSBgbWNwX3Rvb2xfY2FsbGA6IE1DUCB0b29sIGNhbGxzIHdpdGggc2VydmVyL3Rvb2wgbmFtZXNcbiAqIC0gYGFnZW50X21lc3NhZ2VgOiBBZ2VudCBtZXNzYWdlcyBhbmQgcmVhc29uaW5nXG4gKiAtIGB0b2RvX2xpc3RgOiBUYXNrIGxpc3QgbWFuYWdlbWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9haS1tb25pdG9yaW5nL1xuICovXG5jb25zdCBvcGVuYWlDb2RleEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfb3BlbmFpQ29kZXhJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMub3BlbmFpQ29kZXhJbnRlZ3JhdGlvbiA9IG9wZW5haUNvZGV4SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst GEN_AI_ATTRIBUTES = {\n  SYSTEM: 'gen_ai.system',\n  OPERATION_NAME: 'gen_ai.operation.name',\n  REQUEST_MODEL: 'gen_ai.request.model',\n  REQUEST_MESSAGES: 'gen_ai.request.messages',\n  RESPONSE_TEXT: 'gen_ai.response.text',\n  RESPONSE_TOOL_CALLS: 'gen_ai.response.tool_calls',\n  RESPONSE_ID: 'gen_ai.response.id',\n  RESPONSE_MODEL: 'gen_ai.response.model',\n  USAGE_INPUT_TOKENS: 'gen_ai.usage.input_tokens',\n  USAGE_OUTPUT_TOKENS: 'gen_ai.usage.output_tokens',\n  USAGE_TOTAL_TOKENS: 'gen_ai.usage.total_tokens',\n  TOOL_NAME: 'gen_ai.tool.name',\n  TOOL_TYPE: 'gen_ai.tool.type',\n  TOOL_INPUT: 'gen_ai.tool.input',\n  TOOL_OUTPUT: 'gen_ai.tool.output',\n  AGENT_NAME: 'gen_ai.agent.name',\n} ;\n\nconst SENTRY_ORIGIN = 'auto.ai.openai-codex';\n\n/**\n * Maps Codex tool/item types to OpenTelemetry tool types.\n *\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/\n * @param itemType - The type of the item (e.g., 'command_execution', 'web_search', 'mcp_tool_call')\n * @returns The OpenTelemetry tool type: 'function', 'extension', or 'datastore'\n */\nfunction getToolType(itemType) {\n  // Client-side execution tools - functions that run on the client\n  const functionTools = new Set([\n    'command_execution', // Shell/process tools\n    'file_change', // File operations\n    'reasoning', // Agent reasoning\n    'agent_message', // Agent messages\n    'todo_list', // Task management\n  ]);\n\n  // Agent-side API calls - external service integrations\n  const extensionTools = new Set(['web_search', 'mcp_tool_call']);\n\n  // Data access tools - database/structured data operations\n  const datastoreTools = new Set([]);\n\n  if (functionTools.has(itemType)) return 'function';\n  if (extensionTools.has(itemType)) return 'extension';\n  if (datastoreTools.has(itemType)) return 'datastore';\n\n  // Default to function for unknown tools (safest assumption)\n  return 'function';\n}\n\nfunction setTokenUsageAttributes(\n  span,\n  inputTokens,\n  outputTokens,\n  cacheCreationTokens,\n  cacheReadTokens,\n) {\n  const attrs = {};\n\n  if (typeof inputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_INPUT_TOKENS] = inputTokens;\n  }\n  if (typeof outputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_OUTPUT_TOKENS] = outputTokens;\n  }\n\n  const total = (inputTokens ?? 0) + (outputTokens ?? 0) + (cacheCreationTokens ?? 0) + (cacheReadTokens);\n  if (total > 0) {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_TOTAL_TOKENS] = total;\n  }\n\n  if (Object.keys(attrs).length > 0) {\n    span.setAttributes(attrs);\n  }\n}\n\n/**\n * Get a display name for a thread item based on its type and properties\n */\nfunction getItemDisplayName(item) {\n  switch (item.type) {\n    case 'command_execution':\n      // Use just the item type, not the full command (which can be very long)\n      return 'command_execution';\n    case 'web_search':\n      return 'web_search';\n    case 'mcp_tool_call':\n      return `mcp_tool_call.${item.server}.${item.tool}`;\n    case 'file_change':\n      return 'file_change';\n    case 'agent_message':\n      return 'agent_message';\n    case 'reasoning':\n      return 'reasoning';\n    case 'todo_list':\n      return 'todo_list';\n    case 'error':\n      return 'error';\n    default:\n      // TypeScript exhaustiveness check\n      return (item ).type;\n  }\n}\n\n/**\n * Get a descriptive span name for a thread item\n * Format: \"execute_tool <type>\"\n * Details go into the input/output attributes\n */\nfunction getSpanDescription(item) {\n  switch (item.type) {\n    case 'command_execution':\n      return 'execute_tool command_execution';\n    case 'web_search':\n      return 'execute_tool web_search';\n    case 'mcp_tool_call':\n      return `execute_tool mcp_tool_call`;\n    case 'file_change':\n      return 'execute_tool file_change';\n    case 'agent_message':\n      return 'execute_tool agent_message';\n    case 'reasoning':\n      return 'execute_tool reasoning';\n    case 'todo_list':\n      return 'execute_tool todo_list';\n    case 'error':\n      return 'execute_tool error';\n    default:\n      return `execute_tool ${(item ).type}`;\n  }\n}\n\n/**\n * Get input data for a thread item for telemetry\n */\nfunction getItemInput(item) {\n  switch (item.type) {\n    case 'command_execution':\n      return item.command;\n    case 'web_search':\n      return item.query;\n    case 'mcp_tool_call':\n      return JSON.stringify({ server: item.server, tool: item.tool });\n    case 'file_change':\n      return JSON.stringify(item.changes);\n    case 'agent_message':\n      return item.text;\n    case 'reasoning':\n      return item.text;\n    case 'todo_list':\n      return JSON.stringify(item.items);\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Strip ANSI escape codes from terminal output\n * Common codes like \\x1B(B\\x1B[m are used for text formatting/color\n */\nfunction stripAnsiCodes(text) {\n  // Remove all ANSI escape sequences including:\n  // - \\x1B[...m (SGR - colors, styles)\n  // - \\x1B(B (character set selection)\n  // - Other control sequences\n  // eslint-disable-next-line no-control-regex\n  return text.replace(/\\x1B(?:\\[[0-9;]*[a-zA-Z]|\\([AB012]|[@-Z\\\\-_])/g, '');\n}\n\n/**\n * Get output data for a thread item for telemetry\n */\nfunction getItemOutput(item) {\n  switch (item.type) {\n    case 'command_execution': {\n      // Strip ANSI codes from terminal output\n      const cleanOutput = stripAnsiCodes(item.aggregated_output);\n      const exitCodeStr = `Exit code: ${item.exit_code ?? 'N/A'}`;\n      // Only include output if it's not empty after stripping ANSI codes\n      return cleanOutput.trim() ? `${cleanOutput}\\n${exitCodeStr}` : exitCodeStr;\n    }\n    case 'file_change':\n      return `Status: ${item.status}`;\n    case 'mcp_tool_call':\n      return `Status: ${item.status}`;\n    case 'error':\n      return item.message;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Wraps a Thread instance to add Sentry instrumentation\n */\nfunction instrumentThread(\n  originalThread,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  // Wrap the runStreamed method\n  const originalRunStreamed = originalThread.runStreamed.bind(originalThread);\n  originalThread.runStreamed = async function (input, turnOptions) {\n    const originalStreamedTurn = await originalRunStreamed(input, turnOptions);\n\n    return {\n      events: instrumentStreamedTurn(originalStreamedTurn.events, input, agentName, recordInputs, recordOutputs),\n    };\n  };\n\n  // Wrap the run method\n  const originalRun = originalThread.run.bind(originalThread);\n  originalThread.run = async function (input, turnOptions) {\n    return instrumentNonStreamedTurn(originalRun, input, turnOptions, agentName, recordInputs, recordOutputs);\n  };\n\n  return originalThread;\n}\n\n/**\n * Instruments a streamed turn (runStreamed) with Sentry spans\n */\nasync function* instrumentStreamedTurn(\n  originalStream,\n  input,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  yield* core.startSpanManual(\n    {\n      name: `invoke_agent ${agentName}`,\n      op: 'gen_ai.invoke_agent',\n      attributes: {\n        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n      },\n    },\n    // eslint-disable-next-line complexity -- Complex event handling for streaming AI responses\n    async function* (agentSpan) {\n      let threadId = null;\n      let currentTurnSpan = null;\n      const itemSpans = new Map();\n      let turnMessages = [];\n\n      try {\n        for await (const event of originalStream) {\n          // Capture thread ID\n          if (event.type === 'thread.started') {\n            threadId = event.thread_id;\n            agentSpan.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_ID]: threadId,\n            });\n          }\n\n          // Start turn span\n          if (event.type === 'turn.started') {\n            if (currentTurnSpan) {\n              currentTurnSpan.setStatus({ code: 1 });\n              currentTurnSpan.end();\n            }\n\n            currentTurnSpan = core.withActiveSpan(agentSpan, () => {\n              return core.startSpanManual(\n                {\n                  name: `chat codex`,\n                  op: 'gen_ai.chat',\n                  attributes: {\n                    [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                    [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                    [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                    ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n                  },\n                },\n                (span) => span,\n              );\n            });\n\n            turnMessages = [];\n          }\n\n          // Complete turn span\n          if (event.type === 'turn.completed') {\n            const turnCompletedEvent = event;\n            if (currentTurnSpan) {\n              // Add response text if we captured any messages\n              if (recordOutputs && turnMessages.length > 0) {\n                currentTurnSpan.setAttributes({\n                  [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: turnMessages.join('\\n'),\n                });\n              }\n\n              // Add token usage\n              if (turnCompletedEvent.usage) {\n                setTokenUsageAttributes(\n                  currentTurnSpan,\n                  turnCompletedEvent.usage.input_tokens,\n                  turnCompletedEvent.usage.output_tokens,\n                  turnCompletedEvent.usage.cached_input_tokens,\n                  0,\n                );\n              }\n\n              currentTurnSpan.setStatus({ code: 1 });\n              currentTurnSpan.end();\n              currentTurnSpan = null;\n            }\n          }\n\n          // Handle turn failure\n          if (event.type === 'turn.failed') {\n            const turnFailedEvent = event;\n            if (currentTurnSpan) {\n              currentTurnSpan.setStatus({ code: 2, message: turnFailedEvent.error.message });\n              currentTurnSpan.end();\n              currentTurnSpan = null;\n            }\n          }\n\n          // Start item span - only for items that have a completion state\n          if (event.type === 'item.started') {\n            const itemEvent = event ;\n            const item = itemEvent.item;\n\n            // Only create spans for items that will have meaningful execution\n            // Skip reasoning items as they complete immediately\n            if (currentTurnSpan && item.type !== 'reasoning' && item.type !== 'agent_message') {\n              const itemSpan = core.withActiveSpan(currentTurnSpan, () => {\n                const itemName = getItemDisplayName(item);\n                const toolType = getToolType(item.type);\n                const spanDescription = getSpanDescription(item);\n\n                return core.startSpanManual(\n                  {\n                    name: spanDescription,\n                    op: 'gen_ai.execute_tool',\n                    attributes: {\n                      [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                      [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                      [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                      [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                      [GEN_AI_ATTRIBUTES.TOOL_NAME]: itemName,\n                      [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                    },\n                  },\n                  (span) => {\n                    if (recordInputs) {\n                      const itemInput = getItemInput(item);\n                      if (itemInput) {\n                        span.setAttributes({\n                          [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                        });\n                      }\n                    }\n                    return span;\n                  },\n                );\n              });\n\n              itemSpans.set(item.id, itemSpan);\n            }\n          }\n\n          // Complete item span\n          if (event.type === 'item.completed') {\n            const itemEvent = event ;\n            const item = itemEvent.item;\n\n            // For items with spans (command_execution, web_search, etc.)\n            const itemSpan = itemSpans.get(item.id);\n            if (itemSpan) {\n              // Update input with latest data (may have been updated since item.started)\n              if (recordInputs) {\n                const itemInput = getItemInput(item);\n                if (itemInput) {\n                  itemSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                  });\n                }\n              }\n\n              if (recordOutputs) {\n                const itemOutput = getItemOutput(item);\n                if (itemOutput) {\n                  itemSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]: itemOutput,\n                  });\n                }\n              }\n\n              // Check for error status - handle command execution exit codes\n              if (item.type === 'error') {\n                itemSpan.setStatus({ code: 2, message: item.message });\n              } else if (item.type === 'command_execution') {\n                // Check exit code - exit_code is optional and may be undefined while in progress\n                if (typeof item.exit_code === 'number' && item.exit_code !== 0) {\n                  itemSpan.setStatus({ code: 2, message: `Command failed with exit code ${item.exit_code}` });\n                } else if (item.status === 'failed') {\n                  itemSpan.setStatus({ code: 2, message: 'Command execution failed' });\n                } else {\n                  itemSpan.setStatus({ code: 1 });\n                }\n              } else if (('status' in item) && item.status === 'failed') {\n                itemSpan.setStatus({ code: 2, message: 'Tool execution failed' });\n              } else {\n                itemSpan.setStatus({ code: 1 });\n              }\n\n              itemSpan.end();\n              itemSpans.delete(item.id);\n            }\n\n            // Capture agent messages for response text\n            if (item.type === 'agent_message') {\n              turnMessages.push(item.text);\n            }\n          }\n\n          yield event;\n        }\n\n        agentSpan.setStatus({ code: 1 });\n      } catch (error) {\n        core.captureException(error, {\n          mechanism: {\n            type: SENTRY_ORIGIN,\n            handled: false,\n          },\n        });\n\n        agentSpan.setStatus({ code: 2, message: (error ).message });\n        throw error;\n      } finally {\n        // Clean up any remaining spans\n        if (currentTurnSpan && currentTurnSpan.isRecording()) {\n          currentTurnSpan.setStatus({ code: 1 });\n          currentTurnSpan.end();\n        }\n\n        for (const itemSpan of itemSpans.values()) {\n          if (itemSpan.isRecording()) {\n            itemSpan.setStatus({ code: 1 });\n            itemSpan.end();\n          }\n        }\n\n        agentSpan.end();\n      }\n    },\n  );\n}\n\n/**\n * Instruments a non-streamed turn (run) with Sentry spans\n */\nasync function instrumentNonStreamedTurn(\n  originalRun,\n  input,\n  turnOptions,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  return core.startSpanManual(\n    {\n      name: `invoke_agent ${agentName}`,\n      op: 'gen_ai.invoke_agent',\n      attributes: {\n        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n      },\n    },\n    async (agentSpan) => {\n      try {\n        const result = await core.withActiveSpan(agentSpan, async () => {\n          return await core.startSpanManual(\n            {\n              name: `chat codex`,\n              op: 'gen_ai.chat',\n              attributes: {\n                [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n              },\n            },\n            async (chatSpan) => {\n              const turn = await originalRun(input, turnOptions);\n\n              // Add response text\n              if (recordOutputs && turn.finalResponse) {\n                chatSpan.setAttributes({\n                  [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: turn.finalResponse,\n                });\n              }\n\n              // Note: run() doesn't provide usage information, only runStreamed() does via events\n\n              // Create spans for each item\n              for (const item of turn.items) {\n                await core.withActiveSpan(chatSpan, () => {\n                  const itemName = getItemDisplayName(item);\n                  const toolType = getToolType(item.type);\n                  const spanDescription = getSpanDescription(item);\n\n                  core.startSpan(\n                    {\n                      name: spanDescription,\n                      op: 'gen_ai.execute_tool',\n                      attributes: {\n                        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                        [GEN_AI_ATTRIBUTES.TOOL_NAME]: itemName,\n                        [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                      },\n                    },\n                    (itemSpan) => {\n                      if (recordInputs) {\n                        const itemInput = getItemInput(item);\n                        if (itemInput) {\n                          itemSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                          });\n                        }\n                      }\n\n                      if (recordOutputs) {\n                        const itemOutput = getItemOutput(item);\n                        if (itemOutput) {\n                          itemSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]: itemOutput,\n                          });\n                        }\n                      }\n\n                      // Check for error status\n                      if (item.type === 'error' || (('status' in item) && item.status === 'failed')) {\n                        itemSpan.setStatus({ code: 2, message: item.type === 'error' ? item.message : 'Tool execution failed' });\n                      } else {\n                        itemSpan.setStatus({ code: 1 });\n                      }\n                    },\n                  );\n                });\n              }\n\n              chatSpan.setStatus({ code: 1 });\n              return turn;\n            },\n          );\n        });\n\n        agentSpan.setStatus({ code: 1 });\n        return result;\n      } catch (error) {\n        core.captureException(error, {\n          mechanism: {\n            type: SENTRY_ORIGIN,\n            handled: false,\n          },\n        });\n\n        agentSpan.setStatus({ code: 2, message: (error ).message });\n        throw error;\n      }\n    },\n  );\n}\n\n/**\n * Wraps a Codex instance to add Sentry instrumentation to all threads\n */\nfunction instrumentCodexInstance(originalCodex, options = {}) {\n  const client = core.getClient();\n  const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n  const recordInputs = options.recordInputs ?? defaultPii;\n  const recordOutputs = options.recordOutputs ?? defaultPii;\n  const agentName = options.agentName ?? 'openai-codex';\n\n  // Wrap startThread\n  const originalStartThread = originalCodex.startThread.bind(originalCodex);\n  originalCodex.startThread = function (threadOptions) {\n    const thread = originalStartThread(threadOptions);\n    return instrumentThread(thread, agentName, recordInputs, recordOutputs);\n  };\n\n  // Wrap resumeThread\n  const originalResumeThread = originalCodex.resumeThread.bind(originalCodex);\n  originalCodex.resumeThread = function (id, threadOptions) {\n    const thread = originalResumeThread(id, threadOptions);\n    return instrumentThread(thread, agentName, recordInputs, recordOutputs);\n  };\n\n  return originalCodex;\n}\n\n/**\n * Wraps the Codex constructor to automatically instrument all instances\n */\nfunction patchCodexConstructor(\n  CodexConstructor,\n  instrumentationOptions = {},\n) {\n  return class InstrumentedCodex extends (CodexConstructor ) {\n    constructor(options) {\n      super(options);\n      return instrumentCodexInstance(this , instrumentationOptions);\n    }\n  } ;\n}\n\nexports.instrumentCodexInstance = instrumentCodexInstance;\nexports.patchCodexConstructor = patchCodexConstructor;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\");\n\nconst instrumentOpenAi = nodeCore.generateInstrumentOnce(\n  core.OPENAI_INTEGRATION_NAME,\n  () => new instrumentation.SentryOpenAiInstrumentation({}),\n);\n\nconst _openAiIntegration = ((options = {}) => {\n  return {\n    name: core.OPENAI_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentOpenAi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the OpenAI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments OpenAI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.openAIIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst openAIIntegration = core.defineIntegration(_openAiIntegration);\n\nexports.instrumentOpenAi = instrumentOpenAi;\nexports.openAIIntegration = openAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsZ05BQXNCOztBQUV0RDtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEOztBQUVBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2luc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBpbnN0cnVtZW50T3BlbkFpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgY29yZS5PUEVOQUlfSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbi5TZW50cnlPcGVuQWlJbnN0cnVtZW50YXRpb24oe30pLFxuKTtcblxuY29uc3QgX29wZW5BaUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBjb3JlLk9QRU5BSV9JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE9wZW5BaSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBPcGVuQUkgU0RLLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gaXMgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIFdoZW4gY29uZmlndXJlZCwgdGhpcyBpbnRlZ3JhdGlvbiBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRzIE9wZW5BSSBTREsgY2xpZW50IGluc3RhbmNlc1xuICogdG8gY2FwdHVyZSB0ZWxlbWV0cnkgZGF0YSBmb2xsb3dpbmcgT3BlblRlbGVtZXRyeSBTZW1hbnRpYyBDb252ZW50aW9ucyBmb3IgR2VuZXJhdGl2ZSBBSS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkub3BlbkFJSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiAtIGByZWNvcmRJbnB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCBwcm9tcHQgbWVzc2FnZXMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYHJlY29yZE91dHB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCByZXNwb25zZSB0ZXh0IChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKlxuICogIyMjIERlZmF1bHQgQmVoYXZpb3JcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgaW50ZWdyYXRpb24gd2lsbDpcbiAqIC0gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyBPTkxZIGlmIGBzZW5kRGVmYXVsdFBpaWAgaXMgc2V0IHRvIGB0cnVlYCBpbiB5b3VyIFNlbnRyeSBjbGllbnQgb3B0aW9uc1xuICogLSBPdGhlcndpc2UsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgTk9UIHJlY29yZGVkIHVubGVzcyBleHBsaWNpdGx5IGVuYWJsZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyB3aGVuIHNlbmREZWZhdWx0UGlpIGlzIGZhbHNlXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5vcGVuQUlJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IHRydWUsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiB0cnVlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICpcbiAqIC8vIE5ldmVyIHJlY29yZCBpbnB1dHMvb3V0cHV0cyByZWdhcmRsZXNzIG9mIHNlbmREZWZhdWx0UGlpXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIHNlbmREZWZhdWx0UGlpOiB0cnVlLFxuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkub3BlbkFJSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiBmYWxzZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IGZhbHNlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5jb25zdCBvcGVuQUlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX29wZW5BaUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50T3BlbkFpID0gaW5zdHJ1bWVudE9wZW5BaTtcbmV4cG9ydHMub3BlbkFJSW50ZWdyYXRpb24gPSBvcGVuQUlJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=4.0.0 <6'];\n\n/**\n * Determines telemetry recording settings.\n */\nfunction determineRecordingSettings(\n  integrationOptions,\n  defaultEnabled,\n) {\n  const recordInputs = integrationOptions?.recordInputs ?? defaultEnabled;\n  const recordOutputs = integrationOptions?.recordOutputs ?? defaultEnabled;\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * Sentry OpenAI instrumentation using OpenTelemetry.\n */\nclass SentryOpenAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-openai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('openai', supportedVersions, this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the OpenAI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.OpenAI;\n\n    const WrappedOpenAI = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const integration = client?.getIntegrationByName(core.OPENAI_INTEGRATION_NAME);\n      const integrationOpts = integration?.options;\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const { recordInputs, recordOutputs } = determineRecordingSettings(integrationOpts, defaultPii);\n\n      return core.instrumentOpenAiClient(instance , {\n        recordInputs,\n        recordOutputs,\n      });\n    } ;\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedOpenAI, Original);\n    Object.setPrototypeOf(WrappedOpenAI.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedOpenAI, key, descriptor);\n        }\n      }\n    }\n\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    try {\n      exports.OpenAI = WrappedOpenAI;\n    } catch (error) {\n      // If direct assignment fails, override the property descriptor\n      Object.defineProperty(exports, 'OpenAI', {\n        value: WrappedOpenAI,\n        writable: true,\n        configurable: true,\n        enumerable: true,\n      });\n    }\n\n    // Wrap the default export if it points to the original constructor\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    if (exports.default === Original) {\n      try {\n        exports.default = WrappedOpenAI;\n      } catch (error) {\n        // If direct assignment fails, override the property descriptor\n        Object.defineProperty(exports, 'default', {\n          value: WrappedOpenAI,\n          writable: true,\n          configurable: true,\n          enumerable: true,\n        });\n      }\n    }\n    return exports;\n  }\n}\n\nexports.SentryOpenAiInstrumentation = SentryOpenAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxDQUFDLG9EQUFvRCx5Q0FBeUMsMENBQTBDLDhDQUE4QyxvREFBb0QscURBQXFELGlCQUFpQjs7QUFFaFQsd0JBQXdCLG1CQUFPLENBQUMscU1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyw4QkFBOEI7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9vcGVuYWkvaW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiU0VOVFJZX1JFTEVBU0VcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlCYXNlUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeU5leHRKc1ZlcnNpb25cIl0gPSBcIjE1LjUuNFwiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXJcIl0gPSBcIi5uZXh0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBzdXBwb3J0ZWRWZXJzaW9ucyA9IFsnPj00LjAuMCA8NiddO1xuXG4vKipcbiAqIERldGVybWluZXMgdGVsZW1ldHJ5IHJlY29yZGluZyBzZXR0aW5ncy5cbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lUmVjb3JkaW5nU2V0dGluZ3MoXG4gIGludGVncmF0aW9uT3B0aW9ucyxcbiAgZGVmYXVsdEVuYWJsZWQsXG4pIHtcbiAgY29uc3QgcmVjb3JkSW5wdXRzID0gaW50ZWdyYXRpb25PcHRpb25zPy5yZWNvcmRJbnB1dHMgPz8gZGVmYXVsdEVuYWJsZWQ7XG4gIGNvbnN0IHJlY29yZE91dHB1dHMgPSBpbnRlZ3JhdGlvbk9wdGlvbnM/LnJlY29yZE91dHB1dHMgPz8gZGVmYXVsdEVuYWJsZWQ7XG4gIHJldHVybiB7IHJlY29yZElucHV0cywgcmVjb3JkT3V0cHV0cyB9O1xufVxuXG4vKipcbiAqIFNlbnRyeSBPcGVuQUkgaW5zdHJ1bWVudGF0aW9uIHVzaW5nIE9wZW5UZWxlbWV0cnkuXG4gKi9cbmNsYXNzIFNlbnRyeU9wZW5BaUluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoJ0BzZW50cnkvaW5zdHJ1bWVudGF0aW9uLW9wZW5haScsIGNvcmUuU0RLX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGluc3RydW1lbnRhdGlvbiBieSBkZWZpbmluZyB0aGUgbW9kdWxlcyB0byBiZSBwYXRjaGVkLlxuICAgKi9cbiAgIGluaXQoKSB7XG4gICAgY29uc3QgbW9kdWxlID0gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbignb3BlbmFpJywgc3VwcG9ydGVkVmVyc2lvbnMsIHRoaXMuX3BhdGNoLmJpbmQodGhpcykpO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBwYXRjaCBsb2dpYyBhcHBseWluZyBpbnN0cnVtZW50YXRpb24gdG8gdGhlIE9wZW5BSSBjbGllbnQgY29uc3RydWN0b3IuXG4gICAqL1xuICAgX3BhdGNoKGV4cG9ydHMpIHtcbiAgICBjb25zdCBPcmlnaW5hbCA9IGV4cG9ydHMuT3BlbkFJO1xuXG4gICAgY29uc3QgV3JhcHBlZE9wZW5BSSA9IGZ1bmN0aW9uICggLi4uYXJncykge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBSZWZsZWN0LmNvbnN0cnVjdChPcmlnaW5hbCwgYXJncyk7XG4gICAgICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICAgICAgY29uc3QgaW50ZWdyYXRpb24gPSBjbGllbnQ/LmdldEludGVncmF0aW9uQnlOYW1lKGNvcmUuT1BFTkFJX0lOVEVHUkFUSU9OX05BTUUpO1xuICAgICAgY29uc3QgaW50ZWdyYXRpb25PcHRzID0gaW50ZWdyYXRpb24/Lm9wdGlvbnM7XG4gICAgICBjb25zdCBkZWZhdWx0UGlpID0gQm9vbGVhbihjbGllbnQ/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaSk7XG5cbiAgICAgIGNvbnN0IHsgcmVjb3JkSW5wdXRzLCByZWNvcmRPdXRwdXRzIH0gPSBkZXRlcm1pbmVSZWNvcmRpbmdTZXR0aW5ncyhpbnRlZ3JhdGlvbk9wdHMsIGRlZmF1bHRQaWkpO1xuXG4gICAgICByZXR1cm4gY29yZS5pbnN0cnVtZW50T3BlbkFpQ2xpZW50KGluc3RhbmNlICwge1xuICAgICAgICByZWNvcmRJbnB1dHMsXG4gICAgICAgIHJlY29yZE91dHB1dHMsXG4gICAgICB9KTtcbiAgICB9IDtcblxuICAgIC8vIFByZXNlcnZlIHN0YXRpYyBhbmQgcHJvdG90eXBlIGNoYWluc1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkT3BlbkFJLCBPcmlnaW5hbCk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFdyYXBwZWRPcGVuQUkucHJvdG90eXBlLCBPcmlnaW5hbC5wcm90b3R5cGUpO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT3JpZ2luYWwpKSB7XG4gICAgICBpZiAoIVsnbGVuZ3RoJywgJ25hbWUnLCAncHJvdG90eXBlJ10uaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPcmlnaW5hbCwga2V5KTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZE9wZW5BSSwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnN0cnVjdG9yIHJlcGxhY2VtZW50IC0gaGFuZGxlIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgLy8gVGhlIE9wZW5BSSBwcm9wZXJ0eSBtaWdodCBoYXZlIG9ubHkgYSBnZXR0ZXIsIHNvIHVzZSBkZWZpbmVQcm9wZXJ0eVxuICAgIHRyeSB7XG4gICAgICBleHBvcnRzLk9wZW5BSSA9IFdyYXBwZWRPcGVuQUk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElmIGRpcmVjdCBhc3NpZ25tZW50IGZhaWxzLCBvdmVycmlkZSB0aGUgcHJvcGVydHkgZGVzY3JpcHRvclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdPcGVuQUknLCB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVkT3BlbkFJLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV3JhcCB0aGUgZGVmYXVsdCBleHBvcnQgaWYgaXQgcG9pbnRzIHRvIHRoZSBvcmlnaW5hbCBjb25zdHJ1Y3RvclxuICAgIC8vIENvbnN0cnVjdG9yIHJlcGxhY2VtZW50IC0gaGFuZGxlIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgLy8gVGhlIE9wZW5BSSBwcm9wZXJ0eSBtaWdodCBoYXZlIG9ubHkgYSBnZXR0ZXIsIHNvIHVzZSBkZWZpbmVQcm9wZXJ0eVxuICAgIGlmIChleHBvcnRzLmRlZmF1bHQgPT09IE9yaWdpbmFsKSB7XG4gICAgICB0cnkge1xuICAgICAgICBleHBvcnRzLmRlZmF1bHQgPSBXcmFwcGVkT3BlbkFJO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gSWYgZGlyZWN0IGFzc2lnbm1lbnQgZmFpbHMsIG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZGVmYXVsdCcsIHtcbiAgICAgICAgICB2YWx1ZTogV3JhcHBlZE9wZW5BSSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzO1xuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5T3BlbkFpSW5zdHJ1bWVudGF0aW9uID0gU2VudHJ5T3BlbkFpSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsMEJBQTBCLG1CQUFPLENBQUMsNk1BQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25QZyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Bvc3RncmVzJztcblxuY29uc3QgaW5zdHJ1bWVudFBvc3RncmVzID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uUGcuUGdJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgICByZXF1ZXN0SG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLnBvc3RncmVzJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX3Bvc3RncmVzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFBvc3RncmVzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtwZ10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGcpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Bwb3N0Z3Jlc0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL3Bvc3RncmVzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkucG9zdGdyZXNJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHBvc3RncmVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wb3N0Z3Jlc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50UG9zdGdyZXM7XG5leHBvcnRzLnBvc3RncmVzSW50ZWdyYXRpb24gPSBwb3N0Z3Jlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdGdyZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\n// Instrumentation for https://github.com/porsager/postgres\n\nconst INTEGRATION_NAME = 'PostgresJs';\nconst SUPPORTED_VERSIONS = ['>=3.0.0 <4'];\n\nconst instrumentPostgresJs = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (options) =>\n    new PostgresJsInstrumentation({\n      requireParentSpan: options?.requireParentSpan ?? true,\n      requestHook: options?.requestHook,\n    }),\n);\n\n/**\n * Instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n * This instrumentation captures postgresjs queries and their attributes,\n */\nclass PostgresJsInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config) {\n    super('sentry-postgres-js', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation.\n   */\n   init() {\n    const instrumentationModule = new instrumentation.InstrumentationNodeModuleDefinition('postgres', SUPPORTED_VERSIONS);\n\n    ['src', 'cf/src', 'cjs/src'].forEach(path => {\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/connection.js`,\n          ['*'],\n          this._patchConnection.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/query.js`,\n          SUPPORTED_VERSIONS,\n          this._patchQuery.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n    });\n\n    return [instrumentationModule];\n  }\n\n  /**\n   * Determines whether a span should be created based on the current context.\n   * If `requireParentSpan` is set to true in the configuration, a span will\n   * only be created if there is a parent span available.\n   */\n   _shouldCreateSpans() {\n    const config = this.getConfig();\n    const hasParentSpan = api.trace.getSpan(api.context.active()) !== undefined;\n    return hasParentSpan || !config.requireParentSpan;\n  }\n\n  /**\n   * Patches the reject method of the Query class to set the span status and end it\n   */\n   _patchReject(rejectTarget, span) {\n    return new Proxy(rejectTarget, {\n      apply: (\n        rejectTarget,\n        rejectThisArg,\n        rejectArgs\n\n,\n      ) => {\n        span.setStatus({\n          code: core.SPAN_STATUS_ERROR,\n          // This message is the error message from the rejectArgs, when available\n          // e.g \"relation 'User' does not exist\"\n          message: rejectArgs?.[0]?.message || 'unknown_error',\n        });\n\n        const result = Reflect.apply(rejectTarget, rejectThisArg, rejectArgs);\n\n        // This status code is PG error code, e.g. '42P01' for \"relation does not exist\"\n        // https://www.postgresql.org/docs/current/errcodes-appendix.html\n        span.setAttribute(semanticConventions.ATTR_DB_RESPONSE_STATUS_CODE, rejectArgs?.[0]?.code || 'Unknown error');\n        // This is the error type, e.g. 'PostgresError' for a Postgres error\n        span.setAttribute(semanticConventions.ATTR_ERROR_TYPE, rejectArgs?.[0]?.name || 'Unknown error');\n\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the resolve method of the Query class to end the span when the query is resolved.\n   */\n   _patchResolve(resolveTarget, span) {\n    return new Proxy(resolveTarget, {\n      apply: (resolveTarget, resolveThisArg, resolveArgs) => {\n        const result = Reflect.apply(resolveTarget, resolveThisArg, resolveArgs);\n        const sqlCommand = resolveArgs?.[0]?.command;\n\n        if (sqlCommand) {\n          // SQL command is only available when the query is resolved successfully\n          span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, sqlCommand);\n        }\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the Query class to instrument the handle method.\n   */\n   _patchQuery(moduleExports\n\n) {\n    moduleExports.Query.prototype.handle = new Proxy(moduleExports.Query.prototype.handle, {\n      apply: async (\n        handleTarget,\n        handleThisArg\n\n,\n        handleArgs,\n      ) => {\n        if (!this._shouldCreateSpans()) {\n          // If we don't need to create spans, just call the original method\n          return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n        }\n\n        const sanitizedSqlQuery = this._sanitizeSqlQuery(handleThisArg.strings?.[0]);\n\n        return core.startSpanManual(\n          {\n            name: sanitizedSqlQuery || 'postgresjs.query',\n            op: 'db',\n          },\n          (span) => {\n            const scope = core.getCurrentScope();\n            const postgresConnectionContext = scope.getScopeData().contexts['postgresjsConnection']\n\n;\n\n            nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n\n            const { requestHook } = this.getConfig();\n\n            if (requestHook) {\n              instrumentation.safeExecuteInTheMiddle(\n                () => requestHook(span, sanitizedSqlQuery, postgresConnectionContext),\n                error => {\n                  if (error) {\n                    core.debug.error(`Error in requestHook for ${INTEGRATION_NAME} integration:`, error);\n                  }\n                },\n              );\n            }\n\n            // ATTR_DB_NAMESPACE is used to indicate the database name and the schema name\n            // It's only the database name as we don't have the schema information\n            const databaseName = postgresConnectionContext?.ATTR_DB_NAMESPACE || '<unknown database>';\n            const databaseHost = postgresConnectionContext?.ATTR_SERVER_ADDRESS || '<unknown host>';\n            const databasePort = postgresConnectionContext?.ATTR_SERVER_PORT || '<unknown port>';\n\n            span.setAttribute(semanticConventions.ATTR_DB_SYSTEM_NAME, 'postgres');\n            span.setAttribute(semanticConventions.ATTR_DB_NAMESPACE, databaseName);\n            span.setAttribute(semanticConventions.ATTR_SERVER_ADDRESS, databaseHost);\n            span.setAttribute(semanticConventions.ATTR_SERVER_PORT, databasePort);\n            span.setAttribute(semanticConventions.ATTR_DB_QUERY_TEXT, sanitizedSqlQuery);\n\n            handleThisArg.resolve = this._patchResolve(handleThisArg.resolve, span);\n            handleThisArg.reject = this._patchReject(handleThisArg.reject, span);\n\n            try {\n              return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n            } catch (error) {\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n              });\n              span.end();\n              throw error; // Re-throw the error to propagate it\n            }\n          },\n        );\n      },\n    });\n\n    return moduleExports;\n  }\n\n  /**\n   * Patches the Connection class to set the database, host, and port attributes\n   * when a new connection is created.\n   */\n   _patchConnection(Connection) {\n    return new Proxy(Connection, {\n      apply: (connectionTarget, thisArg, connectionArgs) => {\n        const databaseName = connectionArgs[0]?.database || '<unknown database>';\n        const databaseHost = connectionArgs[0]?.host?.[0] || '<unknown host>';\n        const databasePort = connectionArgs[0]?.port?.[0] || '<unknown port>';\n\n        const scope = core.getCurrentScope();\n        scope.setContext('postgresjsConnection', {\n          ATTR_DB_NAMESPACE: databaseName,\n          ATTR_SERVER_ADDRESS: databaseHost,\n          ATTR_SERVER_PORT: databasePort,\n        });\n\n        return Reflect.apply(connectionTarget, thisArg, connectionArgs);\n      },\n    });\n  }\n\n  /**\n   * Sanitize SQL query as per the OTEL semantic conventions\n   * https://opentelemetry.io/docs/specs/semconv/database/database-spans/#sanitization-of-dbquerytext\n   */\n   _sanitizeSqlQuery(sqlQuery) {\n    if (!sqlQuery) {\n      return 'Unknown SQL Query';\n    }\n\n    return (\n      sqlQuery\n        .replace(/\\s+/g, ' ')\n        .trim() // Remove extra spaces including newlines and trim\n        .substring(0, 1024) // Truncate to 1024 characters\n        .replace(/--.*?(\\r?\\n|$)/g, '') // Single line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Multi-line comments\n        .replace(/;\\s*$/, '') // Remove trailing semicolons\n        .replace(/\\b\\d+\\b/g, '?') // Replace standalone numbers\n        // Collapse whitespace to a single space\n        .replace(/\\s+/g, ' ')\n        // Collapse IN and in clauses\n        // eg. IN (?, ?, ?, ?) to IN (?)\n        .replace(/\\bIN\\b\\s*\\(\\s*\\?(?:\\s*,\\s*\\?)*\\s*\\)/g, 'IN (?)')\n    );\n  }\n}\n\nconst _postgresJsIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgresJs();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresJsIntegration()],\n * });\n * ```\n */\n\nconst postgresJsIntegration = core.defineIntegration(_postgresJsIntegration);\n\nexports.PostgresJsInstrumentation = PostgresJsInstrumentation;\nexports.instrumentPostgresJs = instrumentPostgresJs;\nexports.postgresJsIntegration = postgresJsIntegration;\n//# sourceMappingURL=postgresjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@prisma+instrumentation@6.15.0_@opentelemetry+api@1.9.0/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nfunction isPrismaV6TracingHelper(helper) {\n  return !!helper && typeof helper === 'object' && 'dispatchEngineSpans' in helper;\n}\n\nfunction getPrismaTracingHelper() {\n  const prismaInstrumentationObject = (globalThis ).PRISMA_INSTRUMENTATION;\n  const prismaTracingHelper =\n    prismaInstrumentationObject &&\n    typeof prismaInstrumentationObject === 'object' &&\n    'helper' in prismaInstrumentationObject\n      ? prismaInstrumentationObject.helper\n      : undefined;\n\n  return prismaTracingHelper;\n}\n\nclass SentryPrismaInteropInstrumentation extends instrumentation.PrismaInstrumentation {\n   constructor() {\n    super();\n  }\n\n   enable() {\n    super.enable();\n\n    // The PrismaIntegration (super class) defines a global variable `global[\"PRISMA_INSTRUMENTATION\"]` when `enable()` is called. This global variable holds a \"TracingHelper\" which Prisma uses internally to create tracing data. It's their way of not depending on OTEL with their main package. The sucky thing is, prisma broke the interface of the tracing helper with the v6 major update. This means that if you use Prisma 5 with the v6 instrumentation (or vice versa) Prisma just blows up, because tries to call methods on the helper that no longer exist.\n    // Because we actually want to use the v6 instrumentation and not blow up in Prisma 5 user's faces, what we're doing here is backfilling the v5 method (`createEngineSpan`) with a noop so that no longer crashes when it attempts to call that function.\n    const prismaTracingHelper = getPrismaTracingHelper();\n\n    if (isPrismaV6TracingHelper(prismaTracingHelper)) {\n      // Inspired & adjusted from https://github.com/prisma/prisma/tree/5.22.0/packages/instrumentation\n      (prismaTracingHelper ).createEngineSpan = (\n        engineSpanEvent,\n      ) => {\n        const tracer = api.trace.getTracer('prismaV5Compatibility') ;\n\n        // Prisma v5 relies on being able to create spans with a specific span & trace ID\n        // this is no longer possible in OTEL v2, there is no public API to do this anymore\n        // So in order to kind of hack this possibility, we rely on the internal `_idGenerator` property\n        // This is used to generate the random IDs, and we overwrite this temporarily to generate static IDs\n        // This is flawed and may not work, e.g. if the code is bundled and the private property is renamed\n        // in such cases, these spans will not be captured and some Prisma spans will be missing\n        const initialIdGenerator = tracer._idGenerator;\n\n        if (!initialIdGenerator) {\n          core.consoleSandbox(() => {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[Sentry] Could not find _idGenerator on tracer, skipping Prisma v5 compatibility - some Prisma spans may be missing!',\n            );\n          });\n\n          return;\n        }\n\n        try {\n          engineSpanEvent.spans.forEach(engineSpan => {\n            const kind = engineSpanKindToOTELSpanKind(engineSpan.kind);\n\n            const parentSpanId = engineSpan.parent_span_id;\n            const spanId = engineSpan.span_id;\n            const traceId = engineSpan.trace_id;\n\n            const links = engineSpan.links?.map(link => {\n              return {\n                context: {\n                  traceId: link.trace_id,\n                  spanId: link.span_id,\n                  traceFlags: api.TraceFlags.SAMPLED,\n                },\n              };\n            });\n\n            const ctx = api.trace.setSpanContext(api.context.active(), {\n              traceId,\n              spanId: parentSpanId,\n              traceFlags: api.TraceFlags.SAMPLED,\n            });\n\n            api.context.with(ctx, () => {\n              const temporaryIdGenerator = {\n                generateTraceId: () => {\n                  return traceId;\n                },\n                generateSpanId: () => {\n                  return spanId;\n                },\n              };\n\n              tracer._idGenerator = temporaryIdGenerator;\n\n              const span = tracer.startSpan(engineSpan.name, {\n                kind,\n                links,\n                startTime: engineSpan.start_time,\n                attributes: engineSpan.attributes,\n              });\n\n              span.end(engineSpan.end_time);\n\n              tracer._idGenerator = initialIdGenerator;\n            });\n          });\n        } finally {\n          // Ensure we always restore this at the end, even if something errors\n          tracer._idGenerator = initialIdGenerator;\n        }\n      };\n    }\n  }\n}\n\nfunction engineSpanKindToOTELSpanKind(engineSpanKind) {\n  switch (engineSpanKind) {\n    case 'client':\n      return api.SpanKind.CLIENT;\n    case 'internal':\n    default: // Other span kinds aren't currently supported\n      return api.SpanKind.INTERNAL;\n  }\n}\n\nconst instrumentPrisma = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, _options => {\n  return new SentryPrismaInteropInstrumentation();\n});\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * NOTE: By default, this integration works with Prisma version 6.\n * To get performance instrumentation for other Prisma versions,\n * 1. Install the `@prisma/instrumentation` package with the desired version.\n * 1. Pass a `new PrismaInstrumentation()` instance as exported from `@prisma/instrumentation` to the `prismaInstrumentation` option of this integration:\n *\n *    ```js\n *    import { PrismaInstrumentation } from '@prisma/instrumentation'\n *\n *    Sentry.init({\n *      integrations: [\n *        prismaIntegration({\n *          // Override the default instrumentation that Sentry uses\n *          prismaInstrumentation: new PrismaInstrumentation()\n *        })\n *      ]\n *    })\n *    ```\n *\n *    The passed instrumentation instance will override the default instrumentation instance the integration would use, while the `prismaIntegration` will still ensure data compatibility for the various Prisma versions.\n * 1. Depending on your Prisma version (prior to version 6), add `previewFeatures = [\"tracing\"]` to the client generator block of your Prisma schema:\n *\n *    ```\n *    generator client {\n *      provider = \"prisma-client-js\"\n *      previewFeatures = [\"tracing\"]\n *    }\n *    ```\n */\nconst prismaIntegration = core.defineIntegration((_options) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n    setup(client) {\n      // If no tracing helper exists, we skip any work here\n      // this means that prisma is not being used\n      if (!getPrismaTracingHelper()) {\n        return;\n      }\n\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (spanJSON.description?.startsWith('prisma:')) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        // Make sure we use the query text as the span name, for ex. SELECT * FROM \"User\" WHERE \"id\" = $1\n        if (spanJSON.description === 'prisma:engine:db_query' && spanJSON.data['db.query.text']) {\n          span.updateName(spanJSON.data['db.query.text'] );\n        }\n\n        // In Prisma v5.22+, the `db.system` attribute is automatically set\n        // On older versions, this is missing, so we add it here\n        if (spanJSON.description === 'prisma:engine:db_query' && !spanJSON.data['db.system']) {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n});\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis = __webpack_require__(/*! @opentelemetry/instrumentation-redis */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_redisOptions.cachePrefixes ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = core.spanToJSON(span).data['net.peer.name'];\n  const networkPeerPort = core.spanToJSON(span).data['net.peer.port'];\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.IORedis`, () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedisModule = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.Redis`, () => {\n  return new instrumentationRedis.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedisModule();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLDZCQUE2QixtQkFBTyxDQUFDLHNOQUFzQztBQUMzRSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsb09BQW1CO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLDBMQUEyQjs7QUFFdEQ7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtGQUFrRjtBQUMzRzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQSw2REFBNkQsaUJBQWlCO0FBQzlFO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCxpRUFBaUUsaUJBQWlCO0FBQ2xGO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDO0FBQ3hDLEdBQUc7QUFDSCxJQUFJLHNCQUFzQjtBQUMxQjs7QUFFQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3JlZGlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Jb3JlZGlzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWlvcmVkaXMnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvblJlZGlzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCByZWRpc0NhY2hlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmVkaXNDYWNoZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1JlZGlzJztcblxubGV0IF9yZWRpc09wdGlvbnMgPSB7fTtcblxuY29uc3QgY2FjaGVSZXNwb25zZUhvb2sgPSAoc3BhbiwgcmVkaXNDb21tYW5kLCBjbWRBcmdzLCByZXNwb25zZSkgPT4ge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnJlZGlzJyk7XG5cbiAgY29uc3Qgc2FmZUtleSA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVLZXlTYWZlbHkocmVkaXNDb21tYW5kLCBjbWRBcmdzKTtcbiAgY29uc3QgY2FjaGVPcGVyYXRpb24gPSByZWRpc0NhY2hlLmdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCk7XG5cbiAgaWYgKFxuICAgICFzYWZlS2V5IHx8XG4gICAgIWNhY2hlT3BlcmF0aW9uIHx8XG4gICAgIV9yZWRpc09wdGlvbnMuY2FjaGVQcmVmaXhlcyB8fFxuICAgICFyZWRpc0NhY2hlLnNob3VsZENvbnNpZGVyRm9yQ2FjaGUocmVkaXNDb21tYW5kLCBzYWZlS2V5LCBfcmVkaXNPcHRpb25zLmNhY2hlUHJlZml4ZXMpXG4gICkge1xuICAgIC8vIG5vdCByZWxldmFudCBmb3IgY2FjaGVcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBvdGVsL2lvcmVkaXMgc2VlbXMgdG8gYmUgdXNpbmcgdGhlIG9sZCBzdGFuZGFyZCwgYXMgdGhlcmUgd2FzIGEgY2hhbmdlIHRvIHRob3NlIHBhcmFtczogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktc3BlY2lmaWNhdGlvbi9pc3N1ZXMvMzE5OVxuICAvLyBXZSBhcmUgdXNpbmcgcGFyYW1zIGJhc2VkIG9uIHRoZSBkb2NzOiBodHRwczovL29wZW50ZWxlbWV0cnkuaW8vZG9jcy9zcGVjcy9zZW1jb252L2F0dHJpYnV0ZXMtcmVnaXN0cnkvbmV0d29yay9cbiAgY29uc3QgbmV0d29ya1BlZXJBZGRyZXNzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGFbJ25ldC5wZWVyLm5hbWUnXTtcbiAgY29uc3QgbmV0d29ya1BlZXJQb3J0ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGFbJ25ldC5wZWVyLnBvcnQnXTtcbiAgaWYgKG5ldHdvcmtQZWVyUG9ydCAmJiBuZXR3b3JrUGVlckFkZHJlc3MpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZXMoeyAnbmV0d29yay5wZWVyLmFkZHJlc3MnOiBuZXR3b3JrUGVlckFkZHJlc3MsICduZXR3b3JrLnBlZXIucG9ydCc6IG5ldHdvcmtQZWVyUG9ydCB9KTtcbiAgfVxuXG4gIGNvbnN0IGNhY2hlSXRlbVNpemUgPSByZWRpc0NhY2hlLmNhbGN1bGF0ZUNhY2hlSXRlbVNpemUocmVzcG9uc2UpO1xuXG4gIGlmIChjYWNoZUl0ZW1TaXplKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFLCBjYWNoZUl0ZW1TaXplKTtcbiAgfVxuXG4gIGlmIChyZWRpc0NhY2hlLmlzSW5Db21tYW5kcyhyZWRpc0NhY2hlLkdFVF9DT01NQU5EUywgcmVkaXNDb21tYW5kKSAmJiBjYWNoZUl0ZW1TaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQsIGNhY2hlSXRlbVNpemUgPiAwKTtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGNhY2hlT3BlcmF0aW9uLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9LRVldOiBzYWZlS2V5LFxuICB9KTtcblxuICBjb25zdCBzcGFuRGVzY3JpcHRpb24gPSBzYWZlS2V5LmpvaW4oJywgJyk7XG5cbiAgc3Bhbi51cGRhdGVOYW1lKGNvcmUudHJ1bmNhdGUoc3BhbkRlc2NyaXB0aW9uLCAxMDI0KSk7XG59O1xuXG5jb25zdCBpbnN0cnVtZW50SU9SZWRpcyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoYCR7SU5URUdSQVRJT05fTkFNRX0uSU9SZWRpc2AsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25Jb3JlZGlzLklPUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbmNvbnN0IGluc3RydW1lbnRSZWRpc01vZHVsZSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoYCR7SU5URUdSQVRJT05fTkFNRX0uUmVkaXNgLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uUmVkaXMuUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbi8qKiBUbyBiZSBhYmxlIHRvIHByZWxvYWQgYWxsIFJlZGlzIE9UZWwgaW5zdHJ1bWVudGF0aW9ucyB3aXRoIGp1c3Qgb25lIElEIChcIlJlZGlzXCIpLCBhbGwgdGhlIGluc3RydW1lbnRhdGlvbnMgYXJlIGdlbmVyYXRlZCBpbiB0aGlzIG9uZSBmdW5jdGlvbiAgKi9cbmNvbnN0IGluc3RydW1lbnRSZWRpcyA9IE9iamVjdC5hc3NpZ24oXG4gICgpID0+IHtcbiAgICBpbnN0cnVtZW50SU9SZWRpcygpO1xuICAgIGluc3RydW1lbnRSZWRpc01vZHVsZSgpO1xuXG4gICAgLy8gdG9kbzogaW1wbGVtZW50IHRoZW0gZ3JhZHVhbGx5XG4gICAgLy8gbmV3IExlZ2FjeVJlZGlzSW5zdHJ1bWVudGF0aW9uKHt9KSxcbiAgfSxcbiAgeyBpZDogSU5URUdSQVRJT05fTkFNRSB9LFxuKTtcblxuY29uc3QgX3JlZGlzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgX3JlZGlzT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpbnN0cnVtZW50UmVkaXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3JlZGlzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yZWRpcykgYW5kXG4gKiBbaW9yZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW9yZWRpcykgbGlicmFyaWVzLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcmVkaXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9yZWRpcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnJlZGlzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCByZWRpc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcmVkaXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFJlZGlzID0gaW5zdHJ1bWVudFJlZGlzO1xuZXhwb3J0cy5yZWRpc0ludGVncmF0aW9uID0gcmVkaXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.23.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentTedious();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { description, data } = core.spanToJSON(span);\n          // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n          if (!description || data['db.system'] !== 'mssql') {\n            return;\n          }\n\n          const operation = description.split(' ')[0] || '';\n          if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxzSUFBc0k7O0FBRXRJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy90ZWRpb3VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25UZWRpb3VzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXRlZGlvdXMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgVEVESVVTX0lOU1RSVU1FTlRFRF9NRVRIT0RTID0gbmV3IFNldChbXG4gICdjYWxsUHJvY2VkdXJlJyxcbiAgJ2V4ZWNTcWwnLFxuICAnZXhlY1NxbEJhdGNoJyxcbiAgJ2V4ZWNCdWxrTG9hZCcsXG4gICdwcmVwYXJlJyxcbiAgJ2V4ZWN1dGUnLFxuXSk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnVGVkaW91cyc7XG5cbmNvbnN0IGluc3RydW1lbnRUZWRpb3VzID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uVGVkaW91cy5UZWRpb3VzSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF90ZWRpb3VzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50VGVkaW91cygpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBkYXRhIH0gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgICAgLy8gVGVkaXVzIGludGVncmF0aW9uIGFsd2F5cyBzZXQgYSBzcGFuIG5hbWUgYW5kIGBkYi5zeXN0ZW1gIGF0dHJpYnV0ZSB0byBgbXNzcWxgLlxuICAgICAgICAgIGlmICghZGVzY3JpcHRpb24gfHwgZGF0YVsnZGIuc3lzdGVtJ10gIT09ICdtc3NxbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBkZXNjcmlwdGlvbi5zcGxpdCgnICcpWzBdIHx8ICcnO1xuICAgICAgICAgIGlmIChURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMuaGFzKG9wZXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwudGVkaW91cycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbdGVkaW91c10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGVkaW91cykgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHRlZGlvdXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy90ZWRpb3VzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkudGVkaW91c0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgdGVkaW91c0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfdGVkaW91c0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50VGVkaW91cyA9IGluc3RydW1lbnRUZWRpb3VzO1xuZXhwb3J0cy50ZWRpb3VzSW50ZWdyYXRpb24gPSB0ZWRpb3VzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZWRpb3VzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFOztBQUVBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy92ZXJjZWxhaS9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnVmVyY2VsQUknO1xuXG5leHBvcnRzLklOVEVHUkFUSU9OX05BTUUgPSBJTlRFR1JBVElPTl9OQU1FO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\");\n\nconst instrumentVercelAi = nodeCore.generateInstrumentOnce(constants.INTEGRATION_NAME, () => new instrumentation.SentryVercelAiInstrumentation({}));\n\n/**\n * Determines if the integration should be forced based on environment and package availability.\n * Returns true if the 'ai' package is available.\n */\nfunction shouldForceIntegration(client) {\n  const modules = client.getIntegrationByName('Modules');\n  return !!modules?.getModules?.()?.ai;\n}\n\nconst _vercelAIIntegration = ((options = {}) => {\n  let instrumentation;\n\n  return {\n    name: constants.INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentation = instrumentVercelAi();\n    },\n    afterAllSetup(client) {\n      // Auto-detect if we should force the integration when running with 'ai' package available\n      // Note that this can only be detected if the 'Modules' integration is available, and running in CJS mode\n      const shouldForce = options.force ?? shouldForceIntegration(client);\n\n      if (shouldForce) {\n        core.addVercelAiProcessors(client);\n      } else {\n        instrumentation?.callWhenPatched(() => core.addVercelAiProcessors(client));\n      }\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n * This integration is not enabled by default, you need to manually add it.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * This integration adds tracing support to all `ai` function calls.\n * You need to opt-in to collecting spans for a specific call,\n * you can do so by setting `experimental_telemetry.isEnabled` to `true` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: true },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nconst vercelAIIntegration = core.defineIntegration(_vercelAIIntegration);\n\nexports.instrumentVercelAi = instrumentVercelAi;\nexports.vercelAIIntegration = vercelAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyxzTUFBZ0I7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsa05BQXNCOztBQUV0RCxpSkFBaUo7O0FBRWpKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBEQUEwRDtBQUN4RixJQUFJO0FBQ0o7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ZlcmNlbGFpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgaW5zdHJ1bWVudFZlcmNlbEFpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShjb25zdGFudHMuSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbi5TZW50cnlWZXJjZWxBaUluc3RydW1lbnRhdGlvbih7fSkpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGludGVncmF0aW9uIHNob3VsZCBiZSBmb3JjZWQgYmFzZWQgb24gZW52aXJvbm1lbnQgYW5kIHBhY2thZ2UgYXZhaWxhYmlsaXR5LlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSAnYWknIHBhY2thZ2UgaXMgYXZhaWxhYmxlLlxuICovXG5mdW5jdGlvbiBzaG91bGRGb3JjZUludGVncmF0aW9uKGNsaWVudCkge1xuICBjb25zdCBtb2R1bGVzID0gY2xpZW50LmdldEludGVncmF0aW9uQnlOYW1lKCdNb2R1bGVzJyk7XG4gIHJldHVybiAhIW1vZHVsZXM/LmdldE1vZHVsZXM/LigpPy5haTtcbn1cblxuY29uc3QgX3ZlcmNlbEFJSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogY29uc3RhbnRzLklOVEVHUkFUSU9OX05BTUUsXG4gICAgb3B0aW9ucyxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50VmVyY2VsQWkoKTtcbiAgICB9LFxuICAgIGFmdGVyQWxsU2V0dXAoY2xpZW50KSB7XG4gICAgICAvLyBBdXRvLWRldGVjdCBpZiB3ZSBzaG91bGQgZm9yY2UgdGhlIGludGVncmF0aW9uIHdoZW4gcnVubmluZyB3aXRoICdhaScgcGFja2FnZSBhdmFpbGFibGVcbiAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGNhbiBvbmx5IGJlIGRldGVjdGVkIGlmIHRoZSAnTW9kdWxlcycgaW50ZWdyYXRpb24gaXMgYXZhaWxhYmxlLCBhbmQgcnVubmluZyBpbiBDSlMgbW9kZVxuICAgICAgY29uc3Qgc2hvdWxkRm9yY2UgPSBvcHRpb25zLmZvcmNlID8/IHNob3VsZEZvcmNlSW50ZWdyYXRpb24oY2xpZW50KTtcblxuICAgICAgaWYgKHNob3VsZEZvcmNlKSB7XG4gICAgICAgIGNvcmUuYWRkVmVyY2VsQWlQcm9jZXNzb3JzKGNsaWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0cnVtZW50YXRpb24/LmNhbGxXaGVuUGF0Y2hlZCgoKSA9PiBjb3JlLmFkZFZlcmNlbEFpUHJvY2Vzc29ycyhjbGllbnQpKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2FpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9haSkgbGlicmFyeS5cbiAqIFRoaXMgaW50ZWdyYXRpb24gaXMgbm90IGVuYWJsZWQgYnkgZGVmYXVsdCwgeW91IG5lZWQgdG8gbWFudWFsbHkgYWRkIGl0LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgYWlgIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vc2RrLnZlcmNlbC5haS9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkudmVyY2VsQUlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogVGhpcyBpbnRlZ3JhdGlvbiBhZGRzIHRyYWNpbmcgc3VwcG9ydCB0byBhbGwgYGFpYCBmdW5jdGlvbiBjYWxscy5cbiAqIFlvdSBuZWVkIHRvIG9wdC1pbiB0byBjb2xsZWN0aW5nIHNwYW5zIGZvciBhIHNwZWNpZmljIGNhbGwsXG4gKiB5b3UgY2FuIGRvIHNvIGJ5IHNldHRpbmcgYGV4cGVyaW1lbnRhbF90ZWxlbWV0cnkuaXNFbmFibGVkYCB0byBgdHJ1ZWAgaW4gdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRlVGV4dCh7XG4gKiAgIG1vZGVsOiBvcGVuYWkoJ2dwdC00LXR1cmJvJyksXG4gKiAgIGV4cGVyaW1lbnRhbF90ZWxlbWV0cnk6IHsgaXNFbmFibGVkOiB0cnVlIH0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIElmIHlvdSB3YW50IHRvIGNvbGxlY3QgaW5wdXRzIGFuZCBvdXRwdXRzIGZvciBhIHNwZWNpZmljIGNhbGwsIHlvdSBtdXN0IHNwZWNpZmljYWxseSBvcHQtaW4gdG8gZWFjaFxuICogZnVuY3Rpb24gY2FsbCBieSBzZXR0aW5nIGBleHBlcmltZW50YWxfdGVsZW1ldHJ5LnJlY29yZElucHV0c2AgYW5kIGBleHBlcmltZW50YWxfdGVsZW1ldHJ5LnJlY29yZE91dHB1dHNgXG4gKiB0byBgdHJ1ZWAuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2VuZXJhdGVUZXh0KHtcbiAqICBtb2RlbDogb3BlbmFpKCdncHQtNC10dXJibycpLFxuICogIGV4cGVyaW1lbnRhbF90ZWxlbWV0cnk6IHsgaXNFbmFibGVkOiB0cnVlLCByZWNvcmRJbnB1dHM6IHRydWUsIHJlY29yZE91dHB1dHM6IHRydWUgfSxcbiAqIH0pO1xuICovXG5jb25zdCB2ZXJjZWxBSUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfdmVyY2VsQUlJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFZlcmNlbEFpID0gaW5zdHJ1bWVudFZlcmNlbEFpO1xuZXhwb3J0cy52ZXJjZWxBSUludGVncmF0aW9uID0gdmVyY2VsQUlJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js ***!
  \**************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\n\n// List of patched methods\n// From: https://sdk.vercel.ai/docs/ai-sdk-core/telemetry#collected-data\nconst INSTRUMENTED_METHODS = [\n  'generateText',\n  'streamText',\n  'generateObject',\n  'streamObject',\n  'embed',\n  'embedMany',\n] ;\n\nfunction isToolError(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const candidate = obj ;\n  return (\n    'type' in candidate &&\n    'error' in candidate &&\n    'toolName' in candidate &&\n    'toolCallId' in candidate &&\n    candidate.type === 'tool-error' &&\n    candidate.error instanceof Error\n  );\n}\n\n/**\n * Check for tool errors in the result and capture them\n * Tool errors are not rejected in Vercel V5, it is added as metadata to the result content\n */\nfunction checkResultForToolErrors(result) {\n  if (typeof result !== 'object' || result === null || !('content' in result)) {\n    return;\n  }\n\n  const resultObj = result ;\n  if (!Array.isArray(resultObj.content)) {\n    return;\n  }\n\n  for (const item of resultObj.content) {\n    if (isToolError(item)) {\n      // Try to get the span associated with this tool call ID\n      const associatedSpan = core._INTERNAL_getSpanForToolCallId(item.toolCallId) ;\n\n      if (associatedSpan) {\n        // We have the span, so link the error using span and trace IDs from the span\n        const spanContext = associatedSpan.spanContext();\n\n        core.withScope(scope => {\n          // Set the span and trace context for proper linking\n          scope.setContext('trace', {\n            trace_id: spanContext.traceId,\n            span_id: spanContext.spanId,\n          });\n\n          scope.setTag('vercel.ai.tool.name', item.toolName);\n          scope.setTag('vercel.ai.tool.callId', item.toolCallId);\n\n          scope.setLevel('error');\n\n          core.captureException(item.error, {\n            mechanism: {\n              type: 'auto.vercelai.otel',\n              handled: false,\n            },\n          });\n        });\n\n        // Clean up the span mapping since we've processed this tool error\n        // We won't get multiple { type: 'tool-error' } parts for the same toolCallId.\n        core._INTERNAL_cleanupToolCallSpan(item.toolCallId);\n      } else {\n        // Fallback: capture without span linking\n        core.withScope(scope => {\n          scope.setTag('vercel.ai.tool.name', item.toolName);\n          scope.setTag('vercel.ai.tool.callId', item.toolCallId);\n          scope.setLevel('error');\n\n          core.captureException(item.error, {\n            mechanism: {\n              type: 'auto.vercelai.otel',\n              handled: false,\n            },\n          });\n        });\n      }\n    }\n  }\n}\n\n/**\n * Determines whether to record inputs and outputs for Vercel AI telemetry based on the configuration hierarchy.\n *\n * The order of precedence is:\n * 1. The vercel ai integration options\n * 2. The experimental_telemetry options in the vercel ai method calls\n * 3. When telemetry is explicitly enabled (isEnabled: true), default to recording\n * 4. Otherwise, use the sendDefaultPii option from client options\n */\nfunction determineRecordingSettings(\n  integrationRecordingOptions,\n  methodTelemetryOptions,\n  telemetryExplicitlyEnabled,\n  defaultRecordingEnabled,\n) {\n  const recordInputs =\n    integrationRecordingOptions?.recordInputs !== undefined\n      ? integrationRecordingOptions.recordInputs\n      : methodTelemetryOptions.recordInputs !== undefined\n        ? methodTelemetryOptions.recordInputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  const recordOutputs =\n    integrationRecordingOptions?.recordOutputs !== undefined\n      ? integrationRecordingOptions.recordOutputs\n      : methodTelemetryOptions.recordOutputs !== undefined\n        ? methodTelemetryOptions.recordOutputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * This detects is added by the Sentry Vercel AI Integration to detect if the integration should\n * be enabled.\n *\n * It also patches the `ai` module to enable Vercel AI telemetry automatically for all methods.\n */\nclass SentryVercelAiInstrumentation extends instrumentation.InstrumentationBase {\n   __init() {this._isPatched = false;}\n   __init2() {this._callbacks = [];}\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-vercel-ai', core.SDK_VERSION, config);SentryVercelAiInstrumentation.prototype.__init.call(this);SentryVercelAiInstrumentation.prototype.__init2.call(this);  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('ai', ['>=3.0.0 <6'], this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Call the provided callback when the module is patched.\n   * If it has already been patched, the callback will be called immediately.\n   */\n   callWhenPatched(callback) {\n    if (this._isPatched) {\n      callback();\n    } else {\n      this._callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Patches module exports to enable Vercel AI telemetry.\n   */\n   _patch(moduleExports) {\n    this._isPatched = true;\n\n    this._callbacks.forEach(callback => callback());\n    this._callbacks = [];\n\n    const generatePatch = (originalMethod) => {\n      return new Proxy(originalMethod, {\n        apply: (target, thisArg, args) => {\n          const existingExperimentalTelemetry = args[0].experimental_telemetry || {};\n          const isEnabled = existingExperimentalTelemetry.isEnabled;\n\n          const client = core.getClient();\n          const integration = client?.getIntegrationByName(constants.INTEGRATION_NAME);\n          const integrationOptions = integration?.options;\n          const shouldRecordInputsAndOutputs = integration ? Boolean(client?.getOptions().sendDefaultPii) : false;\n\n          const { recordInputs, recordOutputs } = determineRecordingSettings(\n            integrationOptions,\n            existingExperimentalTelemetry,\n            isEnabled,\n            shouldRecordInputsAndOutputs,\n          );\n\n          args[0].experimental_telemetry = {\n            ...existingExperimentalTelemetry,\n            isEnabled: isEnabled !== undefined ? isEnabled : true,\n            recordInputs,\n            recordOutputs,\n          };\n\n          return core.handleCallbackErrors(\n            () => Reflect.apply(target, thisArg, args),\n            error => {\n              // This error bubbles up to unhandledrejection handler (if not handled before),\n              // where we do not know the active span anymore\n              // So to circumvent this, we set the active span on the error object\n              // which is picked up by the unhandledrejection handler\n              if (error && typeof error === 'object') {\n                core.addNonEnumerableProperty(error, '_sentry_active_span', core.getActiveSpan());\n              }\n            },\n            () => {},\n            result => {\n              checkResultForToolErrors(result);\n            },\n          );\n        },\n      });\n    };\n\n    // Is this an ESM module?\n    // https://tc39.es/ecma262/#sec-module-namespace-objects\n    if (Object.prototype.toString.call(moduleExports) === '[object Module]') {\n      // In ESM we take the usual route and just replace the exports we want to instrument\n      for (const method of INSTRUMENTED_METHODS) {\n        moduleExports[method] = generatePatch(moduleExports[method]);\n      }\n\n      return moduleExports;\n    } else {\n      // In CJS we can't replace the exports in the original module because they\n      // don't have setters, so we create a new object with the same properties\n      const patchedModuleExports = INSTRUMENTED_METHODS.reduce((acc, curr) => {\n        acc[curr] = generatePatch(moduleExports[curr]);\n        return acc;\n      }, {} );\n\n      return { ...moduleExports, ...patchedModuleExports };\n    }\n  }\n}\n\nexports.SentryVercelAiInstrumentation = SentryVercelAiInstrumentation;\nexports.determineRecordingSettings = determineRecordingSettings;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst http = __webpack_require__(/*! ../integrations/http.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  const nodeCoreIntegrations = nodeCore.getDefaultIntegrations();\n\n  // Filter out the node-core HTTP and NodeFetch integrations and replace them with Node SDK's composite versions\n  return nodeCoreIntegrations\n    .filter(integration => integration.name !== 'Http' && integration.name !== 'NodeFetch')\n    .concat(http.httpIntegration(), nodeFetch.nativeNodeFetchIntegration());\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(core.hasSpansEnabled(options) ? index.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Internal initialization function.\n */\nfunction _init(\n  options = {},\n  getDefaultIntegrationsImpl,\n) {\n  core.applySdkMetadata(options, 'node');\n\n  const client = nodeCore.init({\n    ...options,\n    // Only use Node SDK defaults if none provided\n    defaultIntegrations: options.defaultIntegrations ?? getDefaultIntegrationsImpl(options),\n  });\n\n  // Add Node SDK specific OpenTelemetry setup\n  if (client && !options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client, {\n      spanProcessors: options.openTelemetrySpanProcessors,\n    });\n    nodeCore.validateOpenTelemetrySetup();\n  }\n\n  return client;\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLHlMQUF5QjtBQUM5QyxrQkFBa0IsbUJBQU8sQ0FBQyxxTUFBK0I7QUFDekQsY0FBYyxtQkFBTyxDQUFDLDJNQUFrQztBQUN4RCxpQkFBaUIsbUJBQU8sQ0FBQywwS0FBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCLGdEQUFnRDtBQUNoRCxZQUFZO0FBQ1osc0NBQXNDO0FBQ3RDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9odHRwLmpzJyk7XG5jb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvbm9kZS1mZXRjaC5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvdHJhY2luZy9pbmRleC5qcycpO1xuY29uc3QgaW5pdE90ZWwgPSByZXF1aXJlKCcuL2luaXRPdGVsLmpzJyk7XG5cbi8qKlxuICogR2V0IGRlZmF1bHQgaW50ZWdyYXRpb25zLCBleGNsdWRpbmcgcGVyZm9ybWFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2UoKSB7XG4gIGNvbnN0IG5vZGVDb3JlSW50ZWdyYXRpb25zID0gbm9kZUNvcmUuZ2V0RGVmYXVsdEludGVncmF0aW9ucygpO1xuXG4gIC8vIEZpbHRlciBvdXQgdGhlIG5vZGUtY29yZSBIVFRQIGFuZCBOb2RlRmV0Y2ggaW50ZWdyYXRpb25zIGFuZCByZXBsYWNlIHRoZW0gd2l0aCBOb2RlIFNESydzIGNvbXBvc2l0ZSB2ZXJzaW9uc1xuICByZXR1cm4gbm9kZUNvcmVJbnRlZ3JhdGlvbnNcbiAgICAuZmlsdGVyKGludGVncmF0aW9uID0+IGludGVncmF0aW9uLm5hbWUgIT09ICdIdHRwJyAmJiBpbnRlZ3JhdGlvbi5uYW1lICE9PSAnTm9kZUZldGNoJylcbiAgICAuY29uY2F0KGh0dHAuaHR0cEludGVncmF0aW9uKCksIG5vZGVGZXRjaC5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbigpKTtcbn1cblxuLyoqIEdldCB0aGUgZGVmYXVsdCBpbnRlZ3JhdGlvbnMgZm9yIHRoZSBOb2RlIFNESy4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gW1xuICAgIC4uLmdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2UoKSxcbiAgICAvLyBXZSBvbmx5IGFkZCBwZXJmb3JtYW5jZSBpbnRlZ3JhdGlvbnMgaWYgdHJhY2luZyBpcyBlbmFibGVkXG4gICAgLy8gTm90ZSB0aGF0IHRoaXMgbWVhbnMgdGhhdCB3aXRob3V0IHRyYWNpbmcgZW5hYmxlZCwgZS5nLiBgZXhwcmVzc0ludGVncmF0aW9uKClgIHdpbGwgbm90IGJlIGFkZGVkXG4gICAgLy8gVGhpcyBtZWFucyB0aGF0IGdlbmVyYWxseSByZXF1ZXN0IGlzb2xhdGlvbiB3aWxsIHdvcmsgKGJlY2F1c2UgdGhhdCBpcyBkb25lIGJ5IGh0dHBJbnRlZ3JhdGlvbilcbiAgICAvLyBCdXQgYHRyYW5zYWN0aW9uTmFtZWAgd2lsbCBub3QgYmUgc2V0IGF1dG9tYXRpY2FsbHlcbiAgICAuLi4oY29yZS5oYXNTcGFuc0VuYWJsZWQob3B0aW9ucykgPyBpbmRleC5nZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMoKSA6IFtdKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFNlbnRyeSBmb3IgTm9kZS5cbiAqL1xuZnVuY3Rpb24gaW5pdChvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIF9pbml0KG9wdGlvbnMsIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMpO1xufVxuXG4vKipcbiAqIEludGVybmFsIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBfaW5pdChcbiAgb3B0aW9ucyA9IHt9LFxuICBnZXREZWZhdWx0SW50ZWdyYXRpb25zSW1wbCxcbikge1xuICBjb3JlLmFwcGx5U2RrTWV0YWRhdGEob3B0aW9ucywgJ25vZGUnKTtcblxuICBjb25zdCBjbGllbnQgPSBub2RlQ29yZS5pbml0KHtcbiAgICAuLi5vcHRpb25zLFxuICAgIC8vIE9ubHkgdXNlIE5vZGUgU0RLIGRlZmF1bHRzIGlmIG5vbmUgcHJvdmlkZWRcbiAgICBkZWZhdWx0SW50ZWdyYXRpb25zOiBvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgPz8gZ2V0RGVmYXVsdEludGVncmF0aW9uc0ltcGwob3B0aW9ucyksXG4gIH0pO1xuXG4gIC8vIEFkZCBOb2RlIFNESyBzcGVjaWZpYyBPcGVuVGVsZW1ldHJ5IHNldHVwXG4gIGlmIChjbGllbnQgJiYgIW9wdGlvbnMuc2tpcE9wZW5UZWxlbWV0cnlTZXR1cCkge1xuICAgIGluaXRPdGVsLmluaXRPcGVuVGVsZW1ldHJ5KGNsaWVudCwge1xuICAgICAgc3BhblByb2Nlc3NvcnM6IG9wdGlvbnMub3BlblRlbGVtZXRyeVNwYW5Qcm9jZXNzb3JzLFxuICAgIH0pO1xuICAgIG5vZGVDb3JlLnZhbGlkYXRlT3BlblRlbGVtZXRyeVNldHVwKCk7XG4gIH1cblxuICByZXR1cm4gY2xpZW50O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgU2VudHJ5IGZvciBOb2RlLCB3aXRob3V0IGFueSBpbnRlZ3JhdGlvbnMgYWRkZWQgYnkgZGVmYXVsdC5cbiAqL1xuZnVuY3Rpb24gaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zKG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gX2luaXQob3B0aW9ucywgKCkgPT4gW10pO1xufVxuXG5leHBvcnRzLmdldERlZmF1bHRJbnRlZ3JhdGlvbnMgPSBnZXREZWZhdWx0SW50ZWdyYXRpb25zO1xuZXhwb3J0cy5nZXREZWZhdWx0SW50ZWdyYXRpb25zV2l0aG91dFBlcmZvcm1hbmNlID0gZ2V0RGVmYXVsdEludGVncmF0aW9uc1dpdGhvdXRQZXJmb3JtYW5jZTtcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucyA9IGluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(rsc)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\n\n// About 277h - this must fit into new Array(len)!\nconst MAX_MAX_SPAN_WAIT_DURATION = 1000000;\n\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client, options = {}) {\n  if (client.getOptions().debug) {\n    nodeCore.setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client, options);\n  client.traceProvider = provider;\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.debug.enable();\n  }\n\n  nodeCore.initializeEsmLoader();\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.debug.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  // We match exact matches of instrumentation, but also match prefixes, e.g. \"Fastify.v5\" will match \"Fastify\"\n  return instruments.filter(instrumentation => {\n    const id = instrumentation.id;\n    return integrationNames.some(integrationName => id === integrationName || id.startsWith(`${integrationName}.`));\n  });\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client, options = {}) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: resources.defaultResource().merge(\n      resources.resourceFromAttributes({\n        [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n        [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n      }),\n    ),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new opentelemetry.SentrySpanProcessor({\n        timeout: _clampSpanProcessorTimeout(client.getOptions().maxSpanWaitDuration),\n      }),\n      ...(options.spanProcessors || []),\n    ],\n  });\n\n  // Register as globals\n  api.trace.setGlobalTracerProvider(provider);\n  api.propagation.setGlobalPropagator(new opentelemetry.SentryPropagator());\n  api.context.setGlobalContextManager(new nodeCore.SentryContextManager());\n\n  return provider;\n}\n\n/** Just exported for tests. */\nfunction _clampSpanProcessorTimeout(maxSpanWaitDuration) {\n  if (maxSpanWaitDuration == null) {\n    return undefined;\n  }\n\n  // We guard for a max. value here, because we create an array with this length\n  // So if this value is too large, this would fail\n  if (maxSpanWaitDuration > MAX_MAX_SPAN_WAIT_DURATION) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(`\\`maxSpanWaitDuration\\` is too high, using the maximum value of ${MAX_MAX_SPAN_WAIT_DURATION}`);\n    return MAX_MAX_SPAN_WAIT_DURATION;\n  } else if (maxSpanWaitDuration <= 0 || Number.isNaN(maxSpanWaitDuration)) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('`maxSpanWaitDuration` must be a positive number, using default value instead.');\n    return undefined;\n  }\n\n  return maxSpanWaitDuration;\n}\n\nexports._clampSpanProcessorTimeout = _clampSpanProcessorTimeout;\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2luaXRPdGVsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLFlBQVksbUJBQU8sQ0FBQyxzSUFBb0I7QUFDeEMsa0JBQWtCLG1CQUFPLENBQUMsaUxBQTBCO0FBQ3BELHFCQUFxQixtQkFBTyxDQUFDLGdNQUErQjtBQUM1RCw0QkFBNEIsbUJBQU8sQ0FBQywwTEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxzQkFBc0IsbUJBQU8sQ0FBQyw0T0FBdUI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsNktBQW1CO0FBQzlDLGNBQWMsbUJBQU8sQ0FBQywyTUFBa0M7O0FBRXhEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyxVQUFVLFFBQVE7O0FBRWxCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrRkFBK0YsZ0JBQWdCO0FBQy9HLEdBQUc7QUFDSDs7QUFFQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUYsMkJBQTJCO0FBQ3BIO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQyx5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9zZGsvaW5pdE90ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgcmVzb3VyY2VzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzJyk7XG5jb25zdCBzZGtUcmFjZUJhc2UgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZScpO1xuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMnKTtcblxuLy8gQWJvdXQgMjc3aCAtIHRoaXMgbXVzdCBmaXQgaW50byBuZXcgQXJyYXkobGVuKSFcbmNvbnN0IE1BWF9NQVhfU1BBTl9XQUlUX0RVUkFUSU9OID0gMTAwMDAwMDtcblxuLyoqXG4gKiBJbml0aWFsaXplIE9wZW5UZWxlbWV0cnkgZm9yIE5vZGUuXG4gKi9cbmZ1bmN0aW9uIGluaXRPcGVuVGVsZW1ldHJ5KGNsaWVudCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmIChjbGllbnQuZ2V0T3B0aW9ucygpLmRlYnVnKSB7XG4gICAgbm9kZUNvcmUuc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyKCk7XG4gIH1cblxuICBjb25zdCBwcm92aWRlciA9IHNldHVwT3RlbChjbGllbnQsIG9wdGlvbnMpO1xuICBjbGllbnQudHJhY2VQcm92aWRlciA9IHByb3ZpZGVyO1xufVxuXG4vKipcbiAqIFByZWxvYWQgT3BlblRlbGVtZXRyeSBmb3IgTm9kZS5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcHJlbG9hZCBpbnN0cnVtZW50YXRpb24gZWFybHksIGJ1dCBzZXQgdXAgU2VudHJ5IGxhdGVyLlxuICogQnkgcHJlbG9hZGluZyB0aGUgT1RFTCBpbnN0cnVtZW50YXRpb24gd3JhcHBpbmcgc3RpbGwgaGFwcGVucyBlYXJseSBlbm91Z2ggdGhhdCBldmVyeXRoaW5nIHdvcmtzLlxuICovXG5mdW5jdGlvbiBwcmVsb2FkT3BlblRlbGVtZXRyeShvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyBkZWJ1ZyB9ID0gb3B0aW9ucztcblxuICBpZiAoZGVidWcpIHtcbiAgICBjb3JlLmRlYnVnLmVuYWJsZSgpO1xuICB9XG5cbiAgbm9kZUNvcmUuaW5pdGlhbGl6ZUVzbUxvYWRlcigpO1xuXG4gIC8vIFRoZXNlIGFyZSBhbGwgaW50ZWdyYXRpb25zIHRoYXQgd2UgbmVlZCB0byBwcmUtbG9hZCB0byBlbnN1cmUgdGhleSBhcmUgc2V0IHVwIGJlZm9yZSBhbnkgb3RoZXIgY29kZSBydW5zXG4gIGdldFByZWxvYWRNZXRob2RzKG9wdGlvbnMuaW50ZWdyYXRpb25zKS5mb3JFYWNoKGZuID0+IHtcbiAgICBmbigpO1xuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb3JlLmRlYnVnLmxvZyhgW1NlbnRyeV0gUHJlbG9hZGVkICR7Zm4uaWR9IGluc3RydW1lbnRhdGlvbmApO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFByZWxvYWRNZXRob2RzKGludGVncmF0aW9uTmFtZXMpIHtcbiAgY29uc3QgaW5zdHJ1bWVudHMgPSBpbmRleC5nZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkKCk7XG5cbiAgaWYgKCFpbnRlZ3JhdGlvbk5hbWVzKSB7XG4gICAgcmV0dXJuIGluc3RydW1lbnRzO1xuICB9XG5cbiAgLy8gV2UgbWF0Y2ggZXhhY3QgbWF0Y2hlcyBvZiBpbnN0cnVtZW50YXRpb24sIGJ1dCBhbHNvIG1hdGNoIHByZWZpeGVzLCBlLmcuIFwiRmFzdGlmeS52NVwiIHdpbGwgbWF0Y2ggXCJGYXN0aWZ5XCJcbiAgcmV0dXJuIGluc3RydW1lbnRzLmZpbHRlcihpbnN0cnVtZW50YXRpb24gPT4ge1xuICAgIGNvbnN0IGlkID0gaW5zdHJ1bWVudGF0aW9uLmlkO1xuICAgIHJldHVybiBpbnRlZ3JhdGlvbk5hbWVzLnNvbWUoaW50ZWdyYXRpb25OYW1lID0+IGlkID09PSBpbnRlZ3JhdGlvbk5hbWUgfHwgaWQuc3RhcnRzV2l0aChgJHtpbnRlZ3JhdGlvbk5hbWV9LmApKTtcbiAgfSk7XG59XG5cbi8qKiBKdXN0IGV4cG9ydGVkIGZvciB0ZXN0cy4gKi9cbmZ1bmN0aW9uIHNldHVwT3RlbChjbGllbnQsIG9wdGlvbnMgPSB7fSkge1xuICAvLyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSBOb2RlVHJhY2VyUHJvdmlkZXJcbiAgY29uc3QgcHJvdmlkZXIgPSBuZXcgc2RrVHJhY2VCYXNlLkJhc2ljVHJhY2VyUHJvdmlkZXIoe1xuICAgIHNhbXBsZXI6IG5ldyBvcGVudGVsZW1ldHJ5LlNlbnRyeVNhbXBsZXIoY2xpZW50KSxcbiAgICByZXNvdXJjZTogcmVzb3VyY2VzLmRlZmF1bHRSZXNvdXJjZSgpLm1lcmdlKFxuICAgICAgcmVzb3VyY2VzLnJlc291cmNlRnJvbUF0dHJpYnV0ZXMoe1xuICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06ICdub2RlJyxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLlNFTVJFU0FUVFJTX1NFUlZJQ0VfTkFNRVNQQUNFXTogJ3NlbnRyeScsXG4gICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfU0VSVklDRV9WRVJTSU9OXTogY29yZS5TREtfVkVSU0lPTixcbiAgICAgIH0pLFxuICAgICksXG4gICAgZm9yY2VGbHVzaFRpbWVvdXRNaWxsaXM6IDUwMCxcbiAgICBzcGFuUHJvY2Vzc29yczogW1xuICAgICAgbmV3IG9wZW50ZWxlbWV0cnkuU2VudHJ5U3BhblByb2Nlc3Nvcih7XG4gICAgICAgIHRpbWVvdXQ6IF9jbGFtcFNwYW5Qcm9jZXNzb3JUaW1lb3V0KGNsaWVudC5nZXRPcHRpb25zKCkubWF4U3BhbldhaXREdXJhdGlvbiksXG4gICAgICB9KSxcbiAgICAgIC4uLihvcHRpb25zLnNwYW5Qcm9jZXNzb3JzIHx8IFtdKSxcbiAgICBdLFxuICB9KTtcblxuICAvLyBSZWdpc3RlciBhcyBnbG9iYWxzXG4gIGFwaS50cmFjZS5zZXRHbG9iYWxUcmFjZXJQcm92aWRlcihwcm92aWRlcik7XG4gIGFwaS5wcm9wYWdhdGlvbi5zZXRHbG9iYWxQcm9wYWdhdG9yKG5ldyBvcGVudGVsZW1ldHJ5LlNlbnRyeVByb3BhZ2F0b3IoKSk7XG4gIGFwaS5jb250ZXh0LnNldEdsb2JhbENvbnRleHRNYW5hZ2VyKG5ldyBub2RlQ29yZS5TZW50cnlDb250ZXh0TWFuYWdlcigpKTtcblxuICByZXR1cm4gcHJvdmlkZXI7XG59XG5cbi8qKiBKdXN0IGV4cG9ydGVkIGZvciB0ZXN0cy4gKi9cbmZ1bmN0aW9uIF9jbGFtcFNwYW5Qcm9jZXNzb3JUaW1lb3V0KG1heFNwYW5XYWl0RHVyYXRpb24pIHtcbiAgaWYgKG1heFNwYW5XYWl0RHVyYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBXZSBndWFyZCBmb3IgYSBtYXguIHZhbHVlIGhlcmUsIGJlY2F1c2Ugd2UgY3JlYXRlIGFuIGFycmF5IHdpdGggdGhpcyBsZW5ndGhcbiAgLy8gU28gaWYgdGhpcyB2YWx1ZSBpcyB0b28gbGFyZ2UsIHRoaXMgd291bGQgZmFpbFxuICBpZiAobWF4U3BhbldhaXREdXJhdGlvbiA+IE1BWF9NQVhfU1BBTl9XQUlUX0RVUkFUSU9OKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgY29yZS5kZWJ1Zy53YXJuKGBcXGBtYXhTcGFuV2FpdER1cmF0aW9uXFxgIGlzIHRvbyBoaWdoLCB1c2luZyB0aGUgbWF4aW11bSB2YWx1ZSBvZiAke01BWF9NQVhfU1BBTl9XQUlUX0RVUkFUSU9OfWApO1xuICAgIHJldHVybiBNQVhfTUFYX1NQQU5fV0FJVF9EVVJBVElPTjtcbiAgfSBlbHNlIGlmIChtYXhTcGFuV2FpdER1cmF0aW9uIDw9IDAgfHwgTnVtYmVyLmlzTmFOKG1heFNwYW5XYWl0RHVyYXRpb24pKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLndhcm4oJ2BtYXhTcGFuV2FpdER1cmF0aW9uYCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyLCB1c2luZyBkZWZhdWx0IHZhbHVlIGluc3RlYWQuJyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBtYXhTcGFuV2FpdER1cmF0aW9uO1xufVxuXG5leHBvcnRzLl9jbGFtcFNwYW5Qcm9jZXNzb3JUaW1lb3V0ID0gX2NsYW1wU3BhblByb2Nlc3NvclRpbWVvdXQ7XG5leHBvcnRzLmluaXRPcGVuVGVsZW1ldHJ5ID0gaW5pdE9wZW5UZWxlbWV0cnk7XG5leHBvcnRzLnByZWxvYWRPcGVuVGVsZW1ldHJ5ID0gcHJlbG9hZE9wZW5UZWxlbWV0cnk7XG5leHBvcnRzLnNldHVwT3RlbCA9IHNldHVwT3RlbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXRPdGVsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nfunction flatten(input) {\n  const result = [];\n\n  const flattenHelper = (input) => {\n    input.forEach((el) => {\n      if (Array.isArray(el)) {\n        flattenHelper(el);\n      } else {\n        result.push(el);\n      }\n    });\n  };\n\n  flattenHelper(input);\n  return result;\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL3JlZGlzQ2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IFNJTkdMRV9BUkdfQ09NTUFORFMgPSBbJ2dldCcsICdzZXQnLCAnc2V0ZXgnXTtcblxuY29uc3QgR0VUX0NPTU1BTkRTID0gWydnZXQnLCAnbWdldCddO1xuY29uc3QgU0VUX0NPTU1BTkRTID0gWydzZXQnLCAnc2V0ZXgnXTtcbi8vIHRvZG86IGRlbCwgZXhwaXJlXG5cbi8qKiBDaGVja3MgaWYgYSBnaXZlbiBjb21tYW5kIGlzIGluIHRoZSBsaXN0IG9mIHJlZGlzIGNvbW1hbmRzLlxuICogIFVzZWZ1bCBiZWNhdXNlIGNvbW1hbmRzIGNhbiBjb21lIGluIGxvd2VyY2FzZSBvciB1cHBlcmNhc2UgKGRlcGVuZGluZyBvbiB0aGUgbGlicmFyeSkuICovXG5mdW5jdGlvbiBpc0luQ29tbWFuZHMocmVkaXNDb21tYW5kcywgY29tbWFuZCkge1xuICByZXR1cm4gcmVkaXNDb21tYW5kcy5pbmNsdWRlcyhjb21tYW5kLnRvTG93ZXJDYXNlKCkpO1xufVxuXG4vKiogRGV0ZXJtaW5lIGNhY2hlIG9wZXJhdGlvbiBiYXNlZCBvbiByZWRpcyBzdGF0ZW1lbnQgKi9cbmZ1bmN0aW9uIGdldENhY2hlT3BlcmF0aW9uKFxuICBjb21tYW5kLFxuKSB7XG4gIGlmIChpc0luQ29tbWFuZHMoR0VUX0NPTU1BTkRTLCBjb21tYW5kKSkge1xuICAgIHJldHVybiAnY2FjaGUuZ2V0JztcbiAgfSBlbHNlIGlmIChpc0luQ29tbWFuZHMoU0VUX0NPTU1BTkRTLCBjb21tYW5kKSkge1xuICAgIHJldHVybiAnY2FjaGUucHV0JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGtleUhhc1ByZWZpeChrZXksIHByZWZpeGVzKSB7XG4gIHJldHVybiBwcmVmaXhlcy5zb21lKHByZWZpeCA9PiBrZXkuc3RhcnRzV2l0aChwcmVmaXgpKTtcbn1cblxuLyoqIFNhZmVseSBjb252ZXJ0cyBhIHJlZGlzIGtleSB0byBhIHN0cmluZyAoY29tbWEtc2VwYXJhdGVkIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBrZXlzKSAqL1xuZnVuY3Rpb24gZ2V0Q2FjaGVLZXlTYWZlbHkocmVkaXNDb21tYW5kLCBjbWRBcmdzKSB7XG4gIHRyeSB7XG4gICAgaWYgKGNtZEFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcHJvY2Vzc0FyZyA9IChhcmcpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fCBCdWZmZXIuaXNCdWZmZXIoYXJnKSkge1xuICAgICAgICByZXR1cm4gW2FyZy50b1N0cmluZygpXTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgIHJldHVybiBmbGF0dGVuKGFyZy5tYXAoYXJnID0+IHByb2Nlc3NBcmcoYXJnKSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsnPHVua25vd24+J107XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGZpcnN0QXJnID0gY21kQXJnc1swXTtcbiAgICBpZiAoaXNJbkNvbW1hbmRzKFNJTkdMRV9BUkdfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgZmlyc3RBcmcgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHByb2Nlc3NBcmcoZmlyc3RBcmcpO1xuICAgIH1cblxuICAgIHJldHVybiBmbGF0dGVuKGNtZEFyZ3MubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKiogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgcmVkaXMgb3BlcmF0aW9uIHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIFwiY2FjaGUgb3BlcmF0aW9uXCIgYnkgY2hlY2tpbmcgaWYgYSBrZXkgaXMgcHJlZml4ZWQuXG4gKiAgV2Ugb25seSBzdXBwb3J0IGNlcnRhaW4gY29tbWFuZHMgKHN1Y2ggYXMgJ3NldCcsICdnZXQnLCAnbWdldCcpLiAqL1xuZnVuY3Rpb24gc2hvdWxkQ29uc2lkZXJGb3JDYWNoZShyZWRpc0NvbW1hbmQsIGtleXMsIHByZWZpeGVzKSB7XG4gIGlmICghZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoa2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogQ2FsY3VsYXRlcyBzaXplIGJhc2VkIG9uIHRoZSBjYWNoZSByZXNwb25zZSB2YWx1ZSAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZShyZXNwb25zZSkge1xuICBjb25zdCBnZXRTaXplID0gKHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSByZXR1cm4gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSkubGVuZ3RoO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVzcG9uc2UpXG4gICAgPyByZXNwb25zZS5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgICBjb25zdCBzaXplID0gZ2V0U2l6ZShjdXJyKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzaXplID09PSAnbnVtYmVyJyA/IChhY2MgIT09IHVuZGVmaW5lZCA/IGFjYyArIHNpemUgOiBzaXplKSA6IGFjYztcbiAgICAgIH0sIDApXG4gICAgOiBnZXRTaXplKHJlc3BvbnNlKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihpbnB1dCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcblxuICBjb25zdCBmbGF0dGVuSGVscGVyID0gKGlucHV0KSA9PiB7XG4gICAgaW5wdXQuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgICAgICBmbGF0dGVuSGVscGVyKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmbGF0dGVuSGVscGVyKGlucHV0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0cy5HRVRfQ09NTUFORFMgPSBHRVRfQ09NTUFORFM7XG5leHBvcnRzLlNFVF9DT01NQU5EUyA9IFNFVF9DT01NQU5EUztcbmV4cG9ydHMuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZSA9IGNhbGN1bGF0ZUNhY2hlSXRlbVNpemU7XG5leHBvcnRzLmdldENhY2hlS2V5U2FmZWx5ID0gZ2V0Q2FjaGVLZXlTYWZlbHk7XG5leHBvcnRzLmdldENhY2hlT3BlcmF0aW9uID0gZ2V0Q2FjaGVPcGVyYXRpb247XG5leHBvcnRzLmlzSW5Db21tYW5kcyA9IGlzSW5Db21tYW5kcztcbmV4cG9ydHMuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZSA9IHNob3VsZENvbnNpZGVyRm9yQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpc0NhY2hlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js":
/*!****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0cy5ERUJVR19CVUlMRCA9IERFQlVHX0JVSUxEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! ./integrations/http.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index = __webpack_require__(/*! ./integrations/tracing/fastify/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./integrations/tracing/postgresjs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/tracing/hono/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/vercelai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\nconst index$4 = __webpack_require__(/*! ./integrations/tracing/openai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/anthropic-ai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\");\nconst index$6 = __webpack_require__(/*! ./integrations/tracing/claude-code/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\");\nconst helpers = __webpack_require__(/*! ./integrations/tracing/claude-code/helpers.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js\");\nconst index$7 = __webpack_require__(/*! ./integrations/tracing/openai-codex/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\");\nconst helpers$1 = __webpack_require__(/*! ./integrations/tracing/openai-codex/helpers.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js\");\nconst index$8 = __webpack_require__(/*! ./integrations/tracing/google-genai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\");\nconst launchDarkly = __webpack_require__(/*! ./integrations/featureFlagShims/launchDarkly.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\");\nconst openFeature = __webpack_require__(/*! ./integrations/featureFlagShims/openFeature.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\");\nconst statsig = __webpack_require__(/*! ./integrations/featureFlagShims/statsig.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\");\nconst unleash = __webpack_require__(/*! ./integrations/featureFlagShims/unleash.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\");\nconst firebase = __webpack_require__(/*! ./integrations/tracing/firebase/firebase.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst index$9 = __webpack_require__(/*! ./sdk/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$a = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./integrations/tracing/claude-code/instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\");\nconst instrumentation$1 = __webpack_require__(/*! ./integrations/tracing/openai-codex/instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\");\n\n\n\nexports.httpIntegration = http.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = index.fastifyIntegration;\nexports.setupFastifyErrorHandler = index.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.postgresJsIntegration = postgresjs.postgresJsIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$1.hapiIntegration;\nexports.setupHapiErrorHandler = index$1.setupHapiErrorHandler;\nexports.honoIntegration = index$2.honoIntegration;\nexports.setupHonoErrorHandler = index$2.setupHonoErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.vercelAIIntegration = index$3.vercelAIIntegration;\nexports.openAIIntegration = index$4.openAIIntegration;\nexports.anthropicAIIntegration = index$5.anthropicAIIntegration;\nexports.claudeCodeIntegration = index$6.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = helpers.createInstrumentedClaudeQuery;\nexports.openaiCodexIntegration = index$7.openaiCodexIntegration;\nexports.createInstrumentedCodex = helpers$1.createInstrumentedCodex;\nexports.googleGenAIIntegration = index$8.googleGenAIIntegration;\nexports.buildLaunchDarklyFlagUsedHandler = launchDarkly.buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegration = launchDarkly.launchDarklyIntegrationShim;\nexports.OpenFeatureIntegrationHook = openFeature.OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegration = openFeature.openFeatureIntegrationShim;\nexports.statsigIntegration = statsig.statsigIntegrationShim;\nexports.unleashIntegration = unleash.unleashIntegrationShim;\nexports.firebaseIntegration = firebase.firebaseIntegration;\nexports.getDefaultIntegrations = index$9.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$9.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$9.init;\nexports.initWithoutDefaultIntegrations = index$9.initWithoutDefaultIntegrations;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$a.getAutoPerformanceIntegrations;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.consoleIntegration = core.consoleIntegration;\nexports.consoleLoggingIntegration = core.consoleLoggingIntegration;\nexports.continueTrace = core.continueTrace;\nexports.createConsolaReporter = core.createConsolaReporter;\nexports.createTransport = core.createTransport;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.eventFiltersIntegration = core.eventFiltersIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.featureFlagsIntegration = core.featureFlagsIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.httpHeadersToSpanAttributes = core.httpHeadersToSpanAttributes;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.instrumentSupabaseClient = core.instrumentSupabaseClient;\nexports.isEnabled = core.isEnabled;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.supabaseIntegration = core.supabaseIntegration;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.winterCGHeadersToDict = core.winterCGHeadersToDict;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.wrapMcpServerWithSentry = core.wrapMcpServerWithSentry;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.NODE_VERSION = nodeCore.NODE_VERSION;\nexports.NodeClient = nodeCore.NodeClient;\nexports.SentryContextManager = nodeCore.SentryContextManager;\nexports.anrIntegration = nodeCore.anrIntegration;\nexports.childProcessIntegration = nodeCore.childProcessIntegration;\nexports.contextLinesIntegration = nodeCore.contextLinesIntegration;\nexports.createGetModuleFromFilename = nodeCore.createGetModuleFromFilename;\nexports.createSentryWinstonTransport = nodeCore.createSentryWinstonTransport;\nexports.cron = nodeCore.cron;\nexports.defaultStackParser = nodeCore.defaultStackParser;\nexports.disableAnrDetectionForCallback = nodeCore.disableAnrDetectionForCallback;\nexports.generateInstrumentOnce = nodeCore.generateInstrumentOnce;\nexports.getSentryRelease = nodeCore.getSentryRelease;\nexports.httpServerIntegration = nodeCore.httpServerIntegration;\nexports.httpServerSpansIntegration = nodeCore.httpServerSpansIntegration;\nexports.localVariablesIntegration = nodeCore.localVariablesIntegration;\nexports.logger = nodeCore.logger;\nexports.makeNodeTransport = nodeCore.makeNodeTransport;\nexports.modulesIntegration = nodeCore.modulesIntegration;\nexports.nodeContextIntegration = nodeCore.nodeContextIntegration;\nexports.onUncaughtExceptionIntegration = nodeCore.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = nodeCore.onUnhandledRejectionIntegration;\nexports.spotlightIntegration = nodeCore.spotlightIntegration;\nexports.systemErrorIntegration = nodeCore.systemErrorIntegration;\nexports.validateOpenTelemetrySetup = nodeCore.validateOpenTelemetrySetup;\nexports.patchClaudeCodeQuery = instrumentation.patchClaudeCodeQuery;\nexports.patchCodexConstructor = instrumentation$1.patchCodexConstructor;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the LaunchDarkly integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst launchDarklyIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The launchDarklyIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'LaunchDarkly',\n  };\n});\n\n/**\n * This is a shim for the LaunchDarkly flag used handler.\n */\nfunction buildLaunchDarklyFlagUsedHandlerShim() {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The buildLaunchDarklyFlagUsedHandler() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'sentry-flag-auditor',\n    type: 'flag-used',\n    synchronous: true,\n    method: () => null,\n  };\n}\n\nexports.buildLaunchDarklyFlagUsedHandlerShim = buildLaunchDarklyFlagUsedHandlerShim;\nexports.launchDarklyIntegrationShim = launchDarklyIntegrationShim;\n//# sourceMappingURL=launchDarkly.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvbGF1bmNoRGFya2x5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEM7QUFDNUMsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mZWF0dXJlRmxhZ1NoaW1zL2xhdW5jaERhcmtseS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgTGF1bmNoRGFya2x5IGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IGxhdW5jaERhcmtseUludGVncmF0aW9uU2hpbSA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKF9vcHRpb25zKSA9PiB7XG4gIGlmICghY29yZS5pc0Jyb3dzZXIoKSkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybignVGhlIGxhdW5jaERhcmtseUludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ0xhdW5jaERhcmtseScsXG4gIH07XG59KTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc2hpbSBmb3IgdGhlIExhdW5jaERhcmtseSBmbGFnIHVzZWQgaGFuZGxlci5cbiAqL1xuZnVuY3Rpb24gYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXJTaGltKCkge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBidWlsZExhdW5jaERhcmtseUZsYWdVc2VkSGFuZGxlcigpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGJyb3dzZXIuJyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdzZW50cnktZmxhZy1hdWRpdG9yJyxcbiAgICB0eXBlOiAnZmxhZy11c2VkJyxcbiAgICBzeW5jaHJvbm91czogdHJ1ZSxcbiAgICBtZXRob2Q6ICgpID0+IG51bGwsXG4gIH07XG59XG5cbmV4cG9ydHMuYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXJTaGltID0gYnVpbGRMYXVuY2hEYXJrbHlGbGFnVXNlZEhhbmRsZXJTaGltO1xuZXhwb3J0cy5sYXVuY2hEYXJrbHlJbnRlZ3JhdGlvblNoaW0gPSBsYXVuY2hEYXJrbHlJbnRlZ3JhdGlvblNoaW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXVuY2hEYXJrbHkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/launchDarkly.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the OpenFeature integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst openFeatureIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The openFeatureIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'OpenFeature',\n  };\n});\n\n/**\n * This is a shim for the OpenFeature integration hook.\n */\nclass OpenFeatureIntegrationHookShim {\n  /**\n   *\n   */\n   constructor() {\n    if (!core.isBrowser()) {\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('The OpenFeatureIntegrationHook can only be used in the browser.');\n      });\n    }\n  }\n\n  /**\n   *\n   */\n   after() {\n    // No-op\n  }\n\n  /**\n   *\n   */\n   error() {\n    // No-op\n  }\n}\n\nexports.OpenFeatureIntegrationHookShim = OpenFeatureIntegrationHookShim;\nexports.openFeatureIntegrationShim = openFeatureIntegrationShim;\n//# sourceMappingURL=openFeature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvb3BlbkZlYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy9vcGVuRmVhdHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgT3BlbkZlYXR1cmUgaW50ZWdyYXRpb24uXG4gKiBXZSBuZWVkIHRoaXMgaW4gb3JkZXIgdG8gbm90IHRocm93IHJ1bnRpbWUgZXJyb3JzIHdoZW4gYWNjaWRlbnRhbGx5IGltcG9ydGluZyB0aGlzIG9uIHRoZSBzZXJ2ZXIgdGhyb3VnaCBhIG1ldGEgZnJhbWV3b3JrIGxpa2UgTmV4dC5qcy5cbiAqL1xuY29uc3Qgb3BlbkZlYXR1cmVJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBvcGVuRmVhdHVyZUludGVncmF0aW9uKCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ09wZW5GZWF0dXJlJyxcbiAgfTtcbn0pO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaGltIGZvciB0aGUgT3BlbkZlYXR1cmUgaW50ZWdyYXRpb24gaG9vay5cbiAqL1xuY2xhc3MgT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2tTaGltIHtcbiAgLyoqXG4gICAqXG4gICAqL1xuICAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKCFjb3JlLmlzQnJvd3NlcigpKSB7XG4gICAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2sgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYnJvd3Nlci4nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgIGFmdGVyKCkge1xuICAgIC8vIE5vLW9wXG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gICBlcnJvcigpIHtcbiAgICAvLyBOby1vcFxuICB9XG59XG5cbmV4cG9ydHMuT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2tTaGltID0gT3BlbkZlYXR1cmVJbnRlZ3JhdGlvbkhvb2tTaGltO1xuZXhwb3J0cy5vcGVuRmVhdHVyZUludGVncmF0aW9uU2hpbSA9IG9wZW5GZWF0dXJlSW50ZWdyYXRpb25TaGltO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbkZlYXR1cmUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/openFeature.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Statsig integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst statsigIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The statsigIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Statsig',\n  };\n});\n\nexports.statsigIntegrationShim = statsigIntegrationShim;\n//# sourceMappingURL=statsig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvc3RhdHNpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy9zdGF0c2lnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNoaW0gZm9yIHRoZSBTdGF0c2lnIGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IHN0YXRzaWdJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBzdGF0c2lnSW50ZWdyYXRpb24oKSBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBicm93c2VyLicpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnU3RhdHNpZycsXG4gIH07XG59KTtcblxuZXhwb3J0cy5zdGF0c2lnSW50ZWdyYXRpb25TaGltID0gc3RhdHNpZ0ludGVncmF0aW9uU2hpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRzaWcuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/statsig.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * This is a shim for the Unleash integration.\n * We need this in order to not throw runtime errors when accidentally importing this on the server through a meta framework like Next.js.\n */\nconst unleashIntegrationShim = core.defineIntegration((_options) => {\n  if (!core.isBrowser()) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('The unleashIntegration() can only be used in the browser.');\n    });\n  }\n\n  return {\n    name: 'Unleash',\n  };\n});\n\nexports.unleashIntegrationShim = unleashIntegrationShim;\n//# sourceMappingURL=unleash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2ZlYXR1cmVGbGFnU2hpbXMvdW5sZWFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZmVhdHVyZUZsYWdTaGltcy91bmxlYXNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNoaW0gZm9yIHRoZSBVbmxlYXNoIGludGVncmF0aW9uLlxuICogV2UgbmVlZCB0aGlzIGluIG9yZGVyIHRvIG5vdCB0aHJvdyBydW50aW1lIGVycm9ycyB3aGVuIGFjY2lkZW50YWxseSBpbXBvcnRpbmcgdGhpcyBvbiB0aGUgc2VydmVyIHRocm91Z2ggYSBtZXRhIGZyYW1ld29yayBsaWtlIE5leHQuanMuXG4gKi9cbmNvbnN0IHVubGVhc2hJbnRlZ3JhdGlvblNoaW0gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChfb3B0aW9ucykgPT4ge1xuICBpZiAoIWNvcmUuaXNCcm93c2VyKCkpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSB1bmxlYXNoSW50ZWdyYXRpb24oKSBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBicm93c2VyLicpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnVW5sZWFzaCcsXG4gIH07XG59KTtcblxuZXhwb3J0cy51bmxlYXNoSW50ZWdyYXRpb25TaGltID0gdW5sZWFzaEludGVncmF0aW9uU2hpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVubGVhc2guanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/featureFlagShims/unleash.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-fs@0.24.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        nodeCore.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new nodeCore.SentryHttpInstrumentation(options);\n  },\n);\n\nconst instrumentOtelHttp = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation({\n    ...config,\n    // This is hard-coded and can never be overridden by the user\n    disableIncomingRequestInstrumentation: true,\n  });\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/** Exported only for tests. */\nfunction _shouldUseOtelHttpInstrumentation(\n  options,\n  clientOptions = {},\n) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  if (typeof options.spans === 'boolean') {\n    return options.spans;\n  }\n\n  if (clientOptions.skipOpenTelemetrySetup) {\n    return false;\n  }\n\n  // IMPORTANT: We only disable span instrumentation when spans are not enabled _and_ we are on Node 22+,\n  // as otherwise the necessary diagnostics channel is not available yet\n  if (!core.hasSpansEnabled(clientOptions) && nodeCore.NODE_VERSION.major >= 22) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  const spans = options.spans ?? true;\n  const disableIncomingRequestSpans = options.disableIncomingRequestSpans;\n\n  const serverOptions = {\n    sessions: options.trackIncomingRequestsAsSessions,\n    sessionFlushingDelayMS: options.sessionFlushingDelayMS,\n    ignoreRequestBody: options.ignoreIncomingRequestBody,\n    maxRequestBodySize: options.maxIncomingRequestBodySize,\n  } ;\n\n  const serverSpansOptions = {\n    ignoreIncomingRequests: options.ignoreIncomingRequests,\n    ignoreStaticAssets: options.ignoreStaticAssets,\n    ignoreStatusCodes: options.dropSpansForIncomingRequestStatusCodes,\n    instrumentation: options.instrumentation,\n    onSpanCreated: options.incomingRequestSpanHook,\n  } ;\n\n  const server = nodeCore.httpServerIntegration(serverOptions);\n  const serverSpans = nodeCore.httpServerSpansIntegration(serverSpansOptions);\n\n  const enableServerSpans = spans && !disableIncomingRequestSpans;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (enableServerSpans && core.hasSpansEnabled(clientOptions)) {\n        serverSpans.setup(client);\n      }\n    },\n    setupOnce() {\n      const clientOptions = (core.getClient()?.getOptions() || {}) ;\n      const useOtelHttpInstrumentation = _shouldUseOtelHttpInstrumentation(options, clientOptions);\n\n      server.setupOnce();\n\n      const sentryHttpInstrumentationOptions = {\n        breadcrumbs: options.breadcrumbs,\n        propagateTraceInOutgoingRequests: !useOtelHttpInstrumentation,\n        ignoreOutgoingRequests: options.ignoreOutgoingRequests,\n      } ;\n\n      // This is Sentry-specific instrumentation for outgoing request breadcrumbs & trace propagation\n      instrumentSentryHttp(sentryHttpInstrumentationOptions);\n\n      // This is the \"regular\" OTEL instrumentation that emits outgoing request spans\n      if (useOtelHttpInstrumentation) {\n        const instrumentationConfig = getConfigWithDefaults(options);\n        instrumentOtelHttp(instrumentationConfig);\n      }\n    },\n    processEvent(event) {\n      // Note: We always run this, even if spans are disabled\n      // The reason being that e.g. the remix integration disables span creation here but still wants to use the ignore status codes option\n      return serverSpans.processEvent(event);\n    },\n  };\n});\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ignoreOutgoingRequestHook: request => {\n      const url = nodeCore.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests?.(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requestHook: (span, req) => {\n      nodeCore.addOriginToSpan(span, 'auto.http.otel.http');\n\n      options.instrumentation?.requestHook?.(span, req);\n    },\n    responseHook: (span, res) => {\n      options.instrumentation?.responseHook?.(span, res);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      options.instrumentation?.applyCustomAttributesOnSpan?.(span, request, response);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports._shouldUseOtelHttpInstrumentation = _shouldUseOtelHttpInstrumentation;\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-undici@0.15.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\nconst instrumentOtelNodeFetch = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationUndici.UndiciInstrumentation,\n  (options) => {\n    return getConfigWithDefaults(options);\n  },\n);\n\nconst instrumentSentryNodeFetch = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  nodeCore.SentryNodeFetchInstrumentation,\n  (options) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, core.getClient()?.getOptions());\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        instrumentOtelNodeFetch(options);\n      }\n\n      // This is the Sentry-specific instrumentation that creates breadcrumbs & propagates traces\n      // This must be registered after the OTEL one, to ensure that the core trace propagation logic takes presedence\n      // Otherwise, the sentry-trace header may be set multiple times\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nfunction _shouldInstrumentSpans(options, clientOptions = {}) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  return typeof options.spans === 'boolean'\n    ? options.spans\n    : !clientOptions.skipOpenTelemetrySetup && core.hasSpansEnabled(clientOptions);\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    requireParentforSpans: false,\n    ignoreRequestHook: request => {\n      const url = getAbsoluteUrl(request.origin, request.path);\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n      return !!shouldIgnore;\n    },\n    startSpanHook: () => {\n      return {\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n      };\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=node-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2guanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsOEJBQThCLG1CQUFPLENBQUMseU5BQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87O0FBRXhCO0FBQ0EsY0FBYyxJQUFJLEVBQUUsY0FBYztBQUNsQzs7QUFFQTtBQUNBLGNBQWMsSUFBSSxHQUFHLGNBQWM7QUFDbkM7O0FBRUEsWUFBWSxJQUFJLEVBQUUsS0FBSztBQUN2Qjs7QUFFQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL25vZGUtZmV0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblVuZGljaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi11bmRpY2knKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdOb2RlRmV0Y2gnO1xuXG5jb25zdCBpbnN0cnVtZW50T3RlbE5vZGVGZXRjaCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gIGluc3RydW1lbnRhdGlvblVuZGljaS5VbmRpY2lJbnN0cnVtZW50YXRpb24sXG4gIChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGdldENvbmZpZ1dpdGhEZWZhdWx0cyhvcHRpb25zKTtcbiAgfSxcbik7XG5cbmNvbnN0IGluc3RydW1lbnRTZW50cnlOb2RlRmV0Y2ggPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBgJHtJTlRFR1JBVElPTl9OQU1FfS5zZW50cnlgLFxuICBub2RlQ29yZS5TZW50cnlOb2RlRmV0Y2hJbnN0cnVtZW50YXRpb24sXG4gIChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH0sXG4pO1xuXG5jb25zdCBfbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdOb2RlRmV0Y2gnLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRTcGFucyA9IF9zaG91bGRJbnN0cnVtZW50U3BhbnMob3B0aW9ucywgY29yZS5nZXRDbGllbnQoKT8uZ2V0T3B0aW9ucygpKTtcblxuICAgICAgLy8gVGhpcyBpcyB0aGUgXCJyZWd1bGFyXCIgT1RFTCBpbnN0cnVtZW50YXRpb24gdGhhdCBlbWl0cyBzcGFuc1xuICAgICAgaWYgKGluc3RydW1lbnRTcGFucykge1xuICAgICAgICBpbnN0cnVtZW50T3RlbE5vZGVGZXRjaChvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhpcyBpcyB0aGUgU2VudHJ5LXNwZWNpZmljIGluc3RydW1lbnRhdGlvbiB0aGF0IGNyZWF0ZXMgYnJlYWRjcnVtYnMgJiBwcm9wYWdhdGVzIHRyYWNlc1xuICAgICAgLy8gVGhpcyBtdXN0IGJlIHJlZ2lzdGVyZWQgYWZ0ZXIgdGhlIE9URUwgb25lLCB0byBlbnN1cmUgdGhhdCB0aGUgY29yZSB0cmFjZSBwcm9wYWdhdGlvbiBsb2dpYyB0YWtlcyBwcmVzZWRlbmNlXG4gICAgICAvLyBPdGhlcndpc2UsIHRoZSBzZW50cnktdHJhY2UgaGVhZGVyIG1heSBiZSBzZXQgbXVsdGlwbGUgdGltZXNcbiAgICAgIGluc3RydW1lbnRTZW50cnlOb2RlRmV0Y2gob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3QgbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbik7XG5cbi8vIE1hdGNoaW5nIHRoZSBiZWhhdmlvciBvZiB0aGUgYmFzZSBpbnN0cnVtZW50YXRpb25cbmZ1bmN0aW9uIGdldEFic29sdXRlVXJsKG9yaWdpbiwgcGF0aCA9ICcvJykge1xuICBjb25zdCB1cmwgPSBgJHtvcmlnaW59YDtcblxuICBpZiAodXJsLmVuZHNXaXRoKCcvJykgJiYgcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICByZXR1cm4gYCR7dXJsfSR7cGF0aC5zbGljZSgxKX1gO1xuICB9XG5cbiAgaWYgKCF1cmwuZW5kc1dpdGgoJy8nKSAmJiAhcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICByZXR1cm4gYCR7dXJsfS8ke3BhdGguc2xpY2UoMSl9YDtcbiAgfVxuXG4gIHJldHVybiBgJHt1cmx9JHtwYXRofWA7XG59XG5cbmZ1bmN0aW9uIF9zaG91bGRJbnN0cnVtZW50U3BhbnMob3B0aW9ucywgY2xpZW50T3B0aW9ucyA9IHt9KSB7XG4gIC8vIElmIGBzcGFuc2AgaXMgcGFzc2VkIGluLCBpdCB0YWtlcyBwcmVjZWRlbmNlXG4gIC8vIEVsc2UsIHdlIGJ5IGRlZmF1bHQgZW1pdCBzcGFucywgdW5sZXNzIGBza2lwT3BlblRlbGVtZXRyeVNldHVwYCBpcyBzZXQgdG8gYHRydWVgIG9yIHNwYW5zIGFyZSBub3QgZW5hYmxlZFxuICByZXR1cm4gdHlwZW9mIG9wdGlvbnMuc3BhbnMgPT09ICdib29sZWFuJ1xuICAgID8gb3B0aW9ucy5zcGFuc1xuICAgIDogIWNsaWVudE9wdGlvbnMuc2tpcE9wZW5UZWxlbWV0cnlTZXR1cCAmJiBjb3JlLmhhc1NwYW5zRW5hYmxlZChjbGllbnRPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnV2l0aERlZmF1bHRzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25Db25maWcgPSB7XG4gICAgcmVxdWlyZVBhcmVudGZvclNwYW5zOiBmYWxzZSxcbiAgICBpZ25vcmVSZXF1ZXN0SG9vazogcmVxdWVzdCA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBnZXRBYnNvbHV0ZVVybChyZXF1ZXN0Lm9yaWdpbiwgcmVxdWVzdC5wYXRoKTtcbiAgICAgIGNvbnN0IF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzID0gb3B0aW9ucy5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzO1xuICAgICAgY29uc3Qgc2hvdWxkSWdub3JlID0gX2lnbm9yZU91dGdvaW5nUmVxdWVzdHMgJiYgdXJsICYmIF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzKHVybCk7XG5cbiAgICAgIHJldHVybiAhIXNob3VsZElnbm9yZTtcbiAgICB9LFxuICAgIHN0YXJ0U3Bhbkhvb2s6ICgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLm5vZGVfZmV0Y2gnLFxuICAgICAgfTtcbiAgICB9LFxuICB9IDtcblxuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9uQ29uZmlnO1xufVxuXG5leHBvcnRzLm5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLWZldGNoLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-amqplib@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    nodeCore.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25BbXFwbGliID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWFtcXBsaWInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdBbXFwbGliJztcblxuY29uc3QgY29uZmlnID0ge1xuICBjb25zdW1lRW5kSG9vazogKHNwYW4pID0+IHtcbiAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uYW1xcGxpYi5vdGVsLmNvbnN1bWVyJyk7XG4gIH0sXG4gIHB1Ymxpc2hIb29rOiAoc3BhbikgPT4ge1xuICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5hbXFwbGliLm90ZWwucHVibGlzaGVyJyk7XG4gIH0sXG59O1xuXG5jb25zdCBpbnN0cnVtZW50QW1xcGxpYiA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkFtcXBsaWIuQW1xcGxpYkluc3RydW1lbnRhdGlvbihjb25maWcpKTtcblxuY29uc3QgX2FtcXBsaWJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50QW1xcGxpYigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbYW1xcGxpYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYW1xcGxpYikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGFtcXBsaWJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9hbXFwbGliLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuYW1xcGxpYkludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgYW1xcGxpYkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfYW1xcGxpYkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5hbXFwbGliSW50ZWdyYXRpb24gPSBhbXFwbGliSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudEFtcXBsaWI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbXFwbGliLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js\");\n\nconst instrumentAnthropicAi = nodeCore.generateInstrumentOnce(\n  core.ANTHROPIC_AI_INTEGRATION_NAME,\n  options => new instrumentation.SentryAnthropicAiInstrumentation(options),\n);\n\nconst _anthropicAIIntegration = ((options = {}) => {\n  return {\n    name: core.ANTHROPIC_AI_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentAnthropicAi(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Anthropic AI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments Anthropic AI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.anthropicAIIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.anthropicAIIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.anthropicAIIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst anthropicAIIntegration = core.defineIntegration(_anthropicAIIntegration);\n\nexports.anthropicAIIntegration = anthropicAIIntegration;\nexports.instrumentAnthropicAi = instrumentAnthropicAi;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW50aHJvcGljLWFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsc05BQXNCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2FudGhyb3BpYy1haS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgaW5zdHJ1bWVudEFudGhyb3BpY0FpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgY29yZS5BTlRIUk9QSUNfQUlfSU5URUdSQVRJT05fTkFNRSxcbiAgb3B0aW9ucyA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uLlNlbnRyeUFudGhyb3BpY0FpSW5zdHJ1bWVudGF0aW9uKG9wdGlvbnMpLFxuKTtcblxuY29uc3QgX2FudGhyb3BpY0FJSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGNvcmUuQU5USFJPUElDX0FJX0lOVEVHUkFUSU9OX05BTUUsXG4gICAgb3B0aW9ucyxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50QW50aHJvcGljQWkob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIEFudGhyb3BpYyBBSSBTREsuXG4gKlxuICogVGhpcyBpbnRlZ3JhdGlvbiBpcyBlbmFibGVkIGJ5IGRlZmF1bHQuXG4gKlxuICogV2hlbiBjb25maWd1cmVkLCB0aGlzIGludGVncmF0aW9uIGF1dG9tYXRpY2FsbHkgaW5zdHJ1bWVudHMgQW50aHJvcGljIEFJIFNESyBjbGllbnQgaW5zdGFuY2VzXG4gKiB0byBjYXB0dXJlIHRlbGVtZXRyeSBkYXRhIGZvbGxvd2luZyBPcGVuVGVsZW1ldHJ5IFNlbWFudGljIENvbnZlbnRpb25zIGZvciBHZW5lcmF0aXZlIEFJLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5hbnRocm9waWNBSUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAjIyBPcHRpb25zXG4gKlxuICogLSBgcmVjb3JkSW5wdXRzYDogV2hldGhlciB0byByZWNvcmQgcHJvbXB0IG1lc3NhZ2VzIChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKiAtIGByZWNvcmRPdXRwdXRzYDogV2hldGhlciB0byByZWNvcmQgcmVzcG9uc2UgdGV4dCAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICpcbiAqICMjIyBEZWZhdWx0IEJlaGF2aW9yXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGludGVncmF0aW9uIHdpbGw6XG4gKiAtIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgT05MWSBpZiBgc2VuZERlZmF1bHRQaWlgIGlzIHNldCB0byBgdHJ1ZWAgaW4geW91ciBTZW50cnkgY2xpZW50IG9wdGlvbnNcbiAqIC0gT3RoZXJ3aXNlLCBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIE5PVCByZWNvcmRlZCB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgd2hlbiBzZW5kRGVmYXVsdFBpaSBpcyBmYWxzZVxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuYW50aHJvcGljQUlJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IHRydWUsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiB0cnVlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICpcbiAqIC8vIE5ldmVyIHJlY29yZCBpbnB1dHMvb3V0cHV0cyByZWdhcmRsZXNzIG9mIHNlbmREZWZhdWx0UGlpXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIHNlbmREZWZhdWx0UGlpOiB0cnVlLFxuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuYW50aHJvcGljQUlJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IGZhbHNlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogZmFsc2VcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKi9cbmNvbnN0IGFudGhyb3BpY0FJSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9hbnRocm9waWNBSUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5hbnRocm9waWNBSUludGVncmF0aW9uID0gYW50aHJvcGljQUlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEFudGhyb3BpY0FpID0gaW5zdHJ1bWVudEFudGhyb3BpY0FpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=0.19.2 <1.0.0'];\n\n/**\n * Sentry Anthropic AI instrumentation using OpenTelemetry.\n */\nclass SentryAnthropicAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-anthropic-ai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition(\n      '@anthropic-ai/sdk',\n      supportedVersions,\n      this._patch.bind(this),\n    );\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the Anthropic AI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.Anthropic;\n\n    const config = this.getConfig();\n\n    const WrappedAnthropic = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const recordInputs = config.recordInputs ?? defaultPii;\n      const recordOutputs = config.recordOutputs ?? defaultPii;\n\n      return core.instrumentAnthropicAiClient(instance , {\n        recordInputs,\n        recordOutputs,\n      });\n    } ;\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedAnthropic, Original);\n    Object.setPrototypeOf(WrappedAnthropic.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedAnthropic, key, descriptor);\n        }\n      }\n    }\n\n    // Constructor replacement - handle read-only properties\n    // The Anthropic property might have only a getter, so use defineProperty\n    try {\n      exports.Anthropic = WrappedAnthropic;\n    } catch (error) {\n      // If direct assignment fails, override the property descriptor\n      Object.defineProperty(exports, 'Anthropic', {\n        value: WrappedAnthropic,\n        writable: true,\n        configurable: true,\n        enumerable: true,\n      });\n    }\n\n    // Wrap the default export if it points to the original constructor\n    // Constructor replacement - handle read-only properties\n    // The Anthropic property might have only a getter, so use defineProperty\n    if (exports.default === Original) {\n      try {\n        exports.default = WrappedAnthropic;\n      } catch (error) {\n        // If direct assignment fails, override the property descriptor\n        Object.defineProperty(exports, 'default', {\n          value: WrappedAnthropic,\n          writable: true,\n          configurable: true,\n          enumerable: true,\n        });\n      }\n    }\n    return exports;\n  }\n}\n\nexports.SentryAnthropicAiInstrumentation = SentryAnthropicAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW50aHJvcGljLWFpL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxDQUFDLG9EQUFvRCx5Q0FBeUMsMENBQTBDLDhDQUE4QyxvREFBb0QscURBQXFELGlCQUFpQjs7QUFFaFQsd0JBQXdCLG1CQUFPLENBQUMscU1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0M7QUFDeEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW50aHJvcGljLWFpL2luc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIlNFTlRSWV9SRUxFQVNFXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5QmFzZVBhdGhcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlOZXh0SnNWZXJzaW9uXCJdID0gXCIxNS41LjRcIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3Qgc3VwcG9ydGVkVmVyc2lvbnMgPSBbJz49MC4xOS4yIDwxLjAuMCddO1xuXG4vKipcbiAqIFNlbnRyeSBBbnRocm9waWMgQUkgaW5zdHJ1bWVudGF0aW9uIHVzaW5nIE9wZW5UZWxlbWV0cnkuXG4gKi9cbmNsYXNzIFNlbnRyeUFudGhyb3BpY0FpSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICBzdXBlcignQHNlbnRyeS9pbnN0cnVtZW50YXRpb24tYW50aHJvcGljLWFpJywgY29yZS5TREtfVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW5zdHJ1bWVudGF0aW9uIGJ5IGRlZmluaW5nIHRoZSBtb2R1bGVzIHRvIGJlIHBhdGNoZWQuXG4gICAqL1xuICAgaW5pdCgpIHtcbiAgICBjb25zdCBtb2R1bGUgPSBuZXcgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uKFxuICAgICAgJ0BhbnRocm9waWMtYWkvc2RrJyxcbiAgICAgIHN1cHBvcnRlZFZlcnNpb25zLFxuICAgICAgdGhpcy5fcGF0Y2guYmluZCh0aGlzKSxcbiAgICApO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBwYXRjaCBsb2dpYyBhcHBseWluZyBpbnN0cnVtZW50YXRpb24gdG8gdGhlIEFudGhyb3BpYyBBSSBjbGllbnQgY29uc3RydWN0b3IuXG4gICAqL1xuICAgX3BhdGNoKGV4cG9ydHMpIHtcbiAgICBjb25zdCBPcmlnaW5hbCA9IGV4cG9ydHMuQW50aHJvcGljO1xuXG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5nZXRDb25maWcoKTtcblxuICAgIGNvbnN0IFdyYXBwZWRBbnRocm9waWMgPSBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gUmVmbGVjdC5jb25zdHJ1Y3QoT3JpZ2luYWwsIGFyZ3MpO1xuICAgICAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRQaWkgPSBCb29sZWFuKGNsaWVudD8uZ2V0T3B0aW9ucygpLnNlbmREZWZhdWx0UGlpKTtcblxuICAgICAgY29uc3QgcmVjb3JkSW5wdXRzID0gY29uZmlnLnJlY29yZElucHV0cyA/PyBkZWZhdWx0UGlpO1xuICAgICAgY29uc3QgcmVjb3JkT3V0cHV0cyA9IGNvbmZpZy5yZWNvcmRPdXRwdXRzID8/IGRlZmF1bHRQaWk7XG5cbiAgICAgIHJldHVybiBjb3JlLmluc3RydW1lbnRBbnRocm9waWNBaUNsaWVudChpbnN0YW5jZSAsIHtcbiAgICAgICAgcmVjb3JkSW5wdXRzLFxuICAgICAgICByZWNvcmRPdXRwdXRzLFxuICAgICAgfSk7XG4gICAgfSA7XG5cbiAgICAvLyBQcmVzZXJ2ZSBzdGF0aWMgYW5kIHByb3RvdHlwZSBjaGFpbnNcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoV3JhcHBlZEFudGhyb3BpYywgT3JpZ2luYWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkQW50aHJvcGljLnByb3RvdHlwZSwgT3JpZ2luYWwucHJvdG90eXBlKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9yaWdpbmFsKSkge1xuICAgICAgaWYgKCFbJ2xlbmd0aCcsICduYW1lJywgJ3Byb3RvdHlwZSddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT3JpZ2luYWwsIGtleSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRBbnRocm9waWMsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBBbnRocm9waWMgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICB0cnkge1xuICAgICAgZXhwb3J0cy5BbnRocm9waWMgPSBXcmFwcGVkQW50aHJvcGljO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiBkaXJlY3QgYXNzaWdubWVudCBmYWlscywgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3JcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQW50aHJvcGljJywge1xuICAgICAgICB2YWx1ZTogV3JhcHBlZEFudGhyb3BpYyxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdyYXAgdGhlIGRlZmF1bHQgZXhwb3J0IGlmIGl0IHBvaW50cyB0byB0aGUgb3JpZ2luYWwgY29uc3RydWN0b3JcbiAgICAvLyBDb25zdHJ1Y3RvciByZXBsYWNlbWVudCAtIGhhbmRsZSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgIC8vIFRoZSBBbnRocm9waWMgcHJvcGVydHkgbWlnaHQgaGF2ZSBvbmx5IGEgZ2V0dGVyLCBzbyB1c2UgZGVmaW5lUHJvcGVydHlcbiAgICBpZiAoZXhwb3J0cy5kZWZhdWx0ID09PSBPcmlnaW5hbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZXhwb3J0cy5kZWZhdWx0ID0gV3JhcHBlZEFudGhyb3BpYztcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElmIGRpcmVjdCBhc3NpZ25tZW50IGZhaWxzLCBvdmVycmlkZSB0aGUgcHJvcGVydHkgZGVzY3JpcHRvclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2RlZmF1bHQnLCB7XG4gICAgICAgICAgdmFsdWU6IFdyYXBwZWRBbnRocm9waWMsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfVxufVxuXG5leHBvcnRzLlNlbnRyeUFudGhyb3BpY0FpSW5zdHJ1bWVudGF0aW9uID0gU2VudHJ5QW50aHJvcGljQWlJbnN0cnVtZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0cnVtZW50YXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\");\n\nconst CLAUDE_CODE_INTEGRATION_NAME = 'ClaudeCode';\n\n// Global singleton - only patch once per application instance\nlet _globalPatchedQuery = null;\nlet _initPromise = null;\n\n/**\n * Lazily loads and patches the Claude Code SDK.\n * Ensures only one patched instance exists globally.\n */\nasync function ensurePatchedQuery() {\n  if (_globalPatchedQuery) {\n    return;\n  }\n\n  if (_initPromise) {\n    return _initPromise;\n  }\n\n  _initPromise = (async () => {\n    try {\n      // Use webpackIgnore to prevent webpack from trying to resolve this at build time\n      // The import resolves at runtime from the user's node_modules\n      const sdkPath = '@anthropic-ai/claude-agent-sdk';\n      const claudeSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n      if (!claudeSDK || typeof claudeSDK.query !== 'function') {\n        throw new Error(\n          `Failed to find 'query' function in @anthropic-ai/claude-agent-sdk.\\n` +\n            `Make sure you have version >=0.1.0 installed.`,\n        );\n      }\n\n      const client = core.getClient();\n      const integration = client?.getIntegrationByName(CLAUDE_CODE_INTEGRATION_NAME);\n      const options = (integration )?.options  || {};\n\n      _globalPatchedQuery = instrumentation.patchClaudeCodeQuery(claudeSDK.query, options);\n    } catch (error) {\n      // Reset state on failure to allow retry on next call\n      _initPromise = null;\n\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Unknown error occurred while loading @anthropic-ai/claude-agent-sdk';\n\n      throw new Error(\n        `Failed to instrument Claude Code SDK:\\n${errorMessage}\\n\\n` +\n          `Make sure @anthropic-ai/claude-agent-sdk is installed:\\n` +\n          `  npm install @anthropic-ai/claude-agent-sdk\\n` +\n          `  # or\\n` +\n          `  yarn add @anthropic-ai/claude-agent-sdk`,\n      );\n    }\n  })();\n\n  return _initPromise;\n}\n\n/**\n * Creates a Sentry-instrumented query function for the Claude Code SDK.\n *\n * This is a convenience helper that reduces boilerplate to a single line.\n * The SDK is lazily loaded on first query call, and the patched version is cached globally.\n *\n * **Important**: This helper is NOT automatic. You must call it in your code.\n * The Claude Code SDK cannot be automatically instrumented due to ESM module\n * and webpack bundling limitations.\n *\n * @param options - Optional configuration for this specific agent instance\n * @param options.name - Custom agent name for differentiation (defaults to 'claude-code')\n * @returns An instrumented query function ready to use\n *\n * @example\n * ```typescript\n * import { createInstrumentedClaudeQuery } from '@sentry/node';\n *\n * // Default agent name ('claude-code')\n * const query = createInstrumentedClaudeQuery();\n *\n * // Custom agent name for differentiation\n * const appBuilder = createInstrumentedClaudeQuery({ name: 'app-builder' });\n * const chatAgent = createInstrumentedClaudeQuery({ name: 'chat-assistant' });\n *\n * // Use as normal - automatically instrumented!\n * for await (const message of query({\n *   prompt: 'Hello',\n *   options: { model: 'claude-sonnet-4-5' }\n * })) {\n *   console.log(message);\n * }\n * ```\n *\n * Configuration is automatically pulled from your `claudeCodeIntegration()` setup:\n *\n * @example\n * ```typescript\n * Sentry.init({\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,   // These options are used\n *       recordOutputs: true,  // by createInstrumentedClaudeQuery()\n *     })\n *   ]\n * });\n * ```\n */\nfunction createInstrumentedClaudeQuery(\n  options = {}\n) {\n  const agentName = options.name ?? 'claude-code';\n\n  return async function* query(...args) {\n    await ensurePatchedQuery();\n\n    if (!_globalPatchedQuery) {\n      throw new Error('[Sentry] Failed to initialize instrumented Claude Code query function');\n    }\n\n    // Create a new patched instance with custom agent name\n    const client = core.getClient();\n    const integration = client?.getIntegrationByName(CLAUDE_CODE_INTEGRATION_NAME);\n    const integrationOptions = (integration )?.options  || {};\n\n    // Import SDK again to get fresh query function\n    const sdkPath = '@anthropic-ai/claude-agent-sdk';\n    const claudeSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n    // Patch with custom agent name\n    const customPatchedQuery = instrumentation.patchClaudeCodeQuery(claudeSDK.query, {\n      ...integrationOptions,\n      agentName,\n    });\n\n    yield* customPatchedQuery(...args);\n  };\n}\n\nexports.createInstrumentedClaudeQuery = createInstrumentedClaudeQuery;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/helpers.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst CLAUDE_CODE_INTEGRATION_NAME = 'ClaudeCode';\n\nconst _claudeCodeIntegration = ((options = {}) => {\n  return {\n    name: CLAUDE_CODE_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      // Note: Automatic patching via require hooks doesn't work for ESM modules\n      // or webpack-bundled dependencies. Users must manually patch using patchClaudeCodeQuery()\n      // in their route files.\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Claude Code SDK.\n *\n * **Important**: Due to ESM module and bundler limitations, this integration requires\n * using the `createInstrumentedClaudeQuery()` helper function in your code.\n * See the example below for proper usage.\n *\n * This integration captures telemetry data following OpenTelemetry Semantic Conventions\n * for Generative AI, including:\n * - Agent invocation spans (`invoke_agent`)\n * - LLM chat spans (`chat`)\n * - Tool execution spans (`execute_tool`)\n * - Token usage, model info, and session tracking\n *\n * @example\n * ```typescript\n * // Step 1: Configure the integration\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   dsn: 'your-dsn',\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Step 2: Use the helper in your routes\n * import { createInstrumentedClaudeQuery } from '@sentry/node';\n *\n * const query = createInstrumentedClaudeQuery();\n *\n * // Use query as normal - automatically instrumented!\n * for await (const message of query({\n *   prompt: 'Hello',\n *   options: { model: 'claude-sonnet-4-5' }\n * })) {\n *   console.log(message);\n * }\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text, tool calls, and outputs (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```typescript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.claudeCodeIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n * @see https://docs.sentry.io/platforms/javascript/guides/node/ai-monitoring/\n */\nconst claudeCodeIntegration = core.defineIntegration(_claudeCodeIntegration);\n\nexports.claudeCodeIntegration = claudeCodeIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY2xhdWRlLWNvZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjOztBQUVuQzs7QUFFQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxZQUFZLGdDQUFnQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jbGF1ZGUtY29kZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBDTEFVREVfQ09ERV9JTlRFR1JBVElPTl9OQU1FID0gJ0NsYXVkZUNvZGUnO1xuXG5jb25zdCBfY2xhdWRlQ29kZUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBDTEFVREVfQ09ERV9JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gTm90ZTogQXV0b21hdGljIHBhdGNoaW5nIHZpYSByZXF1aXJlIGhvb2tzIGRvZXNuJ3Qgd29yayBmb3IgRVNNIG1vZHVsZXNcbiAgICAgIC8vIG9yIHdlYnBhY2stYnVuZGxlZCBkZXBlbmRlbmNpZXMuIFVzZXJzIG11c3QgbWFudWFsbHkgcGF0Y2ggdXNpbmcgcGF0Y2hDbGF1ZGVDb2RlUXVlcnkoKVxuICAgICAgLy8gaW4gdGhlaXIgcm91dGUgZmlsZXMuXG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIENsYXVkZSBDb2RlIFNESy5cbiAqXG4gKiAqKkltcG9ydGFudCoqOiBEdWUgdG8gRVNNIG1vZHVsZSBhbmQgYnVuZGxlciBsaW1pdGF0aW9ucywgdGhpcyBpbnRlZ3JhdGlvbiByZXF1aXJlc1xuICogdXNpbmcgdGhlIGBjcmVhdGVJbnN0cnVtZW50ZWRDbGF1ZGVRdWVyeSgpYCBoZWxwZXIgZnVuY3Rpb24gaW4geW91ciBjb2RlLlxuICogU2VlIHRoZSBleGFtcGxlIGJlbG93IGZvciBwcm9wZXIgdXNhZ2UuXG4gKlxuICogVGhpcyBpbnRlZ3JhdGlvbiBjYXB0dXJlcyB0ZWxlbWV0cnkgZGF0YSBmb2xsb3dpbmcgT3BlblRlbGVtZXRyeSBTZW1hbnRpYyBDb252ZW50aW9uc1xuICogZm9yIEdlbmVyYXRpdmUgQUksIGluY2x1ZGluZzpcbiAqIC0gQWdlbnQgaW52b2NhdGlvbiBzcGFucyAoYGludm9rZV9hZ2VudGApXG4gKiAtIExMTSBjaGF0IHNwYW5zIChgY2hhdGApXG4gKiAtIFRvb2wgZXhlY3V0aW9uIHNwYW5zIChgZXhlY3V0ZV90b29sYClcbiAqIC0gVG9rZW4gdXNhZ2UsIG1vZGVsIGluZm8sIGFuZCBzZXNzaW9uIHRyYWNraW5nXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFN0ZXAgMTogQ29uZmlndXJlIHRoZSBpbnRlZ3JhdGlvblxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBkc246ICd5b3VyLWRzbicsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5jbGF1ZGVDb2RlSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBTdGVwIDI6IFVzZSB0aGUgaGVscGVyIGluIHlvdXIgcm91dGVzXG4gKiBpbXBvcnQgeyBjcmVhdGVJbnN0cnVtZW50ZWRDbGF1ZGVRdWVyeSB9IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogY29uc3QgcXVlcnkgPSBjcmVhdGVJbnN0cnVtZW50ZWRDbGF1ZGVRdWVyeSgpO1xuICpcbiAqIC8vIFVzZSBxdWVyeSBhcyBub3JtYWwgLSBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRlZCFcbiAqIGZvciBhd2FpdCAoY29uc3QgbWVzc2FnZSBvZiBxdWVyeSh7XG4gKiAgIHByb21wdDogJ0hlbGxvJyxcbiAqICAgb3B0aW9uczogeyBtb2RlbDogJ2NsYXVkZS1zb25uZXQtNC01JyB9XG4gKiB9KSkge1xuICogICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiAtIGByZWNvcmRJbnB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCBwcm9tcHQgbWVzc2FnZXMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYHJlY29yZE91dHB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCByZXNwb25zZSB0ZXh0LCB0b29sIGNhbGxzLCBhbmQgb3V0cHV0cyAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICpcbiAqICMjIyBEZWZhdWx0IEJlaGF2aW9yXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGludGVncmF0aW9uIHdpbGw6XG4gKiAtIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgT05MWSBpZiBgc2VuZERlZmF1bHRQaWlgIGlzIHNldCB0byBgdHJ1ZWAgaW4geW91ciBTZW50cnkgY2xpZW50IG9wdGlvbnNcbiAqIC0gT3RoZXJ3aXNlLCBpbnB1dHMgYW5kIG91dHB1dHMgYXJlIE5PVCByZWNvcmRlZCB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFJlY29yZCBpbnB1dHMgYW5kIG91dHB1dHMgd2hlbiBzZW5kRGVmYXVsdFBpaSBpcyBmYWxzZVxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkuY2xhdWRlQ29kZUludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogdHJ1ZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IHRydWVcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gTmV2ZXIgcmVjb3JkIGlucHV0cy9vdXRwdXRzIHJlZ2FyZGxlc3Mgb2Ygc2VuZERlZmF1bHRQaWlcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgc2VuZERlZmF1bHRQaWk6IHRydWUsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5jbGF1ZGVDb2RlSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiBmYWxzZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IGZhbHNlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSBodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2FpLW1vbml0b3JpbmcvXG4gKi9cbmNvbnN0IGNsYXVkZUNvZGVJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2NsYXVkZUNvZGVJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuY2xhdWRlQ29kZUludGVncmF0aW9uID0gY2xhdWRlQ29kZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst GEN_AI_ATTRIBUTES = {\n  SYSTEM: 'gen_ai.system',\n  OPERATION_NAME: 'gen_ai.operation.name',\n  REQUEST_MODEL: 'gen_ai.request.model',\n  REQUEST_MESSAGES: 'gen_ai.request.messages',\n  RESPONSE_TEXT: 'gen_ai.response.text',\n  RESPONSE_TOOL_CALLS: 'gen_ai.response.tool_calls',\n  RESPONSE_ID: 'gen_ai.response.id',\n  RESPONSE_MODEL: 'gen_ai.response.model',\n  USAGE_INPUT_TOKENS: 'gen_ai.usage.input_tokens',\n  USAGE_OUTPUT_TOKENS: 'gen_ai.usage.output_tokens',\n  USAGE_TOTAL_TOKENS: 'gen_ai.usage.total_tokens',\n  TOOL_NAME: 'gen_ai.tool.name',\n  TOOL_TYPE: 'gen_ai.tool.type',\n  TOOL_INPUT: 'gen_ai.tool.input',\n  TOOL_OUTPUT: 'gen_ai.tool.output',\n  AGENT_NAME: 'gen_ai.agent.name',\n} ;\n\nconst SENTRY_ORIGIN = 'auto.ai.claude-code';\n\n/**\n * Maps Claude Code tool names to OpenTelemetry tool types.\n *\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/\n * @param toolName - The name of the tool (e.g., 'Bash', 'Read', 'WebSearch')\n * @returns The OpenTelemetry tool type: 'function', 'extension', or 'datastore'\n */\nfunction getToolType(toolName) {\n  // Client-side execution tools - functions that run on the client\n  const functionTools = new Set([\n    'Bash', 'BashOutput', 'KillShell', // Shell/process tools\n    'Read', 'Write', 'Edit', // File operations\n    'Glob', 'Grep', // File search\n    'Task', 'ExitPlanMode', 'TodoWrite', // Agent control\n    'NotebookEdit', 'SlashCommand', // Specialized operations\n  ]);\n\n  // Agent-side API calls - external service integrations\n  const extensionTools = new Set([\n    'WebSearch', 'WebFetch',\n  ]);\n\n  // Data access tools - database/structured data operations\n  // (Currently none in Claude Code, but future-proofing)\n  const datastoreTools = new Set([]);\n\n  if (functionTools.has(toolName)) return 'function';\n  if (extensionTools.has(toolName)) return 'extension';\n  if (datastoreTools.has(toolName)) return 'datastore';\n\n  // Default to function for unknown tools (safest assumption)\n  return 'function';\n}\n\nfunction setTokenUsageAttributes(\n  span,\n  inputTokens,\n  outputTokens,\n  cacheCreationTokens,\n  cacheReadTokens,\n) {\n  const attrs = {};\n\n  if (typeof inputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_INPUT_TOKENS] = inputTokens;\n  }\n  if (typeof outputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_OUTPUT_TOKENS] = outputTokens;\n  }\n\n  const total = (inputTokens ?? 0) + (outputTokens ?? 0) + (cacheCreationTokens ?? 0) + (cacheReadTokens ?? 0);\n  if (total > 0) {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_TOTAL_TOKENS] = total;\n  }\n\n  if (Object.keys(attrs).length > 0) {\n    span.setAttributes(attrs);\n  }\n}\n\n/**\n * Patches the Claude Code SDK query function with Sentry instrumentation.\n * This function can be called directly to patch an imported query function.\n */\nfunction patchClaudeCodeQuery(\n  queryFunction,\n  options = {},\n) {\n  const patchedQuery = function ( ...args) {\n    const client = core.getClient();\n    const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n    const recordInputs = options.recordInputs ?? defaultPii;\n    const recordOutputs = options.recordOutputs ?? defaultPii;\n    const agentName = options.agentName ?? 'claude-code';\n\n    // Parse query arguments\n    const [queryParams] = args ;\n    const { options: queryOptions, inputMessages } = queryParams || {};\n    const model = (queryOptions )?.model ?? 'sonnet';\n\n    // Create original query instance\n    const originalQueryInstance = queryFunction.apply(this, args);\n\n    // Create instrumented generator\n    const instrumentedGenerator = _createInstrumentedGenerator(\n      originalQueryInstance,\n      model ,\n      { recordInputs, recordOutputs, inputMessages, agentName },\n    );\n\n    // Preserve Query interface methods\n    if (typeof (originalQueryInstance ).interrupt === 'function') {\n      (instrumentedGenerator ).interrupt = (\n        (originalQueryInstance ).interrupt\n      ).bind(originalQueryInstance);\n    }\n    if (typeof (originalQueryInstance ).setPermissionMode === 'function') {\n      (instrumentedGenerator ).setPermissionMode = (\n        (originalQueryInstance ).setPermissionMode\n      ).bind(originalQueryInstance);\n    }\n\n    return instrumentedGenerator;\n  };\n\n  return patchedQuery ;\n}\n\n/**\n * Creates an instrumented async generator that wraps the original query.\n */\nfunction _createInstrumentedGenerator(\n  originalQuery,\n  model,\n  instrumentationOptions\n\n,\n) {\n    const agentName = instrumentationOptions.agentName ?? 'claude-code';\n\n    return core.startSpanManual(\n      {\n        name: `invoke_agent ${agentName}`,\n        op: 'gen_ai.invoke_agent',\n        attributes: {\n          [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n          [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n          [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n          [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        },\n      },\n      async function* (span) {\n        // State accumulation\n        let sessionId = null;\n        let currentLLMSpan = null;\n        let currentTurnContent = '';\n        let currentTurnTools = [];\n        let currentTurnId = null;\n        let currentTurnModel = null;\n        let inputMessagesCaptured = false;\n        let finalResult = null;\n        let previousLLMSpan = null;\n        let previousTurnTools = [];\n\n        try {\n          for await (const message of originalQuery) {\n            const msg = message ;\n\n            // Extract session ID from system message\n            if (msg.type === 'system' && msg.session_id) {\n              sessionId = msg.session_id ;\n\n              if (\n                !inputMessagesCaptured &&\n                instrumentationOptions.recordInputs &&\n                msg.conversation_history\n              ) {\n                span.setAttributes({\n                  [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify(msg.conversation_history),\n                });\n                inputMessagesCaptured = true;\n              }\n            }\n\n            // Handle assistant messages\n            if (msg.type === 'assistant') {\n              // Close previous LLM span if still open\n              if (previousLLMSpan) {\n                previousLLMSpan.setStatus({ code: 1 });\n                previousLLMSpan.end();\n                previousLLMSpan = null;\n                previousTurnTools = [];\n              }\n\n              // Create new LLM span\n              if (!currentLLMSpan) {\n                currentLLMSpan = core.withActiveSpan(span, () => {\n                  return core.startSpanManual(\n                    {\n                      name: `chat ${model}`,\n                      op: 'gen_ai.chat',\n                      attributes: {\n                        [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n                        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n                        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                      },\n                    },\n                    (childSpan) => {\n                      if (instrumentationOptions.recordInputs && instrumentationOptions.inputMessages) {\n                        childSpan.setAttributes({\n                          [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify(\n                            instrumentationOptions.inputMessages,\n                          ),\n                        });\n                      }\n                      return childSpan;\n                    },\n                  );\n                });\n\n                currentTurnContent = '';\n                currentTurnTools = [];\n              }\n\n              // Accumulate content\n              const content = (msg.message )?.content ;\n              if (Array.isArray(content)) {\n                const textContent = content\n                  .filter((c) => (c ).type === 'text')\n                  .map((c) => (c ).text )\n                  .join('');\n                if (textContent) {\n                  currentTurnContent += textContent;\n                }\n\n                const tools = content.filter((c) => (c ).type === 'tool_use');\n                if (tools.length > 0) {\n                  currentTurnTools.push(...tools);\n                }\n              }\n\n              if ((msg.message )?.id) {\n                currentTurnId = (msg.message ).id ;\n              }\n              if ((msg.message )?.model) {\n                currentTurnModel = (msg.message ).model ;\n              }\n            }\n\n            // Handle result messages\n            if (msg.type === 'result') {\n              if (msg.result) {\n                finalResult = msg.result ;\n              }\n\n              // Close previous LLM span\n              if (previousLLMSpan) {\n                previousLLMSpan.setStatus({ code: 1 });\n                previousLLMSpan.end();\n                previousLLMSpan = null;\n                previousTurnTools = [];\n              }\n\n              // Finalize current LLM span\n              if (currentLLMSpan) {\n                if (instrumentationOptions.recordOutputs && currentTurnContent) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: currentTurnContent,\n                  });\n                }\n\n                if (instrumentationOptions.recordOutputs && currentTurnTools.length > 0) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_TOOL_CALLS]: JSON.stringify(currentTurnTools),\n                  });\n                }\n\n                if (currentTurnId) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_ID]: currentTurnId,\n                  });\n                }\n                if (currentTurnModel) {\n                  currentLLMSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.RESPONSE_MODEL]: currentTurnModel,\n                  });\n                }\n\n                if (msg.usage) {\n                  const usage = msg.usage ;\n                  setTokenUsageAttributes(\n                    currentLLMSpan,\n                    usage.input_tokens,\n                    usage.output_tokens,\n                    usage.cache_creation_input_tokens,\n                    usage.cache_read_input_tokens,\n                  );\n                }\n\n                currentLLMSpan.setStatus({ code: 1 });\n                currentLLMSpan.end();\n\n                previousLLMSpan = currentLLMSpan;\n                previousTurnTools = currentTurnTools;\n\n                currentLLMSpan = null;\n                currentTurnContent = '';\n                currentTurnTools = [];\n                currentTurnId = null;\n                currentTurnModel = null;\n              }\n            }\n\n            // Handle tool results\n            if (msg.type === 'user' && (msg.message )?.content) {\n              const content = (msg.message ).content ;\n              const toolResults = Array.isArray(content)\n                ? content.filter((c) => (c ).type === 'tool_result')\n                : [];\n\n              for (const toolResult of toolResults) {\n                const tr = toolResult ;\n                let matchingTool = currentTurnTools.find(\n                  (t) => (t ).id === tr.tool_use_id,\n                ) ;\n                let parentLLMSpan = currentLLMSpan;\n\n                if (!matchingTool && previousTurnTools.length > 0) {\n                  matchingTool = previousTurnTools.find(\n                    (t) => (t ).id === tr.tool_use_id,\n                  ) ;\n                  parentLLMSpan = previousLLMSpan;\n                }\n\n                if (matchingTool && parentLLMSpan) {\n                  core.withActiveSpan(parentLLMSpan, () => {\n                    const toolName = matchingTool.name ;\n                    const toolType = getToolType(toolName);\n\n                    core.startSpan(\n                      {\n                        name: `execute_tool ${toolName}`,\n                        op: 'gen_ai.execute_tool',\n                        attributes: {\n                          [GEN_AI_ATTRIBUTES.SYSTEM]: agentName,\n                          [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: model,\n                          [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                          [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                          [GEN_AI_ATTRIBUTES.TOOL_NAME]: toolName,\n                          [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                          [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                          [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                        },\n                      },\n                      (toolSpan) => {\n                        if (instrumentationOptions.recordInputs && matchingTool.input) {\n                          toolSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_INPUT]: JSON.stringify(matchingTool.input),\n                          });\n                        }\n\n                        if (instrumentationOptions.recordOutputs && tr.content) {\n                          toolSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]:\n                              typeof tr.content === 'string' ? tr.content : JSON.stringify(tr.content),\n                          });\n                        }\n\n                        // Set span status explicitly\n                        if (tr.is_error) {\n                          toolSpan.setStatus({ code: 2, message: 'Tool execution error' });\n                        } else {\n                          toolSpan.setStatus({ code: 1 }); // Explicit success status\n                        }\n                      },\n                    );\n                  });\n                }\n              }\n            }\n\n            yield message;\n          }\n\n          if (instrumentationOptions.recordOutputs && finalResult) {\n            span.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: finalResult,\n            });\n          }\n\n          if (sessionId) {\n            span.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_ID]: sessionId,\n            });\n          }\n\n          span.setStatus({ code: 1 });\n        } catch (error) {\n          // Capture exception to Sentry with proper metadata\n          core.captureException(error, {\n            mechanism: {\n              type: SENTRY_ORIGIN,\n              handled: false,\n            },\n          });\n\n          span.setStatus({ code: 2, message: (error ).message });\n          throw error;\n        } finally {\n          // Ensure all child spans are closed even if generator exits early\n          if (currentLLMSpan && currentLLMSpan.isRecording()) {\n            currentLLMSpan.setStatus({ code: 1 });\n            currentLLMSpan.end();\n          }\n\n          if (previousLLMSpan && previousLLMSpan.isRecording()) {\n            previousLLMSpan.setStatus({ code: 1 });\n            previousLLMSpan.end();\n          }\n\n          span.end();\n        }\n      },\n    );\n}\n\nexports.patchClaudeCodeQuery = patchClaudeCodeQuery;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-connect@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err, {\n    mechanism: {\n      handled: false,\n      type: 'auto.middleware.connect',\n    },\n  });\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  nodeCore.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need the \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvY29ubmVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pELEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Nvbm5lY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkNvbm5lY3QgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tY29ubmVjdCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0Nvbm5lY3QnO1xuXG5jb25zdCBpbnN0cnVtZW50Q29ubmVjdCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkNvbm5lY3QuQ29ubmVjdEluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2Nvbm5lY3RJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50Q29ubmVjdCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtDb25uZWN0XShodHRwczovL2dpdGh1Yi5jb20vc2VuY2hhbGFicy9jb25uZWN0LykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBpbml0aWFsaXplIHlvdXIgY29ubmVjdCBhcHAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Nvbm5lY3QgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvY29ubmVjdC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5jb25uZWN0SW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2Nvbm5lY3RJbnRlZ3JhdGlvbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBjb25uZWN0RXJyb3JNaWRkbGV3YXJlKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVyciwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICB0eXBlOiAnYXV0by5taWRkbGV3YXJlLmNvbm5lY3QnLFxuICAgIH0sXG4gIH0pO1xuICBuZXh0KGVycik7XG59XG5cbi8qKlxuICogQWRkIGEgQ29ubmVjdCBtaWRkbGV3YXJlIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBDb25uZWN0IGFwcCB0byBhdHRhY2ggdGhlIGVycm9yIGhhbmRsZXIgdG9cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBjb25uZWN0ID0gcmVxdWlyZShcImNvbm5lY3RcIik7XG4gKlxuICogY29uc3QgYXBwID0gY29ubmVjdCgpO1xuICpcbiAqIFNlbnRyeS5zZXR1cENvbm5lY3RFcnJvckhhbmRsZXIoYXBwKTtcbiAqXG4gKiAvLyBBZGQgeW91IGNvbm5lY3Qgcm91dGVzIGhlcmVcbiAqXG4gKiBhcHAubGlzdGVuKDMwMDApO1xuICogYGBgXG4gKi9cbmNvbnN0IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShjb25uZWN0RXJyb3JNaWRkbGV3YXJlKTtcblxuICAvLyBTYWRseSwgQ29ubmVjdEluc3RydW1lbnRhdGlvbiBoYXMgbm8gcmVxdWVzdEhvb2ssIHNvIHdlIG5lZWQgdG8gYWRkIHRoZSBhdHRyaWJ1dGVzIGhlcmVcbiAgLy8gV2UgcmVnaXN0ZXIgdGhpcyBob29rIGluIHRoaXMgbWV0aG9kLCBiZWNhdXNlIGlmIHdlIHJlZ2lzdGVyIGl0IGluIHRoZSBpbnRlZ3JhdGlvbiBgc2V0dXBgLFxuICAvLyBpdCB3b3VsZCBhbHdheXMgcnVuIGV2ZW4gZm9yIHVzZXJzIHRoYXQgYXJlIG5vdCBldmVuIHVzaW5nIGNvbm5lY3RcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKGNsaWVudCkge1xuICAgIGNsaWVudC5vbignc3BhblN0YXJ0Jywgc3BhbiA9PiB7XG4gICAgICBhZGRDb25uZWN0U3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG4gICAgfSk7XG4gIH1cblxuICBub2RlQ29yZS5lbnN1cmVJc1dyYXBwZWQoYXBwLnVzZSwgJ2Nvbm5lY3QnKTtcbn07XG5cbmZ1bmN0aW9uIGFkZENvbm5lY3RTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcmVxdWVzdF9oYW5kbGVyXG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydjb25uZWN0LnR5cGUnXTtcblxuICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgc2V0LCBvciB3ZSBoYXZlIG5vIGNvbm5lY3Qgc3Bhbiwgbm8gbmVlZCB0byBwcm9jZXNzIGFnYWluLi4uXG4gIGlmIChhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gfHwgIXR5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmNvbm5lY3QnLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBgJHt0eXBlfS5jb25uZWN0YCxcbiAgfSk7XG5cbiAgLy8gQWxzbyB1cGRhdGUgdGhlIG5hbWUsIHdlIGRvbid0IG5lZWQgdGhlIFwibWlkZGxld2FyZSAtIFwiIHByZWZpeFxuICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1snY29ubmVjdC5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSk7XG4gIH1cbn1cblxuZXhwb3J0cy5jb25uZWN0SW50ZWdyYXRpb24gPSBjb25uZWN0SW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRDb25uZWN0ID0gaW5zdHJ1bWVudENvbm5lY3Q7XG5leHBvcnRzLnNldHVwQ29ubmVjdEVycm9ySGFuZGxlciA9IHNldHVwQ29ubmVjdEVycm9ySGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3QuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-dataloader@0.22.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentDataloader();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      // This is called either immediately or when the instrumentation is wrapped\n      instrumentationWrappedCallback?.(() => {\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n          if (spanJSON.description?.startsWith('dataloader')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n          }\n\n          // These are all possible dataloader span descriptions\n          // Still checking for the future versions\n          // in case they add support for `clear` and `prime`\n          if (\n            spanJSON.description === 'dataloader.load' ||\n            spanJSON.description === 'dataloader.loadMany' ||\n            spanJSON.description === 'dataloader.batch'\n          ) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n            // TODO: We can try adding `key` to the `data` attribute upstream.\n            // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n          }\n        });\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQ0FBa0MsbUJBQU8sQ0FBQyxxT0FBMkM7QUFDckYsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRGF0YWxvYWRlcic7XG5cbmNvbnN0IGluc3RydW1lbnREYXRhbG9hZGVyID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlci5EYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgIH0pLFxuKTtcblxuY29uc3QgX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIGxldCBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IGluc3RydW1lbnREYXRhbG9hZGVyKCk7XG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2sgPSBub2RlQ29yZS5pbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICAvLyBUaGlzIGlzIGNhbGxlZCBlaXRoZXIgaW1tZWRpYXRlbHkgb3Igd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIHdyYXBwZWRcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaz8uKCgpID0+IHtcbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgICBpZiAoc3BhbkpTT04uZGVzY3JpcHRpb24/LnN0YXJ0c1dpdGgoJ2RhdGFsb2FkZXInKSkge1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5kYXRhbG9hZGVyJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlc2UgYXJlIGFsbCBwb3NzaWJsZSBkYXRhbG9hZGVyIHNwYW4gZGVzY3JpcHRpb25zXG4gICAgICAgICAgLy8gU3RpbGwgY2hlY2tpbmcgZm9yIHRoZSBmdXR1cmUgdmVyc2lvbnNcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZXkgYWRkIHN1cHBvcnQgZm9yIGBjbGVhcmAgYW5kIGBwcmltZWBcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZCcgfHxcbiAgICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5sb2FkTWFueScgfHxcbiAgICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5iYXRjaCdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2NhY2hlLmdldCcpO1xuICAgICAgICAgICAgLy8gVE9ETzogV2UgY2FuIHRyeSBhZGRpbmcgYGtleWAgdG8gdGhlIGBkYXRhYCBhdHRyaWJ1dGUgdXBzdHJlYW0uXG4gICAgICAgICAgICAvLyBPciBhbHRlcm5hdGl2ZWx5LCB3ZSBjYW4gYWRkIGByZXF1ZXN0SG9va2AgdG8gdGhlIGRhdGFsb2FkZXIgaW5zdHJ1bWVudGF0aW9uLlxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2RhdGFsb2FkZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2RhdGFsb2FkZXIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BkYXRhbG9hZGVySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZGF0YWxvYWRlci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmRhdGFsb2FkZXJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZGF0YWxvYWRlckludGVncmF0aW9uID0gZGF0YWxvYWRlckludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnREYXRhbG9hZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWxvYWRlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Express';\n\nfunction requestHook(span) {\n  nodeCore.addOriginToSpan(span, 'auto.http.otel.express');\n\n  const attributes = core.spanToJSON(span).data;\n  // this is one of: middleware, request_handler, router\n  const type = attributes['express.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n  }\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['express.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nfunction spanNameHook(info, defaultName) {\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n    return defaultName;\n  }\n  if (info.layerType === 'request_handler') {\n    // type cast b/c Otel unfortunately types info.request as any :(\n    const req = info.request ;\n    const method = req.method ? req.method.toUpperCase() : 'GET';\n    core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n  }\n  return defaultName;\n}\n\nconst instrumentExpress = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    request,\n    res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    // When an error happens, the `expressRequestHandler` middleware does not run, so we set it here too\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const eventId = core.captureException(error, { mechanism: { type: 'auto.middleware.express', handled: false } });\n      (res ).sentry = eventId;\n    }\n\n    next(error);\n  };\n}\n\nfunction expressRequestHandler() {\n  return function sentryRequestMiddleware(\n    request,\n    _res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    next();\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressRequestHandler());\n  app.use(expressErrorHandler(options));\n  nodeCore.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || error.output?.statusCode;\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst minimatch = __webpack_require__(/*! minimatch */ \"(ssr)/../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/commonjs/index.js\");\n\n/*\nVendored in and modified from @fastify/otel version 0.8.0\nhttps://github.com/fastify/otel/releases/tag/v0.8.0\n\nTried not to modify the original code too much keeping it as a JavaScript CJS module to make it easier to update when required\n\nModifications include:\n- Removed reading of package.json to get the version and package name\n\nMIT License\n\nCopyright (c) 2024 Fastify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n// SENTRY VENDOR NOTE\n// Instead of using the package.json file, we hard code the package name and version here.\nconst PACKAGE_NAME = '@fastify/otel';\nconst PACKAGE_VERSION = '0.8.0';\n\n// Constants\nconst SUPPORTED_VERSIONS = '>=4.0.0 <6';\nconst FASTIFY_HOOKS = [\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preHandler',\n  'preSerialization',\n  'onSend',\n  'onResponse',\n  'onError',\n];\nconst ATTRIBUTE_NAMES = {\n  HOOK_NAME: 'hook.name',\n  FASTIFY_TYPE: 'fastify.type',\n  HOOK_CALLBACK_NAME: 'hook.callback.name',\n  ROOT: 'fastify.root',\n};\nconst HOOK_TYPES = {\n  ROUTE: 'route-hook',\n  INSTANCE: 'hook',\n  HANDLER: 'request-handler',\n};\nconst ANONYMOUS_FUNCTION_NAME = 'anonymous';\n\n// Symbols\nconst kInstrumentation = Symbol('fastify otel instance');\nconst kRequestSpan = Symbol('fastify otel request spans');\nconst kRequestContext = Symbol('fastify otel request context');\nconst kAddHookOriginal = Symbol('fastify otel addhook original');\nconst kSetNotFoundOriginal = Symbol('fastify otel setnotfound original');\nconst kIgnorePaths = Symbol('fastify otel ignore path');\n\nclass FastifyOtelInstrumentation extends instrumentation.InstrumentationBase {\n  constructor(config) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n    this.servername = config?.servername ?? process.env.OTEL_SERVICE_NAME ?? 'fastify';\n    this[kIgnorePaths] = null;\n    this._logger = api.diag.createComponentLogger({ namespace: PACKAGE_NAME });\n\n    if (config?.ignorePaths != null || process.env.OTEL_FASTIFY_IGNORE_PATHS != null) {\n      const ignorePaths = config?.ignorePaths ?? process.env.OTEL_FASTIFY_IGNORE_PATHS;\n\n      if ((typeof ignorePaths !== 'string' || ignorePaths.length === 0) && typeof ignorePaths !== 'function') {\n        throw new TypeError('ignorePaths must be a string or a function');\n      }\n\n      const globMatcher = minimatch.minimatch;\n\n      this[kIgnorePaths] = routeOptions => {\n        if (typeof ignorePaths === 'function') {\n          return ignorePaths(routeOptions);\n        } else {\n          return globMatcher(routeOptions.url, ignorePaths);\n        }\n      };\n    }\n  }\n\n  enable() {\n    if (this._handleInitialization === undefined && this.getConfig().registerOnInitialization) {\n      const FastifyInstrumentationPlugin = this.plugin();\n      this._handleInitialization = message => {\n        message.fastify.register(FastifyInstrumentationPlugin);\n      };\n      dc.default.subscribe('fastify.initialization', this._handleInitialization);\n    }\n    return super.enable();\n  }\n\n  disable() {\n    if (this._handleInitialization) {\n      dc.default.unsubscribe('fastify.initialization', this._handleInitialization);\n      this._handleInitialization = undefined;\n    }\n    return super.disable();\n  }\n\n  // We do not do patching in this instrumentation\n  init() {\n    return [];\n  }\n\n  plugin() {\n    const instrumentation = this;\n\n    FastifyInstrumentationPlugin[Symbol.for('skip-override')] = true;\n    FastifyInstrumentationPlugin[Symbol.for('fastify.display-name')] = '@fastify/otel';\n    FastifyInstrumentationPlugin[Symbol.for('plugin-meta')] = {\n      fastify: SUPPORTED_VERSIONS,\n      name: '@fastify/otel',\n    };\n\n    return FastifyInstrumentationPlugin;\n\n    function FastifyInstrumentationPlugin(instance, opts, done) {\n      instance.decorate(kInstrumentation, instrumentation);\n      // addHook and notfoundHandler are essentially inherited from the prototype\n      // what is important is to bound it to the right instance\n      instance.decorate(kAddHookOriginal, instance.addHook);\n      instance.decorate(kSetNotFoundOriginal, instance.setNotFoundHandler);\n      instance.decorateRequest('opentelemetry', function openetelemetry() {\n        const ctx = this[kRequestContext];\n        const span = this[kRequestSpan];\n        return {\n          span,\n          tracer: instrumentation.tracer,\n          context: ctx,\n          inject: (carrier, setter) => {\n            return api.propagation.inject(ctx, carrier, setter);\n          },\n          extract: (carrier, getter) => {\n            return api.propagation.extract(ctx, carrier, getter);\n          },\n        };\n      });\n      instance.decorateRequest(kRequestSpan, null);\n      instance.decorateRequest(kRequestContext, null);\n\n      instance.addHook('onRoute', function (routeOptions) {\n        if (instrumentation[kIgnorePaths]?.(routeOptions) === true) {\n          instrumentation._logger.debug(\n            `Ignoring route instrumentation ${routeOptions.method} ${routeOptions.url} because it matches the ignore path`,\n          );\n          return;\n        }\n\n        for (const hook of FASTIFY_HOOKS) {\n          if (routeOptions[hook] != null) {\n            const handlerLike = routeOptions[hook];\n\n            if (typeof handlerLike === 'function') {\n              routeOptions[hook] = handlerWrapper(handlerLike, {\n                [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                  handlerLike.name?.length > 0 ? handlerLike.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n              });\n            } else if (Array.isArray(handlerLike)) {\n              const wrappedHandlers = [];\n\n              for (const handler of handlerLike) {\n                wrappedHandlers.push(\n                  handlerWrapper(handler, {\n                    [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                    [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                    [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                    [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                    [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                      handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME,\n                  }),\n                );\n              }\n\n              routeOptions[hook] = wrappedHandlers;\n            }\n          }\n        }\n\n        // We always want to add the onSend hook to the route to be executed last\n        if (routeOptions.onSend != null) {\n          routeOptions.onSend = Array.isArray(routeOptions.onSend)\n            ? [...routeOptions.onSend, onSendHook]\n            : [routeOptions.onSend, onSendHook];\n        } else {\n          routeOptions.onSend = onSendHook;\n        }\n\n        // We always want to add the onError hook to the route to be executed last\n        if (routeOptions.onError != null) {\n          routeOptions.onError = Array.isArray(routeOptions.onError)\n            ? [...routeOptions.onError, onErrorHook]\n            : [routeOptions.onError, onErrorHook];\n        } else {\n          routeOptions.onError = onErrorHook;\n        }\n\n        routeOptions.handler = handlerWrapper(routeOptions.handler, {\n          [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n          [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route-handler`,\n          [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.HANDLER,\n          [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n          [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n            routeOptions.handler.name.length > 0 ? routeOptions.handler.name : ANONYMOUS_FUNCTION_NAME,\n        });\n      });\n\n      instance.addHook('onRequest', function (request, _reply, hookDone) {\n        if (this[kInstrumentation].isEnabled() === false) {\n          return hookDone();\n        } else if (\n          this[kInstrumentation][kIgnorePaths]?.({\n            url: request.url,\n            method: request.method,\n          }) === true\n        ) {\n          this[kInstrumentation]._logger.debug(\n            `Ignoring request ${request.method} ${request.url} because it matches the ignore path`,\n          );\n          return hookDone();\n        }\n\n        let ctx = api.context.active();\n\n        if (api.trace.getSpan(ctx) == null) {\n          ctx = api.propagation.extract(ctx, request.headers);\n        }\n\n        const rpcMetadata = core.getRPCMetadata(ctx);\n\n        if (request.routeOptions.url != null && rpcMetadata?.type === core.RPCType.HTTP) {\n          rpcMetadata.route = request.routeOptions.url;\n        }\n\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = this[kInstrumentation].tracer.startSpan(\n          'request',\n          {\n            attributes: {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.ROOT]: '@fastify/otel',\n              [semanticConventions.ATTR_HTTP_ROUTE]: request.url,\n              [semanticConventions.ATTR_HTTP_REQUEST_METHOD]: request.method,\n            },\n          },\n          ctx,\n        );\n\n        request[kRequestContext] = api.trace.setSpan(ctx, span);\n        request[kRequestSpan] = span;\n\n        api.context.with(request[kRequestContext], () => {\n          hookDone();\n        });\n      });\n\n      // onResponse is the last hook to be executed, only added for 404 handlers\n      instance.addHook('onResponse', function (request, reply, hookDone) {\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.OK,\n            message: 'OK',\n          });\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: 404,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone();\n      });\n\n      instance.addHook = addHookPatched;\n      instance.setNotFoundHandler = setNotFoundHandlerPatched;\n\n      done();\n\n      function onSendHook(request, reply, payload, hookDone) {\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          if (reply.statusCode < 500) {\n            span.setStatus({\n              code: api.SpanStatusCode.OK,\n              message: 'OK',\n            });\n          }\n\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: reply.statusCode,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone(null, payload);\n      }\n\n      function onErrorHook(request, reply, error, hookDone) {\n        /** @type {Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message: error.message,\n          });\n          span.recordException(error);\n        }\n\n        hookDone();\n      }\n\n      function addHookPatched(name, hook) {\n        const addHookOriginal = this[kAddHookOriginal];\n\n        if (FASTIFY_HOOKS.includes(name)) {\n          return addHookOriginal.call(\n            this,\n            name,\n            handlerWrapper(hook, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - ${name}`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hook.name?.length > 0 ? hook.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            }),\n          );\n        } else {\n          return addHookOriginal.call(this, name, hook);\n        }\n      }\n\n      function setNotFoundHandlerPatched(hooks, handler) {\n        const setNotFoundHandlerOriginal = this[kSetNotFoundOriginal];\n        if (typeof hooks === 'function') {\n          handler = handlerWrapper(hooks, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              hooks.name?.length > 0 ? hooks.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, handler);\n        } else {\n          if (hooks.preValidation != null) {\n            hooks.preValidation = handlerWrapper(hooks.preValidation, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preValidation`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preValidation.name?.length > 0\n                  ? hooks.preValidation.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          if (hooks.preHandler != null) {\n            hooks.preHandler = handlerWrapper(hooks.preHandler, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preHandler`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preHandler.name?.length > 0\n                  ? hooks.preHandler.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          handler = handlerWrapper(handler, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, hooks, handler);\n        }\n      }\n\n      function handlerWrapper(handler, spanAttributes = {}) {\n        return function handlerWrapped(...args) {\n          /** @type {FastifyOtelInstrumentation} */\n          const instrumentation = this[kInstrumentation];\n          const [request] = args;\n\n          if (instrumentation.isEnabled() === false) {\n            return handler.call(this, ...args);\n          }\n\n          const ctx = request[kRequestContext] ?? api.context.active();\n          const span = instrumentation.tracer.startSpan(\n            `handler - ${\n              handler.name?.length > 0\n                ? handler.name\n                : (this.pluginName /* c8 ignore next */ ?? ANONYMOUS_FUNCTION_NAME) /* c8 ignore next */\n            }`,\n            {\n              attributes: spanAttributes,\n            },\n            ctx,\n          );\n\n          return api.context.with(\n            api.trace.setSpan(ctx, span),\n            function () {\n              try {\n                const res = handler.call(this, ...args);\n\n                if (typeof res?.then === 'function') {\n                  return res.then(\n                    result => {\n                      span.end();\n                      return result;\n                    },\n                    error => {\n                      span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: error.message,\n                      });\n                      span.recordException(error);\n                      span.end();\n                      return Promise.reject(error);\n                    },\n                  );\n                }\n\n                span.end();\n                return res;\n              } catch (error) {\n                span.setStatus({\n                  code: api.SpanStatusCode.ERROR,\n                  message: error.message,\n                });\n                span.recordException(error);\n                span.end();\n                throw error;\n              }\n            },\n            this,\n          );\n        };\n      }\n    }\n  }\n}\n\nexports.FastifyOtelInstrumentation = FastifyOtelInstrumentation;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst dc = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ./fastify-otel/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\");\nconst instrumentation = __webpack_require__(/*! ./v3/instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\");\n\n/**\n * Options for the Fastify integration.\n *\n * `shouldHandleError` - Callback method deciding whether error should be captured and sent to Sentry\n * This is used on Fastify v5 where Sentry handles errors in the diagnostics channel.\n * Fastify v3 and v4 use `setupFastifyErrorHandler` instead.\n *\n * @example\n *\n * ```javascript\n * Sentry.init({\n *   integrations: [\n *     Sentry.fastifyIntegration({\n *       shouldHandleError(_error, _request, reply) {\n *         return reply.statusCode >= 500;\n *       },\n *     });\n *   },\n * });\n * ```\n *\n */\n\nconst INTEGRATION_NAME = 'Fastify';\n\nconst instrumentFastifyV3 = nodeCore.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.v3`,\n  () => new instrumentation.FastifyInstrumentationV3(),\n);\n\nfunction getFastifyIntegration() {\n  const client = core.getClient();\n  if (!client) {\n    return undefined;\n  } else {\n    return client.getIntegrationByName(INTEGRATION_NAME);\n  }\n}\n\nfunction handleFastifyError(\n\n  error,\n  request,\n  reply,\n  handlerOrigin,\n) {\n  const shouldHandleError = getFastifyIntegration()?.getShouldHandleError() || defaultShouldHandleError;\n  // Diagnostics channel runs before the onError hook, so we can use it to check if the handler was already registered\n  if (handlerOrigin === 'diagnostics-channel') {\n    this.diagnosticsChannelExists = true;\n  }\n\n  if (this.diagnosticsChannelExists && handlerOrigin === 'onError-hook') {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        'Fastify error handler was already registered via diagnostics channel.',\n        'You can safely remove `setupFastifyErrorHandler` call and set `shouldHandleError` on the integration options.',\n      );\n\n    // If the diagnostics channel already exists, we don't need to handle the error again\n    return;\n  }\n\n  if (shouldHandleError(error, request, reply)) {\n    core.captureException(error, { mechanism: { handled: false, type: 'auto.function.fastify' } });\n  }\n}\n\nconst instrumentFastify = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.v5`, () => {\n  const fastifyOtelInstrumentationInstance = new index.FastifyOtelInstrumentation();\n  const plugin = fastifyOtelInstrumentationInstance.plugin();\n\n  // This message handler works for Fastify versions 3, 4 and 5\n  dc.subscribe('fastify.initialization', message => {\n    const fastifyInstance = (message ).fastify;\n\n    fastifyInstance?.register(plugin).after(err => {\n      if (err) {\n        debugBuild.DEBUG_BUILD && core.debug.error('Failed to setup Fastify instrumentation', err);\n      } else {\n        instrumentClient();\n\n        if (fastifyInstance) {\n          instrumentOnRequest(fastifyInstance);\n        }\n      }\n    });\n  });\n\n  // This diagnostics channel only works on Fastify version 5\n  // For versions 3 and 4, we use `setupFastifyErrorHandler` instead\n  dc.subscribe('tracing:fastify.request.handler:error', message => {\n    const { error, request, reply } = message\n\n;\n\n    handleFastifyError.call(handleFastifyError, error, request, reply, 'diagnostics-channel');\n  });\n\n  // Returning this as unknown not to deal with the internal types of the FastifyOtelInstrumentation\n  return fastifyOtelInstrumentationInstance ;\n});\n\nconst _fastifyIntegration = (({ shouldHandleError }) => {\n  let _shouldHandleError;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _shouldHandleError = shouldHandleError || defaultShouldHandleError;\n\n      instrumentFastifyV3();\n      instrumentFastify();\n    },\n    getShouldHandleError() {\n      return _shouldHandleError;\n    },\n    setShouldHandleError(fn) {\n      _shouldHandleError = fn;\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration((options = {}) =>\n  _fastifyIntegration(options),\n);\n\n/**\n * Default function to determine if an error should be sent to Sentry\n *\n * 3xx and 4xx errors are not sent by default.\n */\nfunction defaultShouldHandleError(_error, _request, reply) {\n  const statusCode = reply.statusCode;\n  // 3xx and 4xx errors are not sent by default.\n  return statusCode >= 500 || statusCode <= 299;\n}\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify, options) {\n  if (options?.shouldHandleError) {\n    getFastifyIntegration()?.setShouldHandleError(options.shouldHandleError);\n  }\n\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (request, reply, error) => {\n        handleFastifyError.call(handleFastifyError, error, request, reply, 'onError-hook');\n      });\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fastify.register(plugin);\n}\n\nfunction addFastifySpanAttributes(span) {\n  const spanJSON = core.spanToJSON(span);\n  const spanName = spanJSON.description;\n  const attributes = spanJSON.data;\n\n  const type = attributes['fastify.type'];\n\n  const isHook = type === 'hook';\n  const isHandler = type === spanName?.startsWith('handler -');\n  // In @fastify/otel `request-handler` is separated by dash, not underscore\n  const isRequestHandler = spanName === 'request' || type === 'request-handler';\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || (!isHandler && !isRequestHandler && !isHook)) {\n    return;\n  }\n\n  const opPrefix = isHook ? 'hook' : isHandler ? 'middleware' : isRequestHandler ? 'request-handler' : '<unknown>';\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${opPrefix}.fastify`,\n  });\n\n  const attrName = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof attrName === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = attrName.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nfunction instrumentClient() {\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifySpanAttributes(span);\n    });\n  }\n}\n\nfunction instrumentOnRequest(fastify) {\n  fastify.addHook('onRequest', async (request, _reply) => {\n    if (request.opentelemetry) {\n      const { span } = request.opentelemetry();\n\n      if (span) {\n        addFastifySpanAttributes(span);\n      }\n    }\n\n    const routeName = request.routeOptions?.url;\n    const method = request.method || 'GET';\n\n    core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n  });\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.instrumentFastifyV3 = instrumentFastifyV3;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/constants.ts\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst spanRequestSymbol = Symbol('opentelemetry.instrumentation.fastify.request_active_span');\n\nexports.spanRequestSymbol = spanRequestSymbol;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2Zhc3RpZnkvdjMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vLyBWZW5kb3JlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi80MDdmNjE1OTFiYTY5YTM5YTY5MDgyNjQzNzlkNGQ5OGE0OGRiZWM0L3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0aWZ5L3NyYy9jb25zdGFudHMudHNcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmNvbnN0IHNwYW5SZXF1ZXN0U3ltYm9sID0gU3ltYm9sKCdvcGVudGVsZW1ldHJ5Lmluc3RydW1lbnRhdGlvbi5mYXN0aWZ5LnJlcXVlc3RfYWN0aXZlX3NwYW4nKTtcblxuZXhwb3J0cy5zcGFuUmVxdWVzdFN5bWJvbCA9IHNwYW5SZXF1ZXN0U3ltYm9sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/enums/AttributeNames.ts\n//\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.AttributeNames = void 0; (function (AttributeNames) {\n  const FASTIFY_NAME = 'fastify.name'; AttributeNames[\"FASTIFY_NAME\"] = FASTIFY_NAME;\n  const FASTIFY_TYPE = 'fastify.type'; AttributeNames[\"FASTIFY_TYPE\"] = FASTIFY_TYPE;\n  const HOOK_NAME = 'hook.name'; AttributeNames[\"HOOK_NAME\"] = HOOK_NAME;\n  const PLUGIN_NAME = 'plugin.name'; AttributeNames[\"PLUGIN_NAME\"] = PLUGIN_NAME;\n})(exports.AttributeNames || (exports.AttributeNames = {}));\n\nexports.FastifyTypes = void 0; (function (FastifyTypes) {\n  const MIDDLEWARE = 'middleware'; FastifyTypes[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request_handler'; FastifyTypes[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyTypes || (exports.FastifyTypes = {}));\n\nexports.FastifyNames = void 0; (function (FastifyNames) {\n  const MIDDLEWARE = 'middleware'; FastifyNames[\"MIDDLEWARE\"] = MIDDLEWARE;\n  const REQUEST_HANDLER = 'request handler'; FastifyNames[\"REQUEST_HANDLER\"] = REQUEST_HANDLER;\n})(exports.FastifyNames || (exports.FastifyNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixXQUFXO0FBQ2pDLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLHFDQUFxQztBQUNyQyxDQUFDLDZCQUE2QixzQkFBc0IsS0FBSzs7QUFFekQsb0JBQW9CLFdBQVc7QUFDL0IsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3QyxDQUFDLDJCQUEyQixvQkFBb0IsS0FBSzs7QUFFckQsb0JBQW9CLFdBQVc7QUFDL0IsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3QyxDQUFDLDJCQUEyQixvQkFBb0IsS0FBSztBQUNyRCIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vLyBWZW5kb3JlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvYmxvYi80MDdmNjE1OTFiYTY5YTM5YTY5MDgyNjQzNzlkNGQ5OGE0OGRiZWM0L3BsdWdpbnMvbm9kZS9vcGVudGVsZW1ldHJ5LWluc3RydW1lbnRhdGlvbi1mYXN0aWZ5L3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy50c1xuLy9cbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7IChmdW5jdGlvbiAoQXR0cmlidXRlTmFtZXMpIHtcbiAgY29uc3QgRkFTVElGWV9OQU1FID0gJ2Zhc3RpZnkubmFtZSc7IEF0dHJpYnV0ZU5hbWVzW1wiRkFTVElGWV9OQU1FXCJdID0gRkFTVElGWV9OQU1FO1xuICBjb25zdCBGQVNUSUZZX1RZUEUgPSAnZmFzdGlmeS50eXBlJzsgQXR0cmlidXRlTmFtZXNbXCJGQVNUSUZZX1RZUEVcIl0gPSBGQVNUSUZZX1RZUEU7XG4gIGNvbnN0IEhPT0tfTkFNRSA9ICdob29rLm5hbWUnOyBBdHRyaWJ1dGVOYW1lc1tcIkhPT0tfTkFNRVwiXSA9IEhPT0tfTkFNRTtcbiAgY29uc3QgUExVR0lOX05BTUUgPSAncGx1Z2luLm5hbWUnOyBBdHRyaWJ1dGVOYW1lc1tcIlBMVUdJTl9OQU1FXCJdID0gUExVR0lOX05BTUU7XG59KShleHBvcnRzLkF0dHJpYnV0ZU5hbWVzIHx8IChleHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0ge30pKTtcblxuZXhwb3J0cy5GYXN0aWZ5VHlwZXMgPSB2b2lkIDA7IChmdW5jdGlvbiAoRmFzdGlmeVR5cGVzKSB7XG4gIGNvbnN0IE1JRERMRVdBUkUgPSAnbWlkZGxld2FyZSc7IEZhc3RpZnlUeXBlc1tcIk1JRERMRVdBUkVcIl0gPSBNSURETEVXQVJFO1xuICBjb25zdCBSRVFVRVNUX0hBTkRMRVIgPSAncmVxdWVzdF9oYW5kbGVyJzsgRmFzdGlmeVR5cGVzW1wiUkVRVUVTVF9IQU5ETEVSXCJdID0gUkVRVUVTVF9IQU5ETEVSO1xufSkoZXhwb3J0cy5GYXN0aWZ5VHlwZXMgfHwgKGV4cG9ydHMuRmFzdGlmeVR5cGVzID0ge30pKTtcblxuZXhwb3J0cy5GYXN0aWZ5TmFtZXMgPSB2b2lkIDA7IChmdW5jdGlvbiAoRmFzdGlmeU5hbWVzKSB7XG4gIGNvbnN0IE1JRERMRVdBUkUgPSAnbWlkZGxld2FyZSc7IEZhc3RpZnlOYW1lc1tcIk1JRERMRVdBUkVcIl0gPSBNSURETEVXQVJFO1xuICBjb25zdCBSRVFVRVNUX0hBTkRMRVIgPSAncmVxdWVzdCBoYW5kbGVyJzsgRmFzdGlmeU5hbWVzW1wiUkVRVUVTVF9IQU5ETEVSXCJdID0gUkVRVUVTVF9IQU5ETEVSO1xufSkoZXhwb3J0cy5GYXN0aWZ5TmFtZXMgfHwgKGV4cG9ydHMuRmFzdGlmeU5hbWVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0dHJpYnV0ZU5hbWVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst AttributeNames = __webpack_require__(/*! ./enums/AttributeNames.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** @knipignore */\n\nconst PACKAGE_VERSION = '0.1.0';\n\nconst PACKAGE_NAME = '@sentry/instrumentation-fastify-v3';\nconst ANONYMOUS_NAME = 'anonymous';\n\n// The instrumentation creates a span for invocations of lifecycle hook handlers\n// that take `(request, reply, ...[, done])` arguments. Currently this is all\n// lifecycle hooks except `onRequestAbort`.\n// https://fastify.dev/docs/latest/Reference/Hooks\nconst hooksNamesToWrap = new Set([\n  'onTimeout',\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preSerialization',\n  'preHandler',\n  'onSend',\n  'onResponse',\n  'onError',\n]);\n\n/**\n * Fastify instrumentation for OpenTelemetry\n */\nclass FastifyInstrumentationV3 extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('fastify', ['>=3.0.0 <4'], moduleExports => {\n        return this._patchConstructor(moduleExports);\n      }),\n    ];\n  }\n\n   _hookOnRequest() {\n    const instrumentation = this;\n\n    return function onRequest(request, reply, done) {\n      if (!instrumentation.isEnabled()) {\n        return done();\n      }\n      instrumentation._wrap(reply, 'send', instrumentation._patchSend());\n\n      const anyRequest = request ;\n\n      const rpcMetadata = core.getRPCMetadata(api.context.active());\n      const routeName = anyRequest.routeOptions\n        ? anyRequest.routeOptions.url // since fastify@4.10.0\n        : request.routerPath;\n      if (routeName && rpcMetadata?.type === core.RPCType.HTTP) {\n        rpcMetadata.route = routeName;\n      }\n\n      const method = request.method || 'GET';\n\n      core$1.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      done();\n    };\n  }\n\n   _wrapHandler(\n    pluginName,\n    hookName,\n    original,\n    syncFunctionWithDone,\n  ) {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify route.handler function');\n\n    return function ( ...args) {\n      if (!instrumentation.isEnabled()) {\n        return original.apply(this, args);\n      }\n\n      const name = original.name || pluginName || ANONYMOUS_NAME;\n      const spanName = `${AttributeNames.FastifyNames.MIDDLEWARE} - ${name}`;\n\n      const reply = args[1] ;\n\n      const span = utils.startSpan(reply, instrumentation.tracer, spanName, {\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.MIDDLEWARE,\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: pluginName,\n        [AttributeNames.AttributeNames.HOOK_NAME]: hookName,\n      });\n\n      const origDone = syncFunctionWithDone && (args[args.length - 1] );\n      if (origDone) {\n        args[args.length - 1] = function (...doneArgs) {\n          utils.endSpan(reply);\n          origDone.apply(this, doneArgs);\n        };\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return utils.safeExecuteInTheMiddleMaybePromise(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (err instanceof Error) {\n              span.setStatus({\n                code: api.SpanStatusCode.ERROR,\n                message: err.message,\n              });\n              span.recordException(err);\n            }\n            // async hooks should end the span as soon as the promise is resolved\n            if (!syncFunctionWithDone) {\n              utils.endSpan(reply);\n            }\n          },\n        );\n      });\n    };\n  }\n\n   _wrapAddHook() {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify server.addHook function');\n\n    // biome-ignore lint/complexity/useArrowFunction: <explanation>\n    return function (original) {\n      return function wrappedAddHook( ...args) {\n        const name = args[0] ;\n        const handler = args[1] ;\n        const pluginName = this.pluginName;\n        if (!hooksNamesToWrap.has(name)) {\n          return original.apply(this, args);\n        }\n\n        const syncFunctionWithDone =\n          typeof args[args.length - 1] === 'function' && handler.constructor.name !== 'AsyncFunction';\n\n        return original.apply(this, [\n          name,\n          instrumentation._wrapHandler(pluginName, name, handler, syncFunctionWithDone),\n        ] );\n      };\n    };\n  }\n\n   _patchConstructor(moduleExports\n\n) {\n    const instrumentation = this;\n\n    function fastify( ...args) {\n      const app = moduleExports.fastify.apply(this, args);\n      app.addHook('onRequest', instrumentation._hookOnRequest());\n      app.addHook('preHandler', instrumentation._hookPreHandler());\n\n      instrumentClient();\n\n      instrumentation._wrap(app, 'addHook', instrumentation._wrapAddHook());\n\n      return app;\n    }\n\n    if (moduleExports.errorCodes !== undefined) {\n      fastify.errorCodes = moduleExports.errorCodes;\n    }\n    fastify.fastify = fastify;\n    fastify.default = fastify;\n    return fastify;\n  }\n\n   _patchSend() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify reply.send function');\n\n    return function patchSend(original) {\n      return function send( ...args) {\n        const maybeError = args[0];\n\n        if (!instrumentation$1.isEnabled()) {\n          return original.apply(this, args);\n        }\n\n        return instrumentation.safeExecuteInTheMiddle(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (!err && maybeError instanceof Error) {\n              // eslint-disable-next-line no-param-reassign\n              err = maybeError;\n            }\n            utils.endSpan(this, err);\n          },\n        );\n      };\n    };\n  }\n\n   _hookPreHandler() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify preHandler function');\n\n    return function preHandler( request, reply, done) {\n      if (!instrumentation$1.isEnabled()) {\n        return done();\n      }\n      const anyRequest = request ;\n\n      const handler = anyRequest.routeOptions?.handler || anyRequest.context?.handler;\n      const handlerName = handler?.name.startsWith('bound ') ? handler.name.substring(6) : handler?.name;\n      const spanName = `${AttributeNames.FastifyNames.REQUEST_HANDLER} - ${handlerName || this.pluginName || ANONYMOUS_NAME}`;\n\n      const spanAttributes = {\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: this.pluginName,\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.REQUEST_HANDLER,\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMATTRS_HTTP_ROUTE]: anyRequest.routeOptions\n          ? anyRequest.routeOptions.url // since fastify@4.10.0\n          : request.routerPath,\n      };\n      if (handlerName) {\n        spanAttributes[AttributeNames.AttributeNames.FASTIFY_NAME] = handlerName;\n      }\n      const span = utils.startSpan(reply, instrumentation$1.tracer, spanName, spanAttributes);\n\n      addFastifyV3SpanAttributes(span);\n\n      const { requestHook } = instrumentation$1.getConfig();\n      if (requestHook) {\n        instrumentation.safeExecuteInTheMiddle(\n          () => requestHook(span, { request }),\n          e => {\n            if (e) {\n              instrumentation$1._diag.error('request hook failed', e);\n            }\n          },\n          true,\n        );\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        done();\n      });\n    };\n  }\n}\n\nfunction instrumentClient() {\n  const client = core$1.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifyV3SpanAttributes(span);\n    });\n  }\n}\n\nfunction addFastifyV3SpanAttributes(span) {\n  const attributes = core$1.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = name.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nexports.FastifyInstrumentationV3 = FastifyInstrumentationV3;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/utils.ts\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Starts Span\n * @param reply - reply function\n * @param tracer - tracer\n * @param spanName - span name\n * @param spanAttributes - span attributes\n */\nfunction startSpan(\n  reply,\n  tracer,\n  spanName,\n  spanAttributes = {},\n) {\n  const span = tracer.startSpan(spanName, { attributes: spanAttributes });\n\n  const spans = reply[constants.spanRequestSymbol] || [];\n  spans.push(span);\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(reply, constants.spanRequestSymbol, {\n    enumerable: false,\n    configurable: true,\n    value: spans,\n  });\n\n  return span;\n}\n\n/**\n * Ends span\n * @param reply - reply function\n * @param err - error\n */\nfunction endSpan(reply, err) {\n  const spans = reply[constants.spanRequestSymbol] || [];\n  // there is no active span, or it has already ended\n  if (!spans.length) {\n    return;\n  }\n  // biome-ignore lint/complexity/noForEach: <explanation>\n  spans.forEach((span) => {\n    if (err) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: err.message,\n      });\n      span.recordException(err);\n    }\n    span.end();\n  });\n  delete reply[constants.spanRequestSymbol];\n}\n\n// @TODO after approve add this to instrumentation package and replace usage\n// when it will be released\n\n/**\n * This function handles the missing case from instrumentation package when\n * execute can either return a promise or void. And using async is not an\n * option as it is producing unwanted side effects.\n * @param execute - function to be executed\n * @param onFinish - function called when function executed\n * @param preventThrowingError - prevent to throw error when execute\n * function fails\n */\n\nfunction safeExecuteInTheMiddleMaybePromise(\n  execute,\n  onFinish,\n  preventThrowingError,\n) {\n  let error;\n  let result = undefined;\n  try {\n    result = execute();\n\n    if (isPromise(result)) {\n      result.then(\n        res => onFinish(undefined, res),\n        err => onFinish(err),\n      );\n    }\n  } catch (e) {\n    error = e;\n  } finally {\n    if (!isPromise(result)) {\n      onFinish(error, result);\n      if (error && true) {\n        // eslint-disable-next-line no-unsafe-finally\n        throw error;\n      }\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n\nfunction isPromise(val) {\n  return (\n    (typeof val === 'object' && val && typeof Object.getOwnPropertyDescriptor(val, 'then')?.value === 'function') ||\n    false\n  );\n}\n\nexports.endSpan = endSpan;\nexports.safeExecuteInTheMiddleMaybePromise = safeExecuteInTheMiddleMaybePromise;\nexports.startSpan = startSpan;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsc0lBQW9CO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLHdNQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDRDQUE0Qyw0QkFBNEI7O0FBRXhFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmLDBDQUEwQztBQUMxQyxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmFzdGlmeS92My91dGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuXG4vLyBWZW5kb3JlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvdXRpbHMudHNcbi8qIGVzbGludC1kaXNhYmxlIGpzZG9jL3JlcXVpcmUtanNkb2MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGUgKi9cbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBTdGFydHMgU3BhblxuICogQHBhcmFtIHJlcGx5IC0gcmVwbHkgZnVuY3Rpb25cbiAqIEBwYXJhbSB0cmFjZXIgLSB0cmFjZXJcbiAqIEBwYXJhbSBzcGFuTmFtZSAtIHNwYW4gbmFtZVxuICogQHBhcmFtIHNwYW5BdHRyaWJ1dGVzIC0gc3BhbiBhdHRyaWJ1dGVzXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0U3BhbihcbiAgcmVwbHksXG4gIHRyYWNlcixcbiAgc3Bhbk5hbWUsXG4gIHNwYW5BdHRyaWJ1dGVzID0ge30sXG4pIHtcbiAgY29uc3Qgc3BhbiA9IHRyYWNlci5zdGFydFNwYW4oc3Bhbk5hbWUsIHsgYXR0cmlidXRlczogc3BhbkF0dHJpYnV0ZXMgfSk7XG5cbiAgY29uc3Qgc3BhbnMgPSByZXBseVtjb25zdGFudHMuc3BhblJlcXVlc3RTeW1ib2xdIHx8IFtdO1xuICBzcGFucy5wdXNoKHNwYW4pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcGx5LCBjb25zdGFudHMuc3BhblJlcXVlc3RTeW1ib2wsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHNwYW5zLFxuICB9KTtcblxuICByZXR1cm4gc3Bhbjtcbn1cblxuLyoqXG4gKiBFbmRzIHNwYW5cbiAqIEBwYXJhbSByZXBseSAtIHJlcGx5IGZ1bmN0aW9uXG4gKiBAcGFyYW0gZXJyIC0gZXJyb3JcbiAqL1xuZnVuY3Rpb24gZW5kU3BhbihyZXBseSwgZXJyKSB7XG4gIGNvbnN0IHNwYW5zID0gcmVwbHlbY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sXSB8fCBbXTtcbiAgLy8gdGhlcmUgaXMgbm8gYWN0aXZlIHNwYW4sIG9yIGl0IGhhcyBhbHJlYWR5IGVuZGVkXG4gIGlmICghc3BhbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGJpb21lLWlnbm9yZSBsaW50L2NvbXBsZXhpdHkvbm9Gb3JFYWNoOiA8ZXhwbGFuYXRpb24+XG4gIHNwYW5zLmZvckVhY2goKHNwYW4pID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzcGFuLnNldFN0YXR1cyh7XG4gICAgICAgIGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUixcbiAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICB9KTtcbiAgICAgIHNwYW4ucmVjb3JkRXhjZXB0aW9uKGVycik7XG4gICAgfVxuICAgIHNwYW4uZW5kKCk7XG4gIH0pO1xuICBkZWxldGUgcmVwbHlbY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sXTtcbn1cblxuLy8gQFRPRE8gYWZ0ZXIgYXBwcm92ZSBhZGQgdGhpcyB0byBpbnN0cnVtZW50YXRpb24gcGFja2FnZSBhbmQgcmVwbGFjZSB1c2FnZVxuLy8gd2hlbiBpdCB3aWxsIGJlIHJlbGVhc2VkXG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHRoZSBtaXNzaW5nIGNhc2UgZnJvbSBpbnN0cnVtZW50YXRpb24gcGFja2FnZSB3aGVuXG4gKiBleGVjdXRlIGNhbiBlaXRoZXIgcmV0dXJuIGEgcHJvbWlzZSBvciB2b2lkLiBBbmQgdXNpbmcgYXN5bmMgaXMgbm90IGFuXG4gKiBvcHRpb24gYXMgaXQgaXMgcHJvZHVjaW5nIHVud2FudGVkIHNpZGUgZWZmZWN0cy5cbiAqIEBwYXJhbSBleGVjdXRlIC0gZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAqIEBwYXJhbSBvbkZpbmlzaCAtIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIGZ1bmN0aW9uIGV4ZWN1dGVkXG4gKiBAcGFyYW0gcHJldmVudFRocm93aW5nRXJyb3IgLSBwcmV2ZW50IHRvIHRocm93IGVycm9yIHdoZW4gZXhlY3V0ZVxuICogZnVuY3Rpb24gZmFpbHNcbiAqL1xuXG5mdW5jdGlvbiBzYWZlRXhlY3V0ZUluVGhlTWlkZGxlTWF5YmVQcm9taXNlKFxuICBleGVjdXRlLFxuICBvbkZpbmlzaCxcbiAgcHJldmVudFRocm93aW5nRXJyb3IsXG4pIHtcbiAgbGV0IGVycm9yO1xuICBsZXQgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICB0cnkge1xuICAgIHJlc3VsdCA9IGV4ZWN1dGUoKTtcblxuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgcmVzdWx0LnRoZW4oXG4gICAgICAgIHJlcyA9PiBvbkZpbmlzaCh1bmRlZmluZWQsIHJlcyksXG4gICAgICAgIGVyciA9PiBvbkZpbmlzaChlcnIpLFxuICAgICAgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvciA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKCFpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgb25GaW5pc2goZXJyb3IsIHJlc3VsdCk7XG4gICAgICBpZiAoZXJyb3IgJiYgdHJ1ZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnNhZmUtZmluYWxseVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlKHZhbCkge1xuICByZXR1cm4gKFxuICAgICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsLCAndGhlbicpPy52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykgfHxcbiAgICBmYWxzZVxuICApO1xufVxuXG5leHBvcnRzLmVuZFNwYW4gPSBlbmRTcGFuO1xuZXhwb3J0cy5zYWZlRXhlY3V0ZUluVGhlTWlkZGxlTWF5YmVQcm9taXNlID0gc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZTtcbmV4cG9ydHMuc3RhcnRTcGFuID0gc3RhcnRTcGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst firebaseInstrumentation = __webpack_require__(/*! ./otel/firebaseInstrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Firebase';\n\nconst config = {\n  firestoreSpanCreationHook: span => {\n    nodeCore.addOriginToSpan(span, 'auto.firebase.otel.firestore');\n\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'db.query');\n  },\n};\n\nconst instrumentFirebase = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new firebaseInstrumentation.FirebaseInstrumentation(config));\n\nconst _firebaseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFirebase();\n    },\n  };\n}) ;\n\nconst firebaseIntegration = core.defineIntegration(_firebaseIntegration);\n\nexports.firebaseIntegration = firebaseIntegration;\nexports.instrumentFirebase = instrumentFirebase;\n//# sourceMappingURL=firebase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2UvZmlyZWJhc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxnQ0FBZ0MsbUJBQU8sQ0FBQyw0T0FBbUM7O0FBRTNFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSwyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2ZpcmViYXNlL2ZpcmViYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBmaXJlYmFzZUluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vb3RlbC9maXJlYmFzZUluc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0ZpcmViYXNlJztcblxuY29uc3QgY29uZmlnID0ge1xuICBmaXJlc3RvcmVTcGFuQ3JlYXRpb25Ib29rOiBzcGFuID0+IHtcbiAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZmlyZWJhc2Uub3RlbC5maXJlc3RvcmUnKTtcblxuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2RiLnF1ZXJ5Jyk7XG4gIH0sXG59O1xuXG5jb25zdCBpbnN0cnVtZW50RmlyZWJhc2UgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBmaXJlYmFzZUluc3RydW1lbnRhdGlvbi5GaXJlYmFzZUluc3RydW1lbnRhdGlvbihjb25maWcpKTtcblxuY29uc3QgX2ZpcmViYXNlSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEZpcmViYXNlKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3QgZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2ZpcmViYXNlSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmZpcmViYXNlSW50ZWdyYXRpb24gPSBmaXJlYmFzZUludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50RmlyZWJhc2UgPSBpbnN0cnVtZW50RmlyZWJhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJlYmFzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst firestore = __webpack_require__(/*! ./patches/firestore.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\");\n\nconst DefaultFirebaseInstrumentationConfig = {};\nconst firestoreSupportedVersions = ['>=3.0.0 <5']; // firebase 9+\n\n/**\n * Instrumentation for Firebase services, specifically Firestore.\n */\nclass FirebaseInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = DefaultFirebaseInstrumentationConfig) {\n    super('@sentry/instrumentation-firebase', core.SDK_VERSION, config);\n  }\n\n  /**\n   * sets config\n   * @param config\n   */\n    setConfig(config = {}) {\n    super.setConfig({ ...DefaultFirebaseInstrumentationConfig, ...config });\n  }\n\n  /**\n   *\n   * @protected\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n   init() {\n    const modules = [];\n\n    modules.push(firestore.patchFirestore(this.tracer, firestoreSupportedVersions, this._wrap, this._unwrap, this.getConfig()));\n\n    return modules;\n  }\n}\n\nexports.FirebaseInstrumentation = FirebaseInstrumentation;\n//# sourceMappingURL=firebaseInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZmlyZWJhc2Uvb3RlbC9maXJlYmFzZUluc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSx3QkFBd0IsbUJBQU8sQ0FBQyxxTUFBZ0M7QUFDaEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGtCQUFrQixtQkFBTyxDQUFDLDJOQUF3Qjs7QUFFbEQ7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHNCQUFzQixvREFBb0Q7QUFDMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9maXJlYmFzZS9vdGVsL2ZpcmViYXNlSW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGZpcmVzdG9yZSA9IHJlcXVpcmUoJy4vcGF0Y2hlcy9maXJlc3RvcmUuanMnKTtcblxuY29uc3QgRGVmYXVsdEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uQ29uZmlnID0ge307XG5jb25zdCBmaXJlc3RvcmVTdXBwb3J0ZWRWZXJzaW9ucyA9IFsnPj0zLjAuMCA8NSddOyAvLyBmaXJlYmFzZSA5K1xuXG4vKipcbiAqIEluc3RydW1lbnRhdGlvbiBmb3IgRmlyZWJhc2Ugc2VydmljZXMsIHNwZWNpZmljYWxseSBGaXJlc3RvcmUuXG4gKi9cbmNsYXNzIEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uIGV4dGVuZHMgaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvbkJhc2Uge1xuICAgY29uc3RydWN0b3IoY29uZmlnID0gRGVmYXVsdEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uQ29uZmlnKSB7XG4gICAgc3VwZXIoJ0BzZW50cnkvaW5zdHJ1bWVudGF0aW9uLWZpcmViYXNlJywgY29yZS5TREtfVkVSU0lPTiwgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXRzIGNvbmZpZ1xuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqL1xuICAgIHNldENvbmZpZyhjb25maWcgPSB7fSkge1xuICAgIHN1cGVyLnNldENvbmZpZyh7IC4uLkRlZmF1bHRGaXJlYmFzZUluc3RydW1lbnRhdGlvbkNvbmZpZywgLi4uY29uZmlnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgIGluaXQoKSB7XG4gICAgY29uc3QgbW9kdWxlcyA9IFtdO1xuXG4gICAgbW9kdWxlcy5wdXNoKGZpcmVzdG9yZS5wYXRjaEZpcmVzdG9yZSh0aGlzLnRyYWNlciwgZmlyZXN0b3JlU3VwcG9ydGVkVmVyc2lvbnMsIHRoaXMuX3dyYXAsIHRoaXMuX3Vud3JhcCwgdGhpcy5nZXRDb25maWcoKSkpO1xuXG4gICAgcmV0dXJuIG1vZHVsZXM7XG4gIH1cbn1cblxuZXhwb3J0cy5GaXJlYmFzZUluc3RydW1lbnRhdGlvbiA9IEZpcmViYXNlSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlyZWJhc2VJbnN0cnVtZW50YXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/firebaseInstrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n\n// Inline minimal types used from `shimmer` to avoid importing shimmer's types directly.\n// We only need the shape for `wrap` and `unwrap` used in this file.\n\n/**\n *\n * @param tracer - Opentelemetry Tracer\n * @param firestoreSupportedVersions - supported version of firebase/firestore\n * @param wrap - reference to native instrumentation wrap function\n * @param unwrap - reference to native instrumentation wrap function\n */\nfunction patchFirestore(\n  tracer,\n  firestoreSupportedVersions,\n  wrap,\n  unwrap,\n  config,\n) {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const defaultFirestoreSpanCreationHook = () => {};\n\n  let firestoreSpanCreationHook = defaultFirestoreSpanCreationHook;\n  const configFirestoreSpanCreationHook = config.firestoreSpanCreationHook;\n\n  if (typeof configFirestoreSpanCreationHook === 'function') {\n    firestoreSpanCreationHook = (span) => {\n      instrumentation.safeExecuteInTheMiddle(\n        () => configFirestoreSpanCreationHook(span),\n        error => {\n          if (!error) {\n            return;\n          }\n          api.diag.error(error?.message);\n        },\n        true,\n      );\n    };\n  }\n\n  const moduleFirestoreCJS = new instrumentation.InstrumentationNodeModuleDefinition(\n    '@firebase/firestore',\n    firestoreSupportedVersions,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (moduleExports) => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n  );\n  const files = [\n    '@firebase/firestore/dist/lite/index.node.cjs.js',\n    '@firebase/firestore/dist/lite/index.node.mjs.js',\n    '@firebase/firestore/dist/lite/index.rn.esm2017.js',\n    '@firebase/firestore/dist/lite/index.cjs.js',\n  ];\n\n  for (const file of files) {\n    moduleFirestoreCJS.files.push(\n      new instrumentation.InstrumentationNodeModuleFile(\n        file,\n        firestoreSupportedVersions,\n        moduleExports => wrapMethods(moduleExports, wrap, unwrap, tracer, firestoreSpanCreationHook),\n        moduleExports => unwrapMethods(moduleExports, unwrap),\n      ),\n    );\n  }\n\n  return moduleFirestoreCJS;\n}\n\nfunction wrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  wrap,\n  unwrap,\n  tracer,\n  firestoreSpanCreationHook,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  unwrapMethods(moduleExports, unwrap);\n\n  wrap(moduleExports, 'addDoc', patchAddDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'getDocs', patchGetDocs(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'setDoc', patchSetDoc(tracer, firestoreSpanCreationHook));\n  wrap(moduleExports, 'deleteDoc', patchDeleteDoc(tracer, firestoreSpanCreationHook));\n\n  return moduleExports;\n}\n\nfunction unwrapMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  moduleExports,\n  unwrap,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  for (const method of ['addDoc', 'getDocs', 'setDoc', 'deleteDoc']) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (instrumentation.isWrapped(moduleExports[method])) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      unwrap(moduleExports, method);\n    }\n  }\n  return moduleExports;\n}\n\nfunction patchAddDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function addDoc(original) {\n    return function (\n      reference,\n      data,\n    ) {\n      const span = startDBSpan(tracer, 'addDoc', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference, data);\n      });\n    };\n  };\n}\n\nfunction patchDeleteDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function deleteDoc(original) {\n    return function (reference) {\n      const span = startDBSpan(tracer, 'deleteDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchGetDocs(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function getDocs(original) {\n    return function (\n      reference,\n    ) {\n      const span = startDBSpan(tracer, 'getDocs', reference);\n      firestoreSpanCreationHook(span);\n      return executeContextWithSpan(span, () => {\n        return original(reference);\n      });\n    };\n  };\n}\n\nfunction patchSetDoc(\n  tracer,\n  firestoreSpanCreationHook,\n)\n\n {\n  return function setDoc(original) {\n    return function (\n      reference,\n      data,\n      options,\n    ) {\n      const span = startDBSpan(tracer, 'setDoc', reference.parent || reference);\n      firestoreSpanCreationHook(span);\n\n      return executeContextWithSpan(span, () => {\n        return typeof options !== 'undefined' ? original(reference, data, options) : original(reference, data);\n      });\n    };\n  };\n}\n\nfunction executeContextWithSpan(span, callback) {\n  return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n    return instrumentation.safeExecuteInTheMiddle(\n      () => {\n        return callback();\n      },\n      err => {\n        if (err) {\n          span.recordException(err);\n        }\n        span.end();\n      },\n      true,\n    );\n  });\n}\n\nfunction startDBSpan(\n  tracer,\n  spanName,\n  reference,\n) {\n  const span = tracer.startSpan(`${spanName} ${reference.path}`, { kind: api.SpanKind.CLIENT });\n  addAttributes(span, reference);\n  span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, spanName);\n  return span;\n}\n\n/**\n * Gets the server address and port attributes from the Firestore settings.\n * It's best effort to extract the address and port from the settings, especially for IPv6.\n * @param span - The span to set attributes on.\n * @param settings - The Firestore settings containing host information.\n */\nfunction getPortAndAddress(settings)\n\n {\n  let address;\n  let port;\n\n  if (typeof settings.host === 'string') {\n    if (settings.host.startsWith('[')) {\n      // IPv6 addresses can be enclosed in square brackets, e.g., [2001:db8::1]:8080\n      if (settings.host.endsWith(']')) {\n        // IPv6 with square brackets without port\n        address = settings.host.replace(/^\\[|\\]$/g, '');\n      } else if (settings.host.includes(']:')) {\n        // IPv6 with square brackets with port\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(1, lastColonIndex).replace(/^\\[|\\]$/g, '');\n          port = settings.host.slice(lastColonIndex + 1);\n        }\n      }\n    } else {\n      // IPv4 or IPv6 without square brackets\n      // If it's an IPv6 address without square brackets, we assume it does not have a port.\n      if (net.isIPv6(settings.host)) {\n        address = settings.host;\n      }\n      // If it's an IPv4 address, we can extract the port if it exists.\n      else {\n        const lastColonIndex = settings.host.lastIndexOf(':');\n        if (lastColonIndex !== -1) {\n          address = settings.host.slice(0, lastColonIndex);\n          port = settings.host.slice(lastColonIndex + 1);\n        } else {\n          address = settings.host;\n        }\n      }\n    }\n  }\n  return {\n    address: address,\n    port: port ? parseInt(port, 10) : undefined,\n  };\n}\n\nfunction addAttributes(\n  span,\n  reference,\n) {\n  const firestoreApp = reference.firestore.app;\n  const firestoreOptions = firestoreApp.options;\n  const json = reference.firestore.toJSON() || {};\n  const settings = json.settings || {};\n\n  const attributes = {\n    [semanticConventions.ATTR_DB_COLLECTION_NAME]: reference.path,\n    [semanticConventions.ATTR_DB_NAMESPACE]: firestoreApp.name,\n    [semanticConventions.ATTR_DB_SYSTEM_NAME]: 'firebase.firestore',\n    'firebase.firestore.type': reference.type,\n    'firebase.firestore.options.projectId': firestoreOptions.projectId,\n    'firebase.firestore.options.appId': firestoreOptions.appId,\n    'firebase.firestore.options.messagingSenderId': firestoreOptions.messagingSenderId,\n    'firebase.firestore.options.storageBucket': firestoreOptions.storageBucket,\n  };\n\n  const { address, port } = getPortAndAddress(settings);\n\n  if (address) {\n    attributes[semanticConventions.ATTR_SERVER_ADDRESS] = address;\n  }\n  if (port) {\n    attributes[semanticConventions.ATTR_SERVER_PORT] = port;\n  }\n\n  span.setAttributes(attributes);\n}\n\nexports.getPortAndAddress = getPortAndAddress;\nexports.patchFirestore = patchFirestore;\n//# sourceMappingURL=firestore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/otel/patches/firestore.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-generic-pool@0.48.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentGenericPool();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n\n          const spanDescription = spanJSON.description;\n\n          // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n          const isGenericPoolSpan =\n            spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n          if (isGenericPoolSpan) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsbUNBQW1DLG1CQUFPLENBQUMsMk9BQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBLGtKQUFrSjs7QUFFbEo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dlbmVyaWNQb29sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1nZW5lcmljLXBvb2wnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdHZW5lcmljUG9vbCc7XG5cbmNvbnN0IGluc3RydW1lbnRHZW5lcmljUG9vbCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkdlbmVyaWNQb29sLkdlbmVyaWNQb29sSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9nZW5lcmljUG9vbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudEdlbmVyaWNQb29sKCk7XG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2sgPSBub2RlQ29yZS5pbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s/LigoKSA9PlxuICAgICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuXG4gICAgICAgICAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc3BhbkpTT04uZGVzY3JpcHRpb247XG5cbiAgICAgICAgICAvLyB0eXBvIGluIGVtaXR0ZWQgc3BhbiBmb3IgdmVyc2lvbiA8PSAwLjM4LjAgb2YgQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbFxuICAgICAgICAgIGNvbnN0IGlzR2VuZXJpY1Bvb2xTcGFuID1cbiAgICAgICAgICAgIHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hcXVpcmUnIHx8IHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hY3F1aXJlJztcblxuICAgICAgICAgIGlmIChpc0dlbmVyaWNQb29sU3Bhbikge1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5nZW5lcmljX3Bvb2wnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2dlbmVyaWMtcG9vbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2VuZXJpYy1wb29sKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9nZW5lcmljcG9vbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBnZW5lcmljUG9vbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGdlbmVyaWNQb29sSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHZW5lcmljUG9vbCA9IGluc3RydW1lbnRHZW5lcmljUG9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyaWNQb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js\");\n\nconst instrumentGoogleGenAI = nodeCore.generateInstrumentOnce(\n  core.GOOGLE_GENAI_INTEGRATION_NAME,\n  options => new instrumentation.SentryGoogleGenAiInstrumentation(options),\n);\n\nconst _googleGenAIIntegration = ((options = {}) => {\n  return {\n    name: core.GOOGLE_GENAI_INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGoogleGenAI(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the Google Generative AI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments Google GenAI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.googleGenAiIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.googleGenAiIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.googleGenAiIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst googleGenAIIntegration = core.defineIntegration(_googleGenAIIntegration);\n\nexports.googleGenAIIntegration = googleGenAIIntegration;\nexports.instrumentGoogleGenAI = instrumentGoogleGenAI;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ29vZ2xlLWdlbmFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsc05BQXNCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nb29nbGUtZ2VuYWkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IGluc3RydW1lbnRHb29nbGVHZW5BSSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIGNvcmUuR09PR0xFX0dFTkFJX0lOVEVHUkFUSU9OX05BTUUsXG4gIG9wdGlvbnMgPT4gbmV3IGluc3RydW1lbnRhdGlvbi5TZW50cnlHb29nbGVHZW5BaUluc3RydW1lbnRhdGlvbihvcHRpb25zKSxcbik7XG5cbmNvbnN0IF9nb29nbGVHZW5BSUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBjb3JlLkdPT0dMRV9HRU5BSV9JTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRHb29nbGVHZW5BSShvcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgR29vZ2xlIEdlbmVyYXRpdmUgQUkgU0RLLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gaXMgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIFdoZW4gY29uZmlndXJlZCwgdGhpcyBpbnRlZ3JhdGlvbiBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRzIEdvb2dsZSBHZW5BSSBTREsgY2xpZW50IGluc3RhbmNlc1xuICogdG8gY2FwdHVyZSB0ZWxlbWV0cnkgZGF0YSBmb2xsb3dpbmcgT3BlblRlbGVtZXRyeSBTZW1hbnRpYyBDb252ZW50aW9ucyBmb3IgR2VuZXJhdGl2ZSBBSS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuZ29vZ2xlR2VuQWlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogIyMgT3B0aW9uc1xuICpcbiAqIC0gYHJlY29yZElucHV0c2A6IFdoZXRoZXIgdG8gcmVjb3JkIHByb21wdCBtZXNzYWdlcyAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICogLSBgcmVjb3JkT3V0cHV0c2A6IFdoZXRoZXIgdG8gcmVjb3JkIHJlc3BvbnNlIHRleHQgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqXG4gKiAjIyMgRGVmYXVsdCBCZWhhdmlvclxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBpbnRlZ3JhdGlvbiB3aWxsOlxuICogLSBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIE9OTFkgaWYgYHNlbmREZWZhdWx0UGlpYCBpcyBzZXQgdG8gYHRydWVgIGluIHlvdXIgU2VudHJ5IGNsaWVudCBvcHRpb25zXG4gKiAtIE90aGVyd2lzZSwgaW5wdXRzIGFuZCBvdXRwdXRzIGFyZSBOT1QgcmVjb3JkZWQgdW5sZXNzIGV4cGxpY2l0bHkgZW5hYmxlZFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBSZWNvcmQgaW5wdXRzIGFuZCBvdXRwdXRzIHdoZW4gc2VuZERlZmF1bHRQaWkgaXMgZmFsc2VcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lmdvb2dsZUdlbkFpSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBOZXZlciByZWNvcmQgaW5wdXRzL291dHB1dHMgcmVnYXJkbGVzcyBvZiBzZW5kRGVmYXVsdFBpaVxuICogU2VudHJ5LmluaXQoe1xuICogICBzZW5kRGVmYXVsdFBpaTogdHJ1ZSxcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lmdvb2dsZUdlbkFpSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiBmYWxzZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IGZhbHNlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5jb25zdCBnb29nbGVHZW5BSUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbiA9IGdvb2dsZUdlbkFJSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHb29nbGVHZW5BSSA9IGluc3RydW1lbnRHb29nbGVHZW5BSTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=0.10.0 <2'];\n\n/**\n * Represents the patched shape of the Google GenAI module export.\n */\n\n/**\n * Sentry Google GenAI instrumentation using OpenTelemetry.\n */\nclass SentryGoogleGenAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-google-genai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition(\n      '@google/genai',\n      supportedVersions,\n      exports => this._patch(exports),\n      exports => exports,\n      // In CJS, @google/genai re-exports from (dist/node/index.cjs) file.\n      // Patching only the root module sometimes misses the real implementation or\n      // gets overwritten when that file is loaded. We add a file-level patch so that\n      // _patch runs again on the concrete implementation\n      [\n        new instrumentation.InstrumentationNodeModuleFile(\n          '@google/genai/dist/node/index.cjs',\n          supportedVersions,\n          exports => this._patch(exports),\n          exports => exports,\n        ),\n      ],\n    );\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the Google GenAI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.GoogleGenAI;\n    const config = this.getConfig();\n\n    if (typeof Original !== 'function') {\n      return exports;\n    }\n\n    const WrappedGoogleGenAI = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const typedConfig = config;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const recordInputs = typedConfig?.recordInputs ?? defaultPii;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const recordOutputs = typedConfig?.recordOutputs ?? defaultPii;\n\n      return core.instrumentGoogleGenAIClient(instance, {\n        recordInputs,\n        recordOutputs,\n      });\n    };\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedGoogleGenAI, Original);\n    Object.setPrototypeOf(WrappedGoogleGenAI.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedGoogleGenAI, key, descriptor);\n        }\n      }\n    }\n\n    // Replace google genai exports with the wrapped constructor\n    core.replaceExports(exports, 'GoogleGenAI', WrappedGoogleGenAI);\n\n    return exports;\n  }\n}\n\nexports.SentryGoogleGenAiInstrumentation = SentryGoogleGenAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ29vZ2xlLWdlbmFpL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxDQUFDLG9EQUFvRCx5Q0FBeUMsMENBQTBDLDhDQUE4QyxvREFBb0QscURBQXFELGlCQUFpQjs7QUFFaFQsd0JBQXdCLG1CQUFPLENBQUMscU1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2dvb2dsZS1nZW5haS9pbnN0cnVtZW50YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJTRU5UUllfUkVMRUFTRVwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeUJhc2VQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5TmV4dEpzVmVyc2lvblwiXSA9IFwiMTUuNS40XCI7Z2xvYmFsVGhpc1tcIl9zZW50cnlSZXdyaXRlRnJhbWVzRGlzdERpclwiXSA9IFwiLm5leHRcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IHN1cHBvcnRlZFZlcnNpb25zID0gWyc+PTAuMTAuMCA8MiddO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHBhdGNoZWQgc2hhcGUgb2YgdGhlIEdvb2dsZSBHZW5BSSBtb2R1bGUgZXhwb3J0LlxuICovXG5cbi8qKlxuICogU2VudHJ5IEdvb2dsZSBHZW5BSSBpbnN0cnVtZW50YXRpb24gdXNpbmcgT3BlblRlbGVtZXRyeS5cbiAqL1xuY2xhc3MgU2VudHJ5R29vZ2xlR2VuQWlJbnN0cnVtZW50YXRpb24gZXh0ZW5kcyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uQmFzZSB7XG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi1nb29nbGUtZ2VuYWknLCBjb3JlLlNES19WRVJTSU9OLCBjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnN0cnVtZW50YXRpb24gYnkgZGVmaW5pbmcgdGhlIG1vZHVsZXMgdG8gYmUgcGF0Y2hlZC5cbiAgICovXG4gICBpbml0KCkge1xuICAgIGNvbnN0IG1vZHVsZSA9IG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oXG4gICAgICAnQGdvb2dsZS9nZW5haScsXG4gICAgICBzdXBwb3J0ZWRWZXJzaW9ucyxcbiAgICAgIGV4cG9ydHMgPT4gdGhpcy5fcGF0Y2goZXhwb3J0cyksXG4gICAgICBleHBvcnRzID0+IGV4cG9ydHMsXG4gICAgICAvLyBJbiBDSlMsIEBnb29nbGUvZ2VuYWkgcmUtZXhwb3J0cyBmcm9tIChkaXN0L25vZGUvaW5kZXguY2pzKSBmaWxlLlxuICAgICAgLy8gUGF0Y2hpbmcgb25seSB0aGUgcm9vdCBtb2R1bGUgc29tZXRpbWVzIG1pc3NlcyB0aGUgcmVhbCBpbXBsZW1lbnRhdGlvbiBvclxuICAgICAgLy8gZ2V0cyBvdmVyd3JpdHRlbiB3aGVuIHRoYXQgZmlsZSBpcyBsb2FkZWQuIFdlIGFkZCBhIGZpbGUtbGV2ZWwgcGF0Y2ggc28gdGhhdFxuICAgICAgLy8gX3BhdGNoIHJ1bnMgYWdhaW4gb24gdGhlIGNvbmNyZXRlIGltcGxlbWVudGF0aW9uXG4gICAgICBbXG4gICAgICAgIG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZUZpbGUoXG4gICAgICAgICAgJ0Bnb29nbGUvZ2VuYWkvZGlzdC9ub2RlL2luZGV4LmNqcycsXG4gICAgICAgICAgc3VwcG9ydGVkVmVyc2lvbnMsXG4gICAgICAgICAgZXhwb3J0cyA9PiB0aGlzLl9wYXRjaChleHBvcnRzKSxcbiAgICAgICAgICBleHBvcnRzID0+IGV4cG9ydHMsXG4gICAgICAgICksXG4gICAgICBdLFxuICAgICk7XG4gICAgcmV0dXJuIG1vZHVsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3JlIHBhdGNoIGxvZ2ljIGFwcGx5aW5nIGluc3RydW1lbnRhdGlvbiB0byB0aGUgR29vZ2xlIEdlbkFJIGNsaWVudCBjb25zdHJ1Y3Rvci5cbiAgICovXG4gICBfcGF0Y2goZXhwb3J0cykge1xuICAgIGNvbnN0IE9yaWdpbmFsID0gZXhwb3J0cy5Hb29nbGVHZW5BSTtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldENvbmZpZygpO1xuXG4gICAgaWYgKHR5cGVvZiBPcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGV4cG9ydHM7XG4gICAgfVxuXG4gICAgY29uc3QgV3JhcHBlZEdvb2dsZUdlbkFJID0gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IFJlZmxlY3QuY29uc3RydWN0KE9yaWdpbmFsLCBhcmdzKTtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gICAgICBjb25zdCBkZWZhdWx0UGlpID0gQm9vbGVhbihjbGllbnQ/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaSk7XG5cbiAgICAgIGNvbnN0IHR5cGVkQ29uZmlnID0gY29uZmlnO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgY29uc3QgcmVjb3JkSW5wdXRzID0gdHlwZWRDb25maWc/LnJlY29yZElucHV0cyA/PyBkZWZhdWx0UGlpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgY29uc3QgcmVjb3JkT3V0cHV0cyA9IHR5cGVkQ29uZmlnPy5yZWNvcmRPdXRwdXRzID8/IGRlZmF1bHRQaWk7XG5cbiAgICAgIHJldHVybiBjb3JlLmluc3RydW1lbnRHb29nbGVHZW5BSUNsaWVudChpbnN0YW5jZSwge1xuICAgICAgICByZWNvcmRJbnB1dHMsXG4gICAgICAgIHJlY29yZE91dHB1dHMsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gUHJlc2VydmUgc3RhdGljIGFuZCBwcm90b3R5cGUgY2hhaW5zXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFdyYXBwZWRHb29nbGVHZW5BSSwgT3JpZ2luYWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkR29vZ2xlR2VuQUkucHJvdG90eXBlLCBPcmlnaW5hbC5wcm90b3R5cGUpO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT3JpZ2luYWwpKSB7XG4gICAgICBpZiAoIVsnbGVuZ3RoJywgJ25hbWUnLCAncHJvdG90eXBlJ10uaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPcmlnaW5hbCwga2V5KTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZEdvb2dsZUdlbkFJLCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVwbGFjZSBnb29nbGUgZ2VuYWkgZXhwb3J0cyB3aXRoIHRoZSB3cmFwcGVkIGNvbnN0cnVjdG9yXG4gICAgY29yZS5yZXBsYWNlRXhwb3J0cyhleHBvcnRzLCAnR29vZ2xlR2VuQUknLCBXcmFwcGVkR29vZ2xlR2VuQUkpO1xuXG4gICAgcmV0dXJuIGV4cG9ydHM7XG4gIH1cbn1cblxuZXhwb3J0cy5TZW50cnlHb29nbGVHZW5BaUluc3RydW1lbnRhdGlvbiA9IFNlbnRyeUdvb2dsZUdlbkFpSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-graphql@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationGraphql.GraphQLInstrumentation,\n  (_options) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return {\n      ...options,\n      responseHook(span, result) {\n        nodeCore.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        // We want to ensure spans are marked as errored if there are errors in the result\n        // We only do that if the span is not already marked with a status\n        const resultWithMaybeError = result ;\n        if (resultWithMaybeError.errors?.length && !core.spanToJSON(span).status) {\n          span.setStatus({ code: api.SpanStatusCode.ERROR });\n        }\n\n        const attributes = core.spanToJSON(span).data;\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            (existingOperations ).push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (typeof existingOperations === 'string') {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n\n          if (!core.spanToJSON(rootSpan).data['original-description']) {\n            rootSpan.setAttribute('original-description', core.spanToJSON(rootSpan).description);\n          }\n          // Important for e.g. @sentry/aws-serverless because this would otherwise overwrite the name again\n          rootSpan.updateName(\n            `${core.spanToJSON(rootSpan).data['original-description']} (${getGraphqlOperationNamesFromAttribute(\n              existingOperations,\n            )})`,\n          );\n        }\n      },\n    };\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\n// copy from packages/opentelemetry/utils\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-hapi@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return !!(event && typeof event === 'object' && 'error' in event && event.error);\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'auto.function.hapi',\n      handled: false,\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route.path) {\n          core.getIsolationScope().setTransactionName(`${route.method.toUpperCase()} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.debug.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  nodeCore.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaGFwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQyxtTkFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxtTEFBeUI7O0FBRXBEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixzQ0FBc0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EseURBQXlELDRCQUE0QixFQUFFLFdBQVc7QUFDbEc7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHO0FBQ0g7O0FBRUEsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2hhcGkvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkhhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnSGFwaSc7XG5cbmNvbnN0IGluc3RydW1lbnRIYXBpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uSGFwaS5IYXBpSW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfaGFwaUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRIYXBpKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0hhcGldKGh0dHBzOi8vaGFwaS5kZXYvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEhhcGlFcnJvckhhbmRsZXIoc2VydmVyKWAgYWZ0ZXIgeW91IHNldCB1cCB5b3VyIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbaGFwaSBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9oYXBpLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmhhcGlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3QgaGFwaUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfaGFwaUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gaXNFcnJvckV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICdlcnJvcicgaW4gZXZlbnQgJiYgZXZlbnQuZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBzZW5kRXJyb3JUb1NlbnRyeShlcnJvckRhdGEpIHtcbiAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yRGF0YSwge1xuICAgIG1lY2hhbmlzbToge1xuICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24uaGFwaScsXG4gICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICB9LFxuICB9KTtcbn1cblxuY29uc3QgaGFwaUVycm9yUGx1Z2luID0ge1xuICBuYW1lOiAnU2VudHJ5SGFwaUVycm9yUGx1Z2luJyxcbiAgdmVyc2lvbjogY29yZS5TREtfVkVSU0lPTixcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgcmVnaXN0ZXI6IGFzeW5jIGZ1bmN0aW9uIChzZXJ2ZXJBcmcpIHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJBcmcgO1xuXG4gICAgc2VydmVyLmV2ZW50cy5vbih7IG5hbWU6ICdyZXF1ZXN0JywgY2hhbm5lbHM6IFsnZXJyb3InXSB9LCAocmVxdWVzdCwgZXZlbnQpID0+IHtcbiAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgIT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgY29uc3Qgcm91dGUgPSByZXF1ZXN0LnJvdXRlO1xuICAgICAgICBpZiAocm91dGUucGF0aCkge1xuICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7cm91dGUubWV0aG9kLnRvVXBwZXJDYXNlKCl9ICR7cm91dGUucGF0aH1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgICAgIGNvcmUuZGVidWcud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIHN0aWxsIHRoZSBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Vycm9yRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIHNlbmRFcnJvclRvU2VudHJ5KGV2ZW50LmVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cbi8qKlxuICogQWRkIGEgSGFwaSBwbHVnaW4gdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXIgVGhlIEhhcGkgc2VydmVyIHRvIGF0dGFjaCB0aGUgZXJyb3IgaGFuZGxlciB0b1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IEhhcGkgPSByZXF1aXJlKCdAaGFwaS9oYXBpJyk7XG4gKlxuICogY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcbiAqICAgY29uc3Qgc2VydmVyID0gSGFwaS5zZXJ2ZXIoKTtcbiAqXG4gKiAgIC8vIGFsbCB5b3VyIHJvdXRlcyBoZXJlXG4gKlxuICogICBhd2FpdCBTZW50cnkuc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcik7XG4gKlxuICogICBhd2FpdCBzZXJ2ZXIuc3RhcnQoKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcikge1xuICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoaGFwaUVycm9yUGx1Z2luKTtcblxuICAvLyBTYWRseSwgbWlkZGxld2FyZSBzcGFucyBkbyBub3QgZ28gdGhyb3VnaCBgcmVxdWVzdEhvb2tgLCBzbyB3ZSBoYW5kbGUgdGhvc2UgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgaGFwaVxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgbm9kZUNvcmUuZW5zdXJlSXNXcmFwcGVkKHNlcnZlci5yZWdpc3RlciwgJ2hhcGknKTtcbn1cblxuZnVuY3Rpb24gYWRkSGFwaVNwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiByb3V0ZXIsIHBsdWdpbiwgc2VydmVyLmV4dFxuICBjb25zdCB0eXBlID0gYXR0cmlidXRlc1snaGFwaS50eXBlJ107XG5cbiAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IHNldCwgb3Igd2UgaGF2ZSBubyBIYXBpIHNwYW4sIG5vIG5lZWQgdG8gcHJvY2VzcyBhZ2Fpbi4uLlxuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5oYXBpJyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uaGFwaWAsXG4gIH0pO1xufVxuXG5leHBvcnRzLmhhcGlFcnJvclBsdWdpbiA9IGhhcGlFcnJvclBsdWdpbjtcbmV4cG9ydHMuaGFwaUludGVncmF0aW9uID0gaGFwaUludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50SGFwaSA9IGluc3RydW1lbnRIYXBpO1xuZXhwb3J0cy5zZXR1cEhhcGlFcnJvckhhbmRsZXIgPSBzZXR1cEhhcGlFcnJvckhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst AttributeNames = {\n  HONO_TYPE: 'hono.type',\n  HONO_NAME: 'hono.name',\n} ;\n\nconst HonoTypes = {\n  MIDDLEWARE: 'middleware',\n  REQUEST_HANDLER: 'request_handler',\n} ;\n\nexports.AttributeNames = AttributeNames;\nexports.HonoTypes = HonoTypes;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9ob25vL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgQXR0cmlidXRlTmFtZXMgPSB7XG4gIEhPTk9fVFlQRTogJ2hvbm8udHlwZScsXG4gIEhPTk9fTkFNRTogJ2hvbm8ubmFtZScsXG59IDtcblxuY29uc3QgSG9ub1R5cGVzID0ge1xuICBNSURETEVXQVJFOiAnbWlkZGxld2FyZScsXG4gIFJFUVVFU1RfSEFORExFUjogJ3JlcXVlc3RfaGFuZGxlcicsXG59IDtcblxuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IEF0dHJpYnV0ZU5hbWVzO1xuZXhwb3J0cy5Ib25vVHlwZXMgPSBIb25vVHlwZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Hono';\n\nfunction addHonoSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n  const type = attributes[constants.AttributeNames.HONO_TYPE];\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hono',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hono`,\n  });\n\n  const name = attributes[constants.AttributeNames.HONO_NAME];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n    return;\n  }\n\n  const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n  const method = attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD];\n  if (typeof route === 'string' && typeof method === 'string') {\n    core.getIsolationScope().setTransactionName(`${method} ${route}`);\n  }\n}\n\nconst instrumentHono = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentation.HonoInstrumentation({\n      responseHook: span => {\n        addHonoSpanAttributes(span);\n      },\n    }),\n);\n\nconst _honoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHono();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hono](https://hono.dev/).\n *\n * If you also want to capture errors, you need to call `setupHonoErrorHandler(app)` after you set up your Hono server.\n *\n * For more information, see the [hono documentation](https://docs.sentry.io/platforms/javascript/guides/hono/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.honoIntegration()],\n * })\n * ```\n */\nconst honoIntegration = core.defineIntegration(_honoIntegration);\n\nfunction honoRequestHandler() {\n  return async function sentryRequestMiddleware(context, next) {\n    const normalizedRequest = core.httpRequestToRequestData(context.req);\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n    await next();\n  };\n}\n\nfunction defaultShouldHandleError(context) {\n  const statusCode = context.res.status;\n  return statusCode >= 500;\n}\n\nfunction honoErrorHandler(options) {\n  return async function sentryErrorMiddleware(context, next) {\n    await next();\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n    if (shouldHandleError(context)) {\n      (context.res ).sentry = core.captureException(context.error, {\n        mechanism: {\n          type: 'auto.middleware.hono',\n          handled: false,\n        },\n      });\n    }\n  };\n}\n\n/**\n * Add a Hono error handler to capture errors to Sentry.\n *\n * @param app The Hono instances\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const { Hono } = require(\"hono\");\n *\n * const app = new Hono();\n *\n * Sentry.setupHonoErrorHandler(app);\n *\n * // Add your routes, etc.\n * ```\n */\nfunction setupHonoErrorHandler(\n  app,\n  options,\n) {\n  app.use(honoRequestHandler());\n  app.use(honoErrorHandler(options));\n  nodeCore.ensureIsWrapped(app.use, 'hono');\n}\n\nexports.honoIntegration = honoIntegration;\nexports.instrumentHono = instrumentHono;\nexports.setupHonoErrorHandler = setupHonoErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQywwTEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxtTEFBeUI7QUFDcEQsa0JBQWtCLG1CQUFPLENBQUMsa01BQWdCO0FBQzFDLHdCQUF3QixtQkFBTyxDQUFDLDhNQUFzQjs7QUFFdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxRQUFRLEVBQUUsTUFBTTtBQUNuRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxtQkFBbUI7QUFDM0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaG9uby9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2luc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0hvbm8nO1xuXG5mdW5jdGlvbiBhZGRIb25vU3BhbkF0dHJpYnV0ZXMoc3Bhbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGE7XG4gIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzW2NvbnN0YW50cy5BdHRyaWJ1dGVOYW1lcy5IT05PX1RZUEVdO1xuICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmh0dHAub3RlbC5ob25vJyxcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogYCR7dHlwZX0uaG9ub2AsXG4gIH0pO1xuXG4gIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzW2NvbnN0YW50cy5BdHRyaWJ1dGVOYW1lcy5IT05PX05BTUVdO1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUpO1xuICB9XG5cbiAgaWYgKGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSA9PT0gY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy53YXJuKCdJc29sYXRpb24gc2NvcGUgaXMgZGVmYXVsdCBpc29sYXRpb24gc2NvcGUgLSBza2lwcGluZyBzZXR0aW5nIHRyYW5zYWN0aW9uTmFtZScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJvdXRlID0gYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV07XG4gIGNvbnN0IG1ldGhvZCA9IGF0dHJpYnV0ZXNbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RdO1xuICBpZiAodHlwZW9mIHJvdXRlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykge1xuICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3JvdXRlfWApO1xuICB9XG59XG5cbmNvbnN0IGluc3RydW1lbnRIb25vID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uLkhvbm9JbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rOiBzcGFuID0+IHtcbiAgICAgICAgYWRkSG9ub1NwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9ob25vSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEhvbm8oKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbSG9ub10oaHR0cHM6Ly9ob25vLmRldi8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwSG9ub0Vycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3Ugc2V0IHVwIHlvdXIgSG9ubyBzZXJ2ZXIuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2hvbm8gZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvaG9uby8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5ob25vSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGhvbm9JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2hvbm9JbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGhvbm9SZXF1ZXN0SGFuZGxlcigpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHNlbnRyeVJlcXVlc3RNaWRkbGV3YXJlKGNvbnRleHQsIG5leHQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkUmVxdWVzdCA9IGNvcmUuaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKGNvbnRleHQucmVxKTtcbiAgICBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHsgbm9ybWFsaXplZFJlcXVlc3QgfSk7XG4gICAgYXdhaXQgbmV4dCgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U2hvdWxkSGFuZGxlRXJyb3IoY29udGV4dCkge1xuICBjb25zdCBzdGF0dXNDb2RlID0gY29udGV4dC5yZXMuc3RhdHVzO1xuICByZXR1cm4gc3RhdHVzQ29kZSA+PSA1MDA7XG59XG5cbmZ1bmN0aW9uIGhvbm9FcnJvckhhbmRsZXIob3B0aW9ucykge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gc2VudHJ5RXJyb3JNaWRkbGV3YXJlKGNvbnRleHQsIG5leHQpIHtcbiAgICBhd2FpdCBuZXh0KCk7XG5cbiAgICBjb25zdCBzaG91bGRIYW5kbGVFcnJvciA9IG9wdGlvbnM/LnNob3VsZEhhbmRsZUVycm9yIHx8IGRlZmF1bHRTaG91bGRIYW5kbGVFcnJvcjtcbiAgICBpZiAoc2hvdWxkSGFuZGxlRXJyb3IoY29udGV4dCkpIHtcbiAgICAgIChjb250ZXh0LnJlcyApLnNlbnRyeSA9IGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihjb250ZXh0LmVycm9yLCB7XG4gICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgIHR5cGU6ICdhdXRvLm1pZGRsZXdhcmUuaG9ubycsXG4gICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQWRkIGEgSG9ubyBlcnJvciBoYW5kbGVyIHRvIGNhcHR1cmUgZXJyb3JzIHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBIb25vIGluc3RhbmNlc1xuICogQHBhcmFtIG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgaGFuZGxlclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IHsgSG9ubyB9ID0gcmVxdWlyZShcImhvbm9cIik7XG4gKlxuICogY29uc3QgYXBwID0gbmV3IEhvbm8oKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBIb25vRXJyb3JIYW5kbGVyKGFwcCk7XG4gKlxuICogLy8gQWRkIHlvdXIgcm91dGVzLCBldGMuXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gc2V0dXBIb25vRXJyb3JIYW5kbGVyKFxuICBhcHAsXG4gIG9wdGlvbnMsXG4pIHtcbiAgYXBwLnVzZShob25vUmVxdWVzdEhhbmRsZXIoKSk7XG4gIGFwcC51c2UoaG9ub0Vycm9ySGFuZGxlcihvcHRpb25zKSk7XG4gIG5vZGVDb3JlLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAnaG9ubycpO1xufVxuXG5leHBvcnRzLmhvbm9JbnRlZ3JhdGlvbiA9IGhvbm9JbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhvbm8gPSBpbnN0cnVtZW50SG9ubztcbmV4cG9ydHMuc2V0dXBIb25vRXJyb3JIYW5kbGVyID0gc2V0dXBIb25vRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/constants.js\");\n\nconst PACKAGE_NAME = '@sentry/instrumentation-hono';\nconst PACKAGE_VERSION = '0.0.1';\n\n/**\n * Hono instrumentation for OpenTelemetry\n */\nclass HonoInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  /**\n   * Initialize the instrumentation.\n   */\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('hono', ['>=4.0.0 <5'], moduleExports => this._patch(moduleExports)),\n    ];\n  }\n\n  /**\n   * Patches the module exports to instrument Hono.\n   */\n   _patch(moduleExports) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    class WrappedHono extends moduleExports.Hono {\n       constructor(...args) {\n        super(...args);\n\n        instrumentation._wrap(this, 'get', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'post', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'put', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'delete', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'options', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'patch', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'all', instrumentation._patchHandler());\n        instrumentation._wrap(this, 'on', instrumentation._patchOnHandler());\n        instrumentation._wrap(this, 'use', instrumentation._patchMiddlewareHandler());\n      }\n    }\n\n    try {\n      moduleExports.Hono = WrappedHono;\n    } catch {\n      // This is a workaround for environments where direct assignment is not allowed.\n      return { ...moduleExports, Hono: WrappedHono };\n    }\n\n    return moduleExports;\n  }\n\n  /**\n   * Patches the route handler to instrument it.\n   */\n   _patchHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        if (typeof args[0] === 'string') {\n          const path = args[0];\n          if (args.length === 1) {\n            return original.apply(this, [path]);\n          }\n\n          const handlers = args.slice(1);\n          return original.apply(this, [\n            path,\n            ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n          ]);\n        }\n\n        return original.apply(\n          this,\n          args.map(handler => instrumentation._wrapHandler(handler )),\n        );\n      };\n    };\n  }\n\n  /**\n   * Patches the 'on' handler to instrument it.\n   */\n   _patchOnHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        const handlers = args.slice(2);\n        return original.apply(this, [\n          ...args.slice(0, 2),\n          ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n        ]);\n      };\n    };\n  }\n\n  /**\n   * Patches the middleware handler to instrument it.\n   */\n   _patchMiddlewareHandler() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function (original) {\n      return function wrappedHandler( ...args) {\n        if (typeof args[0] === 'string') {\n          const path = args[0];\n          if (args.length === 1) {\n            return original.apply(this, [path]);\n          }\n\n          const handlers = args.slice(1);\n          return original.apply(this, [\n            path,\n            ...handlers.map(handler => instrumentation._wrapHandler(handler )),\n          ]);\n        }\n\n        return original.apply(\n          this,\n          args.map(handler => instrumentation._wrapHandler(handler )),\n        );\n      };\n    };\n  }\n\n  /**\n   * Wraps a handler or middleware handler to apply instrumentation.\n   */\n   _wrapHandler(handler) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n\n    return function ( c, next) {\n      if (!instrumentation.isEnabled()) {\n        return handler.apply(this, [c, next]);\n      }\n\n      const path = c.req.path;\n      const span = instrumentation.tracer.startSpan(path);\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return instrumentation._safeExecute(\n          () => {\n            const result = handler.apply(this, [c, next]);\n            if (core.isThenable(result)) {\n              return result.then(result => {\n                const type = instrumentation._determineHandlerType(result);\n                span.setAttributes({\n                  [constants.AttributeNames.HONO_TYPE]: type,\n                  [constants.AttributeNames.HONO_NAME]: type === constants.HonoTypes.REQUEST_HANDLER ? path : handler.name || 'anonymous',\n                });\n                instrumentation.getConfig().responseHook?.(span);\n                return result;\n              });\n            } else {\n              const type = instrumentation._determineHandlerType(result);\n              span.setAttributes({\n                [constants.AttributeNames.HONO_TYPE]: type,\n                [constants.AttributeNames.HONO_NAME]: type === constants.HonoTypes.REQUEST_HANDLER ? path : handler.name || 'anonymous',\n              });\n              instrumentation.getConfig().responseHook?.(span);\n              return result;\n            }\n          },\n          () => span.end(),\n          error => {\n            instrumentation._handleError(span, error);\n            span.end();\n          },\n        );\n      });\n    };\n  }\n\n  /**\n   * Safely executes a function and handles errors.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   _safeExecute(execute, onSuccess, onFailure) {\n    try {\n      const result = execute();\n\n      if (core.isThenable(result)) {\n        result.then(\n          () => onSuccess(),\n          (error) => onFailure(error),\n        );\n      } else {\n        onSuccess();\n      }\n\n      return result;\n    } catch (error) {\n      onFailure(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Determines the handler type based on the result.\n   * @param result\n   * @private\n   */\n   _determineHandlerType(result) {\n    return result === undefined ? constants.HonoTypes.MIDDLEWARE : constants.HonoTypes.REQUEST_HANDLER;\n  }\n\n  /**\n   * Handles errors by setting the span status and recording the exception.\n   */\n   _handleError(span, error) {\n    if (error instanceof Error) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: error.message,\n      });\n      span.recordException(error);\n    }\n  }\n}\n\nexports.HonoInstrumentation = HonoInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! ../http.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst index$5 = __webpack_require__(/*! ./anthropic-ai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/anthropic-ai/index.js\");\nconst index$7 = __webpack_require__(/*! ./claude-code/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/claude-code/index.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst index$8 = __webpack_require__(/*! ./openai-codex/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst index = __webpack_require__(/*! ./fastify/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\");\nconst firebase = __webpack_require__(/*! ./firebase/firebase.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/firebase/firebase.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst index$6 = __webpack_require__(/*! ./google-genai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/google-genai/index.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index$1 = __webpack_require__(/*! ./hapi/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst index$2 = __webpack_require__(/*! ./hono/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/hono/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst index$4 = __webpack_require__(/*! ./openai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst postgresjs = __webpack_require__(/*! ./postgresjs.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\");\nconst prisma = __webpack_require__(/*! ./prisma.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst index$3 = __webpack_require__(/*! ./vercelai/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    index.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    index$2.honoIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    prisma.prismaIntegration(),\n    index$1.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n    index$3.vercelAIIntegration(),\n    index$4.openAIIntegration(),\n    postgresjs.postgresJsIntegration(),\n    firebase.firebaseIntegration(),\n    index$5.anthropicAIIntegration(),\n    index$6.googleGenAIIntegration(),\n    index$7.claudeCodeIntegration(),\n    index$8.openaiCodexIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    http.instrumentSentryHttp,\n    http.instrumentOtelHttp,\n    express.instrumentExpress,\n    connect.instrumentConnect,\n    index.instrumentFastify,\n    index.instrumentFastifyV3,\n    index$1.instrumentHapi,\n    index$2.instrumentHono,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index$1.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n    index$3.instrumentVercelAi,\n    index$4.instrumentOpenAi,\n    postgresjs.instrumentPostgresJs,\n    firebase.instrumentFirebase,\n    index$5.instrumentAnthropicAi,\n    index$6.instrumentGoogleGenAI,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDRLQUFZO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHlMQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLCtNQUF5QjtBQUNqRCxnQkFBZ0IsbUJBQU8sQ0FBQyw2TUFBd0I7QUFDaEQsZ0JBQWdCLG1CQUFPLENBQUMseUxBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK01BQXlCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLHlMQUFjO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxxTUFBb0I7QUFDMUMsaUJBQWlCLG1CQUFPLENBQUMsNk1BQXdCO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLGlNQUFrQjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQywrTUFBeUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMseUxBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK0xBQWlCO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLCtMQUFpQjtBQUN6QyxjQUFjLG1CQUFPLENBQUMscUxBQVk7QUFDbEMsWUFBWSxtQkFBTyxDQUFDLGlMQUFVO0FBQzlCLG9CQUFvQixtQkFBTyxDQUFDLGlNQUFrQjtBQUM5QyxjQUFjLG1CQUFPLENBQUMscUxBQVk7QUFDbEMsaUJBQWlCLG1CQUFPLENBQUMsMkxBQWU7QUFDeEMsY0FBYyxtQkFBTyxDQUFDLHFMQUFZO0FBQ2xDLGVBQWUsbUJBQU8sQ0FBQyx1TEFBYTtBQUNwQyxnQkFBZ0IsbUJBQU8sQ0FBQyxtTUFBbUI7QUFDM0MsaUJBQWlCLG1CQUFPLENBQUMsMkxBQWU7QUFDeEMsbUJBQW1CLG1CQUFPLENBQUMsK0xBQWlCO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQyx1TEFBYTtBQUNwQyxjQUFjLG1CQUFPLENBQUMscUxBQVk7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMseUxBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsdU1BQXFCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDLGdEQUFnRDtBQUNoRCIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4uL2h0dHAuanMnKTtcbmNvbnN0IGFtcXBsaWIgPSByZXF1aXJlKCcuL2FtcXBsaWIuanMnKTtcbmNvbnN0IGluZGV4JDUgPSByZXF1aXJlKCcuL2FudGhyb3BpYy1haS9pbmRleC5qcycpO1xuY29uc3QgaW5kZXgkNyA9IHJlcXVpcmUoJy4vY2xhdWRlLWNvZGUvaW5kZXguanMnKTtcbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2Nvbm5lY3QuanMnKTtcbmNvbnN0IGluZGV4JDggPSByZXF1aXJlKCcuL29wZW5haS1jb2RleC9pbmRleC5qcycpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJy4vZXhwcmVzcy5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL2Zhc3RpZnkvaW5kZXguanMnKTtcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZSgnLi9maXJlYmFzZS9maXJlYmFzZS5qcycpO1xuY29uc3QgZ2VuZXJpY1Bvb2wgPSByZXF1aXJlKCcuL2dlbmVyaWNQb29sLmpzJyk7XG5jb25zdCBpbmRleCQ2ID0gcmVxdWlyZSgnLi9nb29nbGUtZ2VuYWkvaW5kZXguanMnKTtcbmNvbnN0IGdyYXBocWwgPSByZXF1aXJlKCcuL2dyYXBocWwuanMnKTtcbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuL2hhcGkvaW5kZXguanMnKTtcbmNvbnN0IGluZGV4JDIgPSByZXF1aXJlKCcuL2hvbm8vaW5kZXguanMnKTtcbmNvbnN0IGthZmthID0gcmVxdWlyZSgnLi9rYWZrYS5qcycpO1xuY29uc3Qga29hID0gcmVxdWlyZSgnLi9rb2EuanMnKTtcbmNvbnN0IGxydW1lbW9pemVyID0gcmVxdWlyZSgnLi9scnVtZW1vaXplci5qcycpO1xuY29uc3QgbW9uZ28gPSByZXF1aXJlKCcuL21vbmdvLmpzJyk7XG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJy4vbW9uZ29vc2UuanMnKTtcbmNvbnN0IG15c3FsID0gcmVxdWlyZSgnLi9teXNxbC5qcycpO1xuY29uc3QgbXlzcWwyID0gcmVxdWlyZSgnLi9teXNxbDIuanMnKTtcbmNvbnN0IGluZGV4JDQgPSByZXF1aXJlKCcuL29wZW5haS9pbmRleC5qcycpO1xuY29uc3QgcG9zdGdyZXMgPSByZXF1aXJlKCcuL3Bvc3RncmVzLmpzJyk7XG5jb25zdCBwb3N0Z3Jlc2pzID0gcmVxdWlyZSgnLi9wb3N0Z3Jlc2pzLmpzJyk7XG5jb25zdCBwcmlzbWEgPSByZXF1aXJlKCcuL3ByaXNtYS5qcycpO1xuY29uc3QgcmVkaXMgPSByZXF1aXJlKCcuL3JlZGlzLmpzJyk7XG5jb25zdCB0ZWRpb3VzID0gcmVxdWlyZSgnLi90ZWRpb3VzLmpzJyk7XG5jb25zdCBpbmRleCQzID0gcmVxdWlyZSgnLi92ZXJjZWxhaS9pbmRleC5qcycpO1xuXG4vKipcbiAqIFdpdGggT1RFTCwgYWxsIHBlcmZvcm1hbmNlIGludGVncmF0aW9ucyB3aWxsIGJlIGFkZGVkLCBhcyBPVEVMIG9ubHkgaW5pdGlhbGl6ZXMgdGhlbSB3aGVuIHRoZSBwYXRjaGVkIHBhY2thZ2UgaXMgYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucygpIHtcbiAgcmV0dXJuIFtcbiAgICBleHByZXNzLmV4cHJlc3NJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4LmZhc3RpZnlJbnRlZ3JhdGlvbigpLFxuICAgIGdyYXBocWwuZ3JhcGhxbEludGVncmF0aW9uKCksXG4gICAgaW5kZXgkMi5ob25vSW50ZWdyYXRpb24oKSxcbiAgICBtb25nby5tb25nb0ludGVncmF0aW9uKCksXG4gICAgbW9uZ29vc2UubW9uZ29vc2VJbnRlZ3JhdGlvbigpLFxuICAgIG15c3FsLm15c3FsSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbDIubXlzcWwySW50ZWdyYXRpb24oKSxcbiAgICByZWRpcy5yZWRpc0ludGVncmF0aW9uKCksXG4gICAgcG9zdGdyZXMucG9zdGdyZXNJbnRlZ3JhdGlvbigpLFxuICAgIHByaXNtYS5wcmlzbWFJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDEuaGFwaUludGVncmF0aW9uKCksXG4gICAga29hLmtvYUludGVncmF0aW9uKCksXG4gICAgY29ubmVjdC5jb25uZWN0SW50ZWdyYXRpb24oKSxcbiAgICB0ZWRpb3VzLnRlZGlvdXNJbnRlZ3JhdGlvbigpLFxuICAgIGdlbmVyaWNQb29sLmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKSxcbiAgICBrYWZrYS5rYWZrYUludGVncmF0aW9uKCksXG4gICAgYW1xcGxpYi5hbXFwbGliSW50ZWdyYXRpb24oKSxcbiAgICBscnVtZW1vaXplci5scnVNZW1vaXplckludGVncmF0aW9uKCksXG4gICAgaW5kZXgkMy52ZXJjZWxBSUludGVncmF0aW9uKCksXG4gICAgaW5kZXgkNC5vcGVuQUlJbnRlZ3JhdGlvbigpLFxuICAgIHBvc3RncmVzanMucG9zdGdyZXNKc0ludGVncmF0aW9uKCksXG4gICAgZmlyZWJhc2UuZmlyZWJhc2VJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDUuYW50aHJvcGljQUlJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDYuZ29vZ2xlR2VuQUlJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDcuY2xhdWRlQ29kZUludGVncmF0aW9uKCksXG4gICAgaW5kZXgkOC5vcGVuYWlDb2RleEludGVncmF0aW9uKCksXG4gIF07XG59XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBtZXRob2RzIHRvIGluc3RydW1lbnQgT1RFTCwgd2hlbiBwcmVsb2FkIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQoKSB7XG4gIHJldHVybiBbXG4gICAgaHR0cC5pbnN0cnVtZW50U2VudHJ5SHR0cCxcbiAgICBodHRwLmluc3RydW1lbnRPdGVsSHR0cCxcbiAgICBleHByZXNzLmluc3RydW1lbnRFeHByZXNzLFxuICAgIGNvbm5lY3QuaW5zdHJ1bWVudENvbm5lY3QsXG4gICAgaW5kZXguaW5zdHJ1bWVudEZhc3RpZnksXG4gICAgaW5kZXguaW5zdHJ1bWVudEZhc3RpZnlWMyxcbiAgICBpbmRleCQxLmluc3RydW1lbnRIYXBpLFxuICAgIGluZGV4JDIuaW5zdHJ1bWVudEhvbm8sXG4gICAga2Fma2EuaW5zdHJ1bWVudEthZmthLFxuICAgIGtvYS5pbnN0cnVtZW50S29hLFxuICAgIGxydW1lbW9pemVyLmluc3RydW1lbnRMcnVNZW1vaXplcixcbiAgICBtb25nby5pbnN0cnVtZW50TW9uZ28sXG4gICAgbW9uZ29vc2UuaW5zdHJ1bWVudE1vbmdvb3NlLFxuICAgIG15c3FsLmluc3RydW1lbnRNeXNxbCxcbiAgICBteXNxbDIuaW5zdHJ1bWVudE15c3FsMixcbiAgICBwb3N0Z3Jlcy5pbnN0cnVtZW50UG9zdGdyZXMsXG4gICAgaW5kZXgkMS5pbnN0cnVtZW50SGFwaSxcbiAgICBncmFwaHFsLmluc3RydW1lbnRHcmFwaHFsLFxuICAgIHJlZGlzLmluc3RydW1lbnRSZWRpcyxcbiAgICB0ZWRpb3VzLmluc3RydW1lbnRUZWRpb3VzLFxuICAgIGdlbmVyaWNQb29sLmluc3RydW1lbnRHZW5lcmljUG9vbCxcbiAgICBhbXFwbGliLmluc3RydW1lbnRBbXFwbGliLFxuICAgIGluZGV4JDMuaW5zdHJ1bWVudFZlcmNlbEFpLFxuICAgIGluZGV4JDQuaW5zdHJ1bWVudE9wZW5BaSxcbiAgICBwb3N0Z3Jlc2pzLmluc3RydW1lbnRQb3N0Z3Jlc0pzLFxuICAgIGZpcmViYXNlLmluc3RydW1lbnRGaXJlYmFzZSxcbiAgICBpbmRleCQ1Lmluc3RydW1lbnRBbnRocm9waWNBaSxcbiAgICBpbmRleCQ2Lmluc3RydW1lbnRHb29nbGVHZW5BSSxcbiAgXTtcbn1cblxuZXhwb3J0cy5nZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMgPSBnZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnM7XG5leHBvcnRzLmdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQgPSBnZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-kafkajs@0.14.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rYWZrYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS2Fma2FqcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS2Fma2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S2Fma2EgPSBub2RlQ29yZS5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25LYWZrYWpzLkthZmthSnNJbnN0cnVtZW50YXRpb24oe1xuICAgICAgY29uc3VtZXJIb29rKHNwYW4pIHtcbiAgICAgICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmthZmthanMub3RlbC5jb25zdW1lcicpO1xuICAgICAgfSxcbiAgICAgIHByb2R1Y2VySG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwucHJvZHVjZXInKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfa2Fma2FJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S2Fma2EoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2thZmthanNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2thZmthanMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BrYWZrYUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2thZmthLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua2Fma2FJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICovXG5jb25zdCBrYWZrYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa2Fma2FJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEthZmthID0gaW5zdHJ1bWVudEthZmthO1xuZXhwb3J0cy5rYWZrYUludGVncmF0aW9uID0ga2Fma2FJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWthZmthLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-knex@0.49.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentKnex();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { data } = core.spanToJSON(span);\n          // knex.version is always set in the span data\n          // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n          if ('knex.version' in data) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw0QkFBNEIsbUJBQU8sQ0FBQyxtTkFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUI7QUFDL0U7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tuZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbktuZXggPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta25leCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0tuZXgnO1xuXG5jb25zdCBpbnN0cnVtZW50S25leCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25LbmV4LktuZXhJbnN0cnVtZW50YXRpb24oeyByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSB9KSxcbik7XG5cbmNvbnN0IF9rbmV4SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50S25leCgpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgICAvLyBrbmV4LnZlcnNpb24gaXMgYWx3YXlzIHNldCBpbiB0aGUgc3BhbiBkYXRhXG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzAzMDljYWVhZmM0NGFjOWNiMTNhMzM0NWI3OTBiMDFiNzZkMDQ5N2QvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWtuZXgvc3JjL2luc3RydW1lbnRhdGlvbi50cyNMMTM4XG4gICAgICAgICAgaWYgKCdrbmV4LnZlcnNpb24nIGluIGRhdGEpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwua25leCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogS25leCBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBbS25leF0oaHR0cHM6Ly9rbmV4anMub3JnLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua25leEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3Qga25leEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa25leEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S25leCA9IGluc3RydW1lbnRLbmV4O1xuZXhwb3J0cy5rbmV4SW50ZWdyYXRpb24gPSBrbmV4SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rbmV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-koa@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationKoa.KoaInstrumentation,\n  (options = {}) => {\n    return {\n      ignoreLayersType: options.ignoreLayersType ,\n      requestHook(span, info) {\n        nodeCore.addOriginToSpan(span, 'auto.http.otel.koa');\n\n        const attributes = core.spanToJSON(span).data;\n\n        // this is one of: middleware, router\n        const type = attributes['koa.type'];\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n        }\n\n        // Also update the name\n        const name = attributes['koa.name'];\n        if (typeof name === 'string') {\n          // Somehow, name is sometimes `''` for middleware spans\n          // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n          span.updateName(name || '< unknown >');\n        }\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.debug.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = info.context?.request?.method?.toUpperCase() || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    } ;\n  },\n);\n\nconst _koaIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @param {KoaOptions} options Configuration options for the Koa integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n *\n * @example\n * ```javascript\n * // To ignore middleware spans\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [\n *     Sentry.koaIntegration({\n *       ignoreLayersType: ['middleware']\n *     })\n *   ],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error, {\n        mechanism: {\n          handled: false,\n          type: 'auto.middleware.koa',\n        },\n      });\n      throw error;\n    }\n  });\n\n  nodeCore.ensureIsWrapped(app.use, 'koa');\n};\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva29hLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLGdOQUFvQztBQUN2RSw0QkFBNEIsbUJBQU8sQ0FBQywwTEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxtQkFBbUIsbUJBQU8sQ0FBQyxnTEFBc0I7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsS0FBSztBQUN2RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFFBQVEsRUFBRSxNQUFNO0FBQ3pFO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQixzQkFBc0I7QUFDdEIsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tvYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS29hID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtvYScpO1xuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vZGVidWctYnVpbGQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLb2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S29hID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgaW5zdHJ1bWVudGF0aW9uS29hLktvYUluc3RydW1lbnRhdGlvbixcbiAgKG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZ25vcmVMYXllcnNUeXBlOiBvcHRpb25zLmlnbm9yZUxheWVyc1R5cGUgLFxuICAgICAgcmVxdWVzdEhvb2soc3BhbiwgaW5mbykge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uaHR0cC5vdGVsLmtvYScpO1xuXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAgICAgICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcm91dGVyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydrb2EudHlwZSddO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgYCR7dHlwZX0ua29hYCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZVxuICAgICAgICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1sna29hLm5hbWUnXTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIFNvbWVob3csIG5hbWUgaXMgc29tZXRpbWVzIGAnJ2AgZm9yIG1pZGRsZXdhcmUgc3BhbnNcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvaXNzdWVzLzIyMjBcbiAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSB8fCAnPCB1bmtub3duID4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgPT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlIC0gc2tpcHBpbmcgc2V0dGluZyB0cmFuc2FjdGlvbk5hbWUnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm91dGUgPSBhdHRyaWJ1dGVzW3NlbWFudGljQ29udmVudGlvbnMuQVRUUl9IVFRQX1JPVVRFXTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBjb25zdCBtZXRob2QgPSBpbmZvLmNvbnRleHQ/LnJlcXVlc3Q/Lm1ldGhvZD8udG9VcHBlckNhc2UoKSB8fCAnR0VUJztcbiAgICAgICAgaWYgKHJvdXRlKSB7XG4gICAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHttZXRob2R9ICR7cm91dGV9YCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSA7XG4gIH0sXG4pO1xuXG5jb25zdCBfa29hSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEtvYShvcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciBbS29hXShodHRwczovL2tvYWpzLmNvbS8pLlxuICpcbiAqIElmIHlvdSBhbHNvIHdhbnQgdG8gY2FwdHVyZSBlcnJvcnMsIHlvdSBuZWVkIHRvIGNhbGwgYHNldHVwS29hRXJyb3JIYW5kbGVyKGFwcClgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBLb2Egc2VydmVyLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtrb2EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMva29hLykuXG4gKlxuICogQHBhcmFtIHtLb2FPcHRpb25zfSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIEtvYSBpbnRlZ3JhdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua29hSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFRvIGlnbm9yZSBtaWRkbGV3YXJlIHNwYW5zXG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5rb2FJbnRlZ3JhdGlvbih7XG4gKiAgICAgICBpZ25vcmVMYXllcnNUeXBlOiBbJ21pZGRsZXdhcmUnXVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGtvYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa29hSW50ZWdyYXRpb24pO1xuXG4vKipcbiAqIEFkZCBhbiBLb2EgZXJyb3IgaGFuZGxlciB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKlxuICogVGhlIGVycm9yIGhhbmRsZXIgbXVzdCBiZSBiZWZvcmUgYW55IG90aGVyIG1pZGRsZXdhcmUgYW5kIGFmdGVyIGFsbCBjb250cm9sbGVycy5cbiAqXG4gKiBAcGFyYW0gYXBwIFRoZSBFeHByZXNzIGluc3RhbmNlc1xuICogQHBhcmFtIG9wdGlvbnMge0V4cHJlc3NIYW5kbGVyT3B0aW9uc30gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgaGFuZGxlclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IEtvYSA9IHJlcXVpcmUoXCJrb2FcIik7XG4gKlxuICogY29uc3QgYXBwID0gbmV3IEtvYSgpO1xuICpcbiAqIFNlbnRyeS5zZXR1cEtvYUVycm9ySGFuZGxlcihhcHApO1xuICpcbiAqIC8vIEFkZCB5b3VyIHJvdXRlcywgZXRjLlxuICpcbiAqIGFwcC5saXN0ZW4oMzAwMCk7XG4gKiBgYGBcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IHNldHVwS29hRXJyb3JIYW5kbGVyID0gKGFwcCkgPT4ge1xuICBhcHAudXNlKGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgbmV4dCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgdHlwZTogJ2F1dG8ubWlkZGxld2FyZS5rb2EnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0pO1xuXG4gIG5vZGVDb3JlLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAna29hJyk7XG59O1xuXG5leHBvcnRzLmluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50S29hO1xuZXhwb3J0cy5rb2FJbnRlZ3JhdGlvbiA9IGtvYUludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cEtvYUVycm9ySGFuZGxlciA9IHNldHVwS29hRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a29hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-lru-memoizer@0.49.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsbUNBQW1DLG1CQUFPLENBQUMsMk9BQTZDO0FBQ3hGLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2xydW1lbW9pemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1scnUtbWVtb2l6ZXInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMcnVNZW1vaXplcic7XG5cbmNvbnN0IGluc3RydW1lbnRMcnVNZW1vaXplciA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkxydU1lbW9pemVyLkxydU1lbW9pemVySW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50THJ1TWVtb2l6ZXIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2xydS1tZW1vaXplcl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbHJ1LW1lbW9pemVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9scnVtZW1vaXplci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmxydU1lbW9pemVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3QgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2xydU1lbW9pemVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRMcnVNZW1vaXplciA9IGluc3RydW1lbnRMcnVNZW1vaXplcjtcbmV4cG9ydHMubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGxydU1lbW9pemVySW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scnVtZW1vaXplci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk1vbmdvZGIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vbmdvJztcblxuY29uc3QgaW5zdHJ1bWVudE1vbmdvID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYi5Nb25nb0RCSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGRiU3RhdGVtZW50U2VyaWFsaXplcjogX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIsXG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBub2RlQ29yZS5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nbycpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbi8qKlxuICogUmVwbGFjZXMgdmFsdWVzIGluIGRvY3VtZW50IHdpdGggJz8nLCBoaWRpbmcgUElJIGFuZCBoZWxwaW5nIGdyb3VwaW5nLlxuICovXG5mdW5jdGlvbiBfZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplcihjb21tYW5kT2JqKSB7XG4gIGNvbnN0IHJlc3VsdE9iaiA9IF9zY3J1YlN0YXRlbWVudChjb21tYW5kT2JqKTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdE9iaik7XG59XG5cbmZ1bmN0aW9uIF9zY3J1YlN0YXRlbWVudCh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGVsZW1lbnQgPT4gX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpKTtcbiAgfVxuXG4gIGlmIChpc0NvbW1hbmRPYmoodmFsdWUpKSB7XG4gICAgY29uc3QgaW5pdGlhbCA9IHt9O1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh2YWx1ZSlcbiAgICAgIC5tYXAoKFtrZXksIGVsZW1lbnRdKSA9PiBba2V5LCBfc2NydWJTdGF0ZW1lbnQoZWxlbWVudCldKVxuICAgICAgLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICBpZiAoaXNDb21tYW5kRW50cnkoY3VycmVudCkpIHtcbiAgICAgICAgICBwcmV2W2N1cnJlbnRbMF1dID0gY3VycmVudFsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgIH0sIGluaXRpYWwpO1xuICB9XG5cbiAgLy8gQSB2YWx1ZSBsaWtlIHN0cmluZyBvciBudW1iZXIsIHBvc3NpYmxlIGNvbnRhaW5zIFBJSSwgc2NydWIgaXRcbiAgcmV0dXJuICc/Jztcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kT2JqKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFpc0J1ZmZlcih2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbHVlKSB7XG4gIGxldCBpc0J1ZmZlciA9IGZhbHNlO1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGlzQnVmZmVyO1xufVxuXG5mdW5jdGlvbiBpc0NvbW1hbmRFbnRyeSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbmNvbnN0IF9tb25nb0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nbygpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29kYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29kYikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG1vbmdvSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbW9uZ28vKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5tb25nb0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbW9uZ29JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX21vbmdvSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLl9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyID0gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXI7XG5leHBvcnRzLmluc3RydW1lbnRNb25nbyA9IGluc3RydW1lbnRNb25nbztcbmV4cG9ydHMubW9uZ29JbnRlZ3JhdGlvbiA9IG1vbmdvSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nby5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongoose@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0NBQWdDLG1CQUFPLENBQUMsK05BQXlDO0FBQ2pGLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nb29zZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTW9uZ29vc2UgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29vc2UnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nb29zZSc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nb29zZSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlLk1vbmdvb3NlSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm1vbmdvb3NlJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX21vbmdvb3NlSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE1vbmdvb3NlKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFttb25nb29zZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbW9uZ29vc2UpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb29zZUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvb3NlLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29vc2VJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvb3NlSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb29zZUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50TW9uZ29vc2U7XG5leHBvcnRzLm1vbmdvb3NlSW50ZWdyYXRpb24gPSBtb25nb29zZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29vc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql@0.50.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsNkJBQTZCLG1CQUFPLENBQUMsc05BQXNDO0FBQzNFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBLGdJQUFnSTs7QUFFaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNeXNxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbCA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbk15c3FsLk15U1FMSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF9teXNxbEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbCgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbXlzcWxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL215c3FsKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbXlzcWxJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9teXNxbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm15c3FsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBteXNxbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWxJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE15c3FsID0gaW5zdHJ1bWVudE15c3FsO1xuZXhwb3J0cy5teXNxbEludGVncmF0aW9uID0gbXlzcWxJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mysql2@0.51.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDhCQUE4QixtQkFBTyxDQUFDLHlOQUF1QztBQUM3RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsb09BQW1COztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25NeXNxbDIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTXlzcWwyJztcblxuY29uc3QgaW5zdHJ1bWVudE15c3FsMiA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk15c3FsMi5NeVNRTDJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgbm9kZUNvcmUuYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubXlzcWwyJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX215c3FsMkludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNeXNxbDIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW215c3FsMl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbXlzcWwySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbXlzcWwyLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubXlzcWxJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG15c3FsMkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbXlzcWwySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50TXlzcWwyO1xuZXhwb3J0cy5teXNxbDJJbnRlZ3JhdGlvbiA9IG15c3FsMkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\");\n\nconst OPENAI_CODEX_INTEGRATION_NAME = 'OpenAiCodex';\n\n// Global singleton - only patch once per application instance\nlet _globalInstrumentedCodex = null;\nlet _initPromise = null;\n\n/**\n * Lazily loads and patches the OpenAI Codex SDK.\n * Ensures only one patched instance exists globally.\n */\nasync function ensurePatchedCodex() {\n  if (_globalInstrumentedCodex) {\n    return _globalInstrumentedCodex;\n  }\n\n  if (_initPromise) {\n    await _initPromise;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return _globalInstrumentedCodex;\n  }\n\n  _initPromise = (async () => {\n    try {\n      // Use webpackIgnore to prevent webpack from trying to resolve this at build time\n      // The import resolves at runtime from the user's node_modules\n      const sdkPath = '@openai/codex-sdk';\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const codexSDK = await import(/* webpackIgnore: true */ sdkPath);\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (!codexSDK || typeof codexSDK.Codex !== 'function') {\n        throw new Error(\n          'Failed to find \\'Codex\\' class in @openai/codex-sdk.\\n' +\n            'Make sure you have the package installed.',\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      _globalInstrumentedCodex = codexSDK.Codex;\n    } catch (error) {\n      // Reset state on failure to allow retry on next call\n      _initPromise = null;\n\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Unknown error occurred while loading @openai/codex-sdk';\n\n      throw new Error(\n        `Failed to instrument OpenAI Codex SDK:\\n${errorMessage}\\n\\n` +\n          'Make sure @openai/codex-sdk is installed:\\n' +\n          '  npm install @openai/codex-sdk\\n' +\n          '  # or\\n' +\n          '  yarn add @openai/codex-sdk',\n      );\n    }\n  })();\n\n  await _initPromise;\n  return _globalInstrumentedCodex;\n}\n\n/**\n * Creates a Sentry-instrumented Codex instance for the OpenAI Codex SDK.\n *\n * This is a convenience helper that reduces boilerplate to a single line.\n * The SDK is lazily loaded on first use, and instances are instrumented automatically.\n *\n * **Important**: This helper is NOT automatic. You must call it in your code.\n * The OpenAI Codex SDK cannot be automatically instrumented due to ESM module\n * and webpack bundling limitations.\n *\n * @param codexOptions - Options to pass to the Codex constructor\n * @param instrumentationOptions - Optional configuration for this specific agent instance\n * @param instrumentationOptions.name - Custom agent name for differentiation (defaults to 'openai-codex')\n * @param instrumentationOptions.recordInputs - Whether to record input prompts (defaults to sendDefaultPii)\n * @param instrumentationOptions.recordOutputs - Whether to record outputs (defaults to sendDefaultPii)\n * @returns An instrumented Codex instance ready to use\n *\n * @example\n * ```typescript\n * import { createInstrumentedCodex } from '@sentry/node';\n *\n * // Default agent name ('openai-codex')\n * const codex = await createInstrumentedCodex();\n * const thread = codex.startThread();\n * const result = await thread.run('Diagnose the test failure');\n *\n * // Custom agent name for differentiation\n * const devAgent = await createInstrumentedCodex({}, { name: 'dev-agent' });\n * const qaAgent = await createInstrumentedCodex({}, { name: 'qa-agent' });\n *\n * // Streaming mode\n * const thread = codex.startThread();\n * for await (const event of thread.runStreamed('Fix the bug')) {\n *   console.log(event);\n * }\n * ```\n *\n * Configuration is automatically pulled from your `openaiCodexIntegration()` setup:\n *\n * @example\n * ```typescript\n * Sentry.init({\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,   // These options are used\n *       recordOutputs: true,  // by createInstrumentedCodex()\n *     })\n *   ]\n * });\n * ```\n */\nasync function createInstrumentedCodex(\n  codexOptions,\n  instrumentationOptions = {},\n) {\n  await ensurePatchedCodex();\n\n  if (!_globalInstrumentedCodex) {\n    throw new Error('[Sentry] Failed to initialize instrumented OpenAI Codex SDK');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const CodexConstructor = _globalInstrumentedCodex;\n\n  const client = core.getClient();\n  const integration = client?.getIntegrationByName(OPENAI_CODEX_INTEGRATION_NAME);\n  const integrationOptions = (integration )?.options  || {};\n\n  // Merge options: integration options < instrumentation options\n  const finalOptions = {\n    ...integrationOptions,\n    ...(instrumentationOptions.recordInputs !== undefined && { recordInputs: instrumentationOptions.recordInputs }),\n    ...(instrumentationOptions.recordOutputs !== undefined && { recordOutputs: instrumentationOptions.recordOutputs }),\n    agentName: instrumentationOptions.name ?? integrationOptions.agentName ?? 'openai-codex',\n  };\n\n  // Create instance and instrument it\n  const codexInstance = new CodexConstructor(codexOptions);\n  return instrumentation.instrumentCodexInstance(codexInstance, finalOptions);\n}\n\nexports.createInstrumentedCodex = createInstrumentedCodex;\n//# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/helpers.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst OPENAI_CODEX_INTEGRATION_NAME = 'OpenAiCodex';\n\nconst _openaiCodexIntegration = ((options = {}) => {\n  return {\n    name: OPENAI_CODEX_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      // Note: Automatic patching via require hooks doesn't work for ESM modules\n      // or webpack-bundled dependencies. Users must manually use createInstrumentedCodex()\n      // in their code.\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the OpenAI Codex SDK.\n *\n * **Important**: Due to ESM module and bundler limitations, this integration requires\n * using the `createInstrumentedCodex()` helper function in your code.\n * See the example below for proper usage.\n *\n * This integration captures telemetry data following OpenTelemetry Semantic Conventions\n * for Generative AI, including:\n * - Agent invocation spans (`invoke_agent`)\n * - Chat spans (`chat`) for turn completions\n * - Tool execution spans (`execute_tool`) for commands, web searches, file changes, etc.\n * - Token usage, model info, and session tracking\n *\n * @example\n * ```typescript\n * // Step 1: Configure the integration\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   dsn: 'your-dsn',\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Step 2: Use the helper in your code\n * import { createInstrumentedCodex } from '@sentry/node';\n *\n * const codex = await createInstrumentedCodex();\n *\n * // Use Codex as normal - automatically instrumented!\n * const thread = codex.startThread();\n * const result = await thread.run('Diagnose the test failure and propose a fix');\n * console.log(result.finalResponse);\n *\n * // Or use streaming mode\n * for await (const event of thread.runStreamed('Fix the bug')) {\n *   if (event.type === 'item.completed') {\n *     console.log('Tool completed:', event.item);\n *   }\n * }\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text, tool calls, and outputs (default: respects `sendDefaultPii` client option)\n * - `agentName`: Custom agent name for differentiation (default: 'openai-codex')\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```typescript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.openaiCodexIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n *\n * // Use custom agent name for multiple agents\n * const devAgent = await createInstrumentedCodex({}, { name: 'dev-agent' });\n * const qaAgent = await createInstrumentedCodex({}, { name: 'qa-agent' });\n * ```\n *\n * ## Captured Events\n *\n * The integration captures the following Codex events as spans:\n *\n * ### Agent Invocation (invoke_agent)\n * - Tracks the entire agent interaction lifecycle\n * - Captures thread ID and session information\n *\n * ### Chat Turns (chat)\n * - Tracks individual turns in the conversation\n * - Captures token usage (input, output, cached tokens)\n * - Records response text (when recordOutputs is enabled)\n *\n * ### Tool Executions (execute_tool)\n * - `command_execution`: Shell commands with exit codes\n * - `file_change`: File modifications with change details\n * - `web_search`: Web search queries\n * - `mcp_tool_call`: MCP tool calls with server/tool names\n * - `agent_message`: Agent messages and reasoning\n * - `todo_list`: Task list management\n *\n * @see https://docs.sentry.io/platforms/javascript/guides/node/ai-monitoring/\n */\nconst openaiCodexIntegration = core.defineIntegration(_openaiCodexIntegration);\n\nexports.openaiCodexIntegration = openaiCodexIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpLWNvZGV4L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUEsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsWUFBWSwwQkFBMEI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLG9EQUFvRCxJQUFJLG1CQUFtQjtBQUMzRSxtREFBbUQsSUFBSSxrQkFBa0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpLWNvZGV4L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IE9QRU5BSV9DT0RFWF9JTlRFR1JBVElPTl9OQU1FID0gJ09wZW5BaUNvZGV4JztcblxuY29uc3QgX29wZW5haUNvZGV4SW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IE9QRU5BSV9DT0RFWF9JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gTm90ZTogQXV0b21hdGljIHBhdGNoaW5nIHZpYSByZXF1aXJlIGhvb2tzIGRvZXNuJ3Qgd29yayBmb3IgRVNNIG1vZHVsZXNcbiAgICAgIC8vIG9yIHdlYnBhY2stYnVuZGxlZCBkZXBlbmRlbmNpZXMuIFVzZXJzIG11c3QgbWFudWFsbHkgdXNlIGNyZWF0ZUluc3RydW1lbnRlZENvZGV4KClcbiAgICAgIC8vIGluIHRoZWlyIGNvZGUuXG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIE9wZW5BSSBDb2RleCBTREsuXG4gKlxuICogKipJbXBvcnRhbnQqKjogRHVlIHRvIEVTTSBtb2R1bGUgYW5kIGJ1bmRsZXIgbGltaXRhdGlvbnMsIHRoaXMgaW50ZWdyYXRpb24gcmVxdWlyZXNcbiAqIHVzaW5nIHRoZSBgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXgoKWAgaGVscGVyIGZ1bmN0aW9uIGluIHlvdXIgY29kZS5cbiAqIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgcHJvcGVyIHVzYWdlLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gY2FwdHVyZXMgdGVsZW1ldHJ5IGRhdGEgZm9sbG93aW5nIE9wZW5UZWxlbWV0cnkgU2VtYW50aWMgQ29udmVudGlvbnNcbiAqIGZvciBHZW5lcmF0aXZlIEFJLCBpbmNsdWRpbmc6XG4gKiAtIEFnZW50IGludm9jYXRpb24gc3BhbnMgKGBpbnZva2VfYWdlbnRgKVxuICogLSBDaGF0IHNwYW5zIChgY2hhdGApIGZvciB0dXJuIGNvbXBsZXRpb25zXG4gKiAtIFRvb2wgZXhlY3V0aW9uIHNwYW5zIChgZXhlY3V0ZV90b29sYCkgZm9yIGNvbW1hbmRzLCB3ZWIgc2VhcmNoZXMsIGZpbGUgY2hhbmdlcywgZXRjLlxuICogLSBUb2tlbiB1c2FnZSwgbW9kZWwgaW5mbywgYW5kIHNlc3Npb24gdHJhY2tpbmdcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gU3RlcCAxOiBDb25maWd1cmUgdGhlIGludGVncmF0aW9uXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGRzbjogJ3lvdXItZHNuJyxcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgU2VudHJ5Lm9wZW5haUNvZGV4SW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiB0cnVlLFxuICogICAgICAgcmVjb3JkT3V0cHV0czogdHJ1ZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBTdGVwIDI6IFVzZSB0aGUgaGVscGVyIGluIHlvdXIgY29kZVxuICogaW1wb3J0IHsgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXggfSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIGNvbnN0IGNvZGV4ID0gYXdhaXQgY3JlYXRlSW5zdHJ1bWVudGVkQ29kZXgoKTtcbiAqXG4gKiAvLyBVc2UgQ29kZXggYXMgbm9ybWFsIC0gYXV0b21hdGljYWxseSBpbnN0cnVtZW50ZWQhXG4gKiBjb25zdCB0aHJlYWQgPSBjb2RleC5zdGFydFRocmVhZCgpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhyZWFkLnJ1bignRGlhZ25vc2UgdGhlIHRlc3QgZmFpbHVyZSBhbmQgcHJvcG9zZSBhIGZpeCcpO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZpbmFsUmVzcG9uc2UpO1xuICpcbiAqIC8vIE9yIHVzZSBzdHJlYW1pbmcgbW9kZVxuICogZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiB0aHJlYWQucnVuU3RyZWFtZWQoJ0ZpeCB0aGUgYnVnJykpIHtcbiAqICAgaWYgKGV2ZW50LnR5cGUgPT09ICdpdGVtLmNvbXBsZXRlZCcpIHtcbiAqICAgICBjb25zb2xlLmxvZygnVG9vbCBjb21wbGV0ZWQ6JywgZXZlbnQuaXRlbSk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiAtIGByZWNvcmRJbnB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCBwcm9tcHQgbWVzc2FnZXMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYHJlY29yZE91dHB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCByZXNwb25zZSB0ZXh0LCB0b29sIGNhbGxzLCBhbmQgb3V0cHV0cyAoZGVmYXVsdDogcmVzcGVjdHMgYHNlbmREZWZhdWx0UGlpYCBjbGllbnQgb3B0aW9uKVxuICogLSBgYWdlbnROYW1lYDogQ3VzdG9tIGFnZW50IG5hbWUgZm9yIGRpZmZlcmVudGlhdGlvbiAoZGVmYXVsdDogJ29wZW5haS1jb2RleCcpXG4gKlxuICogIyMjIERlZmF1bHQgQmVoYXZpb3JcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgaW50ZWdyYXRpb24gd2lsbDpcbiAqIC0gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyBPTkxZIGlmIGBzZW5kRGVmYXVsdFBpaWAgaXMgc2V0IHRvIGB0cnVlYCBpbiB5b3VyIFNlbnRyeSBjbGllbnQgb3B0aW9uc1xuICogLSBPdGhlcndpc2UsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgTk9UIHJlY29yZGVkIHVubGVzcyBleHBsaWNpdGx5IGVuYWJsZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyB3aGVuIHNlbmREZWZhdWx0UGlpIGlzIGZhbHNlXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5vcGVuYWlDb2RleEludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogdHJ1ZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IHRydWVcbiAqICAgICB9KVxuICogICBdLFxuICogfSk7XG4gKlxuICogLy8gTmV2ZXIgcmVjb3JkIGlucHV0cy9vdXRwdXRzIHJlZ2FyZGxlc3Mgb2Ygc2VuZERlZmF1bHRQaWlcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgc2VuZERlZmF1bHRQaWk6IHRydWUsXG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5vcGVuYWlDb2RleEludGVncmF0aW9uKHtcbiAqICAgICAgIHJlY29yZElucHV0czogZmFsc2UsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiBmYWxzZVxuICogICAgIH0pXG4gKiAgIF0sXG4gKiB9KTtcbiAqXG4gKiAvLyBVc2UgY3VzdG9tIGFnZW50IG5hbWUgZm9yIG11bHRpcGxlIGFnZW50c1xuICogY29uc3QgZGV2QWdlbnQgPSBhd2FpdCBjcmVhdGVJbnN0cnVtZW50ZWRDb2RleCh7fSwgeyBuYW1lOiAnZGV2LWFnZW50JyB9KTtcbiAqIGNvbnN0IHFhQWdlbnQgPSBhd2FpdCBjcmVhdGVJbnN0cnVtZW50ZWRDb2RleCh7fSwgeyBuYW1lOiAncWEtYWdlbnQnIH0pO1xuICogYGBgXG4gKlxuICogIyMgQ2FwdHVyZWQgRXZlbnRzXG4gKlxuICogVGhlIGludGVncmF0aW9uIGNhcHR1cmVzIHRoZSBmb2xsb3dpbmcgQ29kZXggZXZlbnRzIGFzIHNwYW5zOlxuICpcbiAqICMjIyBBZ2VudCBJbnZvY2F0aW9uIChpbnZva2VfYWdlbnQpXG4gKiAtIFRyYWNrcyB0aGUgZW50aXJlIGFnZW50IGludGVyYWN0aW9uIGxpZmVjeWNsZVxuICogLSBDYXB0dXJlcyB0aHJlYWQgSUQgYW5kIHNlc3Npb24gaW5mb3JtYXRpb25cbiAqXG4gKiAjIyMgQ2hhdCBUdXJucyAoY2hhdClcbiAqIC0gVHJhY2tzIGluZGl2aWR1YWwgdHVybnMgaW4gdGhlIGNvbnZlcnNhdGlvblxuICogLSBDYXB0dXJlcyB0b2tlbiB1c2FnZSAoaW5wdXQsIG91dHB1dCwgY2FjaGVkIHRva2VucylcbiAqIC0gUmVjb3JkcyByZXNwb25zZSB0ZXh0ICh3aGVuIHJlY29yZE91dHB1dHMgaXMgZW5hYmxlZClcbiAqXG4gKiAjIyMgVG9vbCBFeGVjdXRpb25zIChleGVjdXRlX3Rvb2wpXG4gKiAtIGBjb21tYW5kX2V4ZWN1dGlvbmA6IFNoZWxsIGNvbW1hbmRzIHdpdGggZXhpdCBjb2Rlc1xuICogLSBgZmlsZV9jaGFuZ2VgOiBGaWxlIG1vZGlmaWNhdGlvbnMgd2l0aCBjaGFuZ2UgZGV0YWlsc1xuICogLSBgd2ViX3NlYXJjaGA6IFdlYiBzZWFyY2ggcXVlcmllc1xuICogLSBgbWNwX3Rvb2xfY2FsbGA6IE1DUCB0b29sIGNhbGxzIHdpdGggc2VydmVyL3Rvb2wgbmFtZXNcbiAqIC0gYGFnZW50X21lc3NhZ2VgOiBBZ2VudCBtZXNzYWdlcyBhbmQgcmVhc29uaW5nXG4gKiAtIGB0b2RvX2xpc3RgOiBUYXNrIGxpc3QgbWFuYWdlbWVudFxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9haS1tb25pdG9yaW5nL1xuICovXG5jb25zdCBvcGVuYWlDb2RleEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfb3BlbmFpQ29kZXhJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMub3BlbmFpQ29kZXhJbnRlZ3JhdGlvbiA9IG9wZW5haUNvZGV4SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js ***!
  \******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst GEN_AI_ATTRIBUTES = {\n  SYSTEM: 'gen_ai.system',\n  OPERATION_NAME: 'gen_ai.operation.name',\n  REQUEST_MODEL: 'gen_ai.request.model',\n  REQUEST_MESSAGES: 'gen_ai.request.messages',\n  RESPONSE_TEXT: 'gen_ai.response.text',\n  RESPONSE_TOOL_CALLS: 'gen_ai.response.tool_calls',\n  RESPONSE_ID: 'gen_ai.response.id',\n  RESPONSE_MODEL: 'gen_ai.response.model',\n  USAGE_INPUT_TOKENS: 'gen_ai.usage.input_tokens',\n  USAGE_OUTPUT_TOKENS: 'gen_ai.usage.output_tokens',\n  USAGE_TOTAL_TOKENS: 'gen_ai.usage.total_tokens',\n  TOOL_NAME: 'gen_ai.tool.name',\n  TOOL_TYPE: 'gen_ai.tool.type',\n  TOOL_INPUT: 'gen_ai.tool.input',\n  TOOL_OUTPUT: 'gen_ai.tool.output',\n  AGENT_NAME: 'gen_ai.agent.name',\n} ;\n\nconst SENTRY_ORIGIN = 'auto.ai.openai-codex';\n\n/**\n * Maps Codex tool/item types to OpenTelemetry tool types.\n *\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/\n * @param itemType - The type of the item (e.g., 'command_execution', 'web_search', 'mcp_tool_call')\n * @returns The OpenTelemetry tool type: 'function', 'extension', or 'datastore'\n */\nfunction getToolType(itemType) {\n  // Client-side execution tools - functions that run on the client\n  const functionTools = new Set([\n    'command_execution', // Shell/process tools\n    'file_change', // File operations\n    'reasoning', // Agent reasoning\n    'agent_message', // Agent messages\n    'todo_list', // Task management\n  ]);\n\n  // Agent-side API calls - external service integrations\n  const extensionTools = new Set(['web_search', 'mcp_tool_call']);\n\n  // Data access tools - database/structured data operations\n  const datastoreTools = new Set([]);\n\n  if (functionTools.has(itemType)) return 'function';\n  if (extensionTools.has(itemType)) return 'extension';\n  if (datastoreTools.has(itemType)) return 'datastore';\n\n  // Default to function for unknown tools (safest assumption)\n  return 'function';\n}\n\nfunction setTokenUsageAttributes(\n  span,\n  inputTokens,\n  outputTokens,\n  cacheCreationTokens,\n  cacheReadTokens,\n) {\n  const attrs = {};\n\n  if (typeof inputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_INPUT_TOKENS] = inputTokens;\n  }\n  if (typeof outputTokens === 'number') {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_OUTPUT_TOKENS] = outputTokens;\n  }\n\n  const total = (inputTokens ?? 0) + (outputTokens ?? 0) + (cacheCreationTokens ?? 0) + (cacheReadTokens);\n  if (total > 0) {\n    attrs[GEN_AI_ATTRIBUTES.USAGE_TOTAL_TOKENS] = total;\n  }\n\n  if (Object.keys(attrs).length > 0) {\n    span.setAttributes(attrs);\n  }\n}\n\n/**\n * Get a display name for a thread item based on its type and properties\n */\nfunction getItemDisplayName(item) {\n  switch (item.type) {\n    case 'command_execution':\n      // Use just the item type, not the full command (which can be very long)\n      return 'command_execution';\n    case 'web_search':\n      return 'web_search';\n    case 'mcp_tool_call':\n      return `mcp_tool_call.${item.server}.${item.tool}`;\n    case 'file_change':\n      return 'file_change';\n    case 'agent_message':\n      return 'agent_message';\n    case 'reasoning':\n      return 'reasoning';\n    case 'todo_list':\n      return 'todo_list';\n    case 'error':\n      return 'error';\n    default:\n      // TypeScript exhaustiveness check\n      return (item ).type;\n  }\n}\n\n/**\n * Get a descriptive span name for a thread item\n * Format: \"execute_tool <type>\"\n * Details go into the input/output attributes\n */\nfunction getSpanDescription(item) {\n  switch (item.type) {\n    case 'command_execution':\n      return 'execute_tool command_execution';\n    case 'web_search':\n      return 'execute_tool web_search';\n    case 'mcp_tool_call':\n      return `execute_tool mcp_tool_call`;\n    case 'file_change':\n      return 'execute_tool file_change';\n    case 'agent_message':\n      return 'execute_tool agent_message';\n    case 'reasoning':\n      return 'execute_tool reasoning';\n    case 'todo_list':\n      return 'execute_tool todo_list';\n    case 'error':\n      return 'execute_tool error';\n    default:\n      return `execute_tool ${(item ).type}`;\n  }\n}\n\n/**\n * Get input data for a thread item for telemetry\n */\nfunction getItemInput(item) {\n  switch (item.type) {\n    case 'command_execution':\n      return item.command;\n    case 'web_search':\n      return item.query;\n    case 'mcp_tool_call':\n      return JSON.stringify({ server: item.server, tool: item.tool });\n    case 'file_change':\n      return JSON.stringify(item.changes);\n    case 'agent_message':\n      return item.text;\n    case 'reasoning':\n      return item.text;\n    case 'todo_list':\n      return JSON.stringify(item.items);\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Strip ANSI escape codes from terminal output\n * Common codes like \\x1B(B\\x1B[m are used for text formatting/color\n */\nfunction stripAnsiCodes(text) {\n  // Remove all ANSI escape sequences including:\n  // - \\x1B[...m (SGR - colors, styles)\n  // - \\x1B(B (character set selection)\n  // - Other control sequences\n  // eslint-disable-next-line no-control-regex\n  return text.replace(/\\x1B(?:\\[[0-9;]*[a-zA-Z]|\\([AB012]|[@-Z\\\\-_])/g, '');\n}\n\n/**\n * Get output data for a thread item for telemetry\n */\nfunction getItemOutput(item) {\n  switch (item.type) {\n    case 'command_execution': {\n      // Strip ANSI codes from terminal output\n      const cleanOutput = stripAnsiCodes(item.aggregated_output);\n      const exitCodeStr = `Exit code: ${item.exit_code ?? 'N/A'}`;\n      // Only include output if it's not empty after stripping ANSI codes\n      return cleanOutput.trim() ? `${cleanOutput}\\n${exitCodeStr}` : exitCodeStr;\n    }\n    case 'file_change':\n      return `Status: ${item.status}`;\n    case 'mcp_tool_call':\n      return `Status: ${item.status}`;\n    case 'error':\n      return item.message;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Wraps a Thread instance to add Sentry instrumentation\n */\nfunction instrumentThread(\n  originalThread,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  // Wrap the runStreamed method\n  const originalRunStreamed = originalThread.runStreamed.bind(originalThread);\n  originalThread.runStreamed = async function (input, turnOptions) {\n    const originalStreamedTurn = await originalRunStreamed(input, turnOptions);\n\n    return {\n      events: instrumentStreamedTurn(originalStreamedTurn.events, input, agentName, recordInputs, recordOutputs),\n    };\n  };\n\n  // Wrap the run method\n  const originalRun = originalThread.run.bind(originalThread);\n  originalThread.run = async function (input, turnOptions) {\n    return instrumentNonStreamedTurn(originalRun, input, turnOptions, agentName, recordInputs, recordOutputs);\n  };\n\n  return originalThread;\n}\n\n/**\n * Instruments a streamed turn (runStreamed) with Sentry spans\n */\nasync function* instrumentStreamedTurn(\n  originalStream,\n  input,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  yield* core.startSpanManual(\n    {\n      name: `invoke_agent ${agentName}`,\n      op: 'gen_ai.invoke_agent',\n      attributes: {\n        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n      },\n    },\n    // eslint-disable-next-line complexity -- Complex event handling for streaming AI responses\n    async function* (agentSpan) {\n      let threadId = null;\n      let currentTurnSpan = null;\n      const itemSpans = new Map();\n      let turnMessages = [];\n\n      try {\n        for await (const event of originalStream) {\n          // Capture thread ID\n          if (event.type === 'thread.started') {\n            threadId = event.thread_id;\n            agentSpan.setAttributes({\n              [GEN_AI_ATTRIBUTES.RESPONSE_ID]: threadId,\n            });\n          }\n\n          // Start turn span\n          if (event.type === 'turn.started') {\n            if (currentTurnSpan) {\n              currentTurnSpan.setStatus({ code: 1 });\n              currentTurnSpan.end();\n            }\n\n            currentTurnSpan = core.withActiveSpan(agentSpan, () => {\n              return core.startSpanManual(\n                {\n                  name: `chat codex`,\n                  op: 'gen_ai.chat',\n                  attributes: {\n                    [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                    [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                    [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                    ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n                  },\n                },\n                (span) => span,\n              );\n            });\n\n            turnMessages = [];\n          }\n\n          // Complete turn span\n          if (event.type === 'turn.completed') {\n            const turnCompletedEvent = event;\n            if (currentTurnSpan) {\n              // Add response text if we captured any messages\n              if (recordOutputs && turnMessages.length > 0) {\n                currentTurnSpan.setAttributes({\n                  [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: turnMessages.join('\\n'),\n                });\n              }\n\n              // Add token usage\n              if (turnCompletedEvent.usage) {\n                setTokenUsageAttributes(\n                  currentTurnSpan,\n                  turnCompletedEvent.usage.input_tokens,\n                  turnCompletedEvent.usage.output_tokens,\n                  turnCompletedEvent.usage.cached_input_tokens,\n                  0,\n                );\n              }\n\n              currentTurnSpan.setStatus({ code: 1 });\n              currentTurnSpan.end();\n              currentTurnSpan = null;\n            }\n          }\n\n          // Handle turn failure\n          if (event.type === 'turn.failed') {\n            const turnFailedEvent = event;\n            if (currentTurnSpan) {\n              currentTurnSpan.setStatus({ code: 2, message: turnFailedEvent.error.message });\n              currentTurnSpan.end();\n              currentTurnSpan = null;\n            }\n          }\n\n          // Start item span - only for items that have a completion state\n          if (event.type === 'item.started') {\n            const itemEvent = event ;\n            const item = itemEvent.item;\n\n            // Only create spans for items that will have meaningful execution\n            // Skip reasoning items as they complete immediately\n            if (currentTurnSpan && item.type !== 'reasoning' && item.type !== 'agent_message') {\n              const itemSpan = core.withActiveSpan(currentTurnSpan, () => {\n                const itemName = getItemDisplayName(item);\n                const toolType = getToolType(item.type);\n                const spanDescription = getSpanDescription(item);\n\n                return core.startSpanManual(\n                  {\n                    name: spanDescription,\n                    op: 'gen_ai.execute_tool',\n                    attributes: {\n                      [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                      [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                      [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                      [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                      [GEN_AI_ATTRIBUTES.TOOL_NAME]: itemName,\n                      [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                    },\n                  },\n                  (span) => {\n                    if (recordInputs) {\n                      const itemInput = getItemInput(item);\n                      if (itemInput) {\n                        span.setAttributes({\n                          [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                        });\n                      }\n                    }\n                    return span;\n                  },\n                );\n              });\n\n              itemSpans.set(item.id, itemSpan);\n            }\n          }\n\n          // Complete item span\n          if (event.type === 'item.completed') {\n            const itemEvent = event ;\n            const item = itemEvent.item;\n\n            // For items with spans (command_execution, web_search, etc.)\n            const itemSpan = itemSpans.get(item.id);\n            if (itemSpan) {\n              // Update input with latest data (may have been updated since item.started)\n              if (recordInputs) {\n                const itemInput = getItemInput(item);\n                if (itemInput) {\n                  itemSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                  });\n                }\n              }\n\n              if (recordOutputs) {\n                const itemOutput = getItemOutput(item);\n                if (itemOutput) {\n                  itemSpan.setAttributes({\n                    [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]: itemOutput,\n                  });\n                }\n              }\n\n              // Check for error status - handle command execution exit codes\n              if (item.type === 'error') {\n                itemSpan.setStatus({ code: 2, message: item.message });\n              } else if (item.type === 'command_execution') {\n                // Check exit code - exit_code is optional and may be undefined while in progress\n                if (typeof item.exit_code === 'number' && item.exit_code !== 0) {\n                  itemSpan.setStatus({ code: 2, message: `Command failed with exit code ${item.exit_code}` });\n                } else if (item.status === 'failed') {\n                  itemSpan.setStatus({ code: 2, message: 'Command execution failed' });\n                } else {\n                  itemSpan.setStatus({ code: 1 });\n                }\n              } else if (('status' in item) && item.status === 'failed') {\n                itemSpan.setStatus({ code: 2, message: 'Tool execution failed' });\n              } else {\n                itemSpan.setStatus({ code: 1 });\n              }\n\n              itemSpan.end();\n              itemSpans.delete(item.id);\n            }\n\n            // Capture agent messages for response text\n            if (item.type === 'agent_message') {\n              turnMessages.push(item.text);\n            }\n          }\n\n          yield event;\n        }\n\n        agentSpan.setStatus({ code: 1 });\n      } catch (error) {\n        core.captureException(error, {\n          mechanism: {\n            type: SENTRY_ORIGIN,\n            handled: false,\n          },\n        });\n\n        agentSpan.setStatus({ code: 2, message: (error ).message });\n        throw error;\n      } finally {\n        // Clean up any remaining spans\n        if (currentTurnSpan && currentTurnSpan.isRecording()) {\n          currentTurnSpan.setStatus({ code: 1 });\n          currentTurnSpan.end();\n        }\n\n        for (const itemSpan of itemSpans.values()) {\n          if (itemSpan.isRecording()) {\n            itemSpan.setStatus({ code: 1 });\n            itemSpan.end();\n          }\n        }\n\n        agentSpan.end();\n      }\n    },\n  );\n}\n\n/**\n * Instruments a non-streamed turn (run) with Sentry spans\n */\nasync function instrumentNonStreamedTurn(\n  originalRun,\n  input,\n  turnOptions,\n  agentName,\n  recordInputs,\n  recordOutputs,\n) {\n  return core.startSpanManual(\n    {\n      name: `invoke_agent ${agentName}`,\n      op: 'gen_ai.invoke_agent',\n      attributes: {\n        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'invoke_agent',\n        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.invoke_agent',\n        ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n      },\n    },\n    async (agentSpan) => {\n      try {\n        const result = await core.withActiveSpan(agentSpan, async () => {\n          return await core.startSpanManual(\n            {\n              name: `chat codex`,\n              op: 'gen_ai.chat',\n              attributes: {\n                [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'chat',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.chat',\n                ...(recordInputs && { [GEN_AI_ATTRIBUTES.REQUEST_MESSAGES]: JSON.stringify([{ role: 'user', content: input }]) }),\n              },\n            },\n            async (chatSpan) => {\n              const turn = await originalRun(input, turnOptions);\n\n              // Add response text\n              if (recordOutputs && turn.finalResponse) {\n                chatSpan.setAttributes({\n                  [GEN_AI_ATTRIBUTES.RESPONSE_TEXT]: turn.finalResponse,\n                });\n              }\n\n              // Note: run() doesn't provide usage information, only runStreamed() does via events\n\n              // Create spans for each item\n              for (const item of turn.items) {\n                await core.withActiveSpan(chatSpan, () => {\n                  const itemName = getItemDisplayName(item);\n                  const toolType = getToolType(item.type);\n                  const spanDescription = getSpanDescription(item);\n\n                  core.startSpan(\n                    {\n                      name: spanDescription,\n                      op: 'gen_ai.execute_tool',\n                      attributes: {\n                        [GEN_AI_ATTRIBUTES.SYSTEM]: 'openai-codex',\n                        [GEN_AI_ATTRIBUTES.REQUEST_MODEL]: 'codex',\n                        [GEN_AI_ATTRIBUTES.OPERATION_NAME]: 'execute_tool',\n                        [GEN_AI_ATTRIBUTES.AGENT_NAME]: agentName,\n                        [GEN_AI_ATTRIBUTES.TOOL_NAME]: itemName,\n                        [GEN_AI_ATTRIBUTES.TOOL_TYPE]: toolType,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: SENTRY_ORIGIN,\n                        [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'gen_ai.execute_tool',\n                      },\n                    },\n                    (itemSpan) => {\n                      if (recordInputs) {\n                        const itemInput = getItemInput(item);\n                        if (itemInput) {\n                          itemSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_INPUT]: itemInput,\n                          });\n                        }\n                      }\n\n                      if (recordOutputs) {\n                        const itemOutput = getItemOutput(item);\n                        if (itemOutput) {\n                          itemSpan.setAttributes({\n                            [GEN_AI_ATTRIBUTES.TOOL_OUTPUT]: itemOutput,\n                          });\n                        }\n                      }\n\n                      // Check for error status\n                      if (item.type === 'error' || (('status' in item) && item.status === 'failed')) {\n                        itemSpan.setStatus({ code: 2, message: item.type === 'error' ? item.message : 'Tool execution failed' });\n                      } else {\n                        itemSpan.setStatus({ code: 1 });\n                      }\n                    },\n                  );\n                });\n              }\n\n              chatSpan.setStatus({ code: 1 });\n              return turn;\n            },\n          );\n        });\n\n        agentSpan.setStatus({ code: 1 });\n        return result;\n      } catch (error) {\n        core.captureException(error, {\n          mechanism: {\n            type: SENTRY_ORIGIN,\n            handled: false,\n          },\n        });\n\n        agentSpan.setStatus({ code: 2, message: (error ).message });\n        throw error;\n      }\n    },\n  );\n}\n\n/**\n * Wraps a Codex instance to add Sentry instrumentation to all threads\n */\nfunction instrumentCodexInstance(originalCodex, options = {}) {\n  const client = core.getClient();\n  const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n  const recordInputs = options.recordInputs ?? defaultPii;\n  const recordOutputs = options.recordOutputs ?? defaultPii;\n  const agentName = options.agentName ?? 'openai-codex';\n\n  // Wrap startThread\n  const originalStartThread = originalCodex.startThread.bind(originalCodex);\n  originalCodex.startThread = function (threadOptions) {\n    const thread = originalStartThread(threadOptions);\n    return instrumentThread(thread, agentName, recordInputs, recordOutputs);\n  };\n\n  // Wrap resumeThread\n  const originalResumeThread = originalCodex.resumeThread.bind(originalCodex);\n  originalCodex.resumeThread = function (id, threadOptions) {\n    const thread = originalResumeThread(id, threadOptions);\n    return instrumentThread(thread, agentName, recordInputs, recordOutputs);\n  };\n\n  return originalCodex;\n}\n\n/**\n * Wraps the Codex constructor to automatically instrument all instances\n */\nfunction patchCodexConstructor(\n  CodexConstructor,\n  instrumentationOptions = {},\n) {\n  return class InstrumentedCodex extends (CodexConstructor ) {\n    constructor(options) {\n      super(options);\n      return instrumentCodexInstance(this , instrumentationOptions);\n    }\n  } ;\n}\n\nexports.instrumentCodexInstance = instrumentCodexInstance;\nexports.patchCodexConstructor = patchCodexConstructor;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai-codex/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\");\n\nconst instrumentOpenAi = nodeCore.generateInstrumentOnce(\n  core.OPENAI_INTEGRATION_NAME,\n  () => new instrumentation.SentryOpenAiInstrumentation({}),\n);\n\nconst _openAiIntegration = ((options = {}) => {\n  return {\n    name: core.OPENAI_INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentOpenAi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the OpenAI SDK.\n *\n * This integration is enabled by default.\n *\n * When configured, this integration automatically instruments OpenAI SDK client instances\n * to capture telemetry data following OpenTelemetry Semantic Conventions for Generative AI.\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   integrations: [Sentry.openAIIntegration()],\n * });\n * ```\n *\n * ## Options\n *\n * - `recordInputs`: Whether to record prompt messages (default: respects `sendDefaultPii` client option)\n * - `recordOutputs`: Whether to record response text (default: respects `sendDefaultPii` client option)\n *\n * ### Default Behavior\n *\n * By default, the integration will:\n * - Record inputs and outputs ONLY if `sendDefaultPii` is set to `true` in your Sentry client options\n * - Otherwise, inputs and outputs are NOT recorded unless explicitly enabled\n *\n * @example\n * ```javascript\n * // Record inputs and outputs when sendDefaultPii is false\n * Sentry.init({\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: true,\n *       recordOutputs: true\n *     })\n *   ],\n * });\n *\n * // Never record inputs/outputs regardless of sendDefaultPii\n * Sentry.init({\n *   sendDefaultPii: true,\n *   integrations: [\n *     Sentry.openAIIntegration({\n *       recordInputs: false,\n *       recordOutputs: false\n *     })\n *   ],\n * });\n * ```\n *\n */\nconst openAIIntegration = core.defineIntegration(_openAiIntegration);\n\nexports.instrumentOpenAi = instrumentOpenAi;\nexports.openAIIntegration = openAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsZ05BQXNCOztBQUV0RDtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEOztBQUVBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL2luc3RydW1lbnRhdGlvbi5qcycpO1xuXG5jb25zdCBpbnN0cnVtZW50T3BlbkFpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgY29yZS5PUEVOQUlfSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbi5TZW50cnlPcGVuQWlJbnN0cnVtZW50YXRpb24oe30pLFxuKTtcblxuY29uc3QgX29wZW5BaUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBjb3JlLk9QRU5BSV9JTlRFR1JBVElPTl9OQU1FLFxuICAgIG9wdGlvbnMsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE9wZW5BaSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBPcGVuQUkgU0RLLlxuICpcbiAqIFRoaXMgaW50ZWdyYXRpb24gaXMgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIFdoZW4gY29uZmlndXJlZCwgdGhpcyBpbnRlZ3JhdGlvbiBhdXRvbWF0aWNhbGx5IGluc3RydW1lbnRzIE9wZW5BSSBTREsgY2xpZW50IGluc3RhbmNlc1xuICogdG8gY2FwdHVyZSB0ZWxlbWV0cnkgZGF0YSBmb2xsb3dpbmcgT3BlblRlbGVtZXRyeSBTZW1hbnRpYyBDb252ZW50aW9ucyBmb3IgR2VuZXJhdGl2ZSBBSS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkub3BlbkFJSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiAtIGByZWNvcmRJbnB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCBwcm9tcHQgbWVzc2FnZXMgKGRlZmF1bHQ6IHJlc3BlY3RzIGBzZW5kRGVmYXVsdFBpaWAgY2xpZW50IG9wdGlvbilcbiAqIC0gYHJlY29yZE91dHB1dHNgOiBXaGV0aGVyIHRvIHJlY29yZCByZXNwb25zZSB0ZXh0IChkZWZhdWx0OiByZXNwZWN0cyBgc2VuZERlZmF1bHRQaWlgIGNsaWVudCBvcHRpb24pXG4gKlxuICogIyMjIERlZmF1bHQgQmVoYXZpb3JcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgaW50ZWdyYXRpb24gd2lsbDpcbiAqIC0gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyBPTkxZIGlmIGBzZW5kRGVmYXVsdFBpaWAgaXMgc2V0IHRvIGB0cnVlYCBpbiB5b3VyIFNlbnRyeSBjbGllbnQgb3B0aW9uc1xuICogLSBPdGhlcndpc2UsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgTk9UIHJlY29yZGVkIHVubGVzcyBleHBsaWNpdGx5IGVuYWJsZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gUmVjb3JkIGlucHV0cyBhbmQgb3V0cHV0cyB3aGVuIHNlbmREZWZhdWx0UGlpIGlzIGZhbHNlXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1xuICogICAgIFNlbnRyeS5vcGVuQUlJbnRlZ3JhdGlvbih7XG4gKiAgICAgICByZWNvcmRJbnB1dHM6IHRydWUsXG4gKiAgICAgICByZWNvcmRPdXRwdXRzOiB0cnVlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICpcbiAqIC8vIE5ldmVyIHJlY29yZCBpbnB1dHMvb3V0cHV0cyByZWdhcmRsZXNzIG9mIHNlbmREZWZhdWx0UGlpXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIHNlbmREZWZhdWx0UGlpOiB0cnVlLFxuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkub3BlbkFJSW50ZWdyYXRpb24oe1xuICogICAgICAgcmVjb3JkSW5wdXRzOiBmYWxzZSxcbiAqICAgICAgIHJlY29yZE91dHB1dHM6IGZhbHNlXG4gKiAgICAgfSlcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5jb25zdCBvcGVuQUlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX29wZW5BaUludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50T3BlbkFpID0gaW5zdHJ1bWVudE9wZW5BaTtcbmV4cG9ydHMub3BlbkFJSW50ZWdyYXRpb24gPSBvcGVuQUlJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst supportedVersions = ['>=4.0.0 <6'];\n\n/**\n * Determines telemetry recording settings.\n */\nfunction determineRecordingSettings(\n  integrationOptions,\n  defaultEnabled,\n) {\n  const recordInputs = integrationOptions?.recordInputs ?? defaultEnabled;\n  const recordOutputs = integrationOptions?.recordOutputs ?? defaultEnabled;\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * Sentry OpenAI instrumentation using OpenTelemetry.\n */\nclass SentryOpenAiInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super('@sentry/instrumentation-openai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('openai', supportedVersions, this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Core patch logic applying instrumentation to the OpenAI client constructor.\n   */\n   _patch(exports) {\n    const Original = exports.OpenAI;\n\n    const WrappedOpenAI = function ( ...args) {\n      const instance = Reflect.construct(Original, args);\n      const client = core.getClient();\n      const integration = client?.getIntegrationByName(core.OPENAI_INTEGRATION_NAME);\n      const integrationOpts = integration?.options;\n      const defaultPii = Boolean(client?.getOptions().sendDefaultPii);\n\n      const { recordInputs, recordOutputs } = determineRecordingSettings(integrationOpts, defaultPii);\n\n      return core.instrumentOpenAiClient(instance , {\n        recordInputs,\n        recordOutputs,\n      });\n    } ;\n\n    // Preserve static and prototype chains\n    Object.setPrototypeOf(WrappedOpenAI, Original);\n    Object.setPrototypeOf(WrappedOpenAI.prototype, Original.prototype);\n\n    for (const key of Object.getOwnPropertyNames(Original)) {\n      if (!['length', 'name', 'prototype'].includes(key)) {\n        const descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        if (descriptor) {\n          Object.defineProperty(WrappedOpenAI, key, descriptor);\n        }\n      }\n    }\n\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    try {\n      exports.OpenAI = WrappedOpenAI;\n    } catch (error) {\n      // If direct assignment fails, override the property descriptor\n      Object.defineProperty(exports, 'OpenAI', {\n        value: WrappedOpenAI,\n        writable: true,\n        configurable: true,\n        enumerable: true,\n      });\n    }\n\n    // Wrap the default export if it points to the original constructor\n    // Constructor replacement - handle read-only properties\n    // The OpenAI property might have only a getter, so use defineProperty\n    if (exports.default === Original) {\n      try {\n        exports.default = WrappedOpenAI;\n      } catch (error) {\n        // If direct assignment fails, override the property descriptor\n        Object.defineProperty(exports, 'default', {\n          value: WrappedOpenAI,\n          writable: true,\n          configurable: true,\n          enumerable: true,\n        });\n      }\n    }\n    return exports;\n  }\n}\n\nexports.SentryOpenAiInstrumentation = SentryOpenAiInstrumentation;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvb3BlbmFpL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxDQUFDLG9EQUFvRCx5Q0FBeUMsMENBQTBDLDhDQUE4QyxvREFBb0QscURBQXFELGlCQUFpQjs7QUFFaFQsd0JBQXdCLG1CQUFPLENBQUMscU1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyw4QkFBOEI7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9vcGVuYWkvaW5zdHJ1bWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiU0VOVFJZX1JFTEVBU0VcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlCYXNlUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeU5leHRKc1ZlcnNpb25cIl0gPSBcIjE1LjUuNFwiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXJcIl0gPSBcIi5uZXh0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBzdXBwb3J0ZWRWZXJzaW9ucyA9IFsnPj00LjAuMCA8NiddO1xuXG4vKipcbiAqIERldGVybWluZXMgdGVsZW1ldHJ5IHJlY29yZGluZyBzZXR0aW5ncy5cbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lUmVjb3JkaW5nU2V0dGluZ3MoXG4gIGludGVncmF0aW9uT3B0aW9ucyxcbiAgZGVmYXVsdEVuYWJsZWQsXG4pIHtcbiAgY29uc3QgcmVjb3JkSW5wdXRzID0gaW50ZWdyYXRpb25PcHRpb25zPy5yZWNvcmRJbnB1dHMgPz8gZGVmYXVsdEVuYWJsZWQ7XG4gIGNvbnN0IHJlY29yZE91dHB1dHMgPSBpbnRlZ3JhdGlvbk9wdGlvbnM/LnJlY29yZE91dHB1dHMgPz8gZGVmYXVsdEVuYWJsZWQ7XG4gIHJldHVybiB7IHJlY29yZElucHV0cywgcmVjb3JkT3V0cHV0cyB9O1xufVxuXG4vKipcbiAqIFNlbnRyeSBPcGVuQUkgaW5zdHJ1bWVudGF0aW9uIHVzaW5nIE9wZW5UZWxlbWV0cnkuXG4gKi9cbmNsYXNzIFNlbnRyeU9wZW5BaUluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoJ0BzZW50cnkvaW5zdHJ1bWVudGF0aW9uLW9wZW5haScsIGNvcmUuU0RLX1ZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGluc3RydW1lbnRhdGlvbiBieSBkZWZpbmluZyB0aGUgbW9kdWxlcyB0byBiZSBwYXRjaGVkLlxuICAgKi9cbiAgIGluaXQoKSB7XG4gICAgY29uc3QgbW9kdWxlID0gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbignb3BlbmFpJywgc3VwcG9ydGVkVmVyc2lvbnMsIHRoaXMuX3BhdGNoLmJpbmQodGhpcykpO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBwYXRjaCBsb2dpYyBhcHBseWluZyBpbnN0cnVtZW50YXRpb24gdG8gdGhlIE9wZW5BSSBjbGllbnQgY29uc3RydWN0b3IuXG4gICAqL1xuICAgX3BhdGNoKGV4cG9ydHMpIHtcbiAgICBjb25zdCBPcmlnaW5hbCA9IGV4cG9ydHMuT3BlbkFJO1xuXG4gICAgY29uc3QgV3JhcHBlZE9wZW5BSSA9IGZ1bmN0aW9uICggLi4uYXJncykge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBSZWZsZWN0LmNvbnN0cnVjdChPcmlnaW5hbCwgYXJncyk7XG4gICAgICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICAgICAgY29uc3QgaW50ZWdyYXRpb24gPSBjbGllbnQ/LmdldEludGVncmF0aW9uQnlOYW1lKGNvcmUuT1BFTkFJX0lOVEVHUkFUSU9OX05BTUUpO1xuICAgICAgY29uc3QgaW50ZWdyYXRpb25PcHRzID0gaW50ZWdyYXRpb24/Lm9wdGlvbnM7XG4gICAgICBjb25zdCBkZWZhdWx0UGlpID0gQm9vbGVhbihjbGllbnQ/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaSk7XG5cbiAgICAgIGNvbnN0IHsgcmVjb3JkSW5wdXRzLCByZWNvcmRPdXRwdXRzIH0gPSBkZXRlcm1pbmVSZWNvcmRpbmdTZXR0aW5ncyhpbnRlZ3JhdGlvbk9wdHMsIGRlZmF1bHRQaWkpO1xuXG4gICAgICByZXR1cm4gY29yZS5pbnN0cnVtZW50T3BlbkFpQ2xpZW50KGluc3RhbmNlICwge1xuICAgICAgICByZWNvcmRJbnB1dHMsXG4gICAgICAgIHJlY29yZE91dHB1dHMsXG4gICAgICB9KTtcbiAgICB9IDtcblxuICAgIC8vIFByZXNlcnZlIHN0YXRpYyBhbmQgcHJvdG90eXBlIGNoYWluc1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihXcmFwcGVkT3BlbkFJLCBPcmlnaW5hbCk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFdyYXBwZWRPcGVuQUkucHJvdG90eXBlLCBPcmlnaW5hbC5wcm90b3R5cGUpO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT3JpZ2luYWwpKSB7XG4gICAgICBpZiAoIVsnbGVuZ3RoJywgJ25hbWUnLCAncHJvdG90eXBlJ10uaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPcmlnaW5hbCwga2V5KTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZE9wZW5BSSwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnN0cnVjdG9yIHJlcGxhY2VtZW50IC0gaGFuZGxlIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgLy8gVGhlIE9wZW5BSSBwcm9wZXJ0eSBtaWdodCBoYXZlIG9ubHkgYSBnZXR0ZXIsIHNvIHVzZSBkZWZpbmVQcm9wZXJ0eVxuICAgIHRyeSB7XG4gICAgICBleHBvcnRzLk9wZW5BSSA9IFdyYXBwZWRPcGVuQUk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElmIGRpcmVjdCBhc3NpZ25tZW50IGZhaWxzLCBvdmVycmlkZSB0aGUgcHJvcGVydHkgZGVzY3JpcHRvclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdPcGVuQUknLCB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVkT3BlbkFJLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV3JhcCB0aGUgZGVmYXVsdCBleHBvcnQgaWYgaXQgcG9pbnRzIHRvIHRoZSBvcmlnaW5hbCBjb25zdHJ1Y3RvclxuICAgIC8vIENvbnN0cnVjdG9yIHJlcGxhY2VtZW50IC0gaGFuZGxlIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgLy8gVGhlIE9wZW5BSSBwcm9wZXJ0eSBtaWdodCBoYXZlIG9ubHkgYSBnZXR0ZXIsIHNvIHVzZSBkZWZpbmVQcm9wZXJ0eVxuICAgIGlmIChleHBvcnRzLmRlZmF1bHQgPT09IE9yaWdpbmFsKSB7XG4gICAgICB0cnkge1xuICAgICAgICBleHBvcnRzLmRlZmF1bHQgPSBXcmFwcGVkT3BlbkFJO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gSWYgZGlyZWN0IGFzc2lnbm1lbnQgZmFpbHMsIG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZGVmYXVsdCcsIHtcbiAgICAgICAgICB2YWx1ZTogV3JhcHBlZE9wZW5BSSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzO1xuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5T3BlbkFpSW5zdHJ1bWVudGF0aW9uID0gU2VudHJ5T3BlbkFpSW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/openai/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-pg@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsMEJBQTBCLG1CQUFPLENBQUMsNk1BQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3Bvc3RncmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25QZyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Bvc3RncmVzJztcblxuY29uc3QgaW5zdHJ1bWVudFBvc3RncmVzID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uUGcuUGdJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgICByZXF1ZXN0SG9vayhzcGFuKSB7XG4gICAgICAgIG5vZGVDb3JlLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLnBvc3RncmVzJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuY29uc3QgX3Bvc3RncmVzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFBvc3RncmVzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtwZ10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGcpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Bwb3N0Z3Jlc0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL3Bvc3RncmVzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkucG9zdGdyZXNJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHBvc3RncmVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wb3N0Z3Jlc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50UG9zdGdyZXM7XG5leHBvcnRzLnBvc3RncmVzSW50ZWdyYXRpb24gPSBwb3N0Z3Jlc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zdGdyZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\n// Instrumentation for https://github.com/porsager/postgres\n\nconst INTEGRATION_NAME = 'PostgresJs';\nconst SUPPORTED_VERSIONS = ['>=3.0.0 <4'];\n\nconst instrumentPostgresJs = nodeCore.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  (options) =>\n    new PostgresJsInstrumentation({\n      requireParentSpan: options?.requireParentSpan ?? true,\n      requestHook: options?.requestHook,\n    }),\n);\n\n/**\n * Instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n * This instrumentation captures postgresjs queries and their attributes,\n */\nclass PostgresJsInstrumentation extends instrumentation.InstrumentationBase {\n   constructor(config) {\n    super('sentry-postgres-js', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation.\n   */\n   init() {\n    const instrumentationModule = new instrumentation.InstrumentationNodeModuleDefinition('postgres', SUPPORTED_VERSIONS);\n\n    ['src', 'cf/src', 'cjs/src'].forEach(path => {\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/connection.js`,\n          ['*'],\n          this._patchConnection.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n\n      instrumentationModule.files.push(\n        new instrumentation.InstrumentationNodeModuleFile(\n          `postgres/${path}/query.js`,\n          SUPPORTED_VERSIONS,\n          this._patchQuery.bind(this),\n          this._unwrap.bind(this),\n        ),\n      );\n    });\n\n    return [instrumentationModule];\n  }\n\n  /**\n   * Determines whether a span should be created based on the current context.\n   * If `requireParentSpan` is set to true in the configuration, a span will\n   * only be created if there is a parent span available.\n   */\n   _shouldCreateSpans() {\n    const config = this.getConfig();\n    const hasParentSpan = api.trace.getSpan(api.context.active()) !== undefined;\n    return hasParentSpan || !config.requireParentSpan;\n  }\n\n  /**\n   * Patches the reject method of the Query class to set the span status and end it\n   */\n   _patchReject(rejectTarget, span) {\n    return new Proxy(rejectTarget, {\n      apply: (\n        rejectTarget,\n        rejectThisArg,\n        rejectArgs\n\n,\n      ) => {\n        span.setStatus({\n          code: core.SPAN_STATUS_ERROR,\n          // This message is the error message from the rejectArgs, when available\n          // e.g \"relation 'User' does not exist\"\n          message: rejectArgs?.[0]?.message || 'unknown_error',\n        });\n\n        const result = Reflect.apply(rejectTarget, rejectThisArg, rejectArgs);\n\n        // This status code is PG error code, e.g. '42P01' for \"relation does not exist\"\n        // https://www.postgresql.org/docs/current/errcodes-appendix.html\n        span.setAttribute(semanticConventions.ATTR_DB_RESPONSE_STATUS_CODE, rejectArgs?.[0]?.code || 'Unknown error');\n        // This is the error type, e.g. 'PostgresError' for a Postgres error\n        span.setAttribute(semanticConventions.ATTR_ERROR_TYPE, rejectArgs?.[0]?.name || 'Unknown error');\n\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the resolve method of the Query class to end the span when the query is resolved.\n   */\n   _patchResolve(resolveTarget, span) {\n    return new Proxy(resolveTarget, {\n      apply: (resolveTarget, resolveThisArg, resolveArgs) => {\n        const result = Reflect.apply(resolveTarget, resolveThisArg, resolveArgs);\n        const sqlCommand = resolveArgs?.[0]?.command;\n\n        if (sqlCommand) {\n          // SQL command is only available when the query is resolved successfully\n          span.setAttribute(semanticConventions.ATTR_DB_OPERATION_NAME, sqlCommand);\n        }\n        span.end();\n        return result;\n      },\n    });\n  }\n\n  /**\n   * Patches the Query class to instrument the handle method.\n   */\n   _patchQuery(moduleExports\n\n) {\n    moduleExports.Query.prototype.handle = new Proxy(moduleExports.Query.prototype.handle, {\n      apply: async (\n        handleTarget,\n        handleThisArg\n\n,\n        handleArgs,\n      ) => {\n        if (!this._shouldCreateSpans()) {\n          // If we don't need to create spans, just call the original method\n          return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n        }\n\n        const sanitizedSqlQuery = this._sanitizeSqlQuery(handleThisArg.strings?.[0]);\n\n        return core.startSpanManual(\n          {\n            name: sanitizedSqlQuery || 'postgresjs.query',\n            op: 'db',\n          },\n          (span) => {\n            const scope = core.getCurrentScope();\n            const postgresConnectionContext = scope.getScopeData().contexts['postgresjsConnection']\n\n;\n\n            nodeCore.addOriginToSpan(span, 'auto.db.otel.postgres');\n\n            const { requestHook } = this.getConfig();\n\n            if (requestHook) {\n              instrumentation.safeExecuteInTheMiddle(\n                () => requestHook(span, sanitizedSqlQuery, postgresConnectionContext),\n                error => {\n                  if (error) {\n                    core.debug.error(`Error in requestHook for ${INTEGRATION_NAME} integration:`, error);\n                  }\n                },\n              );\n            }\n\n            // ATTR_DB_NAMESPACE is used to indicate the database name and the schema name\n            // It's only the database name as we don't have the schema information\n            const databaseName = postgresConnectionContext?.ATTR_DB_NAMESPACE || '<unknown database>';\n            const databaseHost = postgresConnectionContext?.ATTR_SERVER_ADDRESS || '<unknown host>';\n            const databasePort = postgresConnectionContext?.ATTR_SERVER_PORT || '<unknown port>';\n\n            span.setAttribute(semanticConventions.ATTR_DB_SYSTEM_NAME, 'postgres');\n            span.setAttribute(semanticConventions.ATTR_DB_NAMESPACE, databaseName);\n            span.setAttribute(semanticConventions.ATTR_SERVER_ADDRESS, databaseHost);\n            span.setAttribute(semanticConventions.ATTR_SERVER_PORT, databasePort);\n            span.setAttribute(semanticConventions.ATTR_DB_QUERY_TEXT, sanitizedSqlQuery);\n\n            handleThisArg.resolve = this._patchResolve(handleThisArg.resolve, span);\n            handleThisArg.reject = this._patchReject(handleThisArg.reject, span);\n\n            try {\n              return Reflect.apply(handleTarget, handleThisArg, handleArgs);\n            } catch (error) {\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n              });\n              span.end();\n              throw error; // Re-throw the error to propagate it\n            }\n          },\n        );\n      },\n    });\n\n    return moduleExports;\n  }\n\n  /**\n   * Patches the Connection class to set the database, host, and port attributes\n   * when a new connection is created.\n   */\n   _patchConnection(Connection) {\n    return new Proxy(Connection, {\n      apply: (connectionTarget, thisArg, connectionArgs) => {\n        const databaseName = connectionArgs[0]?.database || '<unknown database>';\n        const databaseHost = connectionArgs[0]?.host?.[0] || '<unknown host>';\n        const databasePort = connectionArgs[0]?.port?.[0] || '<unknown port>';\n\n        const scope = core.getCurrentScope();\n        scope.setContext('postgresjsConnection', {\n          ATTR_DB_NAMESPACE: databaseName,\n          ATTR_SERVER_ADDRESS: databaseHost,\n          ATTR_SERVER_PORT: databasePort,\n        });\n\n        return Reflect.apply(connectionTarget, thisArg, connectionArgs);\n      },\n    });\n  }\n\n  /**\n   * Sanitize SQL query as per the OTEL semantic conventions\n   * https://opentelemetry.io/docs/specs/semconv/database/database-spans/#sanitization-of-dbquerytext\n   */\n   _sanitizeSqlQuery(sqlQuery) {\n    if (!sqlQuery) {\n      return 'Unknown SQL Query';\n    }\n\n    return (\n      sqlQuery\n        .replace(/\\s+/g, ' ')\n        .trim() // Remove extra spaces including newlines and trim\n        .substring(0, 1024) // Truncate to 1024 characters\n        .replace(/--.*?(\\r?\\n|$)/g, '') // Single line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Multi-line comments\n        .replace(/;\\s*$/, '') // Remove trailing semicolons\n        .replace(/\\b\\d+\\b/g, '?') // Replace standalone numbers\n        // Collapse whitespace to a single space\n        .replace(/\\s+/g, ' ')\n        // Collapse IN and in clauses\n        // eg. IN (?, ?, ?, ?) to IN (?)\n        .replace(/\\bIN\\b\\s*\\(\\s*\\?(?:\\s*,\\s*\\?)*\\s*\\)/g, 'IN (?)')\n    );\n  }\n}\n\nconst _postgresJsIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgresJs();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [postgres](https://www.npmjs.com/package/postgres) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresJsIntegration()],\n * });\n * ```\n */\n\nconst postgresJsIntegration = core.defineIntegration(_postgresJsIntegration);\n\nexports.PostgresJsInstrumentation = PostgresJsInstrumentation;\nexports.instrumentPostgresJs = instrumentPostgresJs;\nexports.postgresJsIntegration = postgresJsIntegration;\n//# sourceMappingURL=postgresjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/postgresjs.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@prisma+instrumentation@6.15.0_@opentelemetry+api@1.9.0/node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nfunction isPrismaV6TracingHelper(helper) {\n  return !!helper && typeof helper === 'object' && 'dispatchEngineSpans' in helper;\n}\n\nfunction getPrismaTracingHelper() {\n  const prismaInstrumentationObject = (globalThis ).PRISMA_INSTRUMENTATION;\n  const prismaTracingHelper =\n    prismaInstrumentationObject &&\n    typeof prismaInstrumentationObject === 'object' &&\n    'helper' in prismaInstrumentationObject\n      ? prismaInstrumentationObject.helper\n      : undefined;\n\n  return prismaTracingHelper;\n}\n\nclass SentryPrismaInteropInstrumentation extends instrumentation.PrismaInstrumentation {\n   constructor() {\n    super();\n  }\n\n   enable() {\n    super.enable();\n\n    // The PrismaIntegration (super class) defines a global variable `global[\"PRISMA_INSTRUMENTATION\"]` when `enable()` is called. This global variable holds a \"TracingHelper\" which Prisma uses internally to create tracing data. It's their way of not depending on OTEL with their main package. The sucky thing is, prisma broke the interface of the tracing helper with the v6 major update. This means that if you use Prisma 5 with the v6 instrumentation (or vice versa) Prisma just blows up, because tries to call methods on the helper that no longer exist.\n    // Because we actually want to use the v6 instrumentation and not blow up in Prisma 5 user's faces, what we're doing here is backfilling the v5 method (`createEngineSpan`) with a noop so that no longer crashes when it attempts to call that function.\n    const prismaTracingHelper = getPrismaTracingHelper();\n\n    if (isPrismaV6TracingHelper(prismaTracingHelper)) {\n      // Inspired & adjusted from https://github.com/prisma/prisma/tree/5.22.0/packages/instrumentation\n      (prismaTracingHelper ).createEngineSpan = (\n        engineSpanEvent,\n      ) => {\n        const tracer = api.trace.getTracer('prismaV5Compatibility') ;\n\n        // Prisma v5 relies on being able to create spans with a specific span & trace ID\n        // this is no longer possible in OTEL v2, there is no public API to do this anymore\n        // So in order to kind of hack this possibility, we rely on the internal `_idGenerator` property\n        // This is used to generate the random IDs, and we overwrite this temporarily to generate static IDs\n        // This is flawed and may not work, e.g. if the code is bundled and the private property is renamed\n        // in such cases, these spans will not be captured and some Prisma spans will be missing\n        const initialIdGenerator = tracer._idGenerator;\n\n        if (!initialIdGenerator) {\n          core.consoleSandbox(() => {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[Sentry] Could not find _idGenerator on tracer, skipping Prisma v5 compatibility - some Prisma spans may be missing!',\n            );\n          });\n\n          return;\n        }\n\n        try {\n          engineSpanEvent.spans.forEach(engineSpan => {\n            const kind = engineSpanKindToOTELSpanKind(engineSpan.kind);\n\n            const parentSpanId = engineSpan.parent_span_id;\n            const spanId = engineSpan.span_id;\n            const traceId = engineSpan.trace_id;\n\n            const links = engineSpan.links?.map(link => {\n              return {\n                context: {\n                  traceId: link.trace_id,\n                  spanId: link.span_id,\n                  traceFlags: api.TraceFlags.SAMPLED,\n                },\n              };\n            });\n\n            const ctx = api.trace.setSpanContext(api.context.active(), {\n              traceId,\n              spanId: parentSpanId,\n              traceFlags: api.TraceFlags.SAMPLED,\n            });\n\n            api.context.with(ctx, () => {\n              const temporaryIdGenerator = {\n                generateTraceId: () => {\n                  return traceId;\n                },\n                generateSpanId: () => {\n                  return spanId;\n                },\n              };\n\n              tracer._idGenerator = temporaryIdGenerator;\n\n              const span = tracer.startSpan(engineSpan.name, {\n                kind,\n                links,\n                startTime: engineSpan.start_time,\n                attributes: engineSpan.attributes,\n              });\n\n              span.end(engineSpan.end_time);\n\n              tracer._idGenerator = initialIdGenerator;\n            });\n          });\n        } finally {\n          // Ensure we always restore this at the end, even if something errors\n          tracer._idGenerator = initialIdGenerator;\n        }\n      };\n    }\n  }\n}\n\nfunction engineSpanKindToOTELSpanKind(engineSpanKind) {\n  switch (engineSpanKind) {\n    case 'client':\n      return api.SpanKind.CLIENT;\n    case 'internal':\n    default: // Other span kinds aren't currently supported\n      return api.SpanKind.INTERNAL;\n  }\n}\n\nconst instrumentPrisma = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, _options => {\n  return new SentryPrismaInteropInstrumentation();\n});\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * NOTE: By default, this integration works with Prisma version 6.\n * To get performance instrumentation for other Prisma versions,\n * 1. Install the `@prisma/instrumentation` package with the desired version.\n * 1. Pass a `new PrismaInstrumentation()` instance as exported from `@prisma/instrumentation` to the `prismaInstrumentation` option of this integration:\n *\n *    ```js\n *    import { PrismaInstrumentation } from '@prisma/instrumentation'\n *\n *    Sentry.init({\n *      integrations: [\n *        prismaIntegration({\n *          // Override the default instrumentation that Sentry uses\n *          prismaInstrumentation: new PrismaInstrumentation()\n *        })\n *      ]\n *    })\n *    ```\n *\n *    The passed instrumentation instance will override the default instrumentation instance the integration would use, while the `prismaIntegration` will still ensure data compatibility for the various Prisma versions.\n * 1. Depending on your Prisma version (prior to version 6), add `previewFeatures = [\"tracing\"]` to the client generator block of your Prisma schema:\n *\n *    ```\n *    generator client {\n *      provider = \"prisma-client-js\"\n *      previewFeatures = [\"tracing\"]\n *    }\n *    ```\n */\nconst prismaIntegration = core.defineIntegration((_options) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n    setup(client) {\n      // If no tracing helper exists, we skip any work here\n      // this means that prisma is not being used\n      if (!getPrismaTracingHelper()) {\n        return;\n      }\n\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (spanJSON.description?.startsWith('prisma:')) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        // Make sure we use the query text as the span name, for ex. SELECT * FROM \"User\" WHERE \"id\" = $1\n        if (spanJSON.description === 'prisma:engine:db_query' && spanJSON.data['db.query.text']) {\n          span.updateName(spanJSON.data['db.query.text'] );\n        }\n\n        // In Prisma v5.22+, the `db.system` attribute is automatically set\n        // On older versions, this is missing, so we add it here\n        if (spanJSON.description === 'prisma:engine:db_query' && !spanJSON.data['db.system']) {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    },\n  };\n});\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-ioredis@0.52.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis = __webpack_require__(/*! @opentelemetry/instrumentation-redis */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-redis@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-redis/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_redisOptions.cachePrefixes ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = core.spanToJSON(span).data['net.peer.name'];\n  const networkPeerPort = core.spanToJSON(span).data['net.peer.port'];\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.IORedis`, () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedisModule = nodeCore.generateInstrumentOnce(`${INTEGRATION_NAME}.Redis`, () => {\n  return new instrumentationRedis.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedisModule();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsNE5BQXdDO0FBQy9FLDZCQUE2QixtQkFBTyxDQUFDLHNOQUFzQztBQUMzRSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsb09BQW1CO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLDBMQUEyQjs7QUFFdEQ7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtGQUFrRjtBQUMzRzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQSw2REFBNkQsaUJBQWlCO0FBQzlFO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCxpRUFBaUUsaUJBQWlCO0FBQ2xGO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDO0FBQ3hDLEdBQUc7QUFDSCxJQUFJLHNCQUFzQjtBQUMxQjs7QUFFQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3JlZGlzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Jb3JlZGlzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWlvcmVkaXMnKTtcbmNvbnN0IGluc3RydW1lbnRhdGlvblJlZGlzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCByZWRpc0NhY2hlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmVkaXNDYWNoZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1JlZGlzJztcblxubGV0IF9yZWRpc09wdGlvbnMgPSB7fTtcblxuY29uc3QgY2FjaGVSZXNwb25zZUhvb2sgPSAoc3BhbiwgcmVkaXNDb21tYW5kLCBjbWRBcmdzLCByZXNwb25zZSkgPT4ge1xuICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCAnYXV0by5kYi5vdGVsLnJlZGlzJyk7XG5cbiAgY29uc3Qgc2FmZUtleSA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVLZXlTYWZlbHkocmVkaXNDb21tYW5kLCBjbWRBcmdzKTtcbiAgY29uc3QgY2FjaGVPcGVyYXRpb24gPSByZWRpc0NhY2hlLmdldENhY2hlT3BlcmF0aW9uKHJlZGlzQ29tbWFuZCk7XG5cbiAgaWYgKFxuICAgICFzYWZlS2V5IHx8XG4gICAgIWNhY2hlT3BlcmF0aW9uIHx8XG4gICAgIV9yZWRpc09wdGlvbnMuY2FjaGVQcmVmaXhlcyB8fFxuICAgICFyZWRpc0NhY2hlLnNob3VsZENvbnNpZGVyRm9yQ2FjaGUocmVkaXNDb21tYW5kLCBzYWZlS2V5LCBfcmVkaXNPcHRpb25zLmNhY2hlUHJlZml4ZXMpXG4gICkge1xuICAgIC8vIG5vdCByZWxldmFudCBmb3IgY2FjaGVcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBvdGVsL2lvcmVkaXMgc2VlbXMgdG8gYmUgdXNpbmcgdGhlIG9sZCBzdGFuZGFyZCwgYXMgdGhlcmUgd2FzIGEgY2hhbmdlIHRvIHRob3NlIHBhcmFtczogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktc3BlY2lmaWNhdGlvbi9pc3N1ZXMvMzE5OVxuICAvLyBXZSBhcmUgdXNpbmcgcGFyYW1zIGJhc2VkIG9uIHRoZSBkb2NzOiBodHRwczovL29wZW50ZWxlbWV0cnkuaW8vZG9jcy9zcGVjcy9zZW1jb252L2F0dHJpYnV0ZXMtcmVnaXN0cnkvbmV0d29yay9cbiAgY29uc3QgbmV0d29ya1BlZXJBZGRyZXNzID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGFbJ25ldC5wZWVyLm5hbWUnXTtcbiAgY29uc3QgbmV0d29ya1BlZXJQb3J0ID0gY29yZS5zcGFuVG9KU09OKHNwYW4pLmRhdGFbJ25ldC5wZWVyLnBvcnQnXTtcbiAgaWYgKG5ldHdvcmtQZWVyUG9ydCAmJiBuZXR3b3JrUGVlckFkZHJlc3MpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZXMoeyAnbmV0d29yay5wZWVyLmFkZHJlc3MnOiBuZXR3b3JrUGVlckFkZHJlc3MsICduZXR3b3JrLnBlZXIucG9ydCc6IG5ldHdvcmtQZWVyUG9ydCB9KTtcbiAgfVxuXG4gIGNvbnN0IGNhY2hlSXRlbVNpemUgPSByZWRpc0NhY2hlLmNhbGN1bGF0ZUNhY2hlSXRlbVNpemUocmVzcG9uc2UpO1xuXG4gIGlmIChjYWNoZUl0ZW1TaXplKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFLCBjYWNoZUl0ZW1TaXplKTtcbiAgfVxuXG4gIGlmIChyZWRpc0NhY2hlLmlzSW5Db21tYW5kcyhyZWRpc0NhY2hlLkdFVF9DT01NQU5EUywgcmVkaXNDb21tYW5kKSAmJiBjYWNoZUl0ZW1TaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQsIGNhY2hlSXRlbVNpemUgPiAwKTtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGNhY2hlT3BlcmF0aW9uLFxuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9LRVldOiBzYWZlS2V5LFxuICB9KTtcblxuICBjb25zdCBzcGFuRGVzY3JpcHRpb24gPSBzYWZlS2V5LmpvaW4oJywgJyk7XG5cbiAgc3Bhbi51cGRhdGVOYW1lKGNvcmUudHJ1bmNhdGUoc3BhbkRlc2NyaXB0aW9uLCAxMDI0KSk7XG59O1xuXG5jb25zdCBpbnN0cnVtZW50SU9SZWRpcyA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoYCR7SU5URUdSQVRJT05fTkFNRX0uSU9SZWRpc2AsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25Jb3JlZGlzLklPUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbmNvbnN0IGluc3RydW1lbnRSZWRpc01vZHVsZSA9IG5vZGVDb3JlLmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoYCR7SU5URUdSQVRJT05fTkFNRX0uUmVkaXNgLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uUmVkaXMuUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbi8qKiBUbyBiZSBhYmxlIHRvIHByZWxvYWQgYWxsIFJlZGlzIE9UZWwgaW5zdHJ1bWVudGF0aW9ucyB3aXRoIGp1c3Qgb25lIElEIChcIlJlZGlzXCIpLCBhbGwgdGhlIGluc3RydW1lbnRhdGlvbnMgYXJlIGdlbmVyYXRlZCBpbiB0aGlzIG9uZSBmdW5jdGlvbiAgKi9cbmNvbnN0IGluc3RydW1lbnRSZWRpcyA9IE9iamVjdC5hc3NpZ24oXG4gICgpID0+IHtcbiAgICBpbnN0cnVtZW50SU9SZWRpcygpO1xuICAgIGluc3RydW1lbnRSZWRpc01vZHVsZSgpO1xuXG4gICAgLy8gdG9kbzogaW1wbGVtZW50IHRoZW0gZ3JhZHVhbGx5XG4gICAgLy8gbmV3IExlZ2FjeVJlZGlzSW5zdHJ1bWVudGF0aW9uKHt9KSxcbiAgfSxcbiAgeyBpZDogSU5URUdSQVRJT05fTkFNRSB9LFxuKTtcblxuY29uc3QgX3JlZGlzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgX3JlZGlzT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpbnN0cnVtZW50UmVkaXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3JlZGlzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yZWRpcykgYW5kXG4gKiBbaW9yZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW9yZWRpcykgbGlicmFyaWVzLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcmVkaXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9yZWRpcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnJlZGlzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCByZWRpc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcmVkaXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFJlZGlzID0gaW5zdHJ1bWVudFJlZGlzO1xuZXhwb3J0cy5yZWRpc0ludGVncmF0aW9uID0gcmVkaXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-tedious@0.23.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = nodeCore.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentTedious();\n      instrumentationWrappedCallback = nodeCore.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { description, data } = core.spanToJSON(span);\n          // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n          if (!description || data['db.system'] !== 'mssql') {\n            return;\n          }\n\n          const operation = description.split(' ')[0] || '';\n          if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw0TkFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxzSUFBc0k7O0FBRXRJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy90ZWRpb3VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25UZWRpb3VzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXRlZGlvdXMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5vZGVDb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlLWNvcmUnKTtcblxuY29uc3QgVEVESVVTX0lOU1RSVU1FTlRFRF9NRVRIT0RTID0gbmV3IFNldChbXG4gICdjYWxsUHJvY2VkdXJlJyxcbiAgJ2V4ZWNTcWwnLFxuICAnZXhlY1NxbEJhdGNoJyxcbiAgJ2V4ZWNCdWxrTG9hZCcsXG4gICdwcmVwYXJlJyxcbiAgJ2V4ZWN1dGUnLFxuXSk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnVGVkaW91cyc7XG5cbmNvbnN0IGluc3RydW1lbnRUZWRpb3VzID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uVGVkaW91cy5UZWRpb3VzSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF90ZWRpb3VzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50VGVkaW91cygpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gbm9kZUNvcmUuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBkYXRhIH0gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgICAgLy8gVGVkaXVzIGludGVncmF0aW9uIGFsd2F5cyBzZXQgYSBzcGFuIG5hbWUgYW5kIGBkYi5zeXN0ZW1gIGF0dHJpYnV0ZSB0byBgbXNzcWxgLlxuICAgICAgICAgIGlmICghZGVzY3JpcHRpb24gfHwgZGF0YVsnZGIuc3lzdGVtJ10gIT09ICdtc3NxbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBkZXNjcmlwdGlvbi5zcGxpdCgnICcpWzBdIHx8ICcnO1xuICAgICAgICAgIGlmIChURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMuaGFzKG9wZXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwudGVkaW91cycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbdGVkaW91c10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGVkaW91cykgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHRlZGlvdXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy90ZWRpb3VzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkudGVkaW91c0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgdGVkaW91c0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfdGVkaW91c0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50VGVkaW91cyA9IGluc3RydW1lbnRUZWRpb3VzO1xuZXhwb3J0cy50ZWRpb3VzSW50ZWdyYXRpb24gPSB0ZWRpb3VzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZWRpb3VzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFOztBQUVBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy92ZXJjZWxhaS9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnVmVyY2VsQUknO1xuXG5leHBvcnRzLklOVEVHUkFUSU9OX05BTUUgPSBJTlRFR1JBVElPTl9OQU1FO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\");\n\nconst instrumentVercelAi = nodeCore.generateInstrumentOnce(constants.INTEGRATION_NAME, () => new instrumentation.SentryVercelAiInstrumentation({}));\n\n/**\n * Determines if the integration should be forced based on environment and package availability.\n * Returns true if the 'ai' package is available.\n */\nfunction shouldForceIntegration(client) {\n  const modules = client.getIntegrationByName('Modules');\n  return !!modules?.getModules?.()?.ai;\n}\n\nconst _vercelAIIntegration = ((options = {}) => {\n  let instrumentation;\n\n  return {\n    name: constants.INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentation = instrumentVercelAi();\n    },\n    afterAllSetup(client) {\n      // Auto-detect if we should force the integration when running with 'ai' package available\n      // Note that this can only be detected if the 'Modules' integration is available, and running in CJS mode\n      const shouldForce = options.force ?? shouldForceIntegration(client);\n\n      if (shouldForce) {\n        core.addVercelAiProcessors(client);\n      } else {\n        instrumentation?.callWhenPatched(() => core.addVercelAiProcessors(client));\n      }\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n * This integration is not enabled by default, you need to manually add it.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * This integration adds tracing support to all `ai` function calls.\n * You need to opt-in to collecting spans for a specific call,\n * you can do so by setting `experimental_telemetry.isEnabled` to `true` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: true },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nconst vercelAIIntegration = core.defineIntegration(_vercelAIIntegration);\n\nexports.instrumentVercelAi = instrumentVercelAi;\nexports.vercelAIIntegration = vercelAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyxzTUFBZ0I7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsa05BQXNCOztBQUV0RCxpSkFBaUo7O0FBRWpKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlCQUFpQjtBQUNoRCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBEQUEwRDtBQUN4RixJQUFJO0FBQ0o7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ZlcmNlbGFpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbnN0cnVtZW50YXRpb24uanMnKTtcblxuY29uc3QgaW5zdHJ1bWVudFZlcmNlbEFpID0gbm9kZUNvcmUuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShjb25zdGFudHMuSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbi5TZW50cnlWZXJjZWxBaUluc3RydW1lbnRhdGlvbih7fSkpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGludGVncmF0aW9uIHNob3VsZCBiZSBmb3JjZWQgYmFzZWQgb24gZW52aXJvbm1lbnQgYW5kIHBhY2thZ2UgYXZhaWxhYmlsaXR5LlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSAnYWknIHBhY2thZ2UgaXMgYXZhaWxhYmxlLlxuICovXG5mdW5jdGlvbiBzaG91bGRGb3JjZUludGVncmF0aW9uKGNsaWVudCkge1xuICBjb25zdCBtb2R1bGVzID0gY2xpZW50LmdldEludGVncmF0aW9uQnlOYW1lKCdNb2R1bGVzJyk7XG4gIHJldHVybiAhIW1vZHVsZXM/LmdldE1vZHVsZXM/LigpPy5haTtcbn1cblxuY29uc3QgX3ZlcmNlbEFJSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogY29uc3RhbnRzLklOVEVHUkFUSU9OX05BTUUsXG4gICAgb3B0aW9ucyxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50VmVyY2VsQWkoKTtcbiAgICB9LFxuICAgIGFmdGVyQWxsU2V0dXAoY2xpZW50KSB7XG4gICAgICAvLyBBdXRvLWRldGVjdCBpZiB3ZSBzaG91bGQgZm9yY2UgdGhlIGludGVncmF0aW9uIHdoZW4gcnVubmluZyB3aXRoICdhaScgcGFja2FnZSBhdmFpbGFibGVcbiAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGNhbiBvbmx5IGJlIGRldGVjdGVkIGlmIHRoZSAnTW9kdWxlcycgaW50ZWdyYXRpb24gaXMgYXZhaWxhYmxlLCBhbmQgcnVubmluZyBpbiBDSlMgbW9kZVxuICAgICAgY29uc3Qgc2hvdWxkRm9yY2UgPSBvcHRpb25zLmZvcmNlID8/IHNob3VsZEZvcmNlSW50ZWdyYXRpb24oY2xpZW50KTtcblxuICAgICAgaWYgKHNob3VsZEZvcmNlKSB7XG4gICAgICAgIGNvcmUuYWRkVmVyY2VsQWlQcm9jZXNzb3JzKGNsaWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0cnVtZW50YXRpb24/LmNhbGxXaGVuUGF0Y2hlZCgoKSA9PiBjb3JlLmFkZFZlcmNlbEFpUHJvY2Vzc29ycyhjbGllbnQpKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2FpXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9haSkgbGlicmFyeS5cbiAqIFRoaXMgaW50ZWdyYXRpb24gaXMgbm90IGVuYWJsZWQgYnkgZGVmYXVsdCwgeW91IG5lZWQgdG8gbWFudWFsbHkgYWRkIGl0LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgYWlgIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vc2RrLnZlcmNlbC5haS9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkudmVyY2VsQUlJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogVGhpcyBpbnRlZ3JhdGlvbiBhZGRzIHRyYWNpbmcgc3VwcG9ydCB0byBhbGwgYGFpYCBmdW5jdGlvbiBjYWxscy5cbiAqIFlvdSBuZWVkIHRvIG9wdC1pbiB0byBjb2xsZWN0aW5nIHNwYW5zIGZvciBhIHNwZWNpZmljIGNhbGwsXG4gKiB5b3UgY2FuIGRvIHNvIGJ5IHNldHRpbmcgYGV4cGVyaW1lbnRhbF90ZWxlbWV0cnkuaXNFbmFibGVkYCB0byBgdHJ1ZWAgaW4gdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRlVGV4dCh7XG4gKiAgIG1vZGVsOiBvcGVuYWkoJ2dwdC00LXR1cmJvJyksXG4gKiAgIGV4cGVyaW1lbnRhbF90ZWxlbWV0cnk6IHsgaXNFbmFibGVkOiB0cnVlIH0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIElmIHlvdSB3YW50IHRvIGNvbGxlY3QgaW5wdXRzIGFuZCBvdXRwdXRzIGZvciBhIHNwZWNpZmljIGNhbGwsIHlvdSBtdXN0IHNwZWNpZmljYWxseSBvcHQtaW4gdG8gZWFjaFxuICogZnVuY3Rpb24gY2FsbCBieSBzZXR0aW5nIGBleHBlcmltZW50YWxfdGVsZW1ldHJ5LnJlY29yZElucHV0c2AgYW5kIGBleHBlcmltZW50YWxfdGVsZW1ldHJ5LnJlY29yZE91dHB1dHNgXG4gKiB0byBgdHJ1ZWAuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2VuZXJhdGVUZXh0KHtcbiAqICBtb2RlbDogb3BlbmFpKCdncHQtNC10dXJibycpLFxuICogIGV4cGVyaW1lbnRhbF90ZWxlbWV0cnk6IHsgaXNFbmFibGVkOiB0cnVlLCByZWNvcmRJbnB1dHM6IHRydWUsIHJlY29yZE91dHB1dHM6IHRydWUgfSxcbiAqIH0pO1xuICovXG5jb25zdCB2ZXJjZWxBSUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfdmVyY2VsQUlJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFZlcmNlbEFpID0gaW5zdHJ1bWVudFZlcmNlbEFpO1xuZXhwb3J0cy52ZXJjZWxBSUludGVncmF0aW9uID0gdmVyY2VsQUlJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js ***!
  \**************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\n\n// List of patched methods\n// From: https://sdk.vercel.ai/docs/ai-sdk-core/telemetry#collected-data\nconst INSTRUMENTED_METHODS = [\n  'generateText',\n  'streamText',\n  'generateObject',\n  'streamObject',\n  'embed',\n  'embedMany',\n] ;\n\nfunction isToolError(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  const candidate = obj ;\n  return (\n    'type' in candidate &&\n    'error' in candidate &&\n    'toolName' in candidate &&\n    'toolCallId' in candidate &&\n    candidate.type === 'tool-error' &&\n    candidate.error instanceof Error\n  );\n}\n\n/**\n * Check for tool errors in the result and capture them\n * Tool errors are not rejected in Vercel V5, it is added as metadata to the result content\n */\nfunction checkResultForToolErrors(result) {\n  if (typeof result !== 'object' || result === null || !('content' in result)) {\n    return;\n  }\n\n  const resultObj = result ;\n  if (!Array.isArray(resultObj.content)) {\n    return;\n  }\n\n  for (const item of resultObj.content) {\n    if (isToolError(item)) {\n      // Try to get the span associated with this tool call ID\n      const associatedSpan = core._INTERNAL_getSpanForToolCallId(item.toolCallId) ;\n\n      if (associatedSpan) {\n        // We have the span, so link the error using span and trace IDs from the span\n        const spanContext = associatedSpan.spanContext();\n\n        core.withScope(scope => {\n          // Set the span and trace context for proper linking\n          scope.setContext('trace', {\n            trace_id: spanContext.traceId,\n            span_id: spanContext.spanId,\n          });\n\n          scope.setTag('vercel.ai.tool.name', item.toolName);\n          scope.setTag('vercel.ai.tool.callId', item.toolCallId);\n\n          scope.setLevel('error');\n\n          core.captureException(item.error, {\n            mechanism: {\n              type: 'auto.vercelai.otel',\n              handled: false,\n            },\n          });\n        });\n\n        // Clean up the span mapping since we've processed this tool error\n        // We won't get multiple { type: 'tool-error' } parts for the same toolCallId.\n        core._INTERNAL_cleanupToolCallSpan(item.toolCallId);\n      } else {\n        // Fallback: capture without span linking\n        core.withScope(scope => {\n          scope.setTag('vercel.ai.tool.name', item.toolName);\n          scope.setTag('vercel.ai.tool.callId', item.toolCallId);\n          scope.setLevel('error');\n\n          core.captureException(item.error, {\n            mechanism: {\n              type: 'auto.vercelai.otel',\n              handled: false,\n            },\n          });\n        });\n      }\n    }\n  }\n}\n\n/**\n * Determines whether to record inputs and outputs for Vercel AI telemetry based on the configuration hierarchy.\n *\n * The order of precedence is:\n * 1. The vercel ai integration options\n * 2. The experimental_telemetry options in the vercel ai method calls\n * 3. When telemetry is explicitly enabled (isEnabled: true), default to recording\n * 4. Otherwise, use the sendDefaultPii option from client options\n */\nfunction determineRecordingSettings(\n  integrationRecordingOptions,\n  methodTelemetryOptions,\n  telemetryExplicitlyEnabled,\n  defaultRecordingEnabled,\n) {\n  const recordInputs =\n    integrationRecordingOptions?.recordInputs !== undefined\n      ? integrationRecordingOptions.recordInputs\n      : methodTelemetryOptions.recordInputs !== undefined\n        ? methodTelemetryOptions.recordInputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  const recordOutputs =\n    integrationRecordingOptions?.recordOutputs !== undefined\n      ? integrationRecordingOptions.recordOutputs\n      : methodTelemetryOptions.recordOutputs !== undefined\n        ? methodTelemetryOptions.recordOutputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * This detects is added by the Sentry Vercel AI Integration to detect if the integration should\n * be enabled.\n *\n * It also patches the `ai` module to enable Vercel AI telemetry automatically for all methods.\n */\nclass SentryVercelAiInstrumentation extends instrumentation.InstrumentationBase {\n   __init() {this._isPatched = false;}\n   __init2() {this._callbacks = [];}\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-vercel-ai', core.SDK_VERSION, config);SentryVercelAiInstrumentation.prototype.__init.call(this);SentryVercelAiInstrumentation.prototype.__init2.call(this);  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('ai', ['>=3.0.0 <6'], this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Call the provided callback when the module is patched.\n   * If it has already been patched, the callback will be called immediately.\n   */\n   callWhenPatched(callback) {\n    if (this._isPatched) {\n      callback();\n    } else {\n      this._callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Patches module exports to enable Vercel AI telemetry.\n   */\n   _patch(moduleExports) {\n    this._isPatched = true;\n\n    this._callbacks.forEach(callback => callback());\n    this._callbacks = [];\n\n    const generatePatch = (originalMethod) => {\n      return new Proxy(originalMethod, {\n        apply: (target, thisArg, args) => {\n          const existingExperimentalTelemetry = args[0].experimental_telemetry || {};\n          const isEnabled = existingExperimentalTelemetry.isEnabled;\n\n          const client = core.getClient();\n          const integration = client?.getIntegrationByName(constants.INTEGRATION_NAME);\n          const integrationOptions = integration?.options;\n          const shouldRecordInputsAndOutputs = integration ? Boolean(client?.getOptions().sendDefaultPii) : false;\n\n          const { recordInputs, recordOutputs } = determineRecordingSettings(\n            integrationOptions,\n            existingExperimentalTelemetry,\n            isEnabled,\n            shouldRecordInputsAndOutputs,\n          );\n\n          args[0].experimental_telemetry = {\n            ...existingExperimentalTelemetry,\n            isEnabled: isEnabled !== undefined ? isEnabled : true,\n            recordInputs,\n            recordOutputs,\n          };\n\n          return core.handleCallbackErrors(\n            () => Reflect.apply(target, thisArg, args),\n            error => {\n              // This error bubbles up to unhandledrejection handler (if not handled before),\n              // where we do not know the active span anymore\n              // So to circumvent this, we set the active span on the error object\n              // which is picked up by the unhandledrejection handler\n              if (error && typeof error === 'object') {\n                core.addNonEnumerableProperty(error, '_sentry_active_span', core.getActiveSpan());\n              }\n            },\n            () => {},\n            result => {\n              checkResultForToolErrors(result);\n            },\n          );\n        },\n      });\n    };\n\n    // Is this an ESM module?\n    // https://tc39.es/ecma262/#sec-module-namespace-objects\n    if (Object.prototype.toString.call(moduleExports) === '[object Module]') {\n      // In ESM we take the usual route and just replace the exports we want to instrument\n      for (const method of INSTRUMENTED_METHODS) {\n        moduleExports[method] = generatePatch(moduleExports[method]);\n      }\n\n      return moduleExports;\n    } else {\n      // In CJS we can't replace the exports in the original module because they\n      // don't have setters, so we create a new object with the same properties\n      const patchedModuleExports = INSTRUMENTED_METHODS.reduce((acc, curr) => {\n        acc[curr] = generatePatch(moduleExports[curr]);\n        return acc;\n      }, {} );\n\n      return { ...moduleExports, ...patchedModuleExports };\n    }\n  }\n}\n\nexports.SentryVercelAiInstrumentation = SentryVercelAiInstrumentation;\nexports.determineRecordingSettings = determineRecordingSettings;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst http = __webpack_require__(/*! ../integrations/http.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/http.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  const nodeCoreIntegrations = nodeCore.getDefaultIntegrations();\n\n  // Filter out the node-core HTTP and NodeFetch integrations and replace them with Node SDK's composite versions\n  return nodeCoreIntegrations\n    .filter(integration => integration.name !== 'Http' && integration.name !== 'NodeFetch')\n    .concat(http.httpIntegration(), nodeFetch.nativeNodeFetchIntegration());\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(core.hasSpansEnabled(options) ? index.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Internal initialization function.\n */\nfunction _init(\n  options = {},\n  getDefaultIntegrationsImpl,\n) {\n  core.applySdkMetadata(options, 'node');\n\n  const client = nodeCore.init({\n    ...options,\n    // Only use Node SDK defaults if none provided\n    defaultIntegrations: options.defaultIntegrations ?? getDefaultIntegrationsImpl(options),\n  });\n\n  // Add Node SDK specific OpenTelemetry setup\n  if (client && !options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client, {\n      spanProcessors: options.openTelemetrySpanProcessors,\n    });\n    nodeCore.validateOpenTelemetrySetup();\n  }\n\n  return client;\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxpQkFBaUIsbUJBQU8sQ0FBQyxvT0FBbUI7QUFDNUMsYUFBYSxtQkFBTyxDQUFDLHlMQUF5QjtBQUM5QyxrQkFBa0IsbUJBQU8sQ0FBQyxxTUFBK0I7QUFDekQsY0FBYyxtQkFBTyxDQUFDLDJNQUFrQztBQUN4RCxpQkFBaUIsbUJBQU8sQ0FBQywwS0FBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCLGdEQUFnRDtBQUNoRCxZQUFZO0FBQ1osc0NBQXNDO0FBQ3RDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Nkay9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZUNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUtY29yZScpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9odHRwLmpzJyk7XG5jb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvbm9kZS1mZXRjaC5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvdHJhY2luZy9pbmRleC5qcycpO1xuY29uc3QgaW5pdE90ZWwgPSByZXF1aXJlKCcuL2luaXRPdGVsLmpzJyk7XG5cbi8qKlxuICogR2V0IGRlZmF1bHQgaW50ZWdyYXRpb25zLCBleGNsdWRpbmcgcGVyZm9ybWFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2UoKSB7XG4gIGNvbnN0IG5vZGVDb3JlSW50ZWdyYXRpb25zID0gbm9kZUNvcmUuZ2V0RGVmYXVsdEludGVncmF0aW9ucygpO1xuXG4gIC8vIEZpbHRlciBvdXQgdGhlIG5vZGUtY29yZSBIVFRQIGFuZCBOb2RlRmV0Y2ggaW50ZWdyYXRpb25zIGFuZCByZXBsYWNlIHRoZW0gd2l0aCBOb2RlIFNESydzIGNvbXBvc2l0ZSB2ZXJzaW9uc1xuICByZXR1cm4gbm9kZUNvcmVJbnRlZ3JhdGlvbnNcbiAgICAuZmlsdGVyKGludGVncmF0aW9uID0+IGludGVncmF0aW9uLm5hbWUgIT09ICdIdHRwJyAmJiBpbnRlZ3JhdGlvbi5uYW1lICE9PSAnTm9kZUZldGNoJylcbiAgICAuY29uY2F0KGh0dHAuaHR0cEludGVncmF0aW9uKCksIG5vZGVGZXRjaC5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbigpKTtcbn1cblxuLyoqIEdldCB0aGUgZGVmYXVsdCBpbnRlZ3JhdGlvbnMgZm9yIHRoZSBOb2RlIFNESy4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gW1xuICAgIC4uLmdldERlZmF1bHRJbnRlZ3JhdGlvbnNXaXRob3V0UGVyZm9ybWFuY2UoKSxcbiAgICAvLyBXZSBvbmx5IGFkZCBwZXJmb3JtYW5jZSBpbnRlZ3JhdGlvbnMgaWYgdHJhY2luZyBpcyBlbmFibGVkXG4gICAgLy8gTm90ZSB0aGF0IHRoaXMgbWVhbnMgdGhhdCB3aXRob3V0IHRyYWNpbmcgZW5hYmxlZCwgZS5nLiBgZXhwcmVzc0ludGVncmF0aW9uKClgIHdpbGwgbm90IGJlIGFkZGVkXG4gICAgLy8gVGhpcyBtZWFucyB0aGF0IGdlbmVyYWxseSByZXF1ZXN0IGlzb2xhdGlvbiB3aWxsIHdvcmsgKGJlY2F1c2UgdGhhdCBpcyBkb25lIGJ5IGh0dHBJbnRlZ3JhdGlvbilcbiAgICAvLyBCdXQgYHRyYW5zYWN0aW9uTmFtZWAgd2lsbCBub3QgYmUgc2V0IGF1dG9tYXRpY2FsbHlcbiAgICAuLi4oY29yZS5oYXNTcGFuc0VuYWJsZWQob3B0aW9ucykgPyBpbmRleC5nZXRBdXRvUGVyZm9ybWFuY2VJbnRlZ3JhdGlvbnMoKSA6IFtdKSxcbiAgXTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFNlbnRyeSBmb3IgTm9kZS5cbiAqL1xuZnVuY3Rpb24gaW5pdChvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIF9pbml0KG9wdGlvbnMsIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMpO1xufVxuXG4vKipcbiAqIEludGVybmFsIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBfaW5pdChcbiAgb3B0aW9ucyA9IHt9LFxuICBnZXREZWZhdWx0SW50ZWdyYXRpb25zSW1wbCxcbikge1xuICBjb3JlLmFwcGx5U2RrTWV0YWRhdGEob3B0aW9ucywgJ25vZGUnKTtcblxuICBjb25zdCBjbGllbnQgPSBub2RlQ29yZS5pbml0KHtcbiAgICAuLi5vcHRpb25zLFxuICAgIC8vIE9ubHkgdXNlIE5vZGUgU0RLIGRlZmF1bHRzIGlmIG5vbmUgcHJvdmlkZWRcbiAgICBkZWZhdWx0SW50ZWdyYXRpb25zOiBvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgPz8gZ2V0RGVmYXVsdEludGVncmF0aW9uc0ltcGwob3B0aW9ucyksXG4gIH0pO1xuXG4gIC8vIEFkZCBOb2RlIFNESyBzcGVjaWZpYyBPcGVuVGVsZW1ldHJ5IHNldHVwXG4gIGlmIChjbGllbnQgJiYgIW9wdGlvbnMuc2tpcE9wZW5UZWxlbWV0cnlTZXR1cCkge1xuICAgIGluaXRPdGVsLmluaXRPcGVuVGVsZW1ldHJ5KGNsaWVudCwge1xuICAgICAgc3BhblByb2Nlc3NvcnM6IG9wdGlvbnMub3BlblRlbGVtZXRyeVNwYW5Qcm9jZXNzb3JzLFxuICAgIH0pO1xuICAgIG5vZGVDb3JlLnZhbGlkYXRlT3BlblRlbGVtZXRyeVNldHVwKCk7XG4gIH1cblxuICByZXR1cm4gY2xpZW50O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgU2VudHJ5IGZvciBOb2RlLCB3aXRob3V0IGFueSBpbnRlZ3JhdGlvbnMgYWRkZWQgYnkgZGVmYXVsdC5cbiAqL1xuZnVuY3Rpb24gaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zKG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gX2luaXQob3B0aW9ucywgKCkgPT4gW10pO1xufVxuXG5leHBvcnRzLmdldERlZmF1bHRJbnRlZ3JhdGlvbnMgPSBnZXREZWZhdWx0SW50ZWdyYXRpb25zO1xuZXhwb3J0cy5nZXREZWZhdWx0SW50ZWdyYXRpb25zV2l0aG91dFBlcmZvcm1hbmNlID0gZ2V0RGVmYXVsdEludGVncmF0aW9uc1dpdGhvdXRQZXJmb3JtYW5jZTtcbmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5leHBvcnRzLmluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucyA9IGluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeCore = __webpack_require__(/*! @sentry/node-core */ \"(ssr)/../../node_modules/.pnpm/@sentry+node-core@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_iexosqi4imfrn46nj6jwfgzute/node_modules/@sentry/node-core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\n\n// About 277h - this must fit into new Array(len)!\nconst MAX_MAX_SPAN_WAIT_DURATION = 1000000;\n\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client, options = {}) {\n  if (client.getOptions().debug) {\n    nodeCore.setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client, options);\n  client.traceProvider = provider;\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.debug.enable();\n  }\n\n  nodeCore.initializeEsmLoader();\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.debug.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  // We match exact matches of instrumentation, but also match prefixes, e.g. \"Fastify.v5\" will match \"Fastify\"\n  return instruments.filter(instrumentation => {\n    const id = instrumentation.id;\n    return integrationNames.some(integrationName => id === integrationName || id.startsWith(`${integrationName}.`));\n  });\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client, options = {}) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: resources.defaultResource().merge(\n      resources.resourceFromAttributes({\n        [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n        [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n      }),\n    ),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new opentelemetry.SentrySpanProcessor({\n        timeout: _clampSpanProcessorTimeout(client.getOptions().maxSpanWaitDuration),\n      }),\n      ...(options.spanProcessors || []),\n    ],\n  });\n\n  // Register as globals\n  api.trace.setGlobalTracerProvider(provider);\n  api.propagation.setGlobalPropagator(new opentelemetry.SentryPropagator());\n  api.context.setGlobalContextManager(new nodeCore.SentryContextManager());\n\n  return provider;\n}\n\n/** Just exported for tests. */\nfunction _clampSpanProcessorTimeout(maxSpanWaitDuration) {\n  if (maxSpanWaitDuration == null) {\n    return undefined;\n  }\n\n  // We guard for a max. value here, because we create an array with this length\n  // So if this value is too large, this would fail\n  if (maxSpanWaitDuration > MAX_MAX_SPAN_WAIT_DURATION) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(`\\`maxSpanWaitDuration\\` is too high, using the maximum value of ${MAX_MAX_SPAN_WAIT_DURATION}`);\n    return MAX_MAX_SPAN_WAIT_DURATION;\n  } else if (maxSpanWaitDuration <= 0 || Number.isNaN(maxSpanWaitDuration)) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('`maxSpanWaitDuration` must be a positive number, using default value instead.');\n    return undefined;\n  }\n\n  return maxSpanWaitDuration;\n}\n\nexports._clampSpanProcessorTimeout = _clampSpanProcessorTimeout;\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvc2RrL2luaXRPdGVsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLFlBQVksbUJBQU8sQ0FBQyxzSUFBb0I7QUFDeEMsa0JBQWtCLG1CQUFPLENBQUMsaUxBQTBCO0FBQ3BELHFCQUFxQixtQkFBTyxDQUFDLGdNQUErQjtBQUM1RCw0QkFBNEIsbUJBQU8sQ0FBQywwTEFBcUM7QUFDekUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLG9PQUFtQjtBQUM1QyxzQkFBc0IsbUJBQU8sQ0FBQyw0T0FBdUI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsNktBQW1CO0FBQzlDLGNBQWMsbUJBQU8sQ0FBQywyTUFBa0M7O0FBRXhEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyxVQUFVLFFBQVE7O0FBRWxCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrRkFBK0YsZ0JBQWdCO0FBQy9HLEdBQUc7QUFDSDs7QUFFQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUYsMkJBQTJCO0FBQ3BIO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQyx5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbm9kZS0xMC4xNy4wLnRnei9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9zZGsvaW5pdE90ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgcmVzb3VyY2VzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvcmVzb3VyY2VzJyk7XG5jb25zdCBzZGtUcmFjZUJhc2UgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZScpO1xuY29uc3Qgc2VtYW50aWNDb252ZW50aW9ucyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlQ29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZS1jb3JlJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3RyYWNpbmcvaW5kZXguanMnKTtcblxuLy8gQWJvdXQgMjc3aCAtIHRoaXMgbXVzdCBmaXQgaW50byBuZXcgQXJyYXkobGVuKSFcbmNvbnN0IE1BWF9NQVhfU1BBTl9XQUlUX0RVUkFUSU9OID0gMTAwMDAwMDtcblxuLyoqXG4gKiBJbml0aWFsaXplIE9wZW5UZWxlbWV0cnkgZm9yIE5vZGUuXG4gKi9cbmZ1bmN0aW9uIGluaXRPcGVuVGVsZW1ldHJ5KGNsaWVudCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmIChjbGllbnQuZ2V0T3B0aW9ucygpLmRlYnVnKSB7XG4gICAgbm9kZUNvcmUuc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyKCk7XG4gIH1cblxuICBjb25zdCBwcm92aWRlciA9IHNldHVwT3RlbChjbGllbnQsIG9wdGlvbnMpO1xuICBjbGllbnQudHJhY2VQcm92aWRlciA9IHByb3ZpZGVyO1xufVxuXG4vKipcbiAqIFByZWxvYWQgT3BlblRlbGVtZXRyeSBmb3IgTm9kZS5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcHJlbG9hZCBpbnN0cnVtZW50YXRpb24gZWFybHksIGJ1dCBzZXQgdXAgU2VudHJ5IGxhdGVyLlxuICogQnkgcHJlbG9hZGluZyB0aGUgT1RFTCBpbnN0cnVtZW50YXRpb24gd3JhcHBpbmcgc3RpbGwgaGFwcGVucyBlYXJseSBlbm91Z2ggdGhhdCBldmVyeXRoaW5nIHdvcmtzLlxuICovXG5mdW5jdGlvbiBwcmVsb2FkT3BlblRlbGVtZXRyeShvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyBkZWJ1ZyB9ID0gb3B0aW9ucztcblxuICBpZiAoZGVidWcpIHtcbiAgICBjb3JlLmRlYnVnLmVuYWJsZSgpO1xuICB9XG5cbiAgbm9kZUNvcmUuaW5pdGlhbGl6ZUVzbUxvYWRlcigpO1xuXG4gIC8vIFRoZXNlIGFyZSBhbGwgaW50ZWdyYXRpb25zIHRoYXQgd2UgbmVlZCB0byBwcmUtbG9hZCB0byBlbnN1cmUgdGhleSBhcmUgc2V0IHVwIGJlZm9yZSBhbnkgb3RoZXIgY29kZSBydW5zXG4gIGdldFByZWxvYWRNZXRob2RzKG9wdGlvbnMuaW50ZWdyYXRpb25zKS5mb3JFYWNoKGZuID0+IHtcbiAgICBmbigpO1xuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb3JlLmRlYnVnLmxvZyhgW1NlbnRyeV0gUHJlbG9hZGVkICR7Zm4uaWR9IGluc3RydW1lbnRhdGlvbmApO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFByZWxvYWRNZXRob2RzKGludGVncmF0aW9uTmFtZXMpIHtcbiAgY29uc3QgaW5zdHJ1bWVudHMgPSBpbmRleC5nZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkKCk7XG5cbiAgaWYgKCFpbnRlZ3JhdGlvbk5hbWVzKSB7XG4gICAgcmV0dXJuIGluc3RydW1lbnRzO1xuICB9XG5cbiAgLy8gV2UgbWF0Y2ggZXhhY3QgbWF0Y2hlcyBvZiBpbnN0cnVtZW50YXRpb24sIGJ1dCBhbHNvIG1hdGNoIHByZWZpeGVzLCBlLmcuIFwiRmFzdGlmeS52NVwiIHdpbGwgbWF0Y2ggXCJGYXN0aWZ5XCJcbiAgcmV0dXJuIGluc3RydW1lbnRzLmZpbHRlcihpbnN0cnVtZW50YXRpb24gPT4ge1xuICAgIGNvbnN0IGlkID0gaW5zdHJ1bWVudGF0aW9uLmlkO1xuICAgIHJldHVybiBpbnRlZ3JhdGlvbk5hbWVzLnNvbWUoaW50ZWdyYXRpb25OYW1lID0+IGlkID09PSBpbnRlZ3JhdGlvbk5hbWUgfHwgaWQuc3RhcnRzV2l0aChgJHtpbnRlZ3JhdGlvbk5hbWV9LmApKTtcbiAgfSk7XG59XG5cbi8qKiBKdXN0IGV4cG9ydGVkIGZvciB0ZXN0cy4gKi9cbmZ1bmN0aW9uIHNldHVwT3RlbChjbGllbnQsIG9wdGlvbnMgPSB7fSkge1xuICAvLyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSBOb2RlVHJhY2VyUHJvdmlkZXJcbiAgY29uc3QgcHJvdmlkZXIgPSBuZXcgc2RrVHJhY2VCYXNlLkJhc2ljVHJhY2VyUHJvdmlkZXIoe1xuICAgIHNhbXBsZXI6IG5ldyBvcGVudGVsZW1ldHJ5LlNlbnRyeVNhbXBsZXIoY2xpZW50KSxcbiAgICByZXNvdXJjZTogcmVzb3VyY2VzLmRlZmF1bHRSZXNvdXJjZSgpLm1lcmdlKFxuICAgICAgcmVzb3VyY2VzLnJlc291cmNlRnJvbUF0dHJpYnV0ZXMoe1xuICAgICAgICBbc2VtYW50aWNDb252ZW50aW9ucy5BVFRSX1NFUlZJQ0VfTkFNRV06ICdub2RlJyxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLlNFTVJFU0FUVFJTX1NFUlZJQ0VfTkFNRVNQQUNFXTogJ3NlbnRyeScsXG4gICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfU0VSVklDRV9WRVJTSU9OXTogY29yZS5TREtfVkVSU0lPTixcbiAgICAgIH0pLFxuICAgICksXG4gICAgZm9yY2VGbHVzaFRpbWVvdXRNaWxsaXM6IDUwMCxcbiAgICBzcGFuUHJvY2Vzc29yczogW1xuICAgICAgbmV3IG9wZW50ZWxlbWV0cnkuU2VudHJ5U3BhblByb2Nlc3Nvcih7XG4gICAgICAgIHRpbWVvdXQ6IF9jbGFtcFNwYW5Qcm9jZXNzb3JUaW1lb3V0KGNsaWVudC5nZXRPcHRpb25zKCkubWF4U3BhbldhaXREdXJhdGlvbiksXG4gICAgICB9KSxcbiAgICAgIC4uLihvcHRpb25zLnNwYW5Qcm9jZXNzb3JzIHx8IFtdKSxcbiAgICBdLFxuICB9KTtcblxuICAvLyBSZWdpc3RlciBhcyBnbG9iYWxzXG4gIGFwaS50cmFjZS5zZXRHbG9iYWxUcmFjZXJQcm92aWRlcihwcm92aWRlcik7XG4gIGFwaS5wcm9wYWdhdGlvbi5zZXRHbG9iYWxQcm9wYWdhdG9yKG5ldyBvcGVudGVsZW1ldHJ5LlNlbnRyeVByb3BhZ2F0b3IoKSk7XG4gIGFwaS5jb250ZXh0LnNldEdsb2JhbENvbnRleHRNYW5hZ2VyKG5ldyBub2RlQ29yZS5TZW50cnlDb250ZXh0TWFuYWdlcigpKTtcblxuICByZXR1cm4gcHJvdmlkZXI7XG59XG5cbi8qKiBKdXN0IGV4cG9ydGVkIGZvciB0ZXN0cy4gKi9cbmZ1bmN0aW9uIF9jbGFtcFNwYW5Qcm9jZXNzb3JUaW1lb3V0KG1heFNwYW5XYWl0RHVyYXRpb24pIHtcbiAgaWYgKG1heFNwYW5XYWl0RHVyYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBXZSBndWFyZCBmb3IgYSBtYXguIHZhbHVlIGhlcmUsIGJlY2F1c2Ugd2UgY3JlYXRlIGFuIGFycmF5IHdpdGggdGhpcyBsZW5ndGhcbiAgLy8gU28gaWYgdGhpcyB2YWx1ZSBpcyB0b28gbGFyZ2UsIHRoaXMgd291bGQgZmFpbFxuICBpZiAobWF4U3BhbldhaXREdXJhdGlvbiA+IE1BWF9NQVhfU1BBTl9XQUlUX0RVUkFUSU9OKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgY29yZS5kZWJ1Zy53YXJuKGBcXGBtYXhTcGFuV2FpdER1cmF0aW9uXFxgIGlzIHRvbyBoaWdoLCB1c2luZyB0aGUgbWF4aW11bSB2YWx1ZSBvZiAke01BWF9NQVhfU1BBTl9XQUlUX0RVUkFUSU9OfWApO1xuICAgIHJldHVybiBNQVhfTUFYX1NQQU5fV0FJVF9EVVJBVElPTjtcbiAgfSBlbHNlIGlmIChtYXhTcGFuV2FpdER1cmF0aW9uIDw9IDAgfHwgTnVtYmVyLmlzTmFOKG1heFNwYW5XYWl0RHVyYXRpb24pKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLndhcm4oJ2BtYXhTcGFuV2FpdER1cmF0aW9uYCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyLCB1c2luZyBkZWZhdWx0IHZhbHVlIGluc3RlYWQuJyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBtYXhTcGFuV2FpdER1cmF0aW9uO1xufVxuXG5leHBvcnRzLl9jbGFtcFNwYW5Qcm9jZXNzb3JUaW1lb3V0ID0gX2NsYW1wU3BhblByb2Nlc3NvclRpbWVvdXQ7XG5leHBvcnRzLmluaXRPcGVuVGVsZW1ldHJ5ID0gaW5pdE9wZW5UZWxlbWV0cnk7XG5leHBvcnRzLnByZWxvYWRPcGVuVGVsZW1ldHJ5ID0gcHJlbG9hZE9wZW5UZWxlbWV0cnk7XG5leHBvcnRzLnNldHVwT3RlbCA9IHNldHVwT3RlbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXRPdGVsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nfunction flatten(input) {\n  const result = [];\n\n  const flattenHelper = (input) => {\n    input.forEach((el) => {\n      if (Array.isArray(el)) {\n        flattenHelper(el);\n      } else {\n        result.push(el);\n      }\n    });\n  };\n\n  flattenHelper(input);\n  return result;\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZUBmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5vZGUtMTAuMTcuMC50Z3ovbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvcmVkaXNDYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGVAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1ub2RlLTEwLjE3LjAudGd6L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL3JlZGlzQ2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IFNJTkdMRV9BUkdfQ09NTUFORFMgPSBbJ2dldCcsICdzZXQnLCAnc2V0ZXgnXTtcblxuY29uc3QgR0VUX0NPTU1BTkRTID0gWydnZXQnLCAnbWdldCddO1xuY29uc3QgU0VUX0NPTU1BTkRTID0gWydzZXQnLCAnc2V0ZXgnXTtcbi8vIHRvZG86IGRlbCwgZXhwaXJlXG5cbi8qKiBDaGVja3MgaWYgYSBnaXZlbiBjb21tYW5kIGlzIGluIHRoZSBsaXN0IG9mIHJlZGlzIGNvbW1hbmRzLlxuICogIFVzZWZ1bCBiZWNhdXNlIGNvbW1hbmRzIGNhbiBjb21lIGluIGxvd2VyY2FzZSBvciB1cHBlcmNhc2UgKGRlcGVuZGluZyBvbiB0aGUgbGlicmFyeSkuICovXG5mdW5jdGlvbiBpc0luQ29tbWFuZHMocmVkaXNDb21tYW5kcywgY29tbWFuZCkge1xuICByZXR1cm4gcmVkaXNDb21tYW5kcy5pbmNsdWRlcyhjb21tYW5kLnRvTG93ZXJDYXNlKCkpO1xufVxuXG4vKiogRGV0ZXJtaW5lIGNhY2hlIG9wZXJhdGlvbiBiYXNlZCBvbiByZWRpcyBzdGF0ZW1lbnQgKi9cbmZ1bmN0aW9uIGdldENhY2hlT3BlcmF0aW9uKFxuICBjb21tYW5kLFxuKSB7XG4gIGlmIChpc0luQ29tbWFuZHMoR0VUX0NPTU1BTkRTLCBjb21tYW5kKSkge1xuICAgIHJldHVybiAnY2FjaGUuZ2V0JztcbiAgfSBlbHNlIGlmIChpc0luQ29tbWFuZHMoU0VUX0NPTU1BTkRTLCBjb21tYW5kKSkge1xuICAgIHJldHVybiAnY2FjaGUucHV0JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGtleUhhc1ByZWZpeChrZXksIHByZWZpeGVzKSB7XG4gIHJldHVybiBwcmVmaXhlcy5zb21lKHByZWZpeCA9PiBrZXkuc3RhcnRzV2l0aChwcmVmaXgpKTtcbn1cblxuLyoqIFNhZmVseSBjb252ZXJ0cyBhIHJlZGlzIGtleSB0byBhIHN0cmluZyAoY29tbWEtc2VwYXJhdGVkIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBrZXlzKSAqL1xuZnVuY3Rpb24gZ2V0Q2FjaGVLZXlTYWZlbHkocmVkaXNDb21tYW5kLCBjbWRBcmdzKSB7XG4gIHRyeSB7XG4gICAgaWYgKGNtZEFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgcHJvY2Vzc0FyZyA9IChhcmcpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fCBCdWZmZXIuaXNCdWZmZXIoYXJnKSkge1xuICAgICAgICByZXR1cm4gW2FyZy50b1N0cmluZygpXTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgIHJldHVybiBmbGF0dGVuKGFyZy5tYXAoYXJnID0+IHByb2Nlc3NBcmcoYXJnKSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsnPHVua25vd24+J107XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGZpcnN0QXJnID0gY21kQXJnc1swXTtcbiAgICBpZiAoaXNJbkNvbW1hbmRzKFNJTkdMRV9BUkdfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgZmlyc3RBcmcgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHByb2Nlc3NBcmcoZmlyc3RBcmcpO1xuICAgIH1cblxuICAgIHJldHVybiBmbGF0dGVuKGNtZEFyZ3MubWFwKGFyZyA9PiBwcm9jZXNzQXJnKGFyZykpKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKiogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgcmVkaXMgb3BlcmF0aW9uIHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIFwiY2FjaGUgb3BlcmF0aW9uXCIgYnkgY2hlY2tpbmcgaWYgYSBrZXkgaXMgcHJlZml4ZWQuXG4gKiAgV2Ugb25seSBzdXBwb3J0IGNlcnRhaW4gY29tbWFuZHMgKHN1Y2ggYXMgJ3NldCcsICdnZXQnLCAnbWdldCcpLiAqL1xuZnVuY3Rpb24gc2hvdWxkQ29uc2lkZXJGb3JDYWNoZShyZWRpc0NvbW1hbmQsIGtleXMsIHByZWZpeGVzKSB7XG4gIGlmICghZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoa2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogQ2FsY3VsYXRlcyBzaXplIGJhc2VkIG9uIHRoZSBjYWNoZSByZXNwb25zZSB2YWx1ZSAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZShyZXNwb25zZSkge1xuICBjb25zdCBnZXRTaXplID0gKHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSByZXR1cm4gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSkubGVuZ3RoO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVzcG9uc2UpXG4gICAgPyByZXNwb25zZS5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgICAgICBjb25zdCBzaXplID0gZ2V0U2l6ZShjdXJyKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzaXplID09PSAnbnVtYmVyJyA/IChhY2MgIT09IHVuZGVmaW5lZCA/IGFjYyArIHNpemUgOiBzaXplKSA6IGFjYztcbiAgICAgIH0sIDApXG4gICAgOiBnZXRTaXplKHJlc3BvbnNlKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihpbnB1dCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcblxuICBjb25zdCBmbGF0dGVuSGVscGVyID0gKGlucHV0KSA9PiB7XG4gICAgaW5wdXQuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgICAgICBmbGF0dGVuSGVscGVyKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmbGF0dGVuSGVscGVyKGlucHV0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0cy5HRVRfQ09NTUFORFMgPSBHRVRfQ09NTUFORFM7XG5leHBvcnRzLlNFVF9DT01NQU5EUyA9IFNFVF9DT01NQU5EUztcbmV4cG9ydHMuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZSA9IGNhbGN1bGF0ZUNhY2hlSXRlbVNpemU7XG5leHBvcnRzLmdldENhY2hlS2V5U2FmZWx5ID0gZ2V0Q2FjaGVLZXlTYWZlbHk7XG5leHBvcnRzLmdldENhY2hlT3BlcmF0aW9uID0gZ2V0Q2FjaGVPcGVyYXRpb247XG5leHBvcnRzLmlzSW5Db21tYW5kcyA9IGlzSW5Db21tYW5kcztcbmV4cG9ydHMuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZSA9IHNob3VsZENvbnNpZGVyRm9yQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpc0NhY2hlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ })

};
;