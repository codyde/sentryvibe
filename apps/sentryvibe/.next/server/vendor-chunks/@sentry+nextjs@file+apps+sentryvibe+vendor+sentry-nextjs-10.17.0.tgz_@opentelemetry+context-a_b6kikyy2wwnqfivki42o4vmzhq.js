/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq";
exports.ids = ["vendor-chunks/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq"];
exports.modules = {

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nfunction captureRequestError(error, request, errorContext) {\n  core.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: core.headersToDict(request.headers),\n        method: request.method,\n      } ,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    core.captureException(error, {\n      mechanism: {\n        handled: false,\n        type: 'auto.function.nextjs.on_request_error',\n      },\n    });\n\n    core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n  });\n}\n\nexports.captureRequestError = captureRequestError;\n//# sourceMappingURL=captureRequestError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsZ1FBQXdCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0EsR0FBRztBQUNIOztBQUVBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL2NhcHR1cmVSZXF1ZXN0RXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHJlc3BvbnNlRW5kID0gcmVxdWlyZSgnLi91dGlscy9yZXNwb25zZUVuZC5qcycpO1xuXG4vKipcbiAqIFJlcG9ydHMgZXJyb3JzIHBhc3NlZCB0byB0aGUgdGhlIE5leHQuanMgYG9uUmVxdWVzdEVycm9yYCBpbnN0cnVtZW50YXRpb24gaG9vay5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZVJlcXVlc3RFcnJvcihlcnJvciwgcmVxdWVzdCwgZXJyb3JDb250ZXh0KSB7XG4gIGNvcmUud2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IHtcbiAgICAgICAgaGVhZGVyczogY29yZS5oZWFkZXJzVG9EaWN0KHJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICB9ICxcbiAgICB9KTtcblxuICAgIHNjb3BlLnNldENvbnRleHQoJ25leHRqcycsIHtcbiAgICAgIHJlcXVlc3RfcGF0aDogcmVxdWVzdC5wYXRoLFxuICAgICAgcm91dGVyX2tpbmQ6IGVycm9yQ29udGV4dC5yb3V0ZXJLaW5kLFxuICAgICAgcm91dGVyX3BhdGg6IGVycm9yQ29udGV4dC5yb3V0ZVBhdGgsXG4gICAgICByb3V0ZV90eXBlOiBlcnJvckNvbnRleHQucm91dGVUeXBlLFxuICAgIH0pO1xuXG4gICAgc2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGVycm9yQ29udGV4dC5yb3V0ZVBhdGgpO1xuXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy5vbl9yZXF1ZXN0X2Vycm9yJyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjb3JlLnZlcmNlbFdhaXRVbnRpbChyZXNwb25zZUVuZC5mbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0cy5jYXB0dXJlUmVxdWVzdEVycm9yID0gY2FwdHVyZVJlcXVlc3RFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcHR1cmVSZXF1ZXN0RXJyb3IuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL2RlYnVnLWJ1aWxkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst stackTraceParser = __webpack_require__(/*! stacktrace-parser */ \"(instrument)/../../node_modules/.pnpm/stacktrace-parser@0.1.11/node_modules/stacktrace-parser/dist/stack-trace-parser.esm.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nasync function devErrorSymbolicationEventProcessor(event, hint) {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = event.spans?.filter(span => {\n      const httpUrlAttribute = span.data?.['http.url'];\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame'); // could also be __nextjs_original-stack-frames (plural)\n      }\n\n      return true;\n    });\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the\n  // entire event processor. Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n      const nextJsVersion = globalWithInjectedValues._sentryNextJsVersion;\n\n      // If we for whatever reason don't have a Next.js version,\n      // we don't want to symbolicate as this previously lead to infinite loops\n      if (!nextJsVersion) {\n        return event;\n      }\n\n      const parsedNextjsVersion = core.parseSemver(nextJsVersion);\n\n      let resolvedFrames\n\n;\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (parsedNextjsVersion.major > 15 || (parsedNextjsVersion.major === 15 && parsedNextjsVersion.minor >= 2)) {\n        const r = await resolveStackFrames(frames);\n        if (r === null) {\n          return event;\n        }\n        resolvedFrames = r;\n      } else {\n        resolvedFrames = await Promise.all(\n          frames.map(frame => resolveStackFrame(frame, hint.originalException )),\n        );\n      }\n\n      if (event.exception?.values?.[0]?.stacktrace?.frames) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map(\n          (frame, i, frames) => {\n            const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n            if (!resolvedFrame?.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n              return {\n                ...frame,\n                platform: frame.filename?.startsWith('node:internal') ? 'nodejs' : undefined, // simple hack that will prevent a source mapping error from showing up\n                in_app: false,\n              };\n            }\n\n            const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(\n              resolvedFrame.originalCodeFrame,\n            );\n\n            return {\n              ...frame,\n              pre_context: preContextLines,\n              context_line: contextLine,\n              post_context: postContextLines,\n              function: resolvedFrame.originalStackFrame.methodName,\n              filename: resolvedFrame.originalStackFrame.file\n                ? stripWebpackInternalPrefix(resolvedFrame.originalStackFrame.file)\n                : undefined,\n              lineno:\n                resolvedFrame.originalStackFrame.lineNumber || resolvedFrame.originalStackFrame.line1 || undefined,\n              colno: resolvedFrame.originalStackFrame.column || resolvedFrame.originalStackFrame.column1 || undefined,\n            };\n          },\n        );\n      }\n    }\n  } catch {\n    return event;\n  }\n\n  return event;\n}\n\nasync function resolveStackFrame(\n  frame,\n  error,\n) {\n  try {\n    if (!(frame.file?.startsWith('webpack-internal:') || frame.file?.startsWith('file:'))) {\n      return null;\n    }\n\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, (frame[key ] ?? '').toString());\n    });\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`,\n        {\n          signal: controller.signal,\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame,\n    };\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nasync function resolveStackFrames(\n  frames,\n) {\n  try {\n    const postBody = {\n      frames: frames\n        .filter(frame => {\n          return !!frame.file;\n        })\n        .map(frame => {\n          // https://github.com/vercel/next.js/blob/df0573a478baa8b55478a7963c473dddd59a5e40/packages/next/src/client/components/react-dev-overlay/server/middleware-turbopack.ts#L129\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          frame.file = frame.file.replace(/^rsc:\\/\\/React\\/[^/]+\\//, '').replace(/\\?\\d+$/, '');\n\n          return {\n            file: frame.file,\n            methodName: frame.methodName ?? '<unknown>',\n            arguments: [],\n            lineNumber: frame.lineNumber ?? 0,\n            column: frame.column ?? 0,\n            line1: frame.lineNumber ?? 0,\n            column1: frame.column ?? 0,\n          };\n        }),\n      isServer: false,\n      isEdgeServer: false,\n      isAppDirectory: true,\n    };\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frames`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal,\n          body: JSON.stringify(postBody),\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return body.map(frame => {\n      return {\n        originalCodeFrame: frame.value.originalCodeFrame,\n        originalStackFrame: frame.value.originalStackFrame,\n      };\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nfunction parseOriginalCodeFrame(codeFrame)\n\n {\n  const preProcessedLines = codeFrame\n    // Remove ASCII control characters that are used for syntax highlighting\n    .replace(\n      // eslint-disable-next-line no-control-regex\n      /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, // https://stackoverflow.com/a/29497680\n      '',\n    )\n    .split('\\n')\n    // Remove line that is supposed to indicate where the error happened\n    .filter(line => !line.match(/^\\s*\\|/))\n    // Find the error line\n    .map(line => ({\n      line,\n      isErrorLine: !!line.match(/^>/),\n    }))\n    // Remove the leading part that is just for prettier output\n    .map(lineObj => ({\n      ...lineObj,\n      line: lineObj.line.replace(/^.*\\|/, ''),\n    }));\n\n  const preContextLines = [];\n  let contextLine = undefined;\n  const postContextLines = [];\n\n  let reachedContextLine = false;\n\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines,\n  };\n}\n\n/**\n * Strips webpack-internal prefixes from filenames to clean up stack traces.\n *\n * Examples:\n * - \"webpack-internal:///./components/file.tsx\" -> \"./components/file.tsx\"\n * - \"webpack-internal:///(app-pages-browser)/./components/file.tsx\" -> \"./components/file.tsx\"\n */\nfunction stripWebpackInternalPrefix(filename) {\n  if (!filename) {\n    return filename;\n  }\n\n  const webpackInternalRegex = /^webpack-internal:(?:\\/+)?(?:\\([^)]*\\)\\/)?(.+)$/;\n  const match = filename.match(webpackInternalRegex);\n\n  return match ? match[1] : filename;\n}\n\nexports.devErrorSymbolicationEventProcessor = devErrorSymbolicationEventProcessor;\n//# sourceMappingURL=devErrorSymbolicationEventProcessor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nfunction getVercelEnv(isClient) {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n\nexports.getVercelEnv = getVercelEnv;\n//# sourceMappingURL=getVercelEnv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZ2V0VmVyY2VsRW52LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGFBQWE7QUFDL0M7O0FBRUEsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZ2V0VmVyY2VsRW52LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFJldHVybnMgYW4gZW52aXJvbm1lbnQgc2V0dGluZyB2YWx1ZSBkZXRlcm1pbmVkIGJ5IFZlcmNlbCdzIGBWRVJDRUxfRU5WYCBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAqXG4gKiBAcGFyYW0gaXNDbGllbnQgRmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRvIHVzZSB0aGUgYE5FWFRfUFVCTElDX2AgcHJlZml4ZWQgdmVyc2lvbiBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKi9cbmZ1bmN0aW9uIGdldFZlcmNlbEVudihpc0NsaWVudCkge1xuICBjb25zdCB2ZXJjZWxFbnZWYXIgPSBpc0NsaWVudCA/IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1ZFUkNFTF9FTlYgOiBwcm9jZXNzLmVudi5WRVJDRUxfRU5WO1xuICByZXR1cm4gdmVyY2VsRW52VmFyID8gYHZlcmNlbC0ke3ZlcmNlbEVudlZhcn1gIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnRzLmdldFZlcmNlbEVudiA9IGdldFZlcmNlbEVudjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFZlcmNlbEVudi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nfunction isNotFoundNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(\n      (subject ).digest ,\n    )\n  );\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nfunction isRedirectNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    typeof (subject ).digest === 'string' &&\n    (subject ).digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  );\n}\n\nexports.isNotFoundNavigationError = isNotFoundNavigationError;\nexports.isRedirectNavigationError = isRedirectNavigationError;\n//# sourceMappingURL=nextNavigationErrorUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxrREFBa0Q7QUFDbEc7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGlucHV0IGlzIGEgTmV4dC5qcyBub3QtZm91bmQgZXJyb3IuXG4gKiBodHRwczovL2JldGEubmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2Uvbm90Zm91bmQjbm90Zm91bmRcbiAqL1xuZnVuY3Rpb24gaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcihzdWJqZWN0KSB7XG4gIHJldHVybiAoXG4gICAgY29yZS5pc0Vycm9yKHN1YmplY3QpICYmXG4gICAgWydORVhUX05PVF9GT1VORCcsICdORVhUX0hUVFBfRVJST1JfRkFMTEJBQ0s7NDA0J10uaW5jbHVkZXMoXG4gICAgICAoc3ViamVjdCApLmRpZ2VzdCAsXG4gICAgKVxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBpbnB1dCBpcyBhIE5leHQuanMgcmVkaXJlY3QgZXJyb3IuXG4gKiBodHRwczovL2JldGEubmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvcmVkaXJlY3QjcmVkaXJlY3RcbiAqL1xuZnVuY3Rpb24gaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvcihzdWJqZWN0KSB7XG4gIHJldHVybiAoXG4gICAgY29yZS5pc0Vycm9yKHN1YmplY3QpICYmXG4gICAgdHlwZW9mIChzdWJqZWN0ICkuZGlnZXN0ID09PSAnc3RyaW5nJyAmJlxuICAgIChzdWJqZWN0ICkuZGlnZXN0LnN0YXJ0c1dpdGgoJ05FWFRfUkVESVJFQ1Q7JykgLy8gYSByZWRpcmVjdCBkaWdlc3QgbG9va3MgbGlrZSBcIk5FWFRfUkVESVJFQ1Q7W3JlZGlyZWN0IHBhdGhdXCJcbiAgKTtcbn1cblxuZXhwb3J0cy5pc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yID0gaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcjtcbmV4cG9ydHMuaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvciA9IGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res?.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  core.withScope(scope => {\n    if (req) {\n      const normalizedRequest = core.httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({ normalizedRequest });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    core.captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'auto.function.nextjs.underscore_error',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      },\n    });\n  });\n\n  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n}\n\nexports.captureUnderscoreErrorException = captureUnderscoreErrorException;\n//# sourceMappingURL=_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi9fZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLG9CQUFvQixtQkFBTyxDQUFDLGlRQUF5Qjs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0I7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLG1CQUFtQjtBQUMxRDs7QUFFQTtBQUNBO0FBQ0EsdUVBQXVFLElBQUk7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSx1Q0FBdUM7QUFDdkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL19lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcmVzcG9uc2VFbmQgPSByZXF1aXJlKCcuLi91dGlscy9yZXNwb25zZUVuZC5qcycpO1xuXG4vKipcbiAqIENhcHR1cmUgdGhlIGV4Y2VwdGlvbiBwYXNzZWQgYnkgbmV4dGpzIHRvIHRoZSBgX2Vycm9yYCBwYWdlLCBhZGRpbmcgY29udGV4dCBkYXRhIGFzIGFwcHJvcHJpYXRlLlxuICpcbiAqIEBwYXJhbSBjb250ZXh0T3JQcm9wcyBUaGUgZGF0YSBwYXNzZWQgdG8gZWl0aGVyIGBnZXRJbml0aWFsUHJvcHNgIG9yIGByZW5kZXJgIGJ5IG5leHRqc1xuICovXG5hc3luYyBmdW5jdGlvbiBjYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uKGNvbnRleHRPclByb3BzKSB7XG4gIGNvbnN0IHsgcmVxLCByZXMsIGVyciB9ID0gY29udGV4dE9yUHJvcHM7XG5cbiAgLy8gNDA0cyAoYW5kIG90aGVyIDQwMC15IGZyaWVuZHMpIGNhbiB0cmlnZ2VyIGBfZXJyb3JgLCBidXQgd2UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZW0gdG8gU2VudHJ5XG4gIGNvbnN0IHN0YXR1c0NvZGUgPSByZXM/LnN0YXR1c0NvZGUgfHwgY29udGV4dE9yUHJvcHMuc3RhdHVzQ29kZTtcbiAgaWYgKHN0YXR1c0NvZGUgJiYgc3RhdHVzQ29kZSA8IDUwMCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8vIEluIHByZXZpb3VzIHZlcnNpb25zIG9mIHRoZSBzdWdnZXN0ZWQgYF9lcnJvci5qc2AgcGFnZSBpbiB3aGljaCB0aGlzIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGJlIHVzZWQsIHRoZXJlIHdhcyBhXG4gIC8vIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9pc3N1ZXMvODU5MiB3aGljaCBpbnZvbHZlZCBhbiBleHRyYSBjYWxsIHRvIHRoaXMgZnVuY3Rpb24sIGluIHRoZVxuICAvLyBjdXN0b20gZXJyb3IgY29tcG9uZW50J3MgYHJlbmRlcmAgbWV0aG9kLCBqdXN0IGluIGNhc2UgaXQgaGFkbid0IGJlZW4gY2FsbGVkIGJ5IGBnZXRJbml0aWFsUHJvcHNgLiBOb3cgdGhhdCB0aGF0XG4gIC8vIGlzc3VlIGhhcyBiZWVuIGZpeGVkLCB0aGUgc2Vjb25kIGNhbGwgaXMgdW5uZWNlc3NhcnksIGJ1dCBzaW5jZSBpdCBsaXZlcyBpbiB1c2VyIGNvZGUgcmF0aGVyIHRoYW4gb3VyIGNvZGUsIHVzZXJzXG4gIC8vIGhhdmUgdG8gYmUgdGhlIG9uZXMgdG8gZ2V0IHJpZCBvZiBpdCwgYW5kIGd1YXJhbmV0ZWVkbHksIG5vdCBhbGwgb2YgdGhlbSB3aWxsLiBTbywgcmF0aGVyIHRoYW4gY2FwdHVyZSB0aGUgZXJyb3JcbiAgLy8gdHdpY2UsIHdlIGp1c3QgYmFpbCBpZiB3ZSBzZW5zZSB3ZSdyZSBpbiB0aGF0IG5vdy1leHRyYW5lb3VzIHNlY29uZCBjYWxsLiAoV2UgY2FuIHRlbGwgd2hpY2ggZnVuY3Rpb24gd2UncmUgaW5cbiAgLy8gYmVjYXVzZSBOZXh0anMgcGFzc2VzIGBwYXRobmFtZWAgdG8gYGdldEluaXRpYWxQcm9wc2AgYnV0IG5vdCB0byBgcmVuZGVyYC4pXG4gIGlmICghY29udGV4dE9yUHJvcHMucGF0aG5hbWUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBjb3JlLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgaWYgKHJlcSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFJlcXVlc3QgPSBjb3JlLmh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YShyZXEpO1xuICAgICAgc2NvcGUuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHsgbm9ybWFsaXplZFJlcXVlc3QgfSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcmQtcGFydHkgbGlicmFyaWVzIChvciB1c2VycyB0aGVtc2VsdmVzKSB0aHJvdyBzb21ldGhpbmcgZmFsc3ksIHdlIHdhbnQgdG8gY2FwdHVyZSBpdCBhcyBhIG1lc3NhZ2UgKHdoaWNoXG4gICAgLy8gaXMgd2hhdCBwYXNzaW5nIGEgc3RyaW5nIHRvIGBjYXB0dXJlRXhjZXB0aW9uYCB3aWxsIHdpbmQgdXAgZG9pbmcpXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVyciB8fCBgX2Vycm9yLmpzIGNhbGxlZCB3aXRoIGZhbHN5IGVycm9yICgke2Vycn0pYCwge1xuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy51bmRlcnNjb3JlX2Vycm9yJyxcbiAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBmdW5jdGlvbjogJ19lcnJvci5nZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbn1cblxuZXhwb3J0cy5jYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uID0gY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9lcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js":
/*!***************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js ***!
  \***************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ../utils/addHeadersAsAttributes.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ../utils/tracingUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wrap the given API route handler with error nad performance monitoring.\n *\n * @param apiHandler The handler exported from the user's API page route file, which may or may not already be\n * wrapped with `withSentry`\n * @param parameterizedRoute The page's parameterized route.\n * @returns The wrapped handler which will always return a Promise.\n */\nfunction wrapApiHandlerWithSentry(apiHandler, parameterizedRoute) {\n  return new Proxy(apiHandler, {\n    apply: (\n      wrappingTarget,\n      thisArg,\n      args,\n    ) => {\n      tracingUtils.dropNextjsRootContext();\n      return tracingUtils.escapeNextjsTracing(() => {\n        const [req, res] = args;\n\n        if (!req) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a request object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        } else if (!res) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a response object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        }\n\n        // Prevent double wrapping of the same request.\n        if (req.__withSentry_applied__) {\n          return wrappingTarget.apply(thisArg, args);\n        }\n        req.__withSentry_applied__ = true;\n\n        return core.withIsolationScope(isolationScope => {\n          // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n          // Else, we manually continueTrace from the incoming headers\n          const continueTraceIfNoActiveSpan = core.getActiveSpan()\n            ? (_opts, callback) => callback()\n            : core.continueTrace;\n\n          return continueTraceIfNoActiveSpan(\n            {\n              sentryTrace:\n                req.headers && core.isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined,\n              baggage: req.headers?.baggage,\n            },\n            () => {\n              const reqMethod = `${(req.method || 'GET').toUpperCase()} `;\n              const normalizedRequest = core.httpRequestToRequestData(req);\n\n              isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n              isolationScope.setTransactionName(`${reqMethod}${parameterizedRoute}`);\n\n              return core.startSpanManual(\n                {\n                  name: `${reqMethod}${parameterizedRoute}`,\n                  op: 'http.server',\n                  forceTransaction: true,\n                  attributes: {\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.nextjs',\n                    ...addHeadersAsAttributes.addHeadersAsAttributes(normalizedRequest.headers || {}),\n                  },\n                },\n                async span => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  res.end = new Proxy(res.end, {\n                    apply(target, thisArg, argArray) {\n                      core.setHttpStatus(span, res.statusCode);\n                      span.end();\n                      core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                      return target.apply(thisArg, argArray);\n                    },\n                  });\n                  try {\n                    return await wrappingTarget.apply(thisArg, args);\n                  } catch (e) {\n                    // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n                    // store a seen flag on it. (Because of the one-way-on-Vercel-one-way-off-of-Vercel approach we've been forced\n                    // to take, it can happen that the same thrown object gets caught in two different ways, and flagging it is a\n                    // way to prevent it from actually being reported twice.)\n                    const objectifiedErr = core.objectify(e);\n\n                    core.captureException(objectifiedErr, {\n                      mechanism: {\n                        type: 'auto.http.nextjs.api_handler',\n                        handled: false,\n                        data: {\n                          wrapped_handler: wrappingTarget.name,\n                          function: 'withSentry',\n                        },\n                      },\n                    });\n\n                    core.setHttpStatus(span, 500);\n                    span.end();\n\n                    // we need to await the flush here to ensure that the error is captured\n                    // as the runtime freezes as soon as the error is thrown below\n                    await responseEnd.flushSafelyWithTimeout();\n\n                    // We rethrow here so that nextjs can do with the error whatever it would normally do. (Sometimes \"whatever it\n                    // would normally do\" is to allow the error to bubble up to the global handlers - another reason we need to mark\n                    // the error as already having been captured.)\n                    throw objectifiedErr;\n                  }\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry;\n//# sourceMappingURL=wrapApiHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js":
/*!**************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js ***!
  \**************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(\n  handler,\n  vercelCronsConfig,\n) {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args) => {\n      if (!args?.[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const [req] = args ;\n\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n\n      if (\n        !vercelCronsConfig || // do nothing if vercel crons config is missing\n        !userAgentHeader?.includes('vercel-cron') // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n\n      if (!vercelCron?.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const monitorSlug = vercelCron.path;\n\n      const checkInId = core.captureCheckIn(\n        {\n          monitorSlug,\n          status: 'in_progress',\n        },\n        {\n          maxRuntime: 60 * 12, // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n          schedule: {\n            type: 'crontab',\n            value: vercelCron.schedule,\n          },\n        },\n      );\n\n      const startTime = Date.now() / 1000;\n\n      const handleErrorCase = () => {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime,\n        });\n      };\n\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(\n          () => {\n            core.captureCheckIn({\n              checkInId,\n              monitorSlug,\n              status: 'ok',\n              duration: Date.now() / 1000 - startTime,\n            });\n          },\n          () => {\n            handleErrorCase();\n          },\n        );\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime,\n        });\n        return maybePromiseResult;\n      }\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons;\n//# sourceMappingURL=wrapApiHandlerWithSentryVercelCrons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMkNBQTJDO0FBQzNDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFdyYXBzIGEgZnVuY3Rpb24gd2l0aCBTZW50cnkgY3JvbnMgaW5zdHJ1bWVudGF0aW9uIGJ5IGF1dG9tYXRpY2FsbHkgc2VuZGluZyBjaGVjay1pbnMgZm9yIHRoZSBnaXZlbiBWZXJjZWwgY3JvbnMgY29uZmlnLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMoXG4gIGhhbmRsZXIsXG4gIHZlcmNlbENyb25zQ29uZmlnLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkoaGFuZGxlciwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgYXBwbHk6IChvcmlnaW5hbEZ1bmN0aW9uLCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoIWFyZ3M/LlswXSkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW3JlcV0gPSBhcmdzIDtcblxuICAgICAgbGV0IG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgICAgIGNvbnN0IGNyb25zS2V5ID0gJ25leHRVcmwnIGluIHJlcSA/IHJlcS5uZXh0VXJsLnBhdGhuYW1lIDogcmVxLnVybDtcbiAgICAgIGNvbnN0IHVzZXJBZ2VudEhlYWRlciA9ICduZXh0VXJsJyBpbiByZXEgPyByZXEuaGVhZGVycy5nZXQoJ3VzZXItYWdlbnQnKSA6IHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J107XG5cbiAgICAgIGlmIChcbiAgICAgICAgIXZlcmNlbENyb25zQ29uZmlnIHx8IC8vIGRvIG5vdGhpbmcgaWYgdmVyY2VsIGNyb25zIGNvbmZpZyBpcyBtaXNzaW5nXG4gICAgICAgICF1c2VyQWdlbnRIZWFkZXI/LmluY2x1ZGVzKCd2ZXJjZWwtY3JvbicpIC8vIGRvIG5vdGhpbmcgaWYgZW5kcG9pbnQgaXMgbm90IGNhbGxlZCBmcm9tIHZlcmNlbCBjcm9uc1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2ZXJjZWxDcm9uID0gdmVyY2VsQ3JvbnNDb25maWcuZmluZCh2ZXJjZWxDcm9uID0+IHZlcmNlbENyb24ucGF0aCA9PT0gY3JvbnNLZXkpO1xuXG4gICAgICBpZiAoIXZlcmNlbENyb24/LnBhdGggfHwgIXZlcmNlbENyb24uc2NoZWR1bGUpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1vbml0b3JTbHVnID0gdmVyY2VsQ3Jvbi5wYXRoO1xuXG4gICAgICBjb25zdCBjaGVja0luSWQgPSBjb3JlLmNhcHR1cmVDaGVja0luKFxuICAgICAgICB7XG4gICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbWF4UnVudGltZTogNjAgKiAxMiwgLy8gKG1pbnV0ZXMpIHNvIDEyIGhvdXJzIC0ganVzdCBhIHZlcnkgaGlnaCBhcmJpdHJhcnkgbnVtYmVyIHNpbmNlIHdlIGRvbid0IGtub3cgdGhlIGFjdHVhbCBkdXJhdGlvbiBvZiB0aGUgdXNlcnMgY3JvbiBqb2JcbiAgICAgICAgICBzY2hlZHVsZToge1xuICAgICAgICAgICAgdHlwZTogJ2Nyb250YWInLFxuICAgICAgICAgICAgdmFsdWU6IHZlcmNlbENyb24uc2NoZWR1bGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCkgLyAxMDAwO1xuXG4gICAgICBjb25zdCBoYW5kbGVFcnJvckNhc2UgPSAoKSA9PiB7XG4gICAgICAgIGNvcmUuY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgIGNoZWNrSW5JZCxcbiAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgZHVyYXRpb246IERhdGUubm93KCkgLyAxMDAwIC0gc3RhcnRUaW1lLFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG1heWJlUHJvbWlzZVJlc3VsdCA9IG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yQ2FzZSgpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG1heWJlUHJvbWlzZVJlc3VsdCA9PT0gJ29iamVjdCcgJiYgbWF5YmVQcm9taXNlUmVzdWx0ICE9PSBudWxsICYmICd0aGVuJyBpbiBtYXliZVByb21pc2VSZXN1bHQpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG1heWJlUHJvbWlzZVJlc3VsdCkudGhlbihcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBjb3JlLmNhcHR1cmVDaGVja0luKHtcbiAgICAgICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICAgICAgc3RhdHVzOiAnb2snLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZUVycm9yQ2FzZSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gSXQgaXMgdmVyeSBpbXBvcnRhbnQgdGhhdCB3ZSByZXR1cm4gdGhlIG9yaWdpbmFsIHByb21pc2UgaGVyZSwgYmVjYXVzZSBOZXh0LmpzIGF0dGFjaGVzIHZhcmlvdXMgcHJvcGVydGllc1xuICAgICAgICAvLyB0byB0aGF0IHByb21pc2UgYW5kIHdpbGwgdGhyb3cgaWYgdGhleSBhcmUgbm90IG9uIHRoZSByZXR1cm5lZCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvcmUuY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgIGNoZWNrSW5JZCxcbiAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICBzdGF0dXM6ICdvaycsXG4gICAgICAgICAgZHVyYXRpb246IERhdGUubm93KCkgLyAxMDAwIC0gc3RhcnRUaW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyA9IHdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js":
/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context.ctx;\n\n      const errorWrappedAppGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!(appGetInitialProps ).pageProps) {\n            (appGetInitialProps ).pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (appGetInitialProps ).pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (appGetInitialProps ).pageProps._sentryBaggage = baggage;\n          }\n        }\n\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapAppGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx5UEFBcUI7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsbVFBQTBCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gYXBwIChcIl9hcHAuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdBcHBHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeShvcmlnQXBwR2V0SW5pdGlhbFByb3BzKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0FwcEdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0LmN0eDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkQXBwR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG5cbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkQXBwR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19hcHAnLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5jdHgucGF0aG5hbWUsXG4gICAgICAgICAgZGF0YUZldGNoaW5nTWV0aG9kTmFtZTogJ2dldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBkYXRhOiBhcHBHZXRJbml0aWFsUHJvcHMsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgfVxuXG4gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcHBHZXRJbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGFwcEdldEluaXRpYWxQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFBlciBkZWZpbml0aW9uLCBgcGFnZVByb3BzYCBpcyBub3Qgb3B0aW9uYWwsIGhvd2V2ZXIgYW4gaW5jcmVhc2VkIGFtb3VudCBvZiB1c2VycyBkb2Vzbid0IHNlZW0gdG8gY2FsbFxuICAgICAgICAgIC8vIGBBcHAuZ2V0SW5pdGlhbFByb3BzKGFwcENvbnRleHQpYCBpbiB0aGVpciBjdXN0b20gYF9hcHBgIHBhZ2VzIHdoaWNoIGlzIHJlcXVpcmVkIGFzIHBlclxuICAgICAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FkdmFuY2VkLWZlYXR1cmVzL2N1c3RvbS1hcHAgLSByZXN1bHRpbmcgaW4gbWlzc2luZyBgcGFnZVByb3BzYC5cbiAgICAgICAgICAvLyBGb3IgdGhpcyByZWFzb24sIHdlIGp1c3QgaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGBwYWdlUHJvcHNgIGRvZXNuJ3QgZXhpc3QgZXhwbGljaXRseS5cbiAgICAgICAgICBpZiAoIShhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMgPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgICAoYXBwR2V0SW5pdGlhbFByb3BzICkucGFnZVByb3BzLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcHBHZXRJbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkQXBwR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js":
/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapDocumentGetInitialPropsWithSentry(\n  origDocumentGetInitialProps,\n) {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const { data } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapDocumentGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLHlQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxtUUFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsNkNBQTZDO0FBQzdDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb24gaW5cbiAqIGEgY3VzdG9tIGRvY3VtZW50IChcIl9kb2N1bWVudC5qc1wiKS5cbiAqXG4gKiBAcGFyYW0gb3JpZ0RvY3VtZW50R2V0SW5pdGlhbFByb3BzIFRoZSB1c2VyJ3MgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0RvY3VtZW50R2V0SW5pdGlhbFByb3BzLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0RvY3VtZW50R2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6ICcvX2RvY3VtZW50JyxcbiAgICAgICAgICByZXF1ZXN0ZWRSb3V0ZU5hbWU6IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICAgICAgZGF0YUZldGNoaW5nTWV0aG9kTmFtZTogJ2dldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdHJhY2VkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js":
/*!*************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js ***!
  \*************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapErrorGetInitialPropsWithSentry(\n  origErrorGetInitialProps,\n) {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            (errorGetInitialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (errorGetInitialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapErrorGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLHlQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxtUUFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMENBQTBDO0FBQzFDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb24gaW5cbiAqIGEgY3VzdG9tIGVycm9yIHBhZ2UgKFwiX2Vycm9yLmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnRXJyb3JHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnRXJyb3JHZXRJbml0aWFsUHJvcHMsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnRXJyb3JHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fZXJyb3InLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGVycm9yR2V0SW5pdGlhbFByb3BzLFxuICAgICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgIH1cblxuID0gYXdhaXQgdHJhY2VkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZXJyb3JHZXRJbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGVycm9yR2V0SW5pdGlhbFByb3BzICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgICAoZXJyb3JHZXRJbml0aWFsUHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgICAoZXJyb3JHZXRJbml0aWFsUHJvcHMgKS5fc2VudHJ5QmFnZ2FnZSA9IGJhZ2dhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9yR2V0SW5pdGlhbFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js":
/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js ***!
  \********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetInitialPropsWithSentry(origGetInitialProps) {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = (await tracedGetInitialProps.apply(thisArg, args)) ?? {}; // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (initialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (initialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx5UEFBcUI7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsbVFBQTBCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsV0FBVzs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkRBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeShvcmlnR2V0SW5pdGlhbFByb3BzKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGluaXRpYWxQcm9wcyxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICAgIHNlbnRyeVRyYWNlLFxuICAgICAgICB9XG5cbiA9IChhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncykpID8/IHt9OyAvLyBOZXh0LmpzIGFsbG93cyB1bmRlZmluZWQgdG8gYmUgcmV0dXJuZWQgZnJvbSBhIGdldEluaXRpYWxQcm9wc0Z1bmN0aW9uLlxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFByb3BzID09PSAnb2JqZWN0JyAmJiBpbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgICAoaW5pdGlhbFByb3BzICkuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGluaXRpYWxQcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5pdGlhbFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js":
/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps,\n  parameterizedRoute,\n) {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }\n\n = await (tracedGetServerSideProps.apply(thisArg, args) );\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props )._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props )._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry;\n//# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx5UEFBcUI7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsbVFBQTBCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsV0FBVzs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLHdDQUF3QztBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0U2VydmVyU2lkZVByb3BzYCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBvcmlnR2V0U2VydmVyU2lkZVByb3BzIFRoZSB1c2VyJ3MgYGdldFNlcnZlclNpZGVQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMsXG4gIHBhcmFtZXRlcml6ZWRSb3V0ZSxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0U2VydmVyU2lkZVByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICBjb25zdCB0cmFjZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiBwYXJhbWV0ZXJpemVkUm91dGUsXG4gICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogcGFyYW1ldGVyaXplZFJvdXRlLFxuICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0U2VydmVyU2lkZVByb3BzJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGRhdGE6IHNlcnZlclNpZGVQcm9wcyxcbiAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICB9XG5cbiA9IGF3YWl0ICh0cmFjZWRHZXRTZXJ2ZXJTaWRlUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncykgKTtcblxuICAgICAgaWYgKHR5cGVvZiBzZXJ2ZXJTaWRlUHJvcHMgPT09ICdvYmplY3QnICYmIHNlcnZlclNpZGVQcm9wcyAhPT0gbnVsbCAmJiAncHJvcHMnIGluIHNlcnZlclNpZGVQcm9wcykge1xuICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgIGlmIChzZW50cnlUcmFjZSkge1xuICAgICAgICAgIChzZXJ2ZXJTaWRlUHJvcHMucHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgKHNlcnZlclNpZGVQcm9wcy5wcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VydmVyU2lkZVByb3BzO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js":
/*!*******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js ***!
  \*******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetStaticPropsWithSentry(\n  origGetStaticPropsa,\n  _parameterizedRoute,\n) {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const errorWrappedGetStaticProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      return wrapperUtils.callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    },\n  });\n}\n\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry;\n//# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLHlQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxtUUFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRTdGF0aWNQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldFN0YXRpY1Byb3BzIFRoZSB1c2VyJ3MgYGdldFN0YXRpY1Byb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnR2V0U3RhdGljUHJvcHNhLFxuICBfcGFyYW1ldGVyaXplZFJvdXRlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldFN0YXRpY1Byb3BzYSwge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldFN0YXRpY1Byb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICByZXR1cm4gd3JhcHBlclV0aWxzLmNhbGxEYXRhRmV0Y2hlclRyYWNlZChlcnJvcldyYXBwZWRHZXRTdGF0aWNQcm9wcywgYXJncyk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js":
/*!******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js ***!
  \******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction isReactClassComponent(target) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && target?.prototype?.isReactComponent;\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nfunction wrapPageComponentWithSentry(pageComponent) {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n       render(...args) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData =\n            typeof this.props === 'object' &&\n            this.props !== null &&\n            '_sentryTraceData' in this.props &&\n            typeof this.props._sentryTraceData === 'string'\n              ? this.props._sentryTraceData\n              : undefined;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return super.render(...args);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n                type: 'auto.function.nextjs.page_class',\n              },\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = argArray?.[0]?._sentryTraceData;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n                type: 'auto.function.nextjs.page_function',\n              },\n            });\n            throw e;\n          }\n        });\n      },\n    });\n  } else {\n    return pageComponent;\n  }\n}\n\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry;\n//# sourceMappingURL=wrapPageComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmZ1bmN0aW9uIGlzUmVhY3RDbGFzc0NvbXBvbmVudCh0YXJnZXQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiB0YXJnZXQ/LnByb3RvdHlwZT8uaXNSZWFjdENvbXBvbmVudDtcbn1cblxuLyoqXG4gKiBXcmFwcyBhIHBhZ2UgY29tcG9uZW50IHdpdGggU2VudHJ5IGVycm9yIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gd3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5KHBhZ2VDb21wb25lbnQpIHtcbiAgaWYgKGlzUmVhY3RDbGFzc0NvbXBvbmVudChwYWdlQ29tcG9uZW50KSkge1xuICAgIHJldHVybiBjbGFzcyBTZW50cnlXcmFwcGVkUGFnZUNvbXBvbmVudCBleHRlbmRzIHBhZ2VDb21wb25lbnQge1xuICAgICAgIHJlbmRlciguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBjb3JlLndpdGhJc29sYXRpb25TY29wZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2NvcGUgPSBjb3JlLmdldEN1cnJlbnRTY29wZSgpO1xuICAgICAgICAgIC8vIFdlIGV4dHJhY3QgdGhlIHNlbnRyeSB0cmFjZSBkYXRhIHRoYXQgaXMgcHV0IGluIHRoZSBjb21wb25lbnQgcHJvcHMgYnkgZGF0YWZldGNoZXIgd3JhcHBlcnNcbiAgICAgICAgICBjb25zdCBzZW50cnlUcmFjZURhdGEgPVxuICAgICAgICAgICAgdHlwZW9mIHRoaXMucHJvcHMgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICB0aGlzLnByb3BzICE9PSBudWxsICYmXG4gICAgICAgICAgICAnX3NlbnRyeVRyYWNlRGF0YScgaW4gdGhpcy5wcm9wcyAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXMucHJvcHMuX3NlbnRyeVRyYWNlRGF0YSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgPyB0aGlzLnByb3BzLl9zZW50cnlUcmFjZURhdGFcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2VEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBjb3JlLmV4dHJhY3RUcmFjZXBhcmVudERhdGEoc2VudHJ5VHJhY2VEYXRhKTtcbiAgICAgICAgICAgIHNjb3BlLnNldENvbnRleHQoJ3RyYWNlJywge1xuICAgICAgICAgICAgICBzcGFuX2lkOiB0cmFjZXBhcmVudERhdGE/LnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgICAgdHJhY2VfaWQ6IHRyYWNlcGFyZW50RGF0YT8udHJhY2VJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIucmVuZGVyKC4uLmFyZ3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlLCB7XG4gICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy5wYWdlX2NsYXNzJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhZ2VDb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbmV3IFByb3h5KHBhZ2VDb21wb25lbnQsIHtcbiAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2VudHJ5IHRyYWNlIGRhdGEgdGhhdCBpcyBwdXQgaW4gdGhlIGNvbXBvbmVudCBwcm9wcyBieSBkYXRhZmV0Y2hlciB3cmFwcGVyc1xuICAgICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlRGF0YSA9IGFyZ0FycmF5Py5bMF0/Ll9zZW50cnlUcmFjZURhdGE7XG5cbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2VEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBjb3JlLmV4dHJhY3RUcmFjZXBhcmVudERhdGEoc2VudHJ5VHJhY2VEYXRhKTtcbiAgICAgICAgICAgIHNjb3BlLnNldENvbnRleHQoJ3RyYWNlJywge1xuICAgICAgICAgICAgICBzcGFuX2lkOiB0cmFjZXBhcmVudERhdGE/LnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgICAgdHJhY2VfaWQ6IHRyYWNlcGFyZW50RGF0YT8udHJhY2VJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ0FycmF5KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5uZXh0anMucGFnZV9mdW5jdGlvbicsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhZ2VDb21wb25lbnQ7XG4gIH1cbn1cblxuZXhwb3J0cy53cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkgPSB3cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nconst TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\n\nconst TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\n\nconst TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\n\nexports.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL;\nexports.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL;\nexports.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION;\n//# sourceMappingURL=span-attributes-with-logic-attached.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsOENBQThDO0FBQzlDLDhDQUE4QztBQUM5QyxnREFBZ0Q7QUFDaEQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9zcGFuLWF0dHJpYnV0ZXMtd2l0aC1sb2dpYy1hdHRhY2hlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBJZiB0aGlzIGF0dHJpYnV0ZSBpcyBhdHRhY2hlZCB0byBhIHRyYW5zYWN0aW9uLCB0aGUgTmV4dC5qcyBTREsgd2lsbCBkcm9wIHRoYXQgdHJhbnNhY3Rpb24uXG4gKi9cbmNvbnN0IFRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04gPSAnc2VudHJ5LmRyb3BfdHJhbnNhY3Rpb24nO1xuXG5jb25zdCBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9UUkFDRV9CQUNLRklMTCA9ICdzZW50cnkuc2VudHJ5X3RyYWNlX2JhY2tmaWxsJztcblxuY29uc3QgVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfUk9VVEVfQkFDS0ZJTEwgPSAnc2VudHJ5LnJvdXRlX2JhY2tmaWxsJztcblxuZXhwb3J0cy5UUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCA9IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMO1xuZXhwb3J0cy5UUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9UUkFDRV9CQUNLRklMTCA9IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMO1xuZXhwb3J0cy5UUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OID0gVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW4tYXR0cmlidXRlcy13aXRoLWxvZ2ljLWF0dGFjaGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Extracts HTTP request headers as span attributes and optionally applies them to a span.\n */\nfunction addHeadersAsAttributes(\n  headers,\n  span,\n) {\n  if (!headers) {\n    return {};\n  }\n\n  const client = core.getClient();\n  const sendDefaultPii = client?.getOptions().sendDefaultPii ?? false;\n\n  const headersDict =\n    headers instanceof Headers || (typeof headers === 'object' && 'get' in headers)\n      ? core.winterCGHeadersToDict(headers )\n      : headers;\n\n  const headerAttributes = core.httpHeadersToSpanAttributes(headersDict, sendDefaultPii);\n\n  if (span) {\n    span.setAttributes(headerAttributes);\n  }\n\n  return headerAttributes;\n}\n\nexports.addHeadersAsAttributes = addHeadersAsAttributes;\n//# sourceMappingURL=addHeadersAsAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIEV4dHJhY3RzIEhUVFAgcmVxdWVzdCBoZWFkZXJzIGFzIHNwYW4gYXR0cmlidXRlcyBhbmQgb3B0aW9uYWxseSBhcHBsaWVzIHRoZW0gdG8gYSBzcGFuLlxuICovXG5mdW5jdGlvbiBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzKFxuICBoZWFkZXJzLFxuICBzcGFuLFxuKSB7XG4gIGlmICghaGVhZGVycykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGNvbnN0IHNlbmREZWZhdWx0UGlpID0gY2xpZW50Py5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkgPz8gZmFsc2U7XG5cbiAgY29uc3QgaGVhZGVyc0RpY3QgPVxuICAgIGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzIHx8ICh0eXBlb2YgaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgJ2dldCcgaW4gaGVhZGVycylcbiAgICAgID8gY29yZS53aW50ZXJDR0hlYWRlcnNUb0RpY3QoaGVhZGVycyApXG4gICAgICA6IGhlYWRlcnM7XG5cbiAgY29uc3QgaGVhZGVyQXR0cmlidXRlcyA9IGNvcmUuaHR0cEhlYWRlcnNUb1NwYW5BdHRyaWJ1dGVzKGhlYWRlcnNEaWN0LCBzZW5kRGVmYXVsdFBpaSk7XG5cbiAgaWYgKHNwYW4pIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZXMoaGVhZGVyQXR0cmlidXRlcyk7XG4gIH1cblxuICByZXR1cm4gaGVhZGVyQXR0cmlidXRlcztcbn1cblxuZXhwb3J0cy5hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzID0gYWRkSGVhZGVyc0FzQXR0cmlidXRlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst constants = __webpack_require__(/*! next/constants */ \"(instrument)/../../node_modules/.pnpm/next@15.5.4_@babel+core@7.28.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/api/constants.js\");\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nfunction isBuild() {\n  return process.env.NEXT_PHASE === constants.PHASE_PRODUCTION_BUILD;\n}\n\nexports.isBuild = isBuild;\n//# sourceMappingURL=isBuild.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvaXNCdWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQkFBa0IsbUJBQU8sQ0FBQyx5TUFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9pc0J1aWxkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCduZXh0L2NvbnN0YW50cycpO1xuXG4vKipcbiAqIERlY2lkZSBpZiB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcHJvY2VzcyBpcyBwYXJ0IG9mIHRoZSBidWlsZCBwaGFzZSBvciBoYXBwZW5pbmcgYXQgcnVudGltZS5cbiAqL1xuZnVuY3Rpb24gaXNCdWlsZCgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52Lk5FWFRfUEhBU0UgPT09IGNvbnN0YW50cy5QSEFTRV9QUk9EVUNUSU9OX0JVSUxEO1xufVxuXG5leHBvcnRzLmlzQnVpbGQgPSBpc0J1aWxkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNCdWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nasync function flushSafelyWithTimeout() {\n  try {\n    debugBuild.DEBUG_BUILD && core.debug.log('Flushing events...');\n    await core.flush(2000);\n    debugBuild.DEBUG_BUILD && core.debug.log('Done flushing events');\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.log('Error while flushing events:\\n', e);\n  }\n}\n\nexports.flushSafelyWithTimeout = flushSafelyWithTimeout;\n//# sourceMappingURL=responseEnd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvcmVzcG9uc2VFbmQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHFQQUFtQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvcmVzcG9uc2VFbmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG4vKipcbiAqIEZsdXNoZXMgcGVuZGluZyBTZW50cnkgZXZlbnRzIHdpdGggYSAyIHNlY29uZCB0aW1lb3V0IGFuZCBpbiBhIHdheSB0aGF0IGNhbm5vdCBjcmVhdGUgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9ucy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpIHtcbiAgdHJ5IHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcubG9nKCdGbHVzaGluZyBldmVudHMuLi4nKTtcbiAgICBhd2FpdCBjb3JlLmZsdXNoKDIwMDApO1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ0RvbmUgZmx1c2hpbmcgZXZlbnRzJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcubG9nKCdFcnJvciB3aGlsZSBmbHVzaGluZyBldmVudHM6XFxuJywgZSk7XG4gIH1cbn1cblxuZXhwb3J0cy5mbHVzaFNhZmVseVdpdGhUaW1lb3V0ID0gZmx1c2hTYWZlbHlXaXRoVGltZW91dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3BvbnNlRW5kLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\nconst commonPropagationContextMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nfunction commonObjectToPropagationContext(\n  commonObject,\n  propagationContext,\n) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\n\nconst commonIsolationScopeMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nfunction commonObjectToIsolationScope(commonObject) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new core.Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new core.Scope();\n  }\n}\n\nlet nextjsEscapedAsyncStorage;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nfunction escapeNextjsTracing(cb) {\n  const MaybeGlobalAsyncLocalStorage = (core.GLOBAL_OBJ )\n    .AsyncLocalStorage;\n\n  if (!MaybeGlobalAsyncLocalStorage) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n      );\n    return cb();\n  }\n\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return core.startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nfunction dropNextjsRootContext() {\n  const nextJsOwnedSpan = core.getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = core.getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n    if (rootSpanAttributes?.['next.span_type']) {\n      core.getRootSpan(nextJsOwnedSpan)?.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true);\n    }\n  }\n}\n\nexports.commonObjectToIsolationScope = commonObjectToIsolationScope;\nexports.commonObjectToPropagationContext = commonObjectToPropagationContext;\nexports.dropNextjsRootContext = dropNextjsRootContext;\nexports.escapeNextjsTracing = escapeNextjsTracing;\n//# sourceMappingURL=tracingUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvdHJhY2luZ1V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxxUEFBbUI7QUFDOUMsd0NBQXdDLG1CQUFPLENBQUMscVNBQTJDOztBQUUzRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEMsd0NBQXdDO0FBQ3hDLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy90cmFjaW5nVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3Qgc3BhbkF0dHJpYnV0ZXNXaXRoTG9naWNBdHRhY2hlZCA9IHJlcXVpcmUoJy4uL3NwYW4tYXR0cmlidXRlcy13aXRoLWxvZ2ljLWF0dGFjaGVkLmpzJyk7XG5cbmNvbnN0IGNvbW1vblByb3BhZ2F0aW9uQ29udGV4dE1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogVGFrZXMgYSBzaGFyZWQgKGdhcmJhZ2UgY29sbGVjdGFibGUpIG9iamVjdCBiZXR3ZWVuIHJlc291cmNlcywgZS5nLiBhIGhlYWRlcnMgb2JqZWN0IHNoYXJlZCBiZXR3ZWVuIE5leHQuanMgc2VydmVyIGNvbXBvbmVudHMgYW5kIHJldHVybnMgYSBjb21tb24gcHJvcGFnYXRpb24gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0gY29tbW9uT2JqZWN0IFRoZSBzaGFyZWQgb2JqZWN0LlxuICogQHBhcmFtIHByb3BhZ2F0aW9uQ29udGV4dCBUaGUgcHJvcGFnYXRpb24gY29udGV4dCB0aGF0IHNob3VsZCBiZSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlIHJlc291cmNlcyBpZiBubyBwcm9wYWdhdGlvbiBjb250ZXh0IHdhcyByZWdpc3RlcmVkIHlldC5cbiAqIEByZXR1cm5zIHRoZSBzaGFyZWQgcHJvcGFnYXRpb24gY29udGV4dC5cbiAqL1xuZnVuY3Rpb24gY29tbW9uT2JqZWN0VG9Qcm9wYWdhdGlvbkNvbnRleHQoXG4gIGNvbW1vbk9iamVjdCxcbiAgcHJvcGFnYXRpb25Db250ZXh0LFxuKSB7XG4gIGlmICh0eXBlb2YgY29tbW9uT2JqZWN0ID09PSAnb2JqZWN0JyAmJiBjb21tb25PYmplY3QpIHtcbiAgICBjb25zdCBtZW1vUHJvcGFnYXRpb25Db250ZXh0ID0gY29tbW9uUHJvcGFnYXRpb25Db250ZXh0TWFwLmdldChjb21tb25PYmplY3QpO1xuICAgIGlmIChtZW1vUHJvcGFnYXRpb25Db250ZXh0KSB7XG4gICAgICByZXR1cm4gbWVtb1Byb3BhZ2F0aW9uQ29udGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tbW9uUHJvcGFnYXRpb25Db250ZXh0TWFwLnNldChjb21tb25PYmplY3QsIHByb3BhZ2F0aW9uQ29udGV4dCk7XG4gICAgICByZXR1cm4gcHJvcGFnYXRpb25Db250ZXh0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJvcGFnYXRpb25Db250ZXh0O1xuICB9XG59XG5cbmNvbnN0IGNvbW1vbklzb2xhdGlvblNjb3BlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBUYWtlcyBhIHNoYXJlZCAoZ2FyYmFnZSBjb2xsZWN0YWJsZSkgb2JqZWN0IGJldHdlZW4gcmVzb3VyY2VzLCBlLmcuIGEgaGVhZGVycyBvYmplY3Qgc2hhcmVkIGJldHdlZW4gTmV4dC5qcyBzZXJ2ZXIgY29tcG9uZW50cyBhbmQgcmV0dXJucyBhIGNvbW1vbiBwcm9wYWdhdGlvbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSBjb21tb25PYmplY3QgVGhlIHNoYXJlZCBvYmplY3QuXG4gKiBAcGFyYW0gaXNvbGF0aW9uU2NvcGUgVGhlIGlzb2xhdGlvblNjb3BlIHRoYXQgc2hvdWxkIGJlIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGUgcmVzb3VyY2VzIGlmIG5vIGlzb2xhdGlvbiBzY29wZSB3YXMgY3JlYXRlZCB5ZXQuXG4gKiBAcmV0dXJucyB0aGUgc2hhcmVkIGlzb2xhdGlvbiBzY29wZS5cbiAqL1xuZnVuY3Rpb24gY29tbW9uT2JqZWN0VG9Jc29sYXRpb25TY29wZShjb21tb25PYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBjb21tb25PYmplY3QgPT09ICdvYmplY3QnICYmIGNvbW1vbk9iamVjdCkge1xuICAgIGNvbnN0IG1lbW9Jc29sYXRpb25TY29wZSA9IGNvbW1vbklzb2xhdGlvblNjb3BlTWFwLmdldChjb21tb25PYmplY3QpO1xuICAgIGlmIChtZW1vSXNvbGF0aW9uU2NvcGUpIHtcbiAgICAgIHJldHVybiBtZW1vSXNvbGF0aW9uU2NvcGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld0lzb2xhdGlvblNjb3BlID0gbmV3IGNvcmUuU2NvcGUoKTtcbiAgICAgIGNvbW1vbklzb2xhdGlvblNjb3BlTWFwLnNldChjb21tb25PYmplY3QsIG5ld0lzb2xhdGlvblNjb3BlKTtcbiAgICAgIHJldHVybiBuZXdJc29sYXRpb25TY29wZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBjb3JlLlNjb3BlKCk7XG4gIH1cbn1cblxubGV0IG5leHRqc0VzY2FwZWRBc3luY1N0b3JhZ2U7XG5cbi8qKlxuICogV2lsbCBtYXJrIHRoZSBleGVjdXRpb24gY29udGV4dCBvZiB0aGUgY2FsbGJhY2sgYXMgXCJlc2NhcGVkXCIgZnJvbSBOZXh0LmpzIGludGVybmFsIHRyYWNpbmcgYnkgdW5zZXR0aW5nIHRoZSBhY3RpdmVcbiAqIHNwYW4gYW5kIHByb3BhZ2F0aW9uIGNvbnRleHQuIFdoZW4gYW4gZXhlY3V0aW9uIHBhc3NlcyB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gbXVsdGlwbGUgdGltZXMsIGl0IGlzIGEgbm9vcCBhZnRlciB0aGVcbiAqIGZpcnN0IHRpbWUuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZU5leHRqc1RyYWNpbmcoY2IpIHtcbiAgY29uc3QgTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSA9IChjb3JlLkdMT0JBTF9PQkogKVxuICAgIC5Bc3luY0xvY2FsU3RvcmFnZTtcblxuICBpZiAoIU1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICBjb3JlLmRlYnVnLndhcm4oXG4gICAgICAgIFwiVHJpZWQgdG8gcmVnaXN0ZXIgQXN5bmNMb2NhbFN0b3JhZ2UgYXN5bmMgY29udGV4dCBzdHJhdGVneSBpbiBhIHJ1bnRpbWUgdGhhdCBkb2Vzbid0IHN1cHBvcnQgQXN5bmNMb2NhbFN0b3JhZ2UuXCIsXG4gICAgICApO1xuICAgIHJldHVybiBjYigpO1xuICB9XG5cbiAgaWYgKCFuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlKSB7XG4gICAgbmV4dGpzRXNjYXBlZEFzeW5jU3RvcmFnZSA9IG5ldyBNYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gIH1cblxuICBpZiAobmV4dGpzRXNjYXBlZEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvcmUuc3RhcnROZXdUcmFjZSgoKSA9PiB7XG4gICAgICByZXR1cm4gbmV4dGpzRXNjYXBlZEFzeW5jU3RvcmFnZS5ydW4odHJ1ZSwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2IoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogSWRlYWxseSB0aGlzIGZ1bmN0aW9uIG5ldmVyIGxhbmRzIGluIHRoZSBkZXZlbG9wIGJyYW5jaC5cbiAqXG4gKiBEcm9wcyB0aGUgZW50aXJlIHNwYW4gdHJlZSB0aGlzIGZ1bmN0aW9uIHdhcyBjYWxsZWQgaW4sIGlmIGl0IHdhcyBhIHNwYW4gdHJlZSBjcmVhdGVkIGJ5IE5leHQuanMuXG4gKi9cbmZ1bmN0aW9uIGRyb3BOZXh0anNSb290Q29udGV4dCgpIHtcbiAgY29uc3QgbmV4dEpzT3duZWRTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKCk7XG4gIGlmIChuZXh0SnNPd25lZFNwYW4pIHtcbiAgICBjb25zdCByb290U3BhbiA9IGNvcmUuZ2V0Um9vdFNwYW4obmV4dEpzT3duZWRTcGFuKTtcbiAgICBjb25zdCByb290U3BhbkF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04ocm9vdFNwYW4pLmRhdGE7XG4gICAgaWYgKHJvb3RTcGFuQXR0cmlidXRlcz8uWyduZXh0LnNwYW5fdHlwZSddKSB7XG4gICAgICBjb3JlLmdldFJvb3RTcGFuKG5leHRKc093bmVkU3Bhbik/LnNldEF0dHJpYnV0ZShzcGFuQXR0cmlidXRlc1dpdGhMb2dpY0F0dGFjaGVkLlRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04sIHRydWUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLmNvbW1vbk9iamVjdFRvSXNvbGF0aW9uU2NvcGUgPSBjb21tb25PYmplY3RUb0lzb2xhdGlvblNjb3BlO1xuZXhwb3J0cy5jb21tb25PYmplY3RUb1Byb3BhZ2F0aW9uQ29udGV4dCA9IGNvbW1vbk9iamVjdFRvUHJvcGFnYXRpb25Db250ZXh0O1xuZXhwb3J0cy5kcm9wTmV4dGpzUm9vdENvbnRleHQgPSBkcm9wTmV4dGpzUm9vdENvbnRleHQ7XG5leHBvcnRzLmVzY2FwZU5leHRqc1RyYWNpbmcgPSBlc2NhcGVOZXh0anNUcmFjaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZ1V0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst HeaderKeys = {\n  FORWARDED_PROTO: 'x-forwarded-proto',\n  FORWARDED_HOST: 'x-forwarded-host',\n  HOST: 'host',\n  REFERER: 'referer',\n} ;\n\n/**\n * Replaces route parameters in a path template with their values\n * @param path - The path template containing parameters in [paramName] format\n * @param params - Optional route parameters to replace in the template\n * @returns The path with parameters replaced\n */\nfunction substituteRouteParams(path, params) {\n  if (!params || typeof params !== 'object') return path;\n\n  let resultPath = path;\n  for (const [key, value] of Object.entries(params)) {\n    resultPath = resultPath.split(`[${key}]`).join(encodeURIComponent(value));\n  }\n  return resultPath;\n}\n\n/**\n * Normalizes a path by removing route groups\n * @param path - The path to normalize\n * @returns The normalized path\n */\nfunction sanitizeRoutePath(path) {\n  const cleanedSegments = path\n    .split('/')\n    .filter(segment => segment && !(segment.startsWith('(') && segment.endsWith(')')));\n\n  return cleanedSegments.length > 0 ? `/${cleanedSegments.join('/')}` : '/';\n}\n\n/**\n * Constructs a full URL from the component route, parameters, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol and host information\n * @param pathname - Optional pathname coming from parent span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction buildUrlFromComponentRoute(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const parameterizedPath = substituteRouteParams(componentRoute, params);\n  // If available, the pathname from the http.target of the HTTP request server span takes precedence over the parameterized path.\n  // Spans such as generateMetadata and Server Component rendering are typically direct children of that span.\n  const path = pathname ?? sanitizeRoutePath(parameterizedPath);\n\n  const protocol = headersDict?.[HeaderKeys.FORWARDED_PROTO];\n  const host = headersDict?.[HeaderKeys.FORWARDED_HOST] || headersDict?.[HeaderKeys.HOST];\n\n  if (!protocol || !host) {\n    return path;\n  }\n\n  const fullUrl = `${protocol}://${host}${path}`;\n\n  const urlObject = core.parseStringToURLObject(fullUrl);\n  if (!urlObject) {\n    return path;\n  }\n\n  return core.getSanitizedUrlStringFromUrlObject(urlObject);\n}\n\n/**\n * Returns a sanitized URL string from the referer header if it exists and is valid.\n *\n * @param headersDict - Optional headers containing the referer\n * @returns A sanitized URL string or undefined if referer is missing/invalid\n */\nfunction extractSanitizedUrlFromRefererHeader(headersDict) {\n  const referer = headersDict?.[HeaderKeys.REFERER];\n  if (!referer) {\n    return undefined;\n  }\n\n  try {\n    const refererUrl = new URL(referer);\n    return core.getSanitizedUrlStringFromUrlObject(refererUrl);\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Returns a sanitized URL string using the referer header if available,\n * otherwise constructs the URL from the component route, params, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol, host, and referer\n * @param pathname - Optional pathname coming from root span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction getSanitizedRequestUrl(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const refererUrl = extractSanitizedUrlFromRefererHeader(headersDict);\n  if (refererUrl) {\n    return refererUrl;\n  }\n\n  return buildUrlFromComponentRoute(componentRoute, params, headersDict, pathname);\n}\n\nexports.buildUrlFromComponentRoute = buildUrlFromComponentRoute;\nexports.extractSanitizedUrlFromRefererHeader = extractSanitizedUrlFromRefererHeader;\nexports.getSanitizedRequestUrl = getSanitizedRequestUrl;\nexports.sanitizeRoutePath = sanitizeRoutePath;\nexports.substituteRouteParams = substituteRouteParams;\n//# sourceMappingURL=urls.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvdXJscy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0MsSUFBSTtBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBDQUEwQywwQkFBMEI7QUFDcEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVMsS0FBSyxLQUFLLEVBQUUsS0FBSzs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQyw0Q0FBNEM7QUFDNUMsOEJBQThCO0FBQzlCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy91cmxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IEhlYWRlcktleXMgPSB7XG4gIEZPUldBUkRFRF9QUk9UTzogJ3gtZm9yd2FyZGVkLXByb3RvJyxcbiAgRk9SV0FSREVEX0hPU1Q6ICd4LWZvcndhcmRlZC1ob3N0JyxcbiAgSE9TVDogJ2hvc3QnLFxuICBSRUZFUkVSOiAncmVmZXJlcicsXG59IDtcblxuLyoqXG4gKiBSZXBsYWNlcyByb3V0ZSBwYXJhbWV0ZXJzIGluIGEgcGF0aCB0ZW1wbGF0ZSB3aXRoIHRoZWlyIHZhbHVlc1xuICogQHBhcmFtIHBhdGggLSBUaGUgcGF0aCB0ZW1wbGF0ZSBjb250YWluaW5nIHBhcmFtZXRlcnMgaW4gW3BhcmFtTmFtZV0gZm9ybWF0XG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyB0byByZXBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICogQHJldHVybnMgVGhlIHBhdGggd2l0aCBwYXJhbWV0ZXJzIHJlcGxhY2VkXG4gKi9cbmZ1bmN0aW9uIHN1YnN0aXR1dGVSb3V0ZVBhcmFtcyhwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKCFwYXJhbXMgfHwgdHlwZW9mIHBhcmFtcyAhPT0gJ29iamVjdCcpIHJldHVybiBwYXRoO1xuXG4gIGxldCByZXN1bHRQYXRoID0gcGF0aDtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgIHJlc3VsdFBhdGggPSByZXN1bHRQYXRoLnNwbGl0KGBbJHtrZXl9XWApLmpvaW4oZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFBhdGg7XG59XG5cbi8qKlxuICogTm9ybWFsaXplcyBhIHBhdGggYnkgcmVtb3Zpbmcgcm91dGUgZ3JvdXBzXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMgVGhlIG5vcm1hbGl6ZWQgcGF0aFxuICovXG5mdW5jdGlvbiBzYW5pdGl6ZVJvdXRlUGF0aChwYXRoKSB7XG4gIGNvbnN0IGNsZWFuZWRTZWdtZW50cyA9IHBhdGhcbiAgICAuc3BsaXQoJy8nKVxuICAgIC5maWx0ZXIoc2VnbWVudCA9PiBzZWdtZW50ICYmICEoc2VnbWVudC5zdGFydHNXaXRoKCcoJykgJiYgc2VnbWVudC5lbmRzV2l0aCgnKScpKSk7XG5cbiAgcmV0dXJuIGNsZWFuZWRTZWdtZW50cy5sZW5ndGggPiAwID8gYC8ke2NsZWFuZWRTZWdtZW50cy5qb2luKCcvJyl9YCA6ICcvJztcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgZnVsbCBVUkwgZnJvbSB0aGUgY29tcG9uZW50IHJvdXRlLCBwYXJhbWV0ZXJzLCBhbmQgaGVhZGVycy5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50Um91dGUgLSBUaGUgcm91dGUgdGVtcGxhdGUgdG8gY29uc3RydWN0IHRoZSBVUkwgZnJvbVxuICogQHBhcmFtIHBhcmFtcyAtIE9wdGlvbmFsIHJvdXRlIHBhcmFtZXRlcnMgdG8gcmVwbGFjZSBpbiB0aGUgdGVtcGxhdGVcbiAqIEBwYXJhbSBoZWFkZXJzRGljdCAtIE9wdGlvbmFsIGhlYWRlcnMgY29udGFpbmluZyBwcm90b2NvbCBhbmQgaG9zdCBpbmZvcm1hdGlvblxuICogQHBhcmFtIHBhdGhuYW1lIC0gT3B0aW9uYWwgcGF0aG5hbWUgY29taW5nIGZyb20gcGFyZW50IHNwYW4gXCJodHRwLnRhcmdldFwiXG4gKiBAcmV0dXJucyBBIHNhbml0aXplZCBVUkwgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkVXJsRnJvbUNvbXBvbmVudFJvdXRlKFxuICBjb21wb25lbnRSb3V0ZSxcbiAgcGFyYW1zLFxuICBoZWFkZXJzRGljdCxcbiAgcGF0aG5hbWUsXG4pIHtcbiAgY29uc3QgcGFyYW1ldGVyaXplZFBhdGggPSBzdWJzdGl0dXRlUm91dGVQYXJhbXMoY29tcG9uZW50Um91dGUsIHBhcmFtcyk7XG4gIC8vIElmIGF2YWlsYWJsZSwgdGhlIHBhdGhuYW1lIGZyb20gdGhlIGh0dHAudGFyZ2V0IG9mIHRoZSBIVFRQIHJlcXVlc3Qgc2VydmVyIHNwYW4gdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoZSBwYXJhbWV0ZXJpemVkIHBhdGguXG4gIC8vIFNwYW5zIHN1Y2ggYXMgZ2VuZXJhdGVNZXRhZGF0YSBhbmQgU2VydmVyIENvbXBvbmVudCByZW5kZXJpbmcgYXJlIHR5cGljYWxseSBkaXJlY3QgY2hpbGRyZW4gb2YgdGhhdCBzcGFuLlxuICBjb25zdCBwYXRoID0gcGF0aG5hbWUgPz8gc2FuaXRpemVSb3V0ZVBhdGgocGFyYW1ldGVyaXplZFBhdGgpO1xuXG4gIGNvbnN0IHByb3RvY29sID0gaGVhZGVyc0RpY3Q/LltIZWFkZXJLZXlzLkZPUldBUkRFRF9QUk9UT107XG4gIGNvbnN0IGhvc3QgPSBoZWFkZXJzRGljdD8uW0hlYWRlcktleXMuRk9SV0FSREVEX0hPU1RdIHx8IGhlYWRlcnNEaWN0Py5bSGVhZGVyS2V5cy5IT1NUXTtcblxuICBpZiAoIXByb3RvY29sIHx8ICFob3N0KSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICBjb25zdCBmdWxsVXJsID0gYCR7cHJvdG9jb2x9Oi8vJHtob3N0fSR7cGF0aH1gO1xuXG4gIGNvbnN0IHVybE9iamVjdCA9IGNvcmUucGFyc2VTdHJpbmdUb1VSTE9iamVjdChmdWxsVXJsKTtcbiAgaWYgKCF1cmxPYmplY3QpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIHJldHVybiBjb3JlLmdldFNhbml0aXplZFVybFN0cmluZ0Zyb21VcmxPYmplY3QodXJsT2JqZWN0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2FuaXRpemVkIFVSTCBzdHJpbmcgZnJvbSB0aGUgcmVmZXJlciBoZWFkZXIgaWYgaXQgZXhpc3RzIGFuZCBpcyB2YWxpZC5cbiAqXG4gKiBAcGFyYW0gaGVhZGVyc0RpY3QgLSBPcHRpb25hbCBoZWFkZXJzIGNvbnRhaW5pbmcgdGhlIHJlZmVyZXJcbiAqIEByZXR1cm5zIEEgc2FuaXRpemVkIFVSTCBzdHJpbmcgb3IgdW5kZWZpbmVkIGlmIHJlZmVyZXIgaXMgbWlzc2luZy9pbnZhbGlkXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RTYW5pdGl6ZWRVcmxGcm9tUmVmZXJlckhlYWRlcihoZWFkZXJzRGljdCkge1xuICBjb25zdCByZWZlcmVyID0gaGVhZGVyc0RpY3Q/LltIZWFkZXJLZXlzLlJFRkVSRVJdO1xuICBpZiAoIXJlZmVyZXIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZWZlcmVyVXJsID0gbmV3IFVSTChyZWZlcmVyKTtcbiAgICByZXR1cm4gY29yZS5nZXRTYW5pdGl6ZWRVcmxTdHJpbmdGcm9tVXJsT2JqZWN0KHJlZmVyZXJVcmwpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNhbml0aXplZCBVUkwgc3RyaW5nIHVzaW5nIHRoZSByZWZlcmVyIGhlYWRlciBpZiBhdmFpbGFibGUsXG4gKiBvdGhlcndpc2UgY29uc3RydWN0cyB0aGUgVVJMIGZyb20gdGhlIGNvbXBvbmVudCByb3V0ZSwgcGFyYW1zLCBhbmQgaGVhZGVycy5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50Um91dGUgLSBUaGUgcm91dGUgdGVtcGxhdGUgdG8gY29uc3RydWN0IHRoZSBVUkwgZnJvbVxuICogQHBhcmFtIHBhcmFtcyAtIE9wdGlvbmFsIHJvdXRlIHBhcmFtZXRlcnMgdG8gcmVwbGFjZSBpbiB0aGUgdGVtcGxhdGVcbiAqIEBwYXJhbSBoZWFkZXJzRGljdCAtIE9wdGlvbmFsIGhlYWRlcnMgY29udGFpbmluZyBwcm90b2NvbCwgaG9zdCwgYW5kIHJlZmVyZXJcbiAqIEBwYXJhbSBwYXRobmFtZSAtIE9wdGlvbmFsIHBhdGhuYW1lIGNvbWluZyBmcm9tIHJvb3Qgc3BhbiBcImh0dHAudGFyZ2V0XCJcbiAqIEByZXR1cm5zIEEgc2FuaXRpemVkIFVSTCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZ2V0U2FuaXRpemVkUmVxdWVzdFVybChcbiAgY29tcG9uZW50Um91dGUsXG4gIHBhcmFtcyxcbiAgaGVhZGVyc0RpY3QsXG4gIHBhdGhuYW1lLFxuKSB7XG4gIGNvbnN0IHJlZmVyZXJVcmwgPSBleHRyYWN0U2FuaXRpemVkVXJsRnJvbVJlZmVyZXJIZWFkZXIoaGVhZGVyc0RpY3QpO1xuICBpZiAocmVmZXJlclVybCkge1xuICAgIHJldHVybiByZWZlcmVyVXJsO1xuICB9XG5cbiAgcmV0dXJuIGJ1aWxkVXJsRnJvbUNvbXBvbmVudFJvdXRlKGNvbXBvbmVudFJvdXRlLCBwYXJhbXMsIGhlYWRlcnNEaWN0LCBwYXRobmFtZSk7XG59XG5cbmV4cG9ydHMuYnVpbGRVcmxGcm9tQ29tcG9uZW50Um91dGUgPSBidWlsZFVybEZyb21Db21wb25lbnRSb3V0ZTtcbmV4cG9ydHMuZXh0cmFjdFNhbml0aXplZFVybEZyb21SZWZlcmVySGVhZGVyID0gZXh0cmFjdFNhbml0aXplZFVybEZyb21SZWZlcmVySGVhZGVyO1xuZXhwb3J0cy5nZXRTYW5pdGl6ZWRSZXF1ZXN0VXJsID0gZ2V0U2FuaXRpemVkUmVxdWVzdFVybDtcbmV4cG9ydHMuc2FuaXRpemVSb3V0ZVBhdGggPSBzYW5pdGl6ZVJvdXRlUGF0aDtcbmV4cG9ydHMuc3Vic3RpdHV0ZVJvdXRlUGFyYW1zID0gc3Vic3RpdHV0ZVJvdXRlUGFyYW1zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(\n  origFunction,\n) {\n  return async function ( ...origFunctionArguments) {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      core.captureException(e, {\n        // TODO: check if origFunction.name actually returns the correct name or minified garbage\n        // in this case, we can add another argument to this wrapper with the respective function name\n        mechanism: { handled: false, type: 'auto.function.nextjs.wrapped', data: { function: origFunction.name } },\n      });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(\n  origDataFetcher,\n  req,\n  res,\n  options\n\n,\n) {\n  return async function (\n\n    ...args\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(req);\n    core.getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const span = core.getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = core.getRootSpan(span);\n      root.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = core.getTraceData();\n\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args),\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(\n  origFunction,\n  origFunctionArgs,\n) {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    core.captureException(e, { mechanism: { handled: false, type: 'auto.function.nextjs.data_fetcher' } });\n    throw e;\n  }\n}\n\n/**\n * Extracts the params and searchParams from the props object.\n *\n * Depending on the next version, params and searchParams may be a promise which we do not want to resolve in this function.\n */\nfunction maybeExtractSynchronousParamsAndSearchParams(props)\n\n {\n  let params =\n    props && typeof props === 'object' && 'params' in props\n      ? (props.params )\n      : undefined;\n  if (core.isThenable(params)) {\n    params = undefined;\n  }\n\n  let searchParams =\n    props && typeof props === 'object' && 'searchParams' in props\n      ? (props.searchParams )\n      : undefined;\n  if (core.isThenable(searchParams)) {\n    searchParams = undefined;\n  }\n\n  return { params, searchParams };\n}\n\nexports.callDataFetcherTraced = callDataFetcherTraced;\nexports.maybeExtractSynchronousParamsAndSearchParams = maybeExtractSynchronousParamsAndSearchParams;\nexports.withErrorInstrumentation = withErrorInstrumentation;\nexports.withTracedServerSideDataFetcher = withTracedServerSideDataFetcher;\n//# sourceMappingURL=wrapperUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nfunction withServerActionInstrumentation(\n  ...args\n) {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(\n  serverActionName,\n  options,\n  callback,\n) {\n  return core.withIsolationScope(async isolationScope => {\n    const sendDefaultPii = core.getClient()?.getOptions().sendDefaultPii;\n\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject = {};\n    try {\n      const awaitedHeaders = await options.headers;\n      sentryTraceHeader = awaitedHeaders?.get('sentry-trace') ?? undefined;\n      baggageHeader = awaitedHeaders?.get('baggage');\n      awaitedHeaders?.forEach((value, key) => {\n        fullHeadersObject[key] = value;\n      });\n    } catch {\n      debugBuild.DEBUG_BUILD &&\n        core.debug.warn(\n          \"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\",\n        );\n    }\n\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject,\n      } ,\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = core.getActiveSpan()\n      ? (_opts, callback) => callback()\n      : core.continueTrace;\n\n    return continueTraceIfNoActiveSpan(\n      {\n        sentryTrace: sentryTraceHeader,\n        baggage: baggageHeader,\n      },\n      async () => {\n        try {\n          return await core.startSpan(\n            {\n              op: 'function.server_action',\n              name: `serverAction/${serverActionName}`,\n              forceTransaction: true,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.server_action',\n              },\n            },\n            async span => {\n              const result = await core.handleCallbackErrors(callback, error => {\n                if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  // We don't want to report \"not-found\"s\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                  // Don't do anything for redirects\n                } else {\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                      type: 'auto.function.nextjs.server_action',\n                    },\n                  });\n                }\n              });\n\n              if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                core.getIsolationScope().setExtra('server_action_result', result);\n              }\n\n              if (options.formData) {\n                options.formData.forEach((value, key) => {\n                  core.getIsolationScope().setExtra(\n                    `server_action_form_data.${key}`,\n                    typeof value === 'string' ? value : '[non-string value]',\n                  );\n                });\n              }\n\n              return result;\n            },\n          );\n        } finally {\n          core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n        }\n      },\n    );\n  });\n}\n\nexports.withServerActionInstrumentation = withServerActionInstrumentation;\n//# sourceMappingURL=withServerActionInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapGenerationFunctionWithSentry(\n  generationFunction,\n  context,\n) {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      let headers = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch {\n        /** empty */\n      }\n\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(headers);\n      let pathname = undefined ;\n\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target'] ;\n        }\n      }\n\n      const headersDict = headers ? core.winterCGHeadersToDict(headers) : undefined;\n\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        addHeadersAsAttributes.addHeadersAsAttributes(headers, rootSpan);\n      }\n\n      let data = undefined;\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params, searchParams } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        data = { params, searchParams };\n      }\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n              url: urls.getSanitizedRequestUrl(\n                componentRoute,\n                data?.params ,\n                headersDict,\n                pathname,\n              ),\n            } ,\n          });\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = tracingUtils.commonObjectToPropagationContext(\n            headers,\n            core.propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(err, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.generation_function',\n                        data: {\n                          function: generationFunctionIdentifier,\n                        },\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry;\n//# sourceMappingURL=wrapGenerationFunctionWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nfunction wrapMiddlewareWithSentry(\n  middleware,\n) {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      const tunnelRoute =\n        '_sentryRewritesTunnelPath' in globalThis\n          ? (globalThis )._sentryRewritesTunnelPath\n          : undefined;\n\n      if (tunnelRoute && typeof tunnelRoute === 'string') {\n        const req = args[0];\n        // Check if the current request matches the tunnel route\n        if (req instanceof Request) {\n          const url = new URL(req.url);\n          const isTunnelRequest = url.pathname.startsWith(tunnelRoute);\n\n          if (isTunnelRequest) {\n            // Create a simple response that mimics NextResponse.next() so we don't need to import internals here\n            // which breaks next 13 apps\n            // https://github.com/vercel/next.js/blob/c12c9c1f78ad384270902f0890dc4cd341408105/packages/next/src/server/web/spec-extension/response.ts#L146\n            return new Response(null, {\n              status: 200,\n              headers: {\n                'x-middleware-next': '1',\n              },\n            }) ;\n          }\n        }\n      }\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return core.withIsolationScope(isolationScope => {\n        const req = args[0];\n        const currentScope = core.getCurrentScope();\n\n        let spanName;\n        let spanSource;\n        let headerAttributes = {};\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: core.winterCGRequestToRequestData(req),\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n\n          headerAttributes = addHeadersAsAttributes.addHeadersAsAttributes(req.headers);\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n\n        currentScope.setTransactionName(spanName);\n\n        const activeSpan = core.getActiveSpan();\n\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n\n          const rootSpan = core.getRootSpan(activeSpan);\n          if (rootSpan) {\n            core.setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n            rootSpan.setAttributes(headerAttributes);\n          }\n        }\n\n        return core.startSpan(\n          {\n            name: spanName,\n            op: 'http.server.middleware',\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrap_middleware',\n              ...headerAttributes,\n            },\n          },\n          () => {\n            return core.handleCallbackErrors(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                core.captureException(error, {\n                  mechanism: {\n                    type: 'auto.function.nextjs.wrap_middleware',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry;\n//# sourceMappingURL=wrapMiddlewareWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQywrQkFBK0IsbUJBQU8sQ0FBQyxzUkFBbUM7QUFDMUUsb0JBQW9CLG1CQUFPLENBQUMsZ1FBQXdCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsbUNBQW1DLFlBQVksRUFBRSwwQkFBMEI7QUFDM0U7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi91dGlscy9hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4vdXRpbHMvcmVzcG9uc2VFbmQuanMnKTtcblxuLyoqXG4gKiBXcmFwcyBOZXh0LmpzIG1pZGRsZXdhcmUgd2l0aCBTZW50cnkgZXJyb3IgYW5kIHBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gbWlkZGxld2FyZSBUaGUgbWlkZGxld2FyZSBoYW5kbGVyLlxuICogQHJldHVybnMgYSB3cmFwcGVkIG1pZGRsZXdhcmUgaGFuZGxlci5cbiAqL1xuZnVuY3Rpb24gd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5KFxuICBtaWRkbGV3YXJlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkobWlkZGxld2FyZSwge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHR1bm5lbFJvdXRlID1cbiAgICAgICAgJ19zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGgnIGluIGdsb2JhbFRoaXNcbiAgICAgICAgICA/IChnbG9iYWxUaGlzICkuX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodHVubmVsUm91dGUgJiYgdHlwZW9mIHR1bm5lbFJvdXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCByZXEgPSBhcmdzWzBdO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCByZXF1ZXN0IG1hdGNoZXMgdGhlIHR1bm5lbCByb3V0ZVxuICAgICAgICBpZiAocmVxIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxLnVybCk7XG4gICAgICAgICAgY29uc3QgaXNUdW5uZWxSZXF1ZXN0ID0gdXJsLnBhdGhuYW1lLnN0YXJ0c1dpdGgodHVubmVsUm91dGUpO1xuXG4gICAgICAgICAgaWYgKGlzVHVubmVsUmVxdWVzdCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgc2ltcGxlIHJlc3BvbnNlIHRoYXQgbWltaWNzIE5leHRSZXNwb25zZS5uZXh0KCkgc28gd2UgZG9uJ3QgbmVlZCB0byBpbXBvcnQgaW50ZXJuYWxzIGhlcmVcbiAgICAgICAgICAgIC8vIHdoaWNoIGJyZWFrcyBuZXh0IDEzIGFwcHNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9ibG9iL2MxMmM5YzFmNzhhZDM4NDI3MDkwMmYwODkwZGM0Y2QzNDE0MDgxMDUvcGFja2FnZXMvbmV4dC9zcmMvc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9yZXNwb25zZS50cyNMMTQ2XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAneC1taWRkbGV3YXJlLW5leHQnOiAnMScsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBUT0RPOiBXZSBzdGlsbCBzaG91bGQgYWRkIGNlbnRyYWwgaXNvbGF0aW9uIHNjb3BlIGNyZWF0aW9uIGZvciB3aGVuIG91ciBidWlsZC10aW1lIGluc3RydW1lbnRhdGlvbiBkb2VzIG5vdCB3b3JrIGFueW1vcmUgd2l0aCB0dXJib3BhY2suXG4gICAgICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoaXNvbGF0aW9uU2NvcGUgPT4ge1xuICAgICAgICBjb25zdCByZXEgPSBhcmdzWzBdO1xuICAgICAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBjb3JlLmdldEN1cnJlbnRTY29wZSgpO1xuXG4gICAgICAgIGxldCBzcGFuTmFtZTtcbiAgICAgICAgbGV0IHNwYW5Tb3VyY2U7XG4gICAgICAgIGxldCBoZWFkZXJBdHRyaWJ1dGVzID0ge307XG5cbiAgICAgICAgaWYgKHJlcSBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgICAgICBpc29sYXRpb25TY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IGNvcmUud2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YShyZXEpLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNwYW5OYW1lID0gYG1pZGRsZXdhcmUgJHtyZXEubWV0aG9kfSAke25ldyBVUkwocmVxLnVybCkucGF0aG5hbWV9YDtcbiAgICAgICAgICBzcGFuU291cmNlID0gJ3VybCc7XG5cbiAgICAgICAgICBoZWFkZXJBdHRyaWJ1dGVzID0gYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzKHJlcS5oZWFkZXJzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGFuTmFtZSA9ICdtaWRkbGV3YXJlJztcbiAgICAgICAgICBzcGFuU291cmNlID0gJ2NvbXBvbmVudCc7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKHNwYW5OYW1lKTtcblxuICAgICAgICBjb25zdCBhY3RpdmVTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKCk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBhY3RpdmUgc3BhbiwgaXQgbGlrZWx5IG1lYW5zIHRoYXQgdGhlIGF1dG9tYXRpYyBOZXh0LmpzIE9URUwgaW5zdHJ1bWVudGF0aW9uIHdvcmtlZCBhbmQgd2UgY2FuXG4gICAgICAgICAgLy8gcmVseSBvbiB0aGF0IGZvciBwYXJhbWV0ZXJpemF0aW9uLlxuICAgICAgICAgIHNwYW5OYW1lID0gJ21pZGRsZXdhcmUnO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAnY29tcG9uZW50JztcblxuICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihhY3RpdmVTcGFuKTtcbiAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgIGNvcmUuc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4ocm9vdFNwYW4sIGN1cnJlbnRTY29wZSwgaXNvbGF0aW9uU2NvcGUpO1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlcyhoZWFkZXJBdHRyaWJ1dGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29yZS5zdGFydFNwYW4oXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogc3Bhbk5hbWUsXG4gICAgICAgICAgICBvcDogJ2h0dHAuc2VydmVyLm1pZGRsZXdhcmUnLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV06IHNwYW5Tb3VyY2UsXG4gICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLndyYXBfbWlkZGxld2FyZScsXG4gICAgICAgICAgICAgIC4uLmhlYWRlckF0dHJpYnV0ZXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmUuaGFuZGxlQ2FsbGJhY2tFcnJvcnMoXG4gICAgICAgICAgICAgICgpID0+IHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpLFxuICAgICAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLndyYXBfbWlkZGxld2FyZScsXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvcmUudmVyY2VsV2FpdFVudGlsKHJlc3BvbnNlRW5kLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwTWlkZGxld2FyZVdpdGhTZW50cnkgPSB3cmFwTWlkZGxld2FyZVdpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(\n  routeHandler,\n  context,\n) {\n  const { method, parameterizedRoute, headers } = context;\n\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = core.getActiveSpan();\n      const rootSpan = activeSpan ? core.getRootSpan(activeSpan) : undefined;\n\n      if (rootSpan && \"nodejs\" !== 'edge') {\n        addHeadersAsAttributes.addHeadersAsAttributes(headers, rootSpan);\n      }\n\n      let edgeRuntimeIsolationScopeOverride;\n      if (rootSpan && \"nodejs\" === 'edge') {}\n\n      return core.withIsolationScope(\n         false ? 0 : core.getIsolationScope(),\n        () => {\n          return core.withScope(async scope => {\n            scope.setTransactionName(`${method} ${parameterizedRoute}`);\n\n            if (false) {}\n\n            const response = await core.handleCallbackErrors(\n              () => originalFunction.apply(thisArg, args),\n              error => {\n                // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                if (nextNavigationErrorUtils.isRedirectNavigationError(error)) ; else if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  if (activeSpan) {\n                    core.setHttpStatus(activeSpan, 404);\n                  }\n                  if (rootSpan) {\n                    core.setHttpStatus(rootSpan, 404);\n                  }\n                } else {\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                      type: 'auto.function.nextjs.route_handler',\n                    },\n                  });\n                }\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n\n            try {\n              if (response.status) {\n                if (activeSpan) {\n                  core.setHttpStatus(activeSpan, response.status);\n                }\n                if (rootSpan) {\n                  core.setHttpStatus(rootSpan, response.status);\n                }\n              }\n            } catch {\n              // best effort - response may be undefined?\n            }\n\n            return response;\n          });\n        },\n      );\n    },\n  });\n}\n\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry;\n//# sourceMappingURL=wrapRouteHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLGlDQUFpQyxtQkFBTyxDQUFDLDhRQUErQjtBQUN4RSwrQkFBK0IsbUJBQU8sQ0FBQyxzUkFBbUM7QUFDMUUsb0JBQW9CLG1CQUFPLENBQUMsZ1FBQXdCO0FBQ3BELHFCQUFxQixtQkFBTyxDQUFDLGtRQUF5Qjs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNDQUFzQzs7QUFFaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLFFBQXdCO0FBQzlDO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsUUFBd0IsYUFBYSxFQVdwRDs7QUFFUDtBQUNBLFFBQVEsTUFBbUMsR0FBRyxDQUFpQztBQUMvRTtBQUNBO0FBQ0Esd0NBQXdDLFFBQVEsRUFBRSxtQkFBbUI7O0FBRXJFLGdCQUFnQixLQUFtQyxFQUFFLEVBYXhDOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3dyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMgPSByZXF1aXJlKCcuL25leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcycpO1xuY29uc3QgYWRkSGVhZGVyc0FzQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vdXRpbHMvYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5qcycpO1xuY29uc3QgcmVzcG9uc2VFbmQgPSByZXF1aXJlKCcuL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5jb25zdCB0cmFjaW5nVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3RyYWNpbmdVdGlscy5qcycpO1xuXG4vKipcbiAqIFdyYXBzIGEgTmV4dC5qcyBBcHAgUm91dGVyIFJvdXRlIGhhbmRsZXIgd2l0aCBTZW50cnkgZXJyb3IgYW5kIHBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqXG4gKiBOT1RJQ0U6IFRoaXMgd3JhcHBlciBpcyBmb3IgQXBwIFJvdXRlciBBUEkgcm91dGVzLiBJZiB5b3UgYXJlIGxvb2tpbmcgdG8gd3JhcCBQYWdlcyBSb3V0ZXIgQVBJIHJvdXRlcyB1c2UgYHdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeWAgaW5zdGVhZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHdyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5KFxuICByb3V0ZUhhbmRsZXIsXG4gIGNvbnRleHQsXG4pIHtcbiAgY29uc3QgeyBtZXRob2QsIHBhcmFtZXRlcml6ZWRSb3V0ZSwgaGVhZGVycyB9ID0gY29udGV4dDtcblxuICByZXR1cm4gbmV3IFByb3h5KHJvdXRlSGFuZGxlciwge1xuICAgIGFwcGx5OiBhc3luYyAob3JpZ2luYWxGdW5jdGlvbiwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlU3BhbiA9IGNvcmUuZ2V0QWN0aXZlU3BhbigpO1xuICAgICAgY29uc3Qgcm9vdFNwYW4gPSBhY3RpdmVTcGFuID8gY29yZS5nZXRSb290U3BhbihhY3RpdmVTcGFuKSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHJvb3RTcGFuICYmIHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSAhPT0gJ2VkZ2UnKSB7XG4gICAgICAgIGFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMuYWRkSGVhZGVyc0FzQXR0cmlidXRlcyhoZWFkZXJzLCByb290U3Bhbik7XG4gICAgICB9XG5cbiAgICAgIGxldCBlZGdlUnVudGltZUlzb2xhdGlvblNjb3BlT3ZlcnJpZGU7XG4gICAgICBpZiAocm9vdFNwYW4gJiYgcHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSAnZWRnZScpIHtcbiAgICAgICAgY29uc3QgaXNvbGF0aW9uU2NvcGUgPSB0cmFjaW5nVXRpbHMuY29tbW9uT2JqZWN0VG9Jc29sYXRpb25TY29wZShoZWFkZXJzKTtcbiAgICAgICAgY29uc3QgeyBzY29wZSB9ID0gY29yZS5nZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3Bhbik7XG4gICAgICAgIGNvcmUuc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4ocm9vdFNwYW4sIHNjb3BlID8/IG5ldyBjb3JlLlNjb3BlKCksIGlzb2xhdGlvblNjb3BlKTtcblxuICAgICAgICBlZGdlUnVudGltZUlzb2xhdGlvblNjb3BlT3ZlcnJpZGUgPSBpc29sYXRpb25TY29wZTtcblxuICAgICAgICByb290U3Bhbi51cGRhdGVOYW1lKGAke21ldGhvZH0gJHtwYXJhbWV0ZXJpemVkUm91dGV9YCk7XG4gICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFLCAncm91dGUnKTtcbiAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2h0dHAuc2VydmVyJyk7XG4gICAgICAgIGFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMuYWRkSGVhZGVyc0FzQXR0cmlidXRlcyhoZWFkZXJzLCByb290U3Bhbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb3JlLndpdGhJc29sYXRpb25TY29wZShcbiAgICAgICAgcHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSAnZWRnZScgPyBlZGdlUnVudGltZUlzb2xhdGlvblNjb3BlT3ZlcnJpZGUgOiBjb3JlLmdldElzb2xhdGlvblNjb3BlKCksXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gY29yZS53aXRoU2NvcGUoYXN5bmMgc2NvcGUgPT4ge1xuICAgICAgICAgICAgc2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGAke21ldGhvZH0gJHtwYXJhbWV0ZXJpemVkUm91dGV9YCk7XG5cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5ORVhUX1JVTlRJTUUgPT09ICdlZGdlJykge1xuICAgICAgICAgICAgICBjb25zdCBjb21wbGV0ZUhlYWRlcnNEaWN0ID0gaGVhZGVycyA/IGNvcmUud2ludGVyQ0dIZWFkZXJzVG9EaWN0KGhlYWRlcnMpIDoge307XG4gICAgICAgICAgICAgIGNvbnN0IGluY29taW5nUHJvcGFnYXRpb25Db250ZXh0ID0gY29yZS5wcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyhcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUhlYWRlcnNEaWN0WydzZW50cnktdHJhY2UnXSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUhlYWRlcnNEaWN0WydiYWdnYWdlJ10sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHNjb3BlLnNldFByb3BhZ2F0aW9uQ29udGV4dChpbmNvbWluZ1Byb3BhZ2F0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICAgIHNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IHtcbiAgICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGNvbXBsZXRlSGVhZGVyc0RpY3QsXG4gICAgICAgICAgICAgICAgfSAsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvcmUuaGFuZGxlQ2FsbGJhY2tFcnJvcnMoXG4gICAgICAgICAgICAgICgpID0+IG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpc0FyZywgYXJncyksXG4gICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAvLyBOZXh0LmpzIHRocm93cyBlcnJvcnMgd2hlbiBjYWxsaW5nIGByZWRpcmVjdCgpYC4gV2UgZG9uJ3Qgd2FubmEgcmVwb3J0IHRoZXNlLlxuICAgICAgICAgICAgICAgIGlmIChuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvcihlcnJvcikpIDsgZWxzZSBpZiAobmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBjb3JlLnNldEh0dHBTdGF0dXMoYWN0aXZlU3BhbiwgNDA0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChyb290U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBjb3JlLnNldEh0dHBTdGF0dXMocm9vdFNwYW4sIDQwNCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5uZXh0anMucm91dGVfaGFuZGxlcicsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb3JlLnZlcmNlbFdhaXRVbnRpbChyZXNwb25zZUVuZC5mbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTcGFuKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlLnNldEh0dHBTdGF0dXMoYWN0aXZlU3BhbiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvb3RTcGFuKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlLnNldEh0dHBTdGF0dXMocm9vdFNwYW4sIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgLy8gYmVzdCBlZmZvcnQgLSByZXNwb25zZSBtYXkgYmUgdW5kZWZpbmVkP1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5ID0gd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js":
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js ***!
  \***************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(\n  appDirComponent,\n  context,\n) {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(context.headers);\n\n      let pathname = undefined ;\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target']?.toString();\n        }\n      }\n\n      const headersDict = context.headers ? core.winterCGHeadersToDict(context.headers) : undefined;\n\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        addHeadersAsAttributes.addHeadersAsAttributes(context.headers, rootSpan);\n      }\n\n      let params = undefined;\n\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params: paramsFromProps } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        params = paramsFromProps;\n      }\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n          url: urls.getSanitizedRequestUrl(componentRoute, params, headersDict, pathname),\n        } ,\n      });\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (false) {}\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.server_component',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(error, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.server_component',\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry;\n//# sourceMappingURL=wrapServerComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst LOGGER_PREFIXES = {\n  'webpack-nodejs': '[@sentry/nextjs - Node.js]',\n  'webpack-edge': '[@sentry/nextjs - Edge]',\n  'webpack-client': '[@sentry/nextjs - Client]',\n  'after-production-compile-webpack': '[@sentry/nextjs - After Production Compile (Webpack)]',\n  'after-production-compile-turbopack': '[@sentry/nextjs - After Production Compile (Turbopack)]',\n} ;\n\n// File patterns for source map operations\n// We use both glob patterns and directory paths for the sourcemap upload and deletion\n// -> Direct CLI invocation handles file paths better than glob patterns\n// -> Webpack/Bundler needs glob patterns as this is the format that is used by the plugin\nconst FILE_PATTERNS = {\n  SERVER: {\n    GLOB: 'server/**',\n    PATH: 'server',\n  },\n  SERVERLESS: 'serverless/**',\n  STATIC_CHUNKS: {\n    GLOB: 'static/chunks/**',\n    PATH: 'static/chunks',\n  },\n  STATIC_CHUNKS_PAGES: {\n    GLOB: 'static/chunks/pages/**',\n    PATH: 'static/chunks/pages',\n  },\n  STATIC_CHUNKS_APP: {\n    GLOB: 'static/chunks/app/**',\n    PATH: 'static/chunks/app',\n  },\n  MAIN_CHUNKS: 'static/chunks/main-*',\n  FRAMEWORK_CHUNKS: 'static/chunks/framework-*',\n  FRAMEWORK_CHUNKS_DOT: 'static/chunks/framework.*',\n  POLYFILLS_CHUNKS: 'static/chunks/polyfills-*',\n  WEBPACK_CHUNKS: 'static/chunks/webpack-*',\n} ;\n\n// Source map file extensions to delete\nconst SOURCEMAP_EXTENSIONS = ['*.js.map', '*.mjs.map', '*.cjs.map'] ;\n\n/**\n * Normalizes Windows paths to POSIX format for glob patterns\n */\nfunction normalizePathForGlob(distPath) {\n  return distPath.replace(/\\\\/g, '/');\n}\n\n/**\n * These functions are used to get the correct pattern for the sourcemap upload based on the build tool and the usage context\n * -> Direct CLI invocation handles file paths better than glob patterns\n */\nfunction getServerPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.SERVER.PATH : FILE_PATTERNS.SERVER.GLOB;\n}\n\nfunction getStaticChunksPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS.PATH : FILE_PATTERNS.STATIC_CHUNKS.GLOB;\n}\n\nfunction getStaticChunksPagesPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS_PAGES.PATH : FILE_PATTERNS.STATIC_CHUNKS_PAGES.GLOB;\n}\n\nfunction getStaticChunksAppPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS_APP.PATH : FILE_PATTERNS.STATIC_CHUNKS_APP.GLOB;\n}\n\n/**\n * Creates file patterns for source map uploads based on build tool and options\n */\nfunction createSourcemapUploadAssetPatterns(\n  normalizedDistPath,\n  buildTool,\n  widenClientFileUpload = false,\n) {\n  const assets = [];\n\n  if (buildTool.startsWith('after-production-compile')) {\n    assets.push(path.posix.join(normalizedDistPath, getServerPattern({ useDirectoryPath: true })));\n\n    if (buildTool === 'after-production-compile-turbopack') {\n      // In turbopack we always want to upload the full static chunks directory\n      // as the build output is not split into pages|app chunks\n      assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: true })));\n    } else {\n      // Webpack client builds in after-production-compile mode\n      if (widenClientFileUpload) {\n        assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: true })));\n      } else {\n        assets.push(\n          path.posix.join(normalizedDistPath, getStaticChunksPagesPattern({ useDirectoryPath: true })),\n          path.posix.join(normalizedDistPath, getStaticChunksAppPattern({ useDirectoryPath: true })),\n        );\n      }\n    }\n  } else {\n    if (buildTool === 'webpack-nodejs' || buildTool === 'webpack-edge') {\n      // Server builds\n      assets.push(\n        path.posix.join(normalizedDistPath, getServerPattern({ useDirectoryPath: false })),\n        path.posix.join(normalizedDistPath, FILE_PATTERNS.SERVERLESS),\n      );\n    } else if (buildTool === 'webpack-client') {\n      // Client builds\n      if (widenClientFileUpload) {\n        assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: false })));\n      } else {\n        assets.push(\n          path.posix.join(normalizedDistPath, getStaticChunksPagesPattern({ useDirectoryPath: false })),\n          path.posix.join(normalizedDistPath, getStaticChunksAppPattern({ useDirectoryPath: false })),\n        );\n      }\n    }\n  }\n\n  return assets;\n}\n\n/**\n * Creates ignore patterns for source map uploads\n */\nfunction createSourcemapUploadIgnorePattern(\n  normalizedDistPath,\n  widenClientFileUpload = false,\n) {\n  const ignore = [];\n\n  // We only add main-* files if the user has not opted into it\n  if (!widenClientFileUpload) {\n    ignore.push(path.posix.join(normalizedDistPath, FILE_PATTERNS.MAIN_CHUNKS));\n  }\n\n  // Always ignore these patterns\n  ignore.push(\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.FRAMEWORK_CHUNKS),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.FRAMEWORK_CHUNKS_DOT),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.POLYFILLS_CHUNKS),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.WEBPACK_CHUNKS),\n  );\n\n  return ignore;\n}\n\n/**\n * Creates file patterns for deletion after source map upload\n */\nfunction createFilesToDeleteAfterUploadPattern(\n  normalizedDistPath,\n  buildTool,\n  deleteSourcemapsAfterUpload,\n  useRunAfterProductionCompileHook = false,\n) {\n  if (!deleteSourcemapsAfterUpload) {\n    return undefined;\n  }\n\n  // We don't want to delete source maps for server builds as this led to errors on Vercel in the past\n  // See: https://github.com/getsentry/sentry-javascript/issues/13099\n  if (buildTool === 'webpack-nodejs' || buildTool === 'webpack-edge') {\n    return undefined;\n  }\n\n  // Skip deletion for webpack client builds when using the experimental hook\n  if (buildTool === 'webpack-client' && useRunAfterProductionCompileHook) {\n    return undefined;\n  }\n\n  return SOURCEMAP_EXTENSIONS.map(ext => path.posix.join(normalizedDistPath, 'static', '**', ext));\n}\n\n/**\n * Determines if sourcemap uploads should be skipped\n */\nfunction shouldSkipSourcemapUpload(buildTool, useRunAfterProductionCompileHook = false) {\n  return useRunAfterProductionCompileHook && buildTool.startsWith('webpack');\n}\n\n/**\n * Source rewriting function for webpack sources\n */\nfunction rewriteWebpackSources(source) {\n  return source.replace(/^webpack:\\/\\/(?:_N_E\\/)?/, '');\n}\n\n/**\n * Creates release configuration\n */\nfunction createReleaseConfig(\n  releaseName,\n  sentryBuildOptions,\n) {\n  if (releaseName !== undefined) {\n    return {\n      inject: false, // The webpack plugin's release injection breaks the `app` directory - we inject the release manually with the value injection loader instead.\n      name: releaseName,\n      create: sentryBuildOptions.release?.create,\n      finalize: sentryBuildOptions.release?.finalize,\n      dist: sentryBuildOptions.release?.dist,\n      vcsRemote: sentryBuildOptions.release?.vcsRemote,\n      setCommits: sentryBuildOptions.release?.setCommits,\n      deploy: sentryBuildOptions.release?.deploy,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.release,\n    };\n  }\n\n  return {\n    inject: false,\n    create: false,\n    finalize: false,\n  };\n}\n\n/**\n * Get Sentry Build Plugin options for both webpack and turbopack builds.\n * These options can be used in two ways:\n * 1. The options can be built in a single operation after the production build completes\n * 2. The options can be built in multiple operations, one for each webpack build\n */\nfunction getBuildPluginOptions({\n  sentryBuildOptions,\n  releaseName,\n  distDirAbsPath,\n  buildTool,\n  useRunAfterProductionCompileHook,\n}\n\n) {\n  // We need to convert paths to posix because Glob patterns use `\\` to escape\n  // glob characters. This clashes with Windows path separators.\n  // See: https://www.npmjs.com/package/glob\n  const normalizedDistDirAbsPath = normalizePathForGlob(distDirAbsPath);\n\n  const loggerPrefix = LOGGER_PREFIXES[buildTool];\n  const widenClientFileUpload = sentryBuildOptions.widenClientFileUpload ?? false;\n  const deleteSourcemapsAfterUpload = sentryBuildOptions.sourcemaps?.deleteSourcemapsAfterUpload ?? false;\n\n  const sourcemapUploadAssets = createSourcemapUploadAssetPatterns(\n    normalizedDistDirAbsPath,\n    buildTool,\n    widenClientFileUpload,\n  );\n\n  const sourcemapUploadIgnore = createSourcemapUploadIgnorePattern(normalizedDistDirAbsPath, widenClientFileUpload);\n\n  const filesToDeleteAfterUpload = createFilesToDeleteAfterUploadPattern(\n    normalizedDistDirAbsPath,\n    buildTool,\n    deleteSourcemapsAfterUpload,\n    useRunAfterProductionCompileHook,\n  );\n\n  const skipSourcemapsUpload = shouldSkipSourcemapUpload(buildTool, useRunAfterProductionCompileHook);\n\n  return {\n    authToken: sentryBuildOptions.authToken,\n    headers: sentryBuildOptions.headers,\n    org: sentryBuildOptions.org,\n    project: sentryBuildOptions.project,\n    telemetry: sentryBuildOptions.telemetry,\n    debug: sentryBuildOptions.debug,\n    errorHandler: sentryBuildOptions.errorHandler,\n    reactComponentAnnotation: buildTool.startsWith('after-production-compile')\n      ? undefined\n      : {\n          ...sentryBuildOptions.reactComponentAnnotation,\n          ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.reactComponentAnnotation,\n        },\n    silent: sentryBuildOptions.silent,\n    url: sentryBuildOptions.sentryUrl,\n    sourcemaps: {\n      disable: skipSourcemapsUpload ? true : (sentryBuildOptions.sourcemaps?.disable ?? false),\n      rewriteSources: rewriteWebpackSources,\n      assets: sentryBuildOptions.sourcemaps?.assets ?? sourcemapUploadAssets,\n      ignore: sentryBuildOptions.sourcemaps?.ignore ?? sourcemapUploadIgnore,\n      filesToDeleteAfterUpload,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.sourcemaps,\n    },\n    release: createReleaseConfig(releaseName, sentryBuildOptions),\n    bundleSizeOptimizations: {\n      ...sentryBuildOptions.bundleSizeOptimizations,\n    },\n    _metaOptions: {\n      loggerPrefixOverride: loggerPrefix,\n      telemetry: {\n        metaFramework: 'nextjs',\n      },\n    },\n    ...sentryBuildOptions.unstable_sentryWebpackPluginOptions,\n  };\n}\n\nexports.getBuildPluginOptions = getBuildPluginOptions;\nexports.normalizePathForGlob = normalizePathForGlob;\n//# sourceMappingURL=getBuildPluginOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst getBuildPluginOptions = __webpack_require__(/*! ./getBuildPluginOptions.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\");\n\n/**\n * This function is called by Next.js after the production build is complete.\n * It is used to upload sourcemaps to Sentry.\n */\nasync function handleRunAfterProductionCompile(\n  { releaseName, distDir, buildTool },\n  sentryBuildOptions,\n) {\n  if (sentryBuildOptions.debug) {\n    // eslint-disable-next-line no-console\n    console.debug('[@sentry/nextjs] Running runAfterProductionCompile logic.');\n  }\n\n  const { createSentryBuildPluginManager } =\n    core.loadModule(\n      '@sentry/bundler-plugin-core',\n      module,\n    ) ?? {};\n\n  if (!createSentryBuildPluginManager) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] Could not load build manager package. Will not run runAfterProductionCompile logic.',\n    );\n    return;\n  }\n\n  const options = getBuildPluginOptions.getBuildPluginOptions({\n    sentryBuildOptions,\n    releaseName,\n    distDirAbsPath: distDir,\n    buildTool: `after-production-compile-${buildTool}`,\n  });\n\n  const sentryBuildPluginManager = createSentryBuildPluginManager(options, {\n    buildTool,\n    loggerPrefix: '[@sentry/nextjs - After Production Compile]',\n  });\n\n  await sentryBuildPluginManager.telemetry.emitBundlerPluginExecutionSignal();\n  await sentryBuildPluginManager.createRelease();\n  await sentryBuildPluginManager.injectDebugIds([distDir]);\n  await sentryBuildPluginManager.uploadSourcemaps([distDir], {\n    // We don't want to prepare the artifacts because we injected debug ids manually before\n    prepareArtifacts: false,\n  });\n  await sentryBuildPluginManager.deleteArtifacts();\n}\n\nexports.handleRunAfterProductionCompile = handleRunAfterProductionCompile;\n//# sourceMappingURL=handleRunAfterProductionCompile.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvaGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLDhCQUE4QixtQkFBTyxDQUFDLHdRQUE0Qjs7QUFFbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksaUNBQWlDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLGlDQUFpQztBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxVQUFVO0FBQ3JELEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSx1Q0FBdUM7QUFDdkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy9oYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBnZXRCdWlsZFBsdWdpbk9wdGlvbnMgPSByZXF1aXJlKCcuL2dldEJ1aWxkUGx1Z2luT3B0aW9ucy5qcycpO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IE5leHQuanMgYWZ0ZXIgdGhlIHByb2R1Y3Rpb24gYnVpbGQgaXMgY29tcGxldGUuXG4gKiBJdCBpcyB1c2VkIHRvIHVwbG9hZCBzb3VyY2VtYXBzIHRvIFNlbnRyeS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZShcbiAgeyByZWxlYXNlTmFtZSwgZGlzdERpciwgYnVpbGRUb29sIH0sXG4gIHNlbnRyeUJ1aWxkT3B0aW9ucyxcbikge1xuICBpZiAoc2VudHJ5QnVpbGRPcHRpb25zLmRlYnVnKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmRlYnVnKCdbQHNlbnRyeS9uZXh0anNdIFJ1bm5pbmcgcnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZSBsb2dpYy4nKTtcbiAgfVxuXG4gIGNvbnN0IHsgY3JlYXRlU2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyIH0gPVxuICAgIGNvcmUubG9hZE1vZHVsZShcbiAgICAgICdAc2VudHJ5L2J1bmRsZXItcGx1Z2luLWNvcmUnLFxuICAgICAgbW9kdWxlLFxuICAgICkgPz8ge307XG5cbiAgaWYgKCFjcmVhdGVTZW50cnlCdWlsZFBsdWdpbk1hbmFnZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbQHNlbnRyeS9uZXh0anNdIENvdWxkIG5vdCBsb2FkIGJ1aWxkIG1hbmFnZXIgcGFja2FnZS4gV2lsbCBub3QgcnVuIHJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUgbG9naWMuJyxcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSBnZXRCdWlsZFBsdWdpbk9wdGlvbnMuZ2V0QnVpbGRQbHVnaW5PcHRpb25zKHtcbiAgICBzZW50cnlCdWlsZE9wdGlvbnMsXG4gICAgcmVsZWFzZU5hbWUsXG4gICAgZGlzdERpckFic1BhdGg6IGRpc3REaXIsXG4gICAgYnVpbGRUb29sOiBgYWZ0ZXItcHJvZHVjdGlvbi1jb21waWxlLSR7YnVpbGRUb29sfWAsXG4gIH0pO1xuXG4gIGNvbnN0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlciA9IGNyZWF0ZVNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlcihvcHRpb25zLCB7XG4gICAgYnVpbGRUb29sLFxuICAgIGxvZ2dlclByZWZpeDogJ1tAc2VudHJ5L25leHRqcyAtIEFmdGVyIFByb2R1Y3Rpb24gQ29tcGlsZV0nLFxuICB9KTtcblxuICBhd2FpdCBzZW50cnlCdWlsZFBsdWdpbk1hbmFnZXIudGVsZW1ldHJ5LmVtaXRCdW5kbGVyUGx1Z2luRXhlY3V0aW9uU2lnbmFsKCk7XG4gIGF3YWl0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlci5jcmVhdGVSZWxlYXNlKCk7XG4gIGF3YWl0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlci5pbmplY3REZWJ1Z0lkcyhbZGlzdERpcl0pO1xuICBhd2FpdCBzZW50cnlCdWlsZFBsdWdpbk1hbmFnZXIudXBsb2FkU291cmNlbWFwcyhbZGlzdERpcl0sIHtcbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIHByZXBhcmUgdGhlIGFydGlmYWN0cyBiZWNhdXNlIHdlIGluamVjdGVkIGRlYnVnIGlkcyBtYW51YWxseSBiZWZvcmVcbiAgICBwcmVwYXJlQXJ0aWZhY3RzOiBmYWxzZSxcbiAgfSk7XG4gIGF3YWl0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlci5kZWxldGVBcnRpZmFjdHMoKTtcbn1cblxuZXhwb3J0cy5oYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlID0gaGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRsZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, Symbol.toStringTag, {\n    value: 'Module'\n});\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nlet manifestCache = null;\nlet lastAppDirPath = null;\nlet lastIncludeRouteGroups = undefined;\nfunction isPageFile(filename) {\n    return filename === 'page.tsx' || filename === 'page.jsx' || filename === 'page.ts' || filename === 'page.js';\n}\nfunction isRouteGroup(name) {\n    return name.startsWith('(') && name.endsWith(')');\n}\nfunction normalizeRoutePath(routePath) {\n    // Remove route group segments from the path\n    return routePath.replace(/\\/\\([^)]+\\)/g, '');\n}\nfunction getDynamicRouteSegment(name) {\n    if (name.startsWith('[[...') && name.endsWith(']]')) {\n        // Optional catchall: [[...param]]\n        const paramName = name.slice(5, -2); // Remove [[... and ]]\n        return `:${paramName}*?`; // Mark with ? as optional\n    } else if (name.startsWith('[...') && name.endsWith(']')) {\n        // Required catchall: [...param]\n        const paramName = name.slice(4, -1); // Remove [... and ]\n        return `:${paramName}*`;\n    }\n    // Regular dynamic: [param]\n    return `:${name.slice(1, -1)}`;\n}\nfunction buildRegexForDynamicRoute(routePath) {\n    const segments = routePath.split('/').filter(Boolean);\n    const regexSegments = [];\n    const paramNames = [];\n    let hasOptionalCatchall = false;\n    for (const segment of segments){\n        if (segment.startsWith(':')) {\n            const paramName = segment.substring(1);\n            if (paramName.endsWith('*?')) {\n                // Optional catchall: matches zero or more segments\n                const cleanParamName = paramName.slice(0, -2);\n                paramNames.push(cleanParamName);\n                // Handling this special case in pattern construction below\n                hasOptionalCatchall = true;\n            } else if (paramName.endsWith('*')) {\n                // Required catchall: matches one or more segments\n                const cleanParamName = paramName.slice(0, -1);\n                paramNames.push(cleanParamName);\n                regexSegments.push('(.+)');\n            } else {\n                // Regular dynamic segment\n                paramNames.push(paramName);\n                regexSegments.push('([^/]+)');\n            }\n        } else {\n            // Static segment - escape regex special characters including route group parentheses\n            regexSegments.push(segment.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n        }\n    }\n    let pattern;\n    if (hasOptionalCatchall) {\n        if (regexSegments.length === 0) {\n            // If the optional catchall happens at the root, accept any path starting\n            // with a slash. Need capturing group for parameter extraction.\n            pattern = '^/(.*)$';\n        } else {\n            // For optional catchall, make the trailing slash and segments optional\n            // This allows matching both /catchall and /catchall/anything\n            const staticParts = regexSegments.join('/');\n            pattern = `^/${staticParts}(?:/(.*))?$`;\n        }\n    } else {\n        pattern = `^/${regexSegments.join('/')}$`;\n    }\n    return {\n        regex: pattern,\n        paramNames\n    };\n}\nfunction scanAppDirectory(dir, basePath = '', includeRouteGroups = false) {\n    const dynamicRoutes = [];\n    const staticRoutes = [];\n    try {\n        const entries = fs.readdirSync(dir, {\n            withFileTypes: true\n        });\n        const pageFile = entries.some((entry)=>isPageFile(entry.name));\n        if (pageFile) {\n            // Conditionally normalize the path based on includeRouteGroups option\n            const routePath = includeRouteGroups ? basePath || '/' : normalizeRoutePath(basePath || '/');\n            const isDynamic = routePath.includes(':');\n            if (isDynamic) {\n                const { regex, paramNames } = buildRegexForDynamicRoute(routePath);\n                dynamicRoutes.push({\n                    path: routePath,\n                    regex,\n                    paramNames\n                });\n            } else {\n                staticRoutes.push({\n                    path: routePath\n                });\n            }\n        }\n        for (const entry of entries){\n            if (entry.isDirectory()) {\n                const fullPath = path.join(dir, entry.name);\n                let routeSegment;\n                const isDynamic = entry.name.startsWith('[') && entry.name.endsWith(']');\n                const isRouteGroupDir = isRouteGroup(entry.name);\n                if (isRouteGroupDir) {\n                    if (includeRouteGroups) {\n                        routeSegment = entry.name;\n                    } else {\n                        routeSegment = '';\n                    }\n                } else if (isDynamic) {\n                    routeSegment = getDynamicRouteSegment(entry.name);\n                } else {\n                    routeSegment = entry.name;\n                }\n                const newBasePath = routeSegment ? `${basePath}/${routeSegment}` : basePath;\n                const subRoutes = scanAppDirectory(fullPath, newBasePath, includeRouteGroups);\n                dynamicRoutes.push(...subRoutes.dynamicRoutes);\n                staticRoutes.push(...subRoutes.staticRoutes);\n            }\n        }\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn('Error building route manifest:', error);\n    }\n    return {\n        dynamicRoutes,\n        staticRoutes\n    };\n}\n/**\n * Returns a route manifest for the given app directory\n */ function createRouteManifest(options) {\n    let targetDir;\n    {\n        const projectDir = process.cwd();\n        const maybeAppDirPath = path.join(projectDir, 'app');\n        const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n        if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n            targetDir = maybeAppDirPath;\n        } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n            targetDir = maybeSrcAppDirPath;\n        }\n    }\n    if (!targetDir) {\n        return {\n            dynamicRoutes: [],\n            staticRoutes: []\n        };\n    }\n    // Check if we can use cached version\n    if (manifestCache && lastAppDirPath === targetDir && lastIncludeRouteGroups === options?.includeRouteGroups) {\n        return manifestCache;\n    }\n    const { dynamicRoutes, staticRoutes } = scanAppDirectory(targetDir, '', options?.includeRouteGroups);\n    const manifest = {\n        dynamicRoutes,\n        staticRoutes\n    };\n    // set cache\n    manifestCache = manifest;\n    lastAppDirPath = targetDir;\n    lastIncludeRouteGroups = options?.includeRouteGroups;\n    return manifest;\n}\nexports.createRouteManifest = createRouteManifest; //# sourceMappingURL=createRouteManifest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst generateValueInjectionRules = __webpack_require__(/*! ./generateValueInjectionRules.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js\");\n\n/**\n * Construct a Turbopack config object from a Next.js config object and a Turbopack options object.\n *\n * @param userNextConfig - The Next.js config object.\n * @param turbopackOptions - The Turbopack options object.\n * @returns The Turbopack config object.\n */\nfunction constructTurbopackConfig({\n  userNextConfig,\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const newConfig = {\n    ...userNextConfig.turbopack,\n  };\n\n  const valueInjectionRules = generateValueInjectionRules.generateValueInjectionRules({\n    routeManifest,\n    nextJsVersion,\n  });\n\n  for (const { matcher, rule } of valueInjectionRules) {\n    newConfig.rules = safelyAddTurbopackRule(newConfig.rules, { matcher, rule });\n  }\n\n  return newConfig;\n}\n\n/**\n * Safely add a Turbopack rule to the existing rules.\n *\n * @param existingRules - The existing rules.\n * @param matcher - The matcher for the rule.\n * @param rule - The rule to add.\n * @returns The updated rules object.\n */\nfunction safelyAddTurbopackRule(\n  existingRules,\n  { matcher, rule },\n) {\n  if (!existingRules) {\n    return {\n      [matcher]: rule,\n    };\n  }\n\n  // If the rule already exists, we don't want to mess with it.\n  if (existingRules[matcher]) {\n    core.debug.log(\n      `[@sentry/nextjs] - Turbopack rule already exists for ${matcher}. Please remove it from your Next.js config in order for Sentry to work properly.`,\n    );\n    return existingRules;\n  }\n\n  return {\n    ...existingRules,\n    [matcher]: rule,\n  };\n}\n\nexports.constructTurbopackConfig = constructTurbopackConfig;\nexports.safelyAddTurbopackRule = safelyAddTurbopackRule;\n//# sourceMappingURL=constructTurbopackConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdHVyYm9wYWNrL2NvbnN0cnVjdFR1cmJvcGFja0NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsb0NBQW9DLG1CQUFPLENBQUMsOFJBQWtDOztBQUU5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxlQUFlLGdCQUFnQjtBQUMvQixnRUFBZ0UsZUFBZTtBQUMvRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxlQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsUUFBUTtBQUN0RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdHVyYm9wYWNrL2NvbnN0cnVjdFR1cmJvcGFja0NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMuanMnKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3QgYSBUdXJib3BhY2sgY29uZmlnIG9iamVjdCBmcm9tIGEgTmV4dC5qcyBjb25maWcgb2JqZWN0IGFuZCBhIFR1cmJvcGFjayBvcHRpb25zIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gdXNlck5leHRDb25maWcgLSBUaGUgTmV4dC5qcyBjb25maWcgb2JqZWN0LlxuICogQHBhcmFtIHR1cmJvcGFja09wdGlvbnMgLSBUaGUgVHVyYm9wYWNrIG9wdGlvbnMgb2JqZWN0LlxuICogQHJldHVybnMgVGhlIFR1cmJvcGFjayBjb25maWcgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RUdXJib3BhY2tDb25maWcoe1xuICB1c2VyTmV4dENvbmZpZyxcbiAgcm91dGVNYW5pZmVzdCxcbiAgbmV4dEpzVmVyc2lvbixcbn1cblxuKSB7XG4gIGNvbnN0IG5ld0NvbmZpZyA9IHtcbiAgICAuLi51c2VyTmV4dENvbmZpZy50dXJib3BhY2ssXG4gIH07XG5cbiAgY29uc3QgdmFsdWVJbmplY3Rpb25SdWxlcyA9IGdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcy5nZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMoe1xuICAgIHJvdXRlTWFuaWZlc3QsXG4gICAgbmV4dEpzVmVyc2lvbixcbiAgfSk7XG5cbiAgZm9yIChjb25zdCB7IG1hdGNoZXIsIHJ1bGUgfSBvZiB2YWx1ZUluamVjdGlvblJ1bGVzKSB7XG4gICAgbmV3Q29uZmlnLnJ1bGVzID0gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZShuZXdDb25maWcucnVsZXMsIHsgbWF0Y2hlciwgcnVsZSB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbi8qKlxuICogU2FmZWx5IGFkZCBhIFR1cmJvcGFjayBydWxlIHRvIHRoZSBleGlzdGluZyBydWxlcy5cbiAqXG4gKiBAcGFyYW0gZXhpc3RpbmdSdWxlcyAtIFRoZSBleGlzdGluZyBydWxlcy5cbiAqIEBwYXJhbSBtYXRjaGVyIC0gVGhlIG1hdGNoZXIgZm9yIHRoZSBydWxlLlxuICogQHBhcmFtIHJ1bGUgLSBUaGUgcnVsZSB0byBhZGQuXG4gKiBAcmV0dXJucyBUaGUgdXBkYXRlZCBydWxlcyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHNhZmVseUFkZFR1cmJvcGFja1J1bGUoXG4gIGV4aXN0aW5nUnVsZXMsXG4gIHsgbWF0Y2hlciwgcnVsZSB9LFxuKSB7XG4gIGlmICghZXhpc3RpbmdSdWxlcykge1xuICAgIHJldHVybiB7XG4gICAgICBbbWF0Y2hlcl06IHJ1bGUsXG4gICAgfTtcbiAgfVxuXG4gIC8vIElmIHRoZSBydWxlIGFscmVhZHkgZXhpc3RzLCB3ZSBkb24ndCB3YW50IHRvIG1lc3Mgd2l0aCBpdC5cbiAgaWYgKGV4aXN0aW5nUnVsZXNbbWF0Y2hlcl0pIHtcbiAgICBjb3JlLmRlYnVnLmxvZyhcbiAgICAgIGBbQHNlbnRyeS9uZXh0anNdIC0gVHVyYm9wYWNrIHJ1bGUgYWxyZWFkeSBleGlzdHMgZm9yICR7bWF0Y2hlcn0uIFBsZWFzZSByZW1vdmUgaXQgZnJvbSB5b3VyIE5leHQuanMgY29uZmlnIGluIG9yZGVyIGZvciBTZW50cnkgdG8gd29yayBwcm9wZXJseS5gLFxuICAgICk7XG4gICAgcmV0dXJuIGV4aXN0aW5nUnVsZXM7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLmV4aXN0aW5nUnVsZXMsXG4gICAgW21hdGNoZXJdOiBydWxlLFxuICB9O1xufVxuXG5leHBvcnRzLmNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZyA9IGNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZztcbmV4cG9ydHMuc2FmZWx5QWRkVHVyYm9wYWNrUnVsZSA9IHNhZmVseUFkZFR1cmJvcGFja1J1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdHJ1Y3RUdXJib3BhY2tDb25maWcuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\n/**\n * Generate the value injection rules for client and server in turbopack config.\n */\nfunction generateValueInjectionRules({\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const rules = [];\n  const isomorphicValues = {};\n  let clientValues = {};\n  let serverValues = {};\n\n  if (nextJsVersion) {\n    // This is used to determine version-based dev-symbolication behavior\n    isomorphicValues._sentryNextJsVersion = nextJsVersion;\n  }\n\n  if (routeManifest) {\n    clientValues._sentryRouteManifest = JSON.stringify(routeManifest);\n  }\n\n  if (Object.keys(isomorphicValues).length > 0) {\n    clientValues = { ...clientValues, ...isomorphicValues };\n    serverValues = { ...serverValues, ...isomorphicValues };\n  }\n\n  // Client value injection\n  if (Object.keys(clientValues).length > 0) {\n    rules.push({\n      matcher: '**/instrumentation-client.*',\n      rule: {\n        loaders: [\n          {\n            loader: path.resolve(__dirname, '..', 'loaders', 'valueInjectionLoader.js'),\n            options: {\n              values: clientValues,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  // Server value injection\n  if (Object.keys(serverValues).length > 0) {\n    rules.push({\n      matcher: '**/instrumentation.*',\n      rule: {\n        loaders: [\n          {\n            loader: path.resolve(__dirname, '..', 'loaders', 'valueInjectionLoader.js'),\n            options: {\n              values: serverValues,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  return rules;\n}\n\nexports.generateValueInjectionRules = generateValueInjectionRules;\n//# sourceMappingURL=generateValueInjectionRules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdHVyYm9wYWNrL2dlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsa0JBQU07O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy90dXJib3BhY2svZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vKipcbiAqIEdlbmVyYXRlIHRoZSB2YWx1ZSBpbmplY3Rpb24gcnVsZXMgZm9yIGNsaWVudCBhbmQgc2VydmVyIGluIHR1cmJvcGFjayBjb25maWcuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcyh7XG4gIHJvdXRlTWFuaWZlc3QsXG4gIG5leHRKc1ZlcnNpb24sXG59XG5cbikge1xuICBjb25zdCBydWxlcyA9IFtdO1xuICBjb25zdCBpc29tb3JwaGljVmFsdWVzID0ge307XG4gIGxldCBjbGllbnRWYWx1ZXMgPSB7fTtcbiAgbGV0IHNlcnZlclZhbHVlcyA9IHt9O1xuXG4gIGlmIChuZXh0SnNWZXJzaW9uKSB7XG4gICAgLy8gVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSB2ZXJzaW9uLWJhc2VkIGRldi1zeW1ib2xpY2F0aW9uIGJlaGF2aW9yXG4gICAgaXNvbW9ycGhpY1ZhbHVlcy5fc2VudHJ5TmV4dEpzVmVyc2lvbiA9IG5leHRKc1ZlcnNpb247XG4gIH1cblxuICBpZiAocm91dGVNYW5pZmVzdCkge1xuICAgIGNsaWVudFZhbHVlcy5fc2VudHJ5Um91dGVNYW5pZmVzdCA9IEpTT04uc3RyaW5naWZ5KHJvdXRlTWFuaWZlc3QpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGlzb21vcnBoaWNWYWx1ZXMpLmxlbmd0aCA+IDApIHtcbiAgICBjbGllbnRWYWx1ZXMgPSB7IC4uLmNsaWVudFZhbHVlcywgLi4uaXNvbW9ycGhpY1ZhbHVlcyB9O1xuICAgIHNlcnZlclZhbHVlcyA9IHsgLi4uc2VydmVyVmFsdWVzLCAuLi5pc29tb3JwaGljVmFsdWVzIH07XG4gIH1cblxuICAvLyBDbGllbnQgdmFsdWUgaW5qZWN0aW9uXG4gIGlmIChPYmplY3Qua2V5cyhjbGllbnRWYWx1ZXMpLmxlbmd0aCA+IDApIHtcbiAgICBydWxlcy5wdXNoKHtcbiAgICAgIG1hdGNoZXI6ICcqKi9pbnN0cnVtZW50YXRpb24tY2xpZW50LionLFxuICAgICAgcnVsZToge1xuICAgICAgICBsb2FkZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbG9hZGVyOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnbG9hZGVycycsICd2YWx1ZUluamVjdGlvbkxvYWRlci5qcycpLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICB2YWx1ZXM6IGNsaWVudFZhbHVlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvLyBTZXJ2ZXIgdmFsdWUgaW5qZWN0aW9uXG4gIGlmIChPYmplY3Qua2V5cyhzZXJ2ZXJWYWx1ZXMpLmxlbmd0aCA+IDApIHtcbiAgICBydWxlcy5wdXNoKHtcbiAgICAgIG1hdGNoZXI6ICcqKi9pbnN0cnVtZW50YXRpb24uKicsXG4gICAgICBydWxlOiB7XG4gICAgICAgIGxvYWRlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2FkZXI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICdsb2FkZXJzJywgJ3ZhbHVlSW5qZWN0aW9uTG9hZGVyLmpzJyksXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIHZhbHVlczogc2VydmVyVmFsdWVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBydWxlcztcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMgPSBnZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst resolve = __webpack_require__(/*! resolve */ \"(instrument)/../../node_modules/.pnpm/resolve@1.22.8/node_modules/resolve/index.js\");\n\n/**\n * Returns the version of Next.js installed in the project, or undefined if it cannot be determined.\n */\nfunction getNextjsVersion() {\n  const nextjsPackageJsonPath = resolveNextjsPackageJson();\n  if (nextjsPackageJsonPath) {\n    try {\n      const nextjsPackageJson = JSON.parse(\n        fs.readFileSync(nextjsPackageJsonPath, { encoding: 'utf-8' }),\n      );\n      return nextjsPackageJson.version;\n    } catch {\n      // noop\n    }\n  }\n\n  return undefined;\n}\n\nfunction resolveNextjsPackageJson() {\n  try {\n    return resolve.sync('next/package.json', { basedir: process.cwd() });\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Checks if the current Next.js version supports the runAfterProductionCompile hook.\n * This hook was introduced in Next.js 15.4.1. (https://github.com/vercel/next.js/pull/77345)\n *\n * @param version - version string to check.\n * @returns true if Next.js version is 15.4.1 or higher\n */\nfunction supportsProductionCompileHook(version) {\n  const versionToCheck = version;\n  if (!versionToCheck) {\n    return false;\n  }\n\n  const { major, minor, patch } = core.parseSemver(versionToCheck);\n\n  if (major === undefined || minor === undefined || patch === undefined) {\n    return false;\n  }\n\n  if (major > 15) {\n    return true;\n  }\n\n  // For major version 15, check if it's 15.4.1 or higher\n  if (major === 15) {\n    if (minor > 4) {\n      return true;\n    }\n    if (minor === 4 && patch >= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  return false;\n}\n\nexports.getNextjsVersion = getNextjsVersion;\nexports.supportsProductionCompileHook = supportsProductionCompileHook;\n//# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsZ0JBQWdCLG1CQUFPLENBQUMsbUdBQVM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsbUJBQW1CO0FBQ3BFO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtDQUErQyx3QkFBd0I7QUFDdkUsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxzQkFBc0I7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcmVzb2x2ZSA9IHJlcXVpcmUoJ3Jlc29sdmUnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2ZXJzaW9uIG9mIE5leHQuanMgaW5zdGFsbGVkIGluIHRoZSBwcm9qZWN0LCBvciB1bmRlZmluZWQgaWYgaXQgY2Fubm90IGJlIGRldGVybWluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldE5leHRqc1ZlcnNpb24oKSB7XG4gIGNvbnN0IG5leHRqc1BhY2thZ2VKc29uUGF0aCA9IHJlc29sdmVOZXh0anNQYWNrYWdlSnNvbigpO1xuICBpZiAobmV4dGpzUGFja2FnZUpzb25QYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5leHRqc1BhY2thZ2VKc29uID0gSlNPTi5wYXJzZShcbiAgICAgICAgZnMucmVhZEZpbGVTeW5jKG5leHRqc1BhY2thZ2VKc29uUGF0aCwgeyBlbmNvZGluZzogJ3V0Zi04JyB9KSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gbmV4dGpzUGFja2FnZUpzb24udmVyc2lvbjtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTmV4dGpzUGFja2FnZUpzb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlc29sdmUuc3luYygnbmV4dC9wYWNrYWdlLmpzb24nLCB7IGJhc2VkaXI6IHByb2Nlc3MuY3dkKCkgfSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGN1cnJlbnQgTmV4dC5qcyB2ZXJzaW9uIHN1cHBvcnRzIHRoZSBydW5BZnRlclByb2R1Y3Rpb25Db21waWxlIGhvb2suXG4gKiBUaGlzIGhvb2sgd2FzIGludHJvZHVjZWQgaW4gTmV4dC5qcyAxNS40LjEuIChodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanMvcHVsbC83NzM0NSlcbiAqXG4gKiBAcGFyYW0gdmVyc2lvbiAtIHZlcnNpb24gc3RyaW5nIHRvIGNoZWNrLlxuICogQHJldHVybnMgdHJ1ZSBpZiBOZXh0LmpzIHZlcnNpb24gaXMgMTUuNC4xIG9yIGhpZ2hlclxuICovXG5mdW5jdGlvbiBzdXBwb3J0c1Byb2R1Y3Rpb25Db21waWxlSG9vayh2ZXJzaW9uKSB7XG4gIGNvbnN0IHZlcnNpb25Ub0NoZWNrID0gdmVyc2lvbjtcbiAgaWYgKCF2ZXJzaW9uVG9DaGVjaykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHsgbWFqb3IsIG1pbm9yLCBwYXRjaCB9ID0gY29yZS5wYXJzZVNlbXZlcih2ZXJzaW9uVG9DaGVjayk7XG5cbiAgaWYgKG1ham9yID09PSB1bmRlZmluZWQgfHwgbWlub3IgPT09IHVuZGVmaW5lZCB8fCBwYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG1ham9yID4gMTUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEZvciBtYWpvciB2ZXJzaW9uIDE1LCBjaGVjayBpZiBpdCdzIDE1LjQuMSBvciBoaWdoZXJcbiAgaWYgKG1ham9yID09PSAxNSkge1xuICAgIGlmIChtaW5vciA+IDQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAobWlub3IgPT09IDQgJiYgcGF0Y2ggPj0gMSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0cy5nZXROZXh0anNWZXJzaW9uID0gZ2V0TmV4dGpzVmVyc2lvbjtcbmV4cG9ydHMuc3VwcG9ydHNQcm9kdWN0aW9uQ29tcGlsZUhvb2sgPSBzdXBwb3J0c1Byb2R1Y3Rpb25Db21waWxlSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst chalk = __webpack_require__(/*! chalk */ \"(instrument)/../../node_modules/.pnpm/chalk@3.0.0/node_modules/chalk/source/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst resolve = __webpack_require__(/*! resolve */ \"(instrument)/../../node_modules/.pnpm/resolve@1.22.8/node_modules/resolve/index.js\");\nconst getBuildPluginOptions = __webpack_require__(/*! ./getBuildPluginOptions.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\");\n\n/* eslint-disable complexity */\n/* eslint-disable max-lines */\n\n\n// Next.js runs webpack 3 times, once for the client, the server, and for edge. Because we don't want to print certain\n// warnings 3 times, we keep track of them here.\nlet showedMissingGlobalErrorWarningMsg = false;\n\n/**\n * Construct the function which will be used as the nextjs config's `webpack` value.\n *\n * Sets:\n *   - `devtool`, to ensure high-quality sourcemaps are generated\n *   - `entry`, to include user's sentry config files (where `Sentry.init` is called) in the build\n *   - `plugins`, to add SentryWebpackPlugin\n *\n * @param userNextConfig The user's existing nextjs config, as passed to `withSentryConfig`\n * @param userSentryOptions The user's SentryWebpackPlugin config, as passed to `withSentryConfig`\n * @returns The function to set as the nextjs config's `webpack` value\n */\nfunction constructWebpackConfigFunction({\n  userNextConfig = {},\n  userSentryOptions = {},\n  releaseName,\n  routeManifest,\n  nextJsVersion,\n  useRunAfterProductionCompileHook,\n}\n\n) {\n  // Will be called by nextjs and passed its default webpack configuration and context data about the build (whether\n  // we're building server or client, whether we're in dev, what version of webpack we're using, etc). Note that\n  // `incomingConfig` and `buildContext` are referred to as `config` and `options` in the nextjs docs.\n  return function newWebpackFunction(\n    incomingConfig,\n    buildContext,\n  ) {\n    const { isServer, dev: isDev, dir: projectDir } = buildContext;\n    const runtime = isServer ? (buildContext.nextRuntime === 'edge' ? 'edge' : 'server') : 'client';\n    // Default page extensions per https://github.com/vercel/next.js/blob/f1dbc9260d48c7995f6c52f8fbcc65f08e627992/packages/next/server/config-shared.ts#L161\n    const pageExtensions = userNextConfig.pageExtensions || ['tsx', 'ts', 'jsx', 'js'];\n    const dotPrefixedPageExtensions = pageExtensions.map(ext => `.${ext}`);\n    const pageExtensionRegex = pageExtensions.map(core.escapeStringForRegex).join('|');\n    const nextVersion = nextJsVersion || util.getNextjsVersion();\n    const { major } = core.parseSemver(nextVersion || '');\n\n    // We add `.ts` and `.js` back in because `pageExtensions` might not be relevant to the instrumentation file\n    // e.g. user's setting `.mdx`. In that case we still want to default look up\n    // `instrumentation.ts` and `instrumentation.js`\n    const instrumentationFile = getInstrumentationFile(projectDir, dotPrefixedPageExtensions.concat(['.ts', '.js']));\n\n    if (runtime !== 'client') {\n      warnAboutDeprecatedConfigFiles(projectDir, instrumentationFile, runtime);\n    }\n    if (runtime === 'server') {\n      // was added in v15 (https://github.com/vercel/next.js/pull/67539)\n      if (major && major >= 15) {\n        warnAboutMissingOnRequestErrorHandler(instrumentationFile);\n      }\n    }\n\n    let rawNewConfig = { ...incomingConfig };\n\n    // if user has custom webpack config (which always takes the form of a function), run it so we have actual values to\n    // work with\n    if ('webpack' in userNextConfig && typeof userNextConfig.webpack === 'function') {\n      rawNewConfig = userNextConfig.webpack(rawNewConfig, buildContext);\n    }\n\n    // This mutates `rawNewConfig` in place, but also returns it in order to switch its type to one in which\n    // `newConfig.module.rules` is required, so we don't have to keep asserting its existence\n    const newConfig = setUpModuleRules(rawNewConfig);\n\n    // Add a loader which will inject code that sets global values\n    addValueInjectionLoader({\n      newConfig,\n      userNextConfig,\n      userSentryOptions,\n      buildContext,\n      releaseName,\n      routeManifest,\n      nextJsVersion,\n    });\n\n    addOtelWarningIgnoreRule(newConfig);\n\n    // Add edge runtime polyfills when building for edge in dev mode\n    if (major && major === 13 && runtime === 'edge' && isDev) {\n      addEdgeRuntimePolyfills(newConfig, buildContext);\n    }\n\n    let pagesDirPath;\n    const maybePagesDirPath = path.join(projectDir, 'pages');\n    const maybeSrcPagesDirPath = path.join(projectDir, 'src', 'pages');\n    if (fs.existsSync(maybePagesDirPath) && fs.lstatSync(maybePagesDirPath).isDirectory()) {\n      pagesDirPath = maybePagesDirPath;\n    } else if (fs.existsSync(maybeSrcPagesDirPath) && fs.lstatSync(maybeSrcPagesDirPath).isDirectory()) {\n      pagesDirPath = maybeSrcPagesDirPath;\n    }\n\n    let appDirPath;\n    const maybeAppDirPath = path.join(projectDir, 'app');\n    const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n    if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n      appDirPath = maybeAppDirPath;\n    } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n      appDirPath = maybeSrcAppDirPath;\n    }\n\n    const apiRoutesPath = pagesDirPath ? path.join(pagesDirPath, 'api') : undefined;\n\n    const middlewareLocationFolder = pagesDirPath\n      ? path.join(pagesDirPath, '..')\n      : appDirPath\n        ? path.join(appDirPath, '..')\n        : projectDir;\n\n    const staticWrappingLoaderOptions = {\n      appDir: appDirPath,\n      pagesDir: pagesDirPath,\n      pageExtensionRegex,\n      excludeServerRoutes: userSentryOptions.excludeServerRoutes,\n      nextjsRequestAsyncStorageModulePath: getRequestAsyncStorageModuleLocation(\n        projectDir,\n        rawNewConfig.resolve?.modules,\n      ),\n    };\n\n    const normalizeLoaderResourcePath = (resourcePath) => {\n      // `resourcePath` may be an absolute path or a path relative to the context of the webpack config\n      let absoluteResourcePath;\n      if (path.isAbsolute(resourcePath)) {\n        absoluteResourcePath = resourcePath;\n      } else {\n        absoluteResourcePath = path.join(projectDir, resourcePath);\n      }\n\n      return path.normalize(absoluteResourcePath);\n    };\n\n    const isPageResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        pagesDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(pagesDirPath + path.sep) &&\n        !normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const isApiRouteResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const possibleMiddlewareLocations = pageExtensions.map(middlewareFileEnding => {\n      return path.join(middlewareLocationFolder, `middleware.${middlewareFileEnding}`);\n    });\n    const isMiddlewareResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return possibleMiddlewareLocations.includes(normalizedAbsoluteResourcePath);\n    };\n\n    const isServerComponentResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n\n      // \".js, .jsx, or .tsx file extensions can be used for Pages\"\n      // https://beta.nextjs.org/docs/routing/pages-and-layouts#pages:~:text=.js%2C%20.jsx%2C%20or%20.tsx%20file%20extensions%20can%20be%20used%20for%20Pages.\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/](page|layout|loading|head|not-found)\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    const isRouteHandlerResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/]route\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    if (isServer && userSentryOptions.autoInstrumentServerFunctions !== false) {\n      // It is very important that we insert our loaders at the beginning of the array because we expect any sort of transformations/transpilations (e.g. TS -> JS) to already have happened.\n\n      // Wrap pages\n      newConfig.module.rules.unshift({\n        test: isPageResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'page',\n            },\n          },\n        ],\n      });\n\n      let vercelCronsConfig = undefined;\n      try {\n        if (process.env.VERCEL && userSentryOptions.automaticVercelMonitors) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          vercelCronsConfig = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'vercel.json'), 'utf8')).crons;\n          if (vercelCronsConfig) {\n            core.debug.log(\n              `${chalk.cyan(\n                'info',\n              )} - Creating Sentry cron monitors for your Vercel Cron Jobs. You can disable this feature by setting the ${chalk.bold.cyan(\n                'automaticVercelMonitors',\n              )} option to false in you Next.js config.`,\n            );\n          }\n        }\n      } catch (e) {\n        if ((e ).code === 'ENOENT') ; else {\n          // log but noop\n          core.debug.error(\n            `${chalk.red(\n              'error',\n            )} - Sentry failed to read vercel.json for automatic cron job monitoring instrumentation`,\n            e,\n          );\n        }\n      }\n\n      // Wrap api routes\n      newConfig.module.rules.unshift({\n        test: isApiRouteResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              vercelCronsConfig,\n              wrappingTargetKind: 'api-route',\n            },\n          },\n        ],\n      });\n\n      // Wrap middleware\n      if (userSentryOptions.autoInstrumentMiddleware ?? true) {\n        newConfig.module.rules.unshift({\n          test: isMiddlewareResource,\n          use: [\n            {\n              loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n              options: {\n                ...staticWrappingLoaderOptions,\n                wrappingTargetKind: 'middleware',\n              },\n            },\n          ],\n        });\n      }\n    }\n\n    if (isServer && userSentryOptions.autoInstrumentAppDirectory !== false) {\n      // Wrap server components\n      newConfig.module.rules.unshift({\n        test: isServerComponentResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'server-component',\n            },\n          },\n        ],\n      });\n\n      // Wrap route handlers\n      newConfig.module.rules.unshift({\n        test: isRouteHandlerResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'route-handler',\n            },\n          },\n        ],\n      });\n    }\n\n    if (appDirPath) {\n      const hasGlobalErrorFile = pageExtensions\n        .map(extension => `global-error.${extension}`)\n        .some(\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          globalErrorFile => fs.existsSync(path.join(appDirPath, globalErrorFile)),\n        );\n\n      if (\n        !hasGlobalErrorFile &&\n        !showedMissingGlobalErrorWarningMsg &&\n        !process.env.SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING\n      ) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${chalk.yellow(\n            'warn',\n          )}  - It seems like you don't have a global error handler set up. It is recommended that you add a ${chalk.cyan(\n            'global-error.js',\n          )} file with Sentry instrumentation so that React rendering errors are reported to Sentry. Read more: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#react-render-errors-in-app-router (you can suppress this warning by setting SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1 as environment variable)`,\n        );\n        showedMissingGlobalErrorWarningMsg = true;\n      }\n    }\n\n    if (!isServer) {\n      // Tell webpack to inject the client config files (containing the client-side `Sentry.init()` call) into the appropriate output\n      // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (If we don't do\n      // this, we'll have a statement of the form `x.y = () => f(x.y)`, where one of the things `f` does is call `x.y`.\n      // Since we're setting `x.y` to be a callback (which, by definition, won't run until some time later), by the time\n      // the function runs (causing `f` to run, causing `x.y` to run), `x.y` will point to the callback itself, rather\n      // than its original value. So calling it will call the callback which will call `f` which will call `x.y` which\n      // will call the callback which will call `f` which will call `x.y`... and on and on. Theoretically this could also\n      // be fixed by using `bind`, but this is way simpler.)\n      const origEntryProperty = newConfig.entry;\n      newConfig.entry = async () => addSentryToClientEntryProperty(origEntryProperty, buildContext);\n\n      const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n      if (clientSentryConfigFileName) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] DEPRECATION WARNING: It is recommended renaming your \\`${clientSentryConfigFileName}\\` file, or moving its content to \\`instrumentation-client.ts\\`. When using Turbopack \\`${clientSentryConfigFileName}\\` will no longer work. Read more about the \\`instrumentation-client.ts\\` file: https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation-client`,\n        );\n      }\n    }\n\n    const isStaticExport = userNextConfig?.output === 'export';\n\n    // We don't want to do any webpack plugin stuff OR any source maps stuff in dev mode or for the server on static-only builds.\n    // Symbolication for dev-mode errors is done elsewhere.\n    if (!(isDev || (isStaticExport && isServer))) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const { sentryWebpackPlugin } = core.loadModule('@sentry/webpack-plugin', module) ?? {};\n\n      if (sentryWebpackPlugin) {\n        if (!userSentryOptions.sourcemaps?.disable) {\n          // Source maps can be configured in 3 ways:\n          // 1. (next config): productionBrowserSourceMaps\n          // 2. (next config): experimental.serverSourceMaps\n          // 3. custom webpack configuration\n          //\n          // We only update this if no explicit value is set\n          // (Next.js defaults to `false`: https://github.com/vercel/next.js/blob/5f4f96c133bd6b10954812cc2fef6af085b82aa5/packages/next/src/build/webpack/config/blocks/base.ts#L61)\n          if (!newConfig.devtool) {\n            core.debug.log(`[@sentry/nextjs] Automatically enabling source map generation for ${runtime} build.`);\n            // `hidden-source-map` produces the same sourcemaps as `source-map`, but doesn't include the `sourceMappingURL`\n            // comment at the bottom. For folks who aren't publicly hosting their sourcemaps, this is helpful because then\n            // the browser won't look for them and throw errors into the console when it can't find them. Because this is a\n            // front-end-only problem, and because `sentry-cli` handles sourcemaps more reliably with the comment than\n            // without, the option to use `hidden-source-map` only applies to the client-side build.\n            if (isServer) {\n              newConfig.devtool = 'source-map';\n            } else {\n              newConfig.devtool = 'hidden-source-map';\n            }\n          }\n\n          // enable source map deletion if not explicitly disabled\n          if (!isServer && userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n            core.debug.warn(\n              '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n            );\n            userSentryOptions.sourcemaps = {\n              ...userSentryOptions.sourcemaps,\n              deleteSourcemapsAfterUpload: true,\n            };\n          }\n        }\n\n        newConfig.plugins = newConfig.plugins || [];\n        const { config: userNextConfig, dir, nextRuntime } = buildContext;\n        const buildTool = isServer ? (nextRuntime === 'edge' ? 'webpack-edge' : 'webpack-nodejs') : 'webpack-client';\n        const projectDir = getBuildPluginOptions.normalizePathForGlob(dir);\n        const distDir = getBuildPluginOptions.normalizePathForGlob((userNextConfig ).distDir ?? '.next');\n        const distDirAbsPath = path.posix.join(projectDir, distDir);\n\n        const sentryWebpackPluginInstance = sentryWebpackPlugin(\n          getBuildPluginOptions.getBuildPluginOptions({\n            sentryBuildOptions: userSentryOptions,\n            releaseName,\n            distDirAbsPath,\n            buildTool,\n            useRunAfterProductionCompileHook,\n          }),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        sentryWebpackPluginInstance._name = 'sentry-webpack-plugin'; // For tests and debugging. Serves no other purpose.\n        newConfig.plugins.push(sentryWebpackPluginInstance);\n      }\n    }\n\n    if (userSentryOptions.disableLogger) {\n      newConfig.plugins = newConfig.plugins || [];\n      newConfig.plugins.push(\n        new buildContext.webpack.DefinePlugin({\n          __SENTRY_DEBUG__: false,\n        }),\n      );\n    }\n\n    // We inject a map of dependencies that the nextjs app has, as we cannot reliably extract them at runtime, sadly\n    newConfig.plugins = newConfig.plugins || [];\n    newConfig.plugins.push(\n      new buildContext.webpack.DefinePlugin({\n        __SENTRY_SERVER_MODULES__: JSON.stringify(_getModules(projectDir)),\n      }),\n    );\n\n    return newConfig;\n  };\n}\n\n/**\n * Modify the webpack `entry` property so that the code in `sentry.client.config.js` is\n * included in the the necessary bundles.\n *\n * @param currentEntryProperty The value of the property before Sentry code has been injected\n * @param buildContext Object passed by nextjs containing metadata about the build\n * @returns The value which the new `entry` property (which will be a function) will return (TODO: this should return\n * the function, rather than the function's return value)\n */\nasync function addSentryToClientEntryProperty(\n  currentEntryProperty,\n  buildContext,\n) {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  const { dir: projectDir, dev: isDevMode } = buildContext;\n\n  const newEntryProperty =\n    typeof currentEntryProperty === 'function' ? await currentEntryProperty() : { ...currentEntryProperty };\n\n  const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n  const instrumentationClientFileName = getInstrumentationClientFile(projectDir);\n\n  const filesToInject = [];\n  if (clientSentryConfigFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${clientSentryConfigFileName}`);\n  }\n  if (instrumentationClientFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${instrumentationClientFileName}`);\n  }\n\n  // inject into all entry points which might contain user's code\n  for (const entryPointName in newEntryProperty) {\n    if (\n      entryPointName === 'pages/_app' ||\n      // entrypoint for `/app` pages\n      entryPointName === 'main-app'\n    ) {\n      addFilesToWebpackEntryPoint(newEntryProperty, entryPointName, filesToInject, isDevMode);\n    }\n  }\n\n  return newEntryProperty;\n}\n\n/**\n * Gets the content of the user's instrumentation file\n */\nfunction getInstrumentationFile(projectDir, dotPrefixedExtensions) {\n  const paths = dotPrefixedExtensions.flatMap(extension => [\n    ['src', `instrumentation${extension}`],\n    [`instrumentation${extension}`],\n  ]);\n\n  for (const pathSegments of paths) {\n    try {\n      return fs.readFileSync(path.resolve(projectDir, ...pathSegments), { encoding: 'utf-8' });\n    } catch {\n      // no-op\n    }\n  }\n\n  return null;\n}\n\n/**\n * Make sure the instrumentation file has a `onRequestError` Handler\n */\nfunction warnAboutMissingOnRequestErrorHandler(instrumentationFile) {\n  if (!instrumentationFile) {\n    if (!process.env.SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        chalk.yellow(\n          '[@sentry/nextjs] Could not find a Next.js instrumentation file. This indicates an incomplete configuration of the Sentry SDK. An instrumentation file is required for the Sentry SDK to be initialized on the server: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#create-initialization-config-files (you can suppress this warning by setting SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING=1 as environment variable)',\n        ),\n      );\n    }\n    return;\n  }\n\n  if (!instrumentationFile.includes('onRequestError')) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      chalk.yellow(\n        '[@sentry/nextjs] Could not find `onRequestError` hook in instrumentation file. This indicates outdated configuration of the Sentry SDK. Use `Sentry.captureRequestError` to instrument the `onRequestError` hook: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#errors-from-nested-react-server-components',\n      ),\n    );\n  }\n}\n\n/**\n * Searches for old `sentry.(server|edge).config.ts` files and Next.js instrumentation hooks and warns if there are \"old\"\n * config files and no signs of them inside the instrumentation hook.\n *\n * @param projectDir The root directory of the project, where config files would be located\n * @param platform Either \"server\" or \"edge\", so that we know which file to look for\n */\nfunction warnAboutDeprecatedConfigFiles(\n  projectDir,\n  instrumentationFile,\n  platform,\n) {\n  const hasInstrumentationHookWithIndicationsOfSentry =\n    instrumentationFile &&\n    (instrumentationFile.includes('@sentry/') ||\n      instrumentationFile.match(/sentry\\.(server|edge)\\.config(\\.(ts|js))?/));\n\n  if (hasInstrumentationHookWithIndicationsOfSentry) {\n    return;\n  }\n\n  for (const filename of [`sentry.${platform}.config.ts`, `sentry.${platform}.config.js`]) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] It appears you've configured a \\`${filename}\\` file. Please ensure to put this file's content into the \\`register()\\` function of a Next.js instrumentation file instead. To ensure correct functionality of the SDK, \\`Sentry.init\\` must be called inside of an instrumentation file. Learn more about setting up an instrumentation file in Next.js: https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation. You can safely delete the \\`${filename}\\` file afterward.`,\n      );\n    }\n  }\n}\n\n/**\n * Searches for a `sentry.client.config.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getClientSentryConfigFile(projectDir) {\n  const possibilities = ['sentry.client.config.ts', 'sentry.client.config.js'];\n\n  for (const filename of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      return filename;\n    }\n  }\n}\n\n/**\n * Searches for a `instrumentation-client.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getInstrumentationClientFile(projectDir) {\n  const possibilities = [\n    ['src', 'instrumentation-client.js'],\n    ['src', 'instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n  ];\n\n  for (const pathParts of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, ...pathParts))) {\n      return path.join(...pathParts);\n    }\n  }\n}\n\n/**\n * Add files to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param entryPointName The key where the file should be injected\n * @param filesToInsert An array of paths to the injected files\n */\nfunction addFilesToWebpackEntryPoint(\n  entryProperty,\n  entryPointName,\n  filesToInsert,\n  isDevMode,\n) {\n  // BIG FAT NOTE: Order of insertion seems to matter here. If we insert the new files before the `currentEntrypoint`s,\n  // the Next.js dev server breaks. Because we generally still want the SDK to be initialized as early as possible we\n  // still keep it at the start of the entrypoints if we are not in dev mode.\n\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  const currentEntryPoint = entryProperty[entryPointName];\n  let newEntryPoint = currentEntryPoint;\n\n  if (typeof currentEntryPoint === 'string' || Array.isArray(currentEntryPoint)) {\n    newEntryPoint = Array.isArray(currentEntryPoint) ? currentEntryPoint : [currentEntryPoint];\n    if (newEntryPoint.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newEntryPoint.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newEntryPoint.unshift(...filesToInsert);\n    }\n  }\n  // descriptor object (webpack 5+)\n  else if (typeof currentEntryPoint === 'object' && 'import' in currentEntryPoint) {\n    const currentImportValue = currentEntryPoint.import;\n    const newImportValue = Array.isArray(currentImportValue) ? currentImportValue : [currentImportValue];\n    if (newImportValue.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newImportValue.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newImportValue.unshift(...filesToInsert);\n    }\n\n    newEntryPoint = {\n      ...currentEntryPoint,\n      import: newImportValue,\n    };\n  }\n  // malformed entry point (use `console.error` rather than `debug.error` because it will always be printed, regardless\n  // of SDK settings)\n  else {\n    // eslint-disable-next-line no-console\n    console.error(\n      'Sentry Logger [Error]:',\n      `Could not inject SDK initialization code into entry point ${entryPointName}, as its current value is not in a recognized format.\\n`,\n      'Expected: string | Array<string> | { [key:string]: any, import: string | Array<string> }\\n',\n      `Got: ${currentEntryPoint}`,\n    );\n  }\n\n  if (newEntryPoint) {\n    entryProperty[entryPointName] = newEntryPoint;\n  }\n}\n\n/**\n * Ensure that `newConfig.module.rules` exists. Modifies the given config in place but also returns it in order to\n * change its type.\n *\n * @param newConfig A webpack config object which may or may not contain `module` and `module.rules`\n * @returns The same object, with an empty `module.rules` array added if necessary\n */\nfunction setUpModuleRules(newConfig) {\n  newConfig.module = {\n    ...newConfig.module,\n    rules: [...(newConfig.module?.rules || [])],\n  };\n  // Surprising that we have to assert the type here, since we've demonstrably guaranteed the existence of\n  // `newConfig.module.rules` just above, but ¯\\_(ツ)_/¯\n  return newConfig ;\n}\n\n/**\n * Adds loaders to inject values on the global object based on user configuration.\n */\n// TODO: Remove this loader and replace it with a nextConfig.env (https://web.archive.org/web/20240917153554/https://nextjs.org/docs/app/api-reference/next-config-js/env) or define based (https://github.com/vercel/next.js/discussions/71476) approach.\n// In order to remove this loader though we need to make sure the minimum supported Next.js version includes this PR (https://github.com/vercel/next.js/pull/61194), otherwise the nextConfig.env based approach will not work, as our SDK code is not processed by Next.js.\nfunction addValueInjectionLoader({\n  newConfig,\n  userNextConfig,\n  userSentryOptions,\n  buildContext,\n  releaseName,\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n\n  // Check if release creation is disabled to prevent injection that breaks build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseToInject = releaseName && shouldCreateRelease ? releaseName : undefined;\n\n  const isomorphicValues = {\n    // `rewritesTunnel` set by the user in Next.js config\n    _sentryRewritesTunnelPath:\n      userSentryOptions.tunnelRoute !== undefined &&\n      userNextConfig.output !== 'export' &&\n      typeof userSentryOptions.tunnelRoute === 'string'\n        ? `${userNextConfig.basePath ?? ''}${userSentryOptions.tunnelRoute}`\n        : undefined,\n\n    // The webpack plugin's release injection breaks the `app` directory so we inject the release manually here instead.\n    // Having a release defined in dev-mode spams releases in Sentry so we only set one in non-dev mode\n    // Only inject if release creation is not explicitly disabled (to maintain build determinism)\n    SENTRY_RELEASE: releaseToInject && !buildContext.dev ? { id: releaseToInject } : undefined,\n    _sentryBasePath: buildContext.dev ? userNextConfig.basePath : undefined,\n    // This is used to determine version-based dev-symbolication behavior\n    _sentryNextJsVersion: nextJsVersion,\n  };\n\n  const serverValues = {\n    ...isomorphicValues,\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n  };\n\n  const clientValues = {\n    ...isomorphicValues,\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n    _sentryAssetPrefix: userNextConfig.assetPrefix,\n    _sentryExperimentalThirdPartyOriginStackFrames: userSentryOptions._experimental?.thirdPartyOriginStackFrames\n      ? 'true'\n      : undefined,\n    _sentryRouteManifest: JSON.stringify(routeManifest),\n  };\n\n  if (buildContext.isServer) {\n    newConfig.module.rules.push({\n      // TODO: Find a more bulletproof way of matching. For now this is fine and doesn't hurt anyone. It merely sets some globals.\n      test: /(src[\\\\/])?instrumentation.(js|ts)/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: serverValues,\n          },\n        },\n      ],\n    });\n  } else {\n    newConfig.module.rules.push({\n      test: /(?:sentry\\.client\\.config\\.(jsx?|tsx?)|(?:src[\\\\/])?instrumentation-client\\.(js|ts))$/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: clientValues,\n          },\n        },\n      ],\n    });\n  }\n}\n\nfunction resolveNextPackageDirFromDirectory(basedir) {\n  try {\n    return path.dirname(resolve.sync('next/package.json', { basedir }));\n  } catch {\n    // Should not happen in theory\n    return undefined;\n  }\n}\n\nconst POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS = [\n  // Original location of RequestAsyncStorage\n  // https://github.com/vercel/next.js/blob/46151dd68b417e7850146d00354f89930d10b43b/packages/next/src/client/components/request-async-storage.ts\n  'next/dist/client/components/request-async-storage.js',\n  // Introduced in Next.js 13.4.20\n  // https://github.com/vercel/next.js/blob/e1bc270830f2fc2df3542d4ef4c61b916c802df3/packages/next/src/client/components/request-async-storage.external.ts\n  'next/dist/client/components/request-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.180\n  // https://github.com/vercel/next.js/blob/541167b9b0fed6af9f36472e632863ffec41f18c/packages/next/src/server/app-render/work-unit-async-storage.external.ts\n  'next/dist/server/app-render/work-unit-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.182\n  // https://github.com/vercel/next.js/blob/f35159e5e80138ca7373f57b47edcaae3bcf1728/packages/next/src/client/components/work-unit-async-storage.external.ts\n  'next/dist/client/components/work-unit-async-storage.external.js',\n];\n\nfunction getRequestAsyncStorageModuleLocation(\n  webpackContextDir,\n  webpackResolvableModuleLocations,\n) {\n  if (webpackResolvableModuleLocations === undefined) {\n    return undefined;\n  }\n\n  const absoluteWebpackResolvableModuleLocations = webpackResolvableModuleLocations.map(loc =>\n    path.resolve(webpackContextDir, loc),\n  );\n\n  for (const webpackResolvableLocation of absoluteWebpackResolvableModuleLocations) {\n    const nextPackageDir = resolveNextPackageDirFromDirectory(webpackResolvableLocation);\n    if (nextPackageDir) {\n      const asyncLocalStorageLocation = POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS.find(loc =>\n        fs.existsSync(path.join(nextPackageDir, '..', loc)),\n      );\n      if (asyncLocalStorageLocation) {\n        return asyncLocalStorageLocation;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction addOtelWarningIgnoreRule(newConfig) {\n  const ignoreRules = [\n    // Inspired by @matmannion: https://github.com/getsentry/sentry-javascript/issues/12077#issuecomment-2180307072\n    (warning, compilation) => {\n      // This is wrapped in try-catch because we are vendoring types for this hook and we can't be 100% sure that we are accessing API that is there\n      try {\n        if (!warning.module) {\n          return false;\n        }\n\n        const isDependencyThatMayRaiseCriticalDependencyMessage =\n          /@opentelemetry\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener)) ||\n          /@prisma\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener));\n        const isCriticalDependencyMessage = /Critical dependency/.test(warning.message);\n\n        return isDependencyThatMayRaiseCriticalDependencyMessage && isCriticalDependencyMessage;\n      } catch {\n        return false;\n      }\n    },\n    // We provide these objects in addition to the hook above to provide redundancy in case the hook fails.\n    { module: /@opentelemetry\\/instrumentation/, message: /Critical dependency/ },\n    { module: /@prisma\\/instrumentation/, message: /Critical dependency/ },\n    { module: /require-in-the-middle/, message: /Critical dependency/ },\n  ] ;\n\n  if (newConfig.ignoreWarnings === undefined) {\n    newConfig.ignoreWarnings = ignoreRules;\n  } else if (Array.isArray(newConfig.ignoreWarnings)) {\n    newConfig.ignoreWarnings.push(...ignoreRules);\n  }\n}\n\nfunction addEdgeRuntimePolyfills(newConfig, buildContext) {\n  // Use ProvidePlugin to inject performance global only when accessed\n  newConfig.plugins = newConfig.plugins || [];\n  newConfig.plugins.push(\n    new buildContext.webpack.ProvidePlugin({\n      performance: [path.resolve(__dirname, 'polyfills', 'perf_hooks.js'), 'performance'],\n    }),\n  );\n\n  // Add module resolution aliases for problematic Node.js modules in edge runtime\n  newConfig.resolve = newConfig.resolve || {};\n  newConfig.resolve.alias = {\n    ...newConfig.resolve.alias,\n    // Redirect perf_hooks imports to a polyfilled version\n    perf_hooks: path.resolve(__dirname, 'polyfills', 'perf_hooks.js'),\n  };\n}\n\nfunction _getModules(projectDir) {\n  try {\n    const packageJson = path.join(projectDir, 'package.json');\n    const packageJsonContent = fs.readFileSync(packageJson, 'utf8');\n    const packageJsonObject = JSON.parse(packageJsonContent)\n\n;\n\n    return {\n      ...packageJsonObject.dependencies,\n      ...packageJsonObject.devDependencies,\n    };\n  } catch {\n    return {};\n  }\n}\n\nexports.constructWebpackConfigFunction = constructWebpackConfigFunction;\n//# sourceMappingURL=webpack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst handleRunAfterProductionCompile = __webpack_require__(/*! ./handleRunAfterProductionCompile.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js\");\nconst createRouteManifest = __webpack_require__(/*! ./manifest/createRouteManifest.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\");\nconst constructTurbopackConfig = __webpack_require__(/*! ./turbopack/constructTurbopackConfig.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\");\nconst webpack = __webpack_require__(/*! ./webpack.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js\");\n\n/* eslint-disable max-lines */\n/* eslint-disable complexity */\n\nlet showedExportModeTunnelWarning = false;\nlet showedExperimentalBuildModeWarning = false;\n\n// Packages we auto-instrument need to be external for instrumentation to work\n// Next.js externalizes some packages by default, see: https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages\n// Others we need to add ourselves\n//\n// NOTE: 'ai' (Vercel AI SDK) is intentionally NOT included in this list.\n// When externalized, Next.js doesn't properly handle the package's conditional exports,\n// specifically the \"react-server\" export condition. This causes client-side code to be\n// loaded in server components instead of the appropriate server-side functions.\nconst DEFAULT_SERVER_EXTERNAL_PACKAGES = [\n  'amqplib',\n  'connect',\n  'dataloader',\n  'express',\n  'generic-pool',\n  'graphql',\n  '@hapi/hapi',\n  'ioredis',\n  'kafkajs',\n  'koa',\n  'lru-memoizer',\n  'mongodb',\n  'mongoose',\n  'mysql',\n  'mysql2',\n  'knex',\n  'pg',\n  'pg-pool',\n  '@node-redis/client',\n  '@redis/client',\n  'redis',\n  'tedious',\n];\n\n/**\n * Modifies the passed in Next.js configuration with automatic build-time instrumentation and source map upload.\n *\n * @param nextConfig A Next.js configuration object, as usually exported in `next.config.js` or `next.config.mjs`.\n * @param sentryBuildOptions Additional options to configure instrumentation and\n * @returns The modified config to be exported\n */\nfunction withSentryConfig(nextConfig, sentryBuildOptions = {}) {\n  const castNextConfig = (nextConfig ) || {};\n  if (typeof castNextConfig === 'function') {\n    return function ( ...webpackConfigFunctionArgs) {\n      const maybePromiseNextConfig = castNextConfig.apply(\n        this,\n        webpackConfigFunctionArgs,\n      );\n\n      if (core.isThenable(maybePromiseNextConfig)) {\n        return maybePromiseNextConfig.then(promiseResultNextConfig => {\n          return getFinalConfigObject(promiseResultNextConfig, sentryBuildOptions);\n        });\n      }\n\n      return getFinalConfigObject(maybePromiseNextConfig, sentryBuildOptions);\n    } ;\n  } else {\n    return getFinalConfigObject(castNextConfig, sentryBuildOptions) ;\n  }\n}\n\n/**\n * Generates a random tunnel route path that's less likely to be blocked by ad-blockers\n */\nfunction generateRandomTunnelRoute() {\n  // Generate a random 8-character alphanumeric string\n  const randomString = Math.random().toString(36).substring(2, 10);\n  return `/${randomString}`;\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(\n  incomingUserNextConfigObject,\n  userSentryOptions,\n) {\n  // Only determine a release name if release creation is not explicitly disabled\n  // This prevents injection of Git commit hashes that break build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseName = shouldCreateRelease\n    ? (userSentryOptions.release?.name ?? node.getSentryRelease() ?? getGitRevision())\n    : userSentryOptions.release?.name;\n\n  if (userSentryOptions?.tunnelRoute) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses server-side features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option',\n        );\n      }\n    } else {\n      const resolvedTunnelRoute =\n        userSentryOptions.tunnelRoute === true ? generateRandomTunnelRoute() : userSentryOptions.tunnelRoute;\n\n      // Update the global options object to use the resolved value everywhere\n      userSentryOptions.tunnelRoute = resolvedTunnelRoute || undefined;\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, resolvedTunnelRoute);\n    }\n  }\n\n  if (process.argv.includes('--experimental-build-mode')) {\n    if (!showedExperimentalBuildModeWarning) {\n      showedExperimentalBuildModeWarning = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The Sentry Next.js SDK does not currently fully support next build --experimental-build-mode',\n      );\n    }\n    if (process.argv.includes('generate')) {\n      // Next.js v15.3.0-canary.1 splits the experimental build into two phases:\n      // 1. compile: Code compilation\n      // 2. generate: Environment variable inlining and prerendering (We don't instrument this phase, we inline in the compile phase)\n      //\n      // We assume a single \"full\" build and reruns Webpack instrumentation in both phases.\n      // During the generate step it collides with Next.js's inliner\n      // producing malformed JS and build failures.\n      // We skip Sentry processing during generate to avoid this issue.\n      return incomingUserNextConfigObject;\n    }\n  }\n\n  let routeManifest;\n  if (!userSentryOptions.disableManifestInjection) {\n    routeManifest = createRouteManifest.createRouteManifest();\n  }\n\n  setUpBuildTimeVariables(incomingUserNextConfigObject, userSentryOptions, releaseName);\n\n  const nextJsVersion = util.getNextjsVersion();\n\n  // Add the `clientTraceMetadata` experimental option based on Next.js version. The option got introduced in Next.js version 15.0.0 (actually 14.3.0-canary.64).\n  // Adding the option on lower versions will cause Next.js to print nasty warnings we wouldn't confront our users with.\n  if (nextJsVersion) {\n    const { major, minor } = core.parseSemver(nextJsVersion);\n    if (major !== undefined && minor !== undefined && (major >= 15 || (major === 14 && minor >= 3))) {\n      incomingUserNextConfigObject.experimental = incomingUserNextConfigObject.experimental || {};\n      incomingUserNextConfigObject.experimental.clientTraceMetadata = [\n        'baggage',\n        'sentry-trace',\n        ...(incomingUserNextConfigObject.experimental?.clientTraceMetadata || []),\n      ];\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\n      \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, please add `experimental.clientTraceMetadata: ['sentry-trace', 'baggage']` to your Next.js config to enable pageload tracing for App Router.\",\n    );\n  }\n\n  // From Next.js version (15.0.0-canary.124) onwards, Next.js does no longer require the `experimental.instrumentationHook` option and will\n  // print a warning when it is set, so we need to conditionally provide it for lower versions.\n  if (nextJsVersion) {\n    const { major, minor, patch, prerelease } = core.parseSemver(nextJsVersion);\n    const isFullySupportedRelease =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      major >= 15 &&\n      ((minor === 0 && patch === 0 && prerelease === undefined) || minor > 0 || patch > 0);\n    const isSupportedV15Rc =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('rc.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) > 0;\n    const isSupportedCanary =\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('canary.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) >= 124;\n\n    if (!isFullySupportedRelease && !isSupportedV15Rc && !isSupportedCanary) {\n      if (incomingUserNextConfigObject.experimental?.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You turned off the `experimental.instrumentationHook` option. Note that Sentry will not be initialized if you did not set it up inside `instrumentation.(js|ts)`.',\n        );\n      }\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  } else {\n    // If we cannot detect a Next.js version for whatever reason, the sensible default is to set the `experimental.instrumentationHook`, even though it may create a warning.\n    if (\n      incomingUserNextConfigObject.experimental &&\n      'instrumentationHook' in incomingUserNextConfigObject.experimental\n    ) {\n      if (incomingUserNextConfigObject.experimental.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You set `experimental.instrumentationHook` to `false`. If you are using Next.js version 15 or greater, you can remove that option. If you are using Next.js version 14 or lower, you need to set `experimental.instrumentationHook` in your `next.config.(js|mjs)` to `true` for the SDK to be properly initialized in combination with `instrumentation.(js|ts)`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, Next.js will probably show you a warning about the `experimental.instrumentationHook` being set. To silence Next.js' warning, explicitly set the `experimental.instrumentationHook` option in your `next.config.(js|mjs|ts)` to `undefined`. If you are on Next.js version 14 or lower, you can silence this particular warning by explicitly setting the `experimental.instrumentationHook` option in your `next.config.(js|mjs)` to `true`.\",\n      );\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  }\n\n  // We wanna check whether the user added a `onRouterTransitionStart` handler to their client instrumentation file.\n  const instrumentationClientFileContents = getInstrumentationClientFileContents();\n  if (\n    instrumentationClientFileContents !== undefined &&\n    !instrumentationClientFileContents.includes('onRouterTransitionStart') &&\n    !userSentryOptions.suppressOnRouterTransitionStartWarning\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] ACTION REQUIRED: To instrument navigations, the Sentry SDK requires you to export an `onRouterTransitionStart` hook from your `instrumentation-client.(js|ts)` file. You can do so by adding `export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;` to the file.',\n    );\n  }\n\n  let nextMajor;\n  if (nextJsVersion) {\n    const { major } = core.parseSemver(nextJsVersion);\n    nextMajor = major;\n  }\n\n  const isTurbopack = false;\n  const isTurbopackSupported = util.supportsProductionCompileHook(nextJsVersion ?? '');\n\n  if (!isTurbopackSupported && isTurbopack) {\n    if (true) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] WARNING: You are using the Sentry SDK with Turbopack (\\`next dev --turbopack\\`). The Sentry SDK is compatible with Turbopack on Next.js version 15.4.1 or later. You are currently on ${nextJsVersion}. Please upgrade to a newer Next.js version to use the Sentry SDK with Turbopack.`,\n      );\n    } else {}\n  }\n\n  // webpack case\n  if (\n    userSentryOptions.useRunAfterProductionCompileHook &&\n    !util.supportsProductionCompileHook(nextJsVersion ?? '') &&\n    !isTurbopack\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] The configured `useRunAfterProductionCompileHook` option is not compatible with your current Next.js version. This option is only supported on Next.js version 15.4.1 or later. Will not run source map and release management logic.',\n    );\n  }\n\n  // If not explicitly set, turbopack uses the runAfterProductionCompile hook (as there are no alternatives), webpack does not.\n  const shouldUseRunAfterProductionCompileHook =\n    userSentryOptions?.useRunAfterProductionCompileHook ?? (isTurbopack ? true : false);\n\n  if (shouldUseRunAfterProductionCompileHook && util.supportsProductionCompileHook(nextJsVersion ?? '')) {\n    if (incomingUserNextConfigObject?.compiler?.runAfterProductionCompile === undefined) {\n      incomingUserNextConfigObject.compiler ??= {};\n      incomingUserNextConfigObject.compiler.runAfterProductionCompile = async ({ distDir }) => {\n        await handleRunAfterProductionCompile.handleRunAfterProductionCompile(\n          { releaseName, distDir, buildTool: isTurbopack ? 'turbopack' : 'webpack' },\n          userSentryOptions,\n        );\n      };\n    } else if (typeof incomingUserNextConfigObject.compiler.runAfterProductionCompile === 'function') {\n      incomingUserNextConfigObject.compiler.runAfterProductionCompile = new Proxy(\n        incomingUserNextConfigObject.compiler.runAfterProductionCompile,\n        {\n          async apply(target, thisArg, argArray) {\n            const { distDir } = argArray[0] ?? { distDir: '.next' };\n            await target.apply(thisArg, argArray);\n            await handleRunAfterProductionCompile.handleRunAfterProductionCompile(\n              { releaseName, distDir, buildTool: isTurbopack ? 'turbopack' : 'webpack' },\n              userSentryOptions,\n            );\n          },\n        },\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The configured `compiler.runAfterProductionCompile` option is not a function. Will not run source map and release management logic.',\n      );\n    }\n  }\n\n  // Enable source maps for turbopack builds\n  if (isTurbopackSupported && isTurbopack && !userSentryOptions.sourcemaps?.disable) {\n    // Only set if not already configured by user\n    if (incomingUserNextConfigObject.productionBrowserSourceMaps === undefined) {\n      if (userSentryOptions.debug) {\n        // eslint-disable-next-line no-console\n        console.log('[@sentry/nextjs] Automatically enabling browser source map generation for turbopack build.');\n      }\n      incomingUserNextConfigObject.productionBrowserSourceMaps = true;\n\n      // Enable source map deletion if not explicitly disabled\n      if (userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n        if (userSentryOptions.debug) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n          );\n        }\n\n        userSentryOptions.sourcemaps = {\n          ...userSentryOptions.sourcemaps,\n          deleteSourcemapsAfterUpload: true,\n        };\n      }\n    }\n  }\n\n  return {\n    ...incomingUserNextConfigObject,\n    ...(nextMajor && nextMajor >= 15\n      ? {\n          serverExternalPackages: [\n            ...(incomingUserNextConfigObject.serverExternalPackages || []),\n            ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n          ],\n        }\n      : {\n          experimental: {\n            ...incomingUserNextConfigObject.experimental,\n            serverComponentsExternalPackages: [\n              ...(incomingUserNextConfigObject.experimental?.serverComponentsExternalPackages || []),\n              ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n            ],\n          },\n        }),\n    webpack:\n      isTurbopack || userSentryOptions.disableSentryWebpackConfig\n        ? incomingUserNextConfigObject.webpack // just return the original webpack config\n        : webpack.constructWebpackConfigFunction({\n            userNextConfig: incomingUserNextConfigObject,\n            userSentryOptions,\n            releaseName,\n            routeManifest,\n            nextJsVersion,\n            useRunAfterProductionCompileHook: shouldUseRunAfterProductionCompileHook,\n          }),\n    ...(isTurbopackSupported && isTurbopack\n      ? {\n          turbopack: constructTurbopackConfig.constructTurbopackConfig({\n            userNextConfig: incomingUserNextConfigObject,\n            routeManifest,\n            nextJsVersion,\n          }),\n        }\n      : {}),\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig, tunnelPath) {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args) => {\n    const tunnelRouteRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    const tunnelRouteRewriteWithRegion = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]?r=[region]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'r', // short for region - we keep it short so matching is harder for ad-blockers\n          value: '(?<region>[a-z]{2})',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.:region.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    // Order of these is important, they get applied first to last.\n    const newRewrites = [tunnelRouteRewriteWithRegion, tunnelRouteRewrite];\n\n    if (typeof originalRewrites !== 'function') {\n      return newRewrites;\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n\n    if (Array.isArray(originalRewritesResult)) {\n      return [...newRewrites, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [...newRewrites, ...(originalRewritesResult.beforeFiles || [])],\n      };\n    }\n  };\n}\n\nfunction setUpBuildTimeVariables(\n  userNextConfig,\n  userSentryOptions,\n  releaseName,\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n  const basePath = userNextConfig.basePath ?? '';\n\n  const rewritesTunnelPath =\n    userSentryOptions.tunnelRoute !== undefined &&\n    userNextConfig.output !== 'export' &&\n    typeof userSentryOptions.tunnelRoute === 'string'\n      ? `${basePath}${userSentryOptions.tunnelRoute}`\n      : undefined;\n\n  const buildTimeVariables = {\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n  };\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._assetsPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (rewritesTunnelPath) {\n    buildTimeVariables._sentryRewritesTunnelPath = rewritesTunnelPath;\n  }\n\n  if (basePath) {\n    buildTimeVariables._sentryBasePath = basePath;\n  }\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._sentryAssetPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (releaseName) {\n    buildTimeVariables._sentryRelease = releaseName;\n  }\n\n  if (typeof userNextConfig.env === 'object') {\n    userNextConfig.env = { ...buildTimeVariables, ...userNextConfig.env };\n  } else if (userNextConfig.env === undefined) {\n    userNextConfig.env = buildTimeVariables;\n  }\n}\n\nfunction getGitRevision() {\n  let gitRevision;\n  try {\n    gitRevision = childProcess\n      .execSync('git rev-parse HEAD', { stdio: ['ignore', 'pipe', 'ignore'] })\n      .toString()\n      .trim();\n  } catch {\n    // noop\n  }\n  return gitRevision;\n}\n\nfunction getInstrumentationClientFileContents() {\n  const potentialInstrumentationClientFileLocations = [\n    ['src', 'instrumentation-client.ts'],\n    ['src', 'instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n  ];\n\n  for (const pathSegments of potentialInstrumentationClientFileLocations) {\n    try {\n      return fs.readFileSync(path.join(process.cwd(), ...pathSegments), 'utf-8');\n    } catch {\n      // noop\n    }\n  }\n}\n\nexports.DEFAULT_SERVER_EXTERNAL_PACKAGES = DEFAULT_SERVER_EXTERNAL_PACKAGES;\nexports.withSentryConfig = withSentryConfig;\n//# sourceMappingURL=withSentryConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvd2l0aFNlbnRyeUNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLHlLQUFjO0FBQ25DLHFCQUFxQixtQkFBTyxDQUFDLG9DQUFlO0FBQzVDLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQix3Q0FBd0MsbUJBQU8sQ0FBQyw0UkFBc0M7QUFDdEYsNEJBQTRCLG1CQUFPLENBQUMsc1JBQW1DO0FBQ3ZFLGlDQUFpQyxtQkFBTyxDQUFDLGtTQUF5QztBQUNsRixhQUFhLG1CQUFPLENBQUMsc09BQVc7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMsNE9BQWM7O0FBRXRDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0NBQWtDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlTQUFpUztBQUNqUztBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTs7QUFFQSxzQkFBc0IsS0FBcUI7QUFDM0M7O0FBRUE7QUFDQSxRQUFRLElBQXNDO0FBQzlDO0FBQ0E7QUFDQSxrTkFBa04sY0FBYztBQUNoTztBQUNBLE1BQU0sS0FBSyxFQUtOO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLFNBQVM7QUFDMUY7QUFDQSxZQUFZLHdFQUF3RTtBQUNwRjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVSxtQkFBbUI7QUFDakQ7QUFDQTtBQUNBLGdCQUFnQix3RUFBd0U7QUFDeEY7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLEVBQUU7QUFDcEMsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVMsRUFBRSw4QkFBOEI7QUFDcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MscUNBQXFDO0FBQzdFO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdDQUF3QztBQUN4Qyx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy93aXRoU2VudHJ5Q29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBub2RlID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG5jb25zdCBjaGlsZFByb2Nlc3MgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgaGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZSA9IHJlcXVpcmUoJy4vaGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZS5qcycpO1xuY29uc3QgY3JlYXRlUm91dGVNYW5pZmVzdCA9IHJlcXVpcmUoJy4vbWFuaWZlc3QvY3JlYXRlUm91dGVNYW5pZmVzdC5qcycpO1xuY29uc3QgY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnID0gcmVxdWlyZSgnLi90dXJib3BhY2svY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnLmpzJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi91dGlsLmpzJyk7XG5jb25zdCB3ZWJwYWNrID0gcmVxdWlyZSgnLi93ZWJwYWNrLmpzJyk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1saW5lcyAqL1xuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSAqL1xuXG5sZXQgc2hvd2VkRXhwb3J0TW9kZVR1bm5lbFdhcm5pbmcgPSBmYWxzZTtcbmxldCBzaG93ZWRFeHBlcmltZW50YWxCdWlsZE1vZGVXYXJuaW5nID0gZmFsc2U7XG5cbi8vIFBhY2thZ2VzIHdlIGF1dG8taW5zdHJ1bWVudCBuZWVkIHRvIGJlIGV4dGVybmFsIGZvciBpbnN0cnVtZW50YXRpb24gdG8gd29ya1xuLy8gTmV4dC5qcyBleHRlcm5hbGl6ZXMgc29tZSBwYWNrYWdlcyBieSBkZWZhdWx0LCBzZWU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9hcGktcmVmZXJlbmNlL2NvbmZpZy9uZXh0LWNvbmZpZy1qcy9zZXJ2ZXJFeHRlcm5hbFBhY2thZ2VzXG4vLyBPdGhlcnMgd2UgbmVlZCB0byBhZGQgb3Vyc2VsdmVzXG4vL1xuLy8gTk9URTogJ2FpJyAoVmVyY2VsIEFJIFNESykgaXMgaW50ZW50aW9uYWxseSBOT1QgaW5jbHVkZWQgaW4gdGhpcyBsaXN0LlxuLy8gV2hlbiBleHRlcm5hbGl6ZWQsIE5leHQuanMgZG9lc24ndCBwcm9wZXJseSBoYW5kbGUgdGhlIHBhY2thZ2UncyBjb25kaXRpb25hbCBleHBvcnRzLFxuLy8gc3BlY2lmaWNhbGx5IHRoZSBcInJlYWN0LXNlcnZlclwiIGV4cG9ydCBjb25kaXRpb24uIFRoaXMgY2F1c2VzIGNsaWVudC1zaWRlIGNvZGUgdG8gYmVcbi8vIGxvYWRlZCBpbiBzZXJ2ZXIgY29tcG9uZW50cyBpbnN0ZWFkIG9mIHRoZSBhcHByb3ByaWF0ZSBzZXJ2ZXItc2lkZSBmdW5jdGlvbnMuXG5jb25zdCBERUZBVUxUX1NFUlZFUl9FWFRFUk5BTF9QQUNLQUdFUyA9IFtcbiAgJ2FtcXBsaWInLFxuICAnY29ubmVjdCcsXG4gICdkYXRhbG9hZGVyJyxcbiAgJ2V4cHJlc3MnLFxuICAnZ2VuZXJpYy1wb29sJyxcbiAgJ2dyYXBocWwnLFxuICAnQGhhcGkvaGFwaScsXG4gICdpb3JlZGlzJyxcbiAgJ2thZmthanMnLFxuICAna29hJyxcbiAgJ2xydS1tZW1vaXplcicsXG4gICdtb25nb2RiJyxcbiAgJ21vbmdvb3NlJyxcbiAgJ215c3FsJyxcbiAgJ215c3FsMicsXG4gICdrbmV4JyxcbiAgJ3BnJyxcbiAgJ3BnLXBvb2wnLFxuICAnQG5vZGUtcmVkaXMvY2xpZW50JyxcbiAgJ0ByZWRpcy9jbGllbnQnLFxuICAncmVkaXMnLFxuICAndGVkaW91cycsXG5dO1xuXG4vKipcbiAqIE1vZGlmaWVzIHRoZSBwYXNzZWQgaW4gTmV4dC5qcyBjb25maWd1cmF0aW9uIHdpdGggYXV0b21hdGljIGJ1aWxkLXRpbWUgaW5zdHJ1bWVudGF0aW9uIGFuZCBzb3VyY2UgbWFwIHVwbG9hZC5cbiAqXG4gKiBAcGFyYW0gbmV4dENvbmZpZyBBIE5leHQuanMgY29uZmlndXJhdGlvbiBvYmplY3QsIGFzIHVzdWFsbHkgZXhwb3J0ZWQgaW4gYG5leHQuY29uZmlnLmpzYCBvciBgbmV4dC5jb25maWcubWpzYC5cbiAqIEBwYXJhbSBzZW50cnlCdWlsZE9wdGlvbnMgQWRkaXRpb25hbCBvcHRpb25zIHRvIGNvbmZpZ3VyZSBpbnN0cnVtZW50YXRpb24gYW5kXG4gKiBAcmV0dXJucyBUaGUgbW9kaWZpZWQgY29uZmlnIHRvIGJlIGV4cG9ydGVkXG4gKi9cbmZ1bmN0aW9uIHdpdGhTZW50cnlDb25maWcobmV4dENvbmZpZywgc2VudHJ5QnVpbGRPcHRpb25zID0ge30pIHtcbiAgY29uc3QgY2FzdE5leHRDb25maWcgPSAobmV4dENvbmZpZyApIHx8IHt9O1xuICBpZiAodHlwZW9mIGNhc3ROZXh0Q29uZmlnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICggLi4ud2VicGFja0NvbmZpZ0Z1bmN0aW9uQXJncykge1xuICAgICAgY29uc3QgbWF5YmVQcm9taXNlTmV4dENvbmZpZyA9IGNhc3ROZXh0Q29uZmlnLmFwcGx5KFxuICAgICAgICB0aGlzLFxuICAgICAgICB3ZWJwYWNrQ29uZmlnRnVuY3Rpb25BcmdzLFxuICAgICAgKTtcblxuICAgICAgaWYgKGNvcmUuaXNUaGVuYWJsZShtYXliZVByb21pc2VOZXh0Q29uZmlnKSkge1xuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlTmV4dENvbmZpZy50aGVuKHByb21pc2VSZXN1bHROZXh0Q29uZmlnID0+IHtcbiAgICAgICAgICByZXR1cm4gZ2V0RmluYWxDb25maWdPYmplY3QocHJvbWlzZVJlc3VsdE5leHRDb25maWcsIHNlbnRyeUJ1aWxkT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0RmluYWxDb25maWdPYmplY3QobWF5YmVQcm9taXNlTmV4dENvbmZpZywgc2VudHJ5QnVpbGRPcHRpb25zKTtcbiAgICB9IDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0RmluYWxDb25maWdPYmplY3QoY2FzdE5leHRDb25maWcsIHNlbnRyeUJ1aWxkT3B0aW9ucykgO1xuICB9XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHR1bm5lbCByb3V0ZSBwYXRoIHRoYXQncyBsZXNzIGxpa2VseSB0byBiZSBibG9ja2VkIGJ5IGFkLWJsb2NrZXJzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tVHVubmVsUm91dGUoKSB7XG4gIC8vIEdlbmVyYXRlIGEgcmFuZG9tIDgtY2hhcmFjdGVyIGFscGhhbnVtZXJpYyBzdHJpbmdcbiAgY29uc3QgcmFuZG9tU3RyaW5nID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDEwKTtcbiAgcmV0dXJuIGAvJHtyYW5kb21TdHJpbmd9YDtcbn1cblxuLy8gTW9kaWZ5IHRoZSBtYXRlcmlhbGl6ZWQgb2JqZWN0IGZvcm0gb2YgdGhlIHVzZXIncyBuZXh0IGNvbmZpZyBieSBkZWxldGluZyB0aGUgYHNlbnRyeWAgcHJvcGVydHkgYW5kIHdyYXBwaW5nIHRoZVxuLy8gYHdlYnBhY2tgIHByb3BlcnR5XG5mdW5jdGlvbiBnZXRGaW5hbENvbmZpZ09iamVjdChcbiAgaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdCxcbiAgdXNlclNlbnRyeU9wdGlvbnMsXG4pIHtcbiAgLy8gT25seSBkZXRlcm1pbmUgYSByZWxlYXNlIG5hbWUgaWYgcmVsZWFzZSBjcmVhdGlvbiBpcyBub3QgZXhwbGljaXRseSBkaXNhYmxlZFxuICAvLyBUaGlzIHByZXZlbnRzIGluamVjdGlvbiBvZiBHaXQgY29tbWl0IGhhc2hlcyB0aGF0IGJyZWFrIGJ1aWxkIGRldGVybWluaXNtXG4gIGNvbnN0IHNob3VsZENyZWF0ZVJlbGVhc2UgPSB1c2VyU2VudHJ5T3B0aW9ucy5yZWxlYXNlPy5jcmVhdGUgIT09IGZhbHNlO1xuICBjb25zdCByZWxlYXNlTmFtZSA9IHNob3VsZENyZWF0ZVJlbGVhc2VcbiAgICA/ICh1c2VyU2VudHJ5T3B0aW9ucy5yZWxlYXNlPy5uYW1lID8/IG5vZGUuZ2V0U2VudHJ5UmVsZWFzZSgpID8/IGdldEdpdFJldmlzaW9uKCkpXG4gICAgOiB1c2VyU2VudHJ5T3B0aW9ucy5yZWxlYXNlPy5uYW1lO1xuXG4gIGlmICh1c2VyU2VudHJ5T3B0aW9ucz8udHVubmVsUm91dGUpIHtcbiAgICBpZiAoaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5vdXRwdXQgPT09ICdleHBvcnQnKSB7XG4gICAgICBpZiAoIXNob3dlZEV4cG9ydE1vZGVUdW5uZWxXYXJuaW5nKSB7XG4gICAgICAgIHNob3dlZEV4cG9ydE1vZGVUdW5uZWxXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdbQHNlbnRyeS9uZXh0anNdIFRoZSBTZW50cnkgTmV4dC5qcyBTREsgYHR1bm5lbFJvdXRlYCBvcHRpb24gd2lsbCBub3Qgd29yayBpbiBjb21iaW5hdGlvbiB3aXRoIE5leHQuanMgc3RhdGljIGV4cG9ydHMuIFRoZSBgdHVubmVsUm91dGVgIG9wdGlvbiB1c2VzIHNlcnZlci1zaWRlIGZlYXR1cmVzIHRoYXQgY2Fubm90IGJlIGFjY2Vzc2VkIGluIGV4cG9ydCBtb2RlLiBJZiB5b3Ugc3RpbGwgd2FudCB0byB0dW5uZWwgU2VudHJ5IGV2ZW50cywgc2V0IHVwIHlvdXIgb3duIHR1bm5lbDogaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC90cm91Ymxlc2hvb3RpbmcvI3VzaW5nLXRoZS10dW5uZWwtb3B0aW9uJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzb2x2ZWRUdW5uZWxSb3V0ZSA9XG4gICAgICAgIHVzZXJTZW50cnlPcHRpb25zLnR1bm5lbFJvdXRlID09PSB0cnVlID8gZ2VuZXJhdGVSYW5kb21UdW5uZWxSb3V0ZSgpIDogdXNlclNlbnRyeU9wdGlvbnMudHVubmVsUm91dGU7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0IHRvIHVzZSB0aGUgcmVzb2x2ZWQgdmFsdWUgZXZlcnl3aGVyZVxuICAgICAgdXNlclNlbnRyeU9wdGlvbnMudHVubmVsUm91dGUgPSByZXNvbHZlZFR1bm5lbFJvdXRlIHx8IHVuZGVmaW5lZDtcbiAgICAgIHNldFVwVHVubmVsUmV3cml0ZVJ1bGVzKGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QsIHJlc29sdmVkVHVubmVsUm91dGUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmFyZ3YuaW5jbHVkZXMoJy0tZXhwZXJpbWVudGFsLWJ1aWxkLW1vZGUnKSkge1xuICAgIGlmICghc2hvd2VkRXhwZXJpbWVudGFsQnVpbGRNb2RlV2FybmluZykge1xuICAgICAgc2hvd2VkRXhwZXJpbWVudGFsQnVpbGRNb2RlV2FybmluZyA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnW0BzZW50cnkvbmV4dGpzXSBUaGUgU2VudHJ5IE5leHQuanMgU0RLIGRvZXMgbm90IGN1cnJlbnRseSBmdWxseSBzdXBwb3J0IG5leHQgYnVpbGQgLS1leHBlcmltZW50YWwtYnVpbGQtbW9kZScsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5hcmd2LmluY2x1ZGVzKCdnZW5lcmF0ZScpKSB7XG4gICAgICAvLyBOZXh0LmpzIHYxNS4zLjAtY2FuYXJ5LjEgc3BsaXRzIHRoZSBleHBlcmltZW50YWwgYnVpbGQgaW50byB0d28gcGhhc2VzOlxuICAgICAgLy8gMS4gY29tcGlsZTogQ29kZSBjb21waWxhdGlvblxuICAgICAgLy8gMi4gZ2VuZXJhdGU6IEVudmlyb25tZW50IHZhcmlhYmxlIGlubGluaW5nIGFuZCBwcmVyZW5kZXJpbmcgKFdlIGRvbid0IGluc3RydW1lbnQgdGhpcyBwaGFzZSwgd2UgaW5saW5lIGluIHRoZSBjb21waWxlIHBoYXNlKVxuICAgICAgLy9cbiAgICAgIC8vIFdlIGFzc3VtZSBhIHNpbmdsZSBcImZ1bGxcIiBidWlsZCBhbmQgcmVydW5zIFdlYnBhY2sgaW5zdHJ1bWVudGF0aW9uIGluIGJvdGggcGhhc2VzLlxuICAgICAgLy8gRHVyaW5nIHRoZSBnZW5lcmF0ZSBzdGVwIGl0IGNvbGxpZGVzIHdpdGggTmV4dC5qcydzIGlubGluZXJcbiAgICAgIC8vIHByb2R1Y2luZyBtYWxmb3JtZWQgSlMgYW5kIGJ1aWxkIGZhaWx1cmVzLlxuICAgICAgLy8gV2Ugc2tpcCBTZW50cnkgcHJvY2Vzc2luZyBkdXJpbmcgZ2VuZXJhdGUgdG8gYXZvaWQgdGhpcyBpc3N1ZS5cbiAgICAgIHJldHVybiBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0O1xuICAgIH1cbiAgfVxuXG4gIGxldCByb3V0ZU1hbmlmZXN0O1xuICBpZiAoIXVzZXJTZW50cnlPcHRpb25zLmRpc2FibGVNYW5pZmVzdEluamVjdGlvbikge1xuICAgIHJvdXRlTWFuaWZlc3QgPSBjcmVhdGVSb3V0ZU1hbmlmZXN0LmNyZWF0ZVJvdXRlTWFuaWZlc3QoKTtcbiAgfVxuXG4gIHNldFVwQnVpbGRUaW1lVmFyaWFibGVzKGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QsIHVzZXJTZW50cnlPcHRpb25zLCByZWxlYXNlTmFtZSk7XG5cbiAgY29uc3QgbmV4dEpzVmVyc2lvbiA9IHV0aWwuZ2V0TmV4dGpzVmVyc2lvbigpO1xuXG4gIC8vIEFkZCB0aGUgYGNsaWVudFRyYWNlTWV0YWRhdGFgIGV4cGVyaW1lbnRhbCBvcHRpb24gYmFzZWQgb24gTmV4dC5qcyB2ZXJzaW9uLiBUaGUgb3B0aW9uIGdvdCBpbnRyb2R1Y2VkIGluIE5leHQuanMgdmVyc2lvbiAxNS4wLjAgKGFjdHVhbGx5IDE0LjMuMC1jYW5hcnkuNjQpLlxuICAvLyBBZGRpbmcgdGhlIG9wdGlvbiBvbiBsb3dlciB2ZXJzaW9ucyB3aWxsIGNhdXNlIE5leHQuanMgdG8gcHJpbnQgbmFzdHkgd2FybmluZ3Mgd2Ugd291bGRuJ3QgY29uZnJvbnQgb3VyIHVzZXJzIHdpdGguXG4gIGlmIChuZXh0SnNWZXJzaW9uKSB7XG4gICAgY29uc3QgeyBtYWpvciwgbWlub3IgfSA9IGNvcmUucGFyc2VTZW12ZXIobmV4dEpzVmVyc2lvbik7XG4gICAgaWYgKG1ham9yICE9PSB1bmRlZmluZWQgJiYgbWlub3IgIT09IHVuZGVmaW5lZCAmJiAobWFqb3IgPj0gMTUgfHwgKG1ham9yID09PSAxNCAmJiBtaW5vciA+PSAzKSkpIHtcbiAgICAgIGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QuZXhwZXJpbWVudGFsID0gaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwgfHwge307XG4gICAgICBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbC5jbGllbnRUcmFjZU1ldGFkYXRhID0gW1xuICAgICAgICAnYmFnZ2FnZScsXG4gICAgICAgICdzZW50cnktdHJhY2UnLFxuICAgICAgICAuLi4oaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWw/LmNsaWVudFRyYWNlTWV0YWRhdGEgfHwgW10pLFxuICAgICAgXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIFwiW0BzZW50cnkvbmV4dGpzXSBUaGUgU2VudHJ5IFNESyB3YXMgbm90IGFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgTmV4dC5qcyB2ZXJzaW9uLiBJZiB5b3UgYXJlIHVzaW5nIE5leHQuanMgdmVyc2lvbiAxNSBvciBncmVhdGVyLCBwbGVhc2UgYWRkIGBleHBlcmltZW50YWwuY2xpZW50VHJhY2VNZXRhZGF0YTogWydzZW50cnktdHJhY2UnLCAnYmFnZ2FnZSddYCB0byB5b3VyIE5leHQuanMgY29uZmlnIHRvIGVuYWJsZSBwYWdlbG9hZCB0cmFjaW5nIGZvciBBcHAgUm91dGVyLlwiLFxuICAgICk7XG4gIH1cblxuICAvLyBGcm9tIE5leHQuanMgdmVyc2lvbiAoMTUuMC4wLWNhbmFyeS4xMjQpIG9ud2FyZHMsIE5leHQuanMgZG9lcyBubyBsb25nZXIgcmVxdWlyZSB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBvcHRpb24gYW5kIHdpbGxcbiAgLy8gcHJpbnQgYSB3YXJuaW5nIHdoZW4gaXQgaXMgc2V0LCBzbyB3ZSBuZWVkIHRvIGNvbmRpdGlvbmFsbHkgcHJvdmlkZSBpdCBmb3IgbG93ZXIgdmVyc2lvbnMuXG4gIGlmIChuZXh0SnNWZXJzaW9uKSB7XG4gICAgY29uc3QgeyBtYWpvciwgbWlub3IsIHBhdGNoLCBwcmVyZWxlYXNlIH0gPSBjb3JlLnBhcnNlU2VtdmVyKG5leHRKc1ZlcnNpb24pO1xuICAgIGNvbnN0IGlzRnVsbHlTdXBwb3J0ZWRSZWxlYXNlID1cbiAgICAgIG1ham9yICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIG1pbm9yICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHBhdGNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIG1ham9yID49IDE1ICYmXG4gICAgICAoKG1pbm9yID09PSAwICYmIHBhdGNoID09PSAwICYmIHByZXJlbGVhc2UgPT09IHVuZGVmaW5lZCkgfHwgbWlub3IgPiAwIHx8IHBhdGNoID4gMCk7XG4gICAgY29uc3QgaXNTdXBwb3J0ZWRWMTVSYyA9XG4gICAgICBtYWpvciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBtaW5vciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBwYXRjaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBwcmVyZWxlYXNlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIG1ham9yID09PSAxNSAmJlxuICAgICAgbWlub3IgPT09IDAgJiZcbiAgICAgIHBhdGNoID09PSAwICYmXG4gICAgICBwcmVyZWxlYXNlLnN0YXJ0c1dpdGgoJ3JjLicpICYmXG4gICAgICBwYXJzZUludChwcmVyZWxlYXNlLnNwbGl0KCcuJylbMV0gfHwgJycsIDEwKSA+IDA7XG4gICAgY29uc3QgaXNTdXBwb3J0ZWRDYW5hcnkgPVxuICAgICAgbWlub3IgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgcGF0Y2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgcHJlcmVsZWFzZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBtYWpvciA9PT0gMTUgJiZcbiAgICAgIG1pbm9yID09PSAwICYmXG4gICAgICBwYXRjaCA9PT0gMCAmJlxuICAgICAgcHJlcmVsZWFzZS5zdGFydHNXaXRoKCdjYW5hcnkuJykgJiZcbiAgICAgIHBhcnNlSW50KHByZXJlbGVhc2Uuc3BsaXQoJy4nKVsxXSB8fCAnJywgMTApID49IDEyNDtcblxuICAgIGlmICghaXNGdWxseVN1cHBvcnRlZFJlbGVhc2UgJiYgIWlzU3VwcG9ydGVkVjE1UmMgJiYgIWlzU3VwcG9ydGVkQ2FuYXJ5KSB7XG4gICAgICBpZiAoaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWw/Lmluc3RydW1lbnRhdGlvbkhvb2sgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnW0BzZW50cnkvbmV4dGpzXSBZb3UgdHVybmVkIG9mZiB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBvcHRpb24uIE5vdGUgdGhhdCBTZW50cnkgd2lsbCBub3QgYmUgaW5pdGlhbGl6ZWQgaWYgeW91IGRpZCBub3Qgc2V0IGl0IHVwIGluc2lkZSBgaW5zdHJ1bWVudGF0aW9uLihqc3x0cylgLicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbCA9IHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uSG9vazogdHJ1ZSxcbiAgICAgICAgLi4uaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwsXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSBjYW5ub3QgZGV0ZWN0IGEgTmV4dC5qcyB2ZXJzaW9uIGZvciB3aGF0ZXZlciByZWFzb24sIHRoZSBzZW5zaWJsZSBkZWZhdWx0IGlzIHRvIHNldCB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCwgZXZlbiB0aG91Z2ggaXQgbWF5IGNyZWF0ZSBhIHdhcm5pbmcuXG4gICAgaWYgKFxuICAgICAgaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwgJiZcbiAgICAgICdpbnN0cnVtZW50YXRpb25Ib29rJyBpbiBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbFxuICAgICkge1xuICAgICAgaWYgKGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QuZXhwZXJpbWVudGFsLmluc3RydW1lbnRhdGlvbkhvb2sgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnW0BzZW50cnkvbmV4dGpzXSBZb3Ugc2V0IGBleHBlcmltZW50YWwuaW5zdHJ1bWVudGF0aW9uSG9va2AgdG8gYGZhbHNlYC4gSWYgeW91IGFyZSB1c2luZyBOZXh0LmpzIHZlcnNpb24gMTUgb3IgZ3JlYXRlciwgeW91IGNhbiByZW1vdmUgdGhhdCBvcHRpb24uIElmIHlvdSBhcmUgdXNpbmcgTmV4dC5qcyB2ZXJzaW9uIDE0IG9yIGxvd2VyLCB5b3UgbmVlZCB0byBzZXQgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBpbiB5b3VyIGBuZXh0LmNvbmZpZy4oanN8bWpzKWAgdG8gYHRydWVgIGZvciB0aGUgU0RLIHRvIGJlIHByb3Blcmx5IGluaXRpYWxpemVkIGluIGNvbWJpbmF0aW9uIHdpdGggYGluc3RydW1lbnRhdGlvbi4oanN8dHMpYC4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIFwiW0BzZW50cnkvbmV4dGpzXSBUaGUgU2VudHJ5IFNESyB3YXMgbm90IGFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgTmV4dC5qcyB2ZXJzaW9uLiBJZiB5b3UgYXJlIHVzaW5nIE5leHQuanMgdmVyc2lvbiAxNSBvciBncmVhdGVyLCBOZXh0LmpzIHdpbGwgcHJvYmFibHkgc2hvdyB5b3UgYSB3YXJuaW5nIGFib3V0IHRoZSBgZXhwZXJpbWVudGFsLmluc3RydW1lbnRhdGlvbkhvb2tgIGJlaW5nIHNldC4gVG8gc2lsZW5jZSBOZXh0LmpzJyB3YXJuaW5nLCBleHBsaWNpdGx5IHNldCB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBvcHRpb24gaW4geW91ciBgbmV4dC5jb25maWcuKGpzfG1qc3x0cylgIHRvIGB1bmRlZmluZWRgLiBJZiB5b3UgYXJlIG9uIE5leHQuanMgdmVyc2lvbiAxNCBvciBsb3dlciwgeW91IGNhbiBzaWxlbmNlIHRoaXMgcGFydGljdWxhciB3YXJuaW5nIGJ5IGV4cGxpY2l0bHkgc2V0dGluZyB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBvcHRpb24gaW4geW91ciBgbmV4dC5jb25maWcuKGpzfG1qcylgIHRvIGB0cnVlYC5cIixcbiAgICAgICk7XG4gICAgICBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbCA9IHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uSG9vazogdHJ1ZSxcbiAgICAgICAgLi4uaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIFdlIHdhbm5hIGNoZWNrIHdoZXRoZXIgdGhlIHVzZXIgYWRkZWQgYSBgb25Sb3V0ZXJUcmFuc2l0aW9uU3RhcnRgIGhhbmRsZXIgdG8gdGhlaXIgY2xpZW50IGluc3RydW1lbnRhdGlvbiBmaWxlLlxuICBjb25zdCBpbnN0cnVtZW50YXRpb25DbGllbnRGaWxlQ29udGVudHMgPSBnZXRJbnN0cnVtZW50YXRpb25DbGllbnRGaWxlQ29udGVudHMoKTtcbiAgaWYgKFxuICAgIGluc3RydW1lbnRhdGlvbkNsaWVudEZpbGVDb250ZW50cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgIWluc3RydW1lbnRhdGlvbkNsaWVudEZpbGVDb250ZW50cy5pbmNsdWRlcygnb25Sb3V0ZXJUcmFuc2l0aW9uU3RhcnQnKSAmJlxuICAgICF1c2VyU2VudHJ5T3B0aW9ucy5zdXBwcmVzc09uUm91dGVyVHJhbnNpdGlvblN0YXJ0V2FybmluZ1xuICApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbQHNlbnRyeS9uZXh0anNdIEFDVElPTiBSRVFVSVJFRDogVG8gaW5zdHJ1bWVudCBuYXZpZ2F0aW9ucywgdGhlIFNlbnRyeSBTREsgcmVxdWlyZXMgeW91IHRvIGV4cG9ydCBhbiBgb25Sb3V0ZXJUcmFuc2l0aW9uU3RhcnRgIGhvb2sgZnJvbSB5b3VyIGBpbnN0cnVtZW50YXRpb24tY2xpZW50Lihqc3x0cylgIGZpbGUuIFlvdSBjYW4gZG8gc28gYnkgYWRkaW5nIGBleHBvcnQgY29uc3Qgb25Sb3V0ZXJUcmFuc2l0aW9uU3RhcnQgPSBTZW50cnkuY2FwdHVyZVJvdXRlclRyYW5zaXRpb25TdGFydDtgIHRvIHRoZSBmaWxlLicsXG4gICAgKTtcbiAgfVxuXG4gIGxldCBuZXh0TWFqb3I7XG4gIGlmIChuZXh0SnNWZXJzaW9uKSB7XG4gICAgY29uc3QgeyBtYWpvciB9ID0gY29yZS5wYXJzZVNlbXZlcihuZXh0SnNWZXJzaW9uKTtcbiAgICBuZXh0TWFqb3IgPSBtYWpvcjtcbiAgfVxuXG4gIGNvbnN0IGlzVHVyYm9wYWNrID0gcHJvY2Vzcy5lbnYuVFVSQk9QQUNLO1xuICBjb25zdCBpc1R1cmJvcGFja1N1cHBvcnRlZCA9IHV0aWwuc3VwcG9ydHNQcm9kdWN0aW9uQ29tcGlsZUhvb2sobmV4dEpzVmVyc2lvbiA/PyAnJyk7XG5cbiAgaWYgKCFpc1R1cmJvcGFja1N1cHBvcnRlZCAmJiBpc1R1cmJvcGFjaykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtAc2VudHJ5L25leHRqc10gV0FSTklORzogWW91IGFyZSB1c2luZyB0aGUgU2VudHJ5IFNESyB3aXRoIFR1cmJvcGFjayAoXFxgbmV4dCBkZXYgLS10dXJib3BhY2tcXGApLiBUaGUgU2VudHJ5IFNESyBpcyBjb21wYXRpYmxlIHdpdGggVHVyYm9wYWNrIG9uIE5leHQuanMgdmVyc2lvbiAxNS40LjEgb3IgbGF0ZXIuIFlvdSBhcmUgY3VycmVudGx5IG9uICR7bmV4dEpzVmVyc2lvbn0uIFBsZWFzZSB1cGdyYWRlIHRvIGEgbmV3ZXIgTmV4dC5qcyB2ZXJzaW9uIHRvIHVzZSB0aGUgU2VudHJ5IFNESyB3aXRoIFR1cmJvcGFjay5gLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBbQHNlbnRyeS9uZXh0anNdIFdBUk5JTkc6IFlvdSBhcmUgdXNpbmcgdGhlIFNlbnRyeSBTREsgd2l0aCBUdXJib3BhY2sgKFxcYG5leHQgYnVpbGQgLS10dXJib3BhY2tcXGApLiBUaGUgU2VudHJ5IFNESyBpcyBjb21wYXRpYmxlIHdpdGggVHVyYm9wYWNrIG9uIE5leHQuanMgdmVyc2lvbiAxNS40LjEgb3IgbGF0ZXIuIFlvdSBhcmUgY3VycmVudGx5IG9uICR7bmV4dEpzVmVyc2lvbn0uIFBsZWFzZSB1cGdyYWRlIHRvIGEgbmV3ZXIgTmV4dC5qcyB2ZXJzaW9uIHRvIHVzZSB0aGUgU2VudHJ5IFNESyB3aXRoIFR1cmJvcGFjay5gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyB3ZWJwYWNrIGNhc2VcbiAgaWYgKFxuICAgIHVzZXJTZW50cnlPcHRpb25zLnVzZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGVIb29rICYmXG4gICAgIXV0aWwuc3VwcG9ydHNQcm9kdWN0aW9uQ29tcGlsZUhvb2sobmV4dEpzVmVyc2lvbiA/PyAnJykgJiZcbiAgICAhaXNUdXJib3BhY2tcbiAgKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnW0BzZW50cnkvbmV4dGpzXSBUaGUgY29uZmlndXJlZCBgdXNlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZUhvb2tgIG9wdGlvbiBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHlvdXIgY3VycmVudCBOZXh0LmpzIHZlcnNpb24uIFRoaXMgb3B0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIG9uIE5leHQuanMgdmVyc2lvbiAxNS40LjEgb3IgbGF0ZXIuIFdpbGwgbm90IHJ1biBzb3VyY2UgbWFwIGFuZCByZWxlYXNlIG1hbmFnZW1lbnQgbG9naWMuJyxcbiAgICApO1xuICB9XG5cbiAgLy8gSWYgbm90IGV4cGxpY2l0bHkgc2V0LCB0dXJib3BhY2sgdXNlcyB0aGUgcnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZSBob29rIChhcyB0aGVyZSBhcmUgbm8gYWx0ZXJuYXRpdmVzKSwgd2VicGFjayBkb2VzIG5vdC5cbiAgY29uc3Qgc2hvdWxkVXNlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZUhvb2sgPVxuICAgIHVzZXJTZW50cnlPcHRpb25zPy51c2VSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlSG9vayA/PyAoaXNUdXJib3BhY2sgPyB0cnVlIDogZmFsc2UpO1xuXG4gIGlmIChzaG91bGRVc2VSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlSG9vayAmJiB1dGlsLnN1cHBvcnRzUHJvZHVjdGlvbkNvbXBpbGVIb29rKG5leHRKc1ZlcnNpb24gPz8gJycpKSB7XG4gICAgaWYgKGluY29taW5nVXNlck5leHRDb25maWdPYmplY3Q/LmNvbXBpbGVyPy5ydW5BZnRlclByb2R1Y3Rpb25Db21waWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QuY29tcGlsZXIgPz89IHt9O1xuICAgICAgaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5jb21waWxlci5ydW5BZnRlclByb2R1Y3Rpb25Db21waWxlID0gYXN5bmMgKHsgZGlzdERpciB9KSA9PiB7XG4gICAgICAgIGF3YWl0IGhhbmRsZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUuaGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZShcbiAgICAgICAgICB7IHJlbGVhc2VOYW1lLCBkaXN0RGlyLCBidWlsZFRvb2w6IGlzVHVyYm9wYWNrID8gJ3R1cmJvcGFjaycgOiAnd2VicGFjaycgfSxcbiAgICAgICAgICB1c2VyU2VudHJ5T3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5jb21waWxlci5ydW5BZnRlclByb2R1Y3Rpb25Db21waWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmNvbXBpbGVyLnJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUgPSBuZXcgUHJveHkoXG4gICAgICAgIGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QuY29tcGlsZXIucnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZSxcbiAgICAgICAge1xuICAgICAgICAgIGFzeW5jIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGlzdERpciB9ID0gYXJnQXJyYXlbMF0gPz8geyBkaXN0RGlyOiAnLm5leHQnIH07XG4gICAgICAgICAgICBhd2FpdCB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJnQXJyYXkpO1xuICAgICAgICAgICAgYXdhaXQgaGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZS5oYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlKFxuICAgICAgICAgICAgICB7IHJlbGVhc2VOYW1lLCBkaXN0RGlyLCBidWlsZFRvb2w6IGlzVHVyYm9wYWNrID8gJ3R1cmJvcGFjaycgOiAnd2VicGFjaycgfSxcbiAgICAgICAgICAgICAgdXNlclNlbnRyeU9wdGlvbnMsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnW0BzZW50cnkvbmV4dGpzXSBUaGUgY29uZmlndXJlZCBgY29tcGlsZXIucnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZWAgb3B0aW9uIGlzIG5vdCBhIGZ1bmN0aW9uLiBXaWxsIG5vdCBydW4gc291cmNlIG1hcCBhbmQgcmVsZWFzZSBtYW5hZ2VtZW50IGxvZ2ljLicsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuYWJsZSBzb3VyY2UgbWFwcyBmb3IgdHVyYm9wYWNrIGJ1aWxkc1xuICBpZiAoaXNUdXJib3BhY2tTdXBwb3J0ZWQgJiYgaXNUdXJib3BhY2sgJiYgIXVzZXJTZW50cnlPcHRpb25zLnNvdXJjZW1hcHM/LmRpc2FibGUpIHtcbiAgICAvLyBPbmx5IHNldCBpZiBub3QgYWxyZWFkeSBjb25maWd1cmVkIGJ5IHVzZXJcbiAgICBpZiAoaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5wcm9kdWN0aW9uQnJvd3NlclNvdXJjZU1hcHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHVzZXJTZW50cnlPcHRpb25zLmRlYnVnKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKCdbQHNlbnRyeS9uZXh0anNdIEF1dG9tYXRpY2FsbHkgZW5hYmxpbmcgYnJvd3NlciBzb3VyY2UgbWFwIGdlbmVyYXRpb24gZm9yIHR1cmJvcGFjayBidWlsZC4nKTtcbiAgICAgIH1cbiAgICAgIGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QucHJvZHVjdGlvbkJyb3dzZXJTb3VyY2VNYXBzID0gdHJ1ZTtcblxuICAgICAgLy8gRW5hYmxlIHNvdXJjZSBtYXAgZGVsZXRpb24gaWYgbm90IGV4cGxpY2l0bHkgZGlzYWJsZWRcbiAgICAgIGlmICh1c2VyU2VudHJ5T3B0aW9ucy5zb3VyY2VtYXBzPy5kZWxldGVTb3VyY2VtYXBzQWZ0ZXJVcGxvYWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodXNlclNlbnRyeU9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdbQHNlbnRyeS9uZXh0anNdIFNvdXJjZSBtYXBzIHdpbGwgYmUgYXV0b21hdGljYWxseSBkZWxldGVkIGFmdGVyIGJlaW5nIHVwbG9hZGVkIHRvIFNlbnRyeS4gSWYgeW91IHdhbnQgdG8ga2VlcCB0aGUgc291cmNlIG1hcHMsIHNldCB0aGUgYHNvdXJjZW1hcHMuZGVsZXRlU291cmNlbWFwc0FmdGVyVXBsb2FkYCBvcHRpb24gdG8gZmFsc2UgaW4gYHdpdGhTZW50cnlDb25maWcoKWAuIElmIHlvdSBkbyBub3Qgd2FudCB0byBnZW5lcmF0ZSBhbmQgdXBsb2FkIHNvdXJjZW1hcHMgYXQgYWxsLCBzZXQgdGhlIGBzb3VyY2VtYXBzLmRpc2FibGVgIG9wdGlvbiB0byB0cnVlLicsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVzZXJTZW50cnlPcHRpb25zLnNvdXJjZW1hcHMgPSB7XG4gICAgICAgICAgLi4udXNlclNlbnRyeU9wdGlvbnMuc291cmNlbWFwcyxcbiAgICAgICAgICBkZWxldGVTb3VyY2VtYXBzQWZ0ZXJVcGxvYWQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5pbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LFxuICAgIC4uLihuZXh0TWFqb3IgJiYgbmV4dE1ham9yID49IDE1XG4gICAgICA/IHtcbiAgICAgICAgICBzZXJ2ZXJFeHRlcm5hbFBhY2thZ2VzOiBbXG4gICAgICAgICAgICAuLi4oaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5zZXJ2ZXJFeHRlcm5hbFBhY2thZ2VzIHx8IFtdKSxcbiAgICAgICAgICAgIC4uLkRFRkFVTFRfU0VSVkVSX0VYVEVSTkFMX1BBQ0tBR0VTLFxuICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICAgIDoge1xuICAgICAgICAgIGV4cGVyaW1lbnRhbDoge1xuICAgICAgICAgICAgLi4uaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwsXG4gICAgICAgICAgICBzZXJ2ZXJDb21wb25lbnRzRXh0ZXJuYWxQYWNrYWdlczogW1xuICAgICAgICAgICAgICAuLi4oaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWw/LnNlcnZlckNvbXBvbmVudHNFeHRlcm5hbFBhY2thZ2VzIHx8IFtdKSxcbiAgICAgICAgICAgICAgLi4uREVGQVVMVF9TRVJWRVJfRVhURVJOQUxfUEFDS0FHRVMsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgIHdlYnBhY2s6XG4gICAgICBpc1R1cmJvcGFjayB8fCB1c2VyU2VudHJ5T3B0aW9ucy5kaXNhYmxlU2VudHJ5V2VicGFja0NvbmZpZ1xuICAgICAgICA/IGluY29taW5nVXNlck5leHRDb25maWdPYmplY3Qud2VicGFjayAvLyBqdXN0IHJldHVybiB0aGUgb3JpZ2luYWwgd2VicGFjayBjb25maWdcbiAgICAgICAgOiB3ZWJwYWNrLmNvbnN0cnVjdFdlYnBhY2tDb25maWdGdW5jdGlvbih7XG4gICAgICAgICAgICB1c2VyTmV4dENvbmZpZzogaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdCxcbiAgICAgICAgICAgIHVzZXJTZW50cnlPcHRpb25zLFxuICAgICAgICAgICAgcmVsZWFzZU5hbWUsXG4gICAgICAgICAgICByb3V0ZU1hbmlmZXN0LFxuICAgICAgICAgICAgbmV4dEpzVmVyc2lvbixcbiAgICAgICAgICAgIHVzZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGVIb29rOiBzaG91bGRVc2VSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlSG9vayxcbiAgICAgICAgICB9KSxcbiAgICAuLi4oaXNUdXJib3BhY2tTdXBwb3J0ZWQgJiYgaXNUdXJib3BhY2tcbiAgICAgID8ge1xuICAgICAgICAgIHR1cmJvcGFjazogY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnLmNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZyh7XG4gICAgICAgICAgICB1c2VyTmV4dENvbmZpZzogaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdCxcbiAgICAgICAgICAgIHJvdXRlTWFuaWZlc3QsXG4gICAgICAgICAgICBuZXh0SnNWZXJzaW9uLFxuICAgICAgICAgIH0pLFxuICAgICAgICB9XG4gICAgICA6IHt9KSxcbiAgfTtcbn1cblxuLyoqXG4gKiBJbmplY3RzIHJld3JpdGUgcnVsZXMgaW50byB0aGUgTmV4dC5qcyBjb25maWcgcHJvdmlkZWQgYnkgdGhlIHVzZXIgdG8gdHVubmVsXG4gKiByZXF1ZXN0cyBmcm9tIHRoZSBgdHVubmVsUGF0aGAgdG8gU2VudHJ5LlxuICpcbiAqIFNlZSBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQuY29uZmlnLmpzL3Jld3JpdGVzLlxuICovXG5mdW5jdGlvbiBzZXRVcFR1bm5lbFJld3JpdGVSdWxlcyh1c2VyTmV4dENvbmZpZywgdHVubmVsUGF0aCkge1xuICBjb25zdCBvcmlnaW5hbFJld3JpdGVzID0gdXNlck5leHRDb25maWcucmV3cml0ZXM7XG5cbiAgLy8gVGhpcyBmdW5jdGlvbiBkb2Vzbid0IHRha2UgYW55IGFyZ3VtZW50cyBhdCB0aGUgdGltZSBvZiB3cml0aW5nIGJ1dCB3ZSBmdXR1cmUtcHJvb2ZcbiAgLy8gaGVyZSBpbiBjYXNlIE5leHQuanMgZXZlciBkZWNpZGVzIHRvIHBhc3Mgc29tZVxuICB1c2VyTmV4dENvbmZpZy5yZXdyaXRlcyA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgdHVubmVsUm91dGVSZXdyaXRlID0ge1xuICAgICAgLy8gTWF0Y2hlZCByZXdyaXRlIHJvdXRlcyB3aWxsIGxvb2sgbGlrZSB0aGUgZm9sbG93aW5nOiBgW3R1bm5lbFBhdGhdP289W29yZ2lkXSZwPVtwcm9qZWN0aWRdYFxuICAgICAgLy8gTmV4dGpzIHdpbGwgYXV0b21hdGljYWxseSBjb252ZXJ0IGBzb3VyY2VgIGludG8gYSByZWdleCBmb3IgdXNcbiAgICAgIHNvdXJjZTogYCR7dHVubmVsUGF0aH0oLz8pYCxcbiAgICAgIGhhczogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3F1ZXJ5JyxcbiAgICAgICAgICBrZXk6ICdvJywgLy8gc2hvcnQgZm9yIG9yZ0lkIC0gd2Uga2VlcCBpdCBzaG9ydCBzbyBtYXRjaGluZyBpcyBoYXJkZXIgZm9yIGFkLWJsb2NrZXJzXG4gICAgICAgICAgdmFsdWU6ICcoPzxvcmdpZD5cXFxcZCopJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdxdWVyeScsXG4gICAgICAgICAga2V5OiAncCcsIC8vIHNob3J0IGZvciBwcm9qZWN0SWQgLSB3ZSBrZWVwIGl0IHNob3J0IHNvIG1hdGNoaW5nIGlzIGhhcmRlciBmb3IgYWQtYmxvY2tlcnNcbiAgICAgICAgICB2YWx1ZTogJyg/PHByb2plY3RpZD5cXFxcZCopJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBkZXN0aW5hdGlvbjogJ2h0dHBzOi8vbzpvcmdpZC5pbmdlc3Quc2VudHJ5LmlvL2FwaS86cHJvamVjdGlkL2VudmVsb3BlLz9oc3RzPTAnLFxuICAgIH07XG5cbiAgICBjb25zdCB0dW5uZWxSb3V0ZVJld3JpdGVXaXRoUmVnaW9uID0ge1xuICAgICAgLy8gTWF0Y2hlZCByZXdyaXRlIHJvdXRlcyB3aWxsIGxvb2sgbGlrZSB0aGUgZm9sbG93aW5nOiBgW3R1bm5lbFBhdGhdP289W29yZ2lkXSZwPVtwcm9qZWN0aWRdP3I9W3JlZ2lvbl1gXG4gICAgICAvLyBOZXh0anMgd2lsbCBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgYHNvdXJjZWAgaW50byBhIHJlZ2V4IGZvciB1c1xuICAgICAgc291cmNlOiBgJHt0dW5uZWxQYXRofSgvPylgLFxuICAgICAgaGFzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAncXVlcnknLFxuICAgICAgICAgIGtleTogJ28nLCAvLyBzaG9ydCBmb3Igb3JnSWQgLSB3ZSBrZWVwIGl0IHNob3J0IHNvIG1hdGNoaW5nIGlzIGhhcmRlciBmb3IgYWQtYmxvY2tlcnNcbiAgICAgICAgICB2YWx1ZTogJyg/PG9yZ2lkPlxcXFxkKiknLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3F1ZXJ5JyxcbiAgICAgICAgICBrZXk6ICdwJywgLy8gc2hvcnQgZm9yIHByb2plY3RJZCAtIHdlIGtlZXAgaXQgc2hvcnQgc28gbWF0Y2hpbmcgaXMgaGFyZGVyIGZvciBhZC1ibG9ja2Vyc1xuICAgICAgICAgIHZhbHVlOiAnKD88cHJvamVjdGlkPlxcXFxkKiknLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3F1ZXJ5JyxcbiAgICAgICAgICBrZXk6ICdyJywgLy8gc2hvcnQgZm9yIHJlZ2lvbiAtIHdlIGtlZXAgaXQgc2hvcnQgc28gbWF0Y2hpbmcgaXMgaGFyZGVyIGZvciBhZC1ibG9ja2Vyc1xuICAgICAgICAgIHZhbHVlOiAnKD88cmVnaW9uPlthLXpdezJ9KScsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgZGVzdGluYXRpb246ICdodHRwczovL286b3JnaWQuaW5nZXN0LjpyZWdpb24uc2VudHJ5LmlvL2FwaS86cHJvamVjdGlkL2VudmVsb3BlLz9oc3RzPTAnLFxuICAgIH07XG5cbiAgICAvLyBPcmRlciBvZiB0aGVzZSBpcyBpbXBvcnRhbnQsIHRoZXkgZ2V0IGFwcGxpZWQgZmlyc3QgdG8gbGFzdC5cbiAgICBjb25zdCBuZXdSZXdyaXRlcyA9IFt0dW5uZWxSb3V0ZVJld3JpdGVXaXRoUmVnaW9uLCB0dW5uZWxSb3V0ZVJld3JpdGVdO1xuXG4gICAgaWYgKHR5cGVvZiBvcmlnaW5hbFJld3JpdGVzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3UmV3cml0ZXM7XG4gICAgfVxuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBFeHBlY3RlZCAwIGFyZ3VtZW50cyBidXQgZ290IDEgLSB0aGlzIGlzIGZyb20gdGhlIGZ1dHVyZS1wcm9vZmluZyBtZW50aW9uZWQgYWJvdmUsIHNvIHdlIGRvbid0IGNhcmUgYWJvdXQgaXRcbiAgICBjb25zdCBvcmlnaW5hbFJld3JpdGVzUmVzdWx0ID0gYXdhaXQgb3JpZ2luYWxSZXdyaXRlcyguLi5hcmdzKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9yaWdpbmFsUmV3cml0ZXNSZXN1bHQpKSB7XG4gICAgICByZXR1cm4gWy4uLm5ld1Jld3JpdGVzLCAuLi5vcmlnaW5hbFJld3JpdGVzUmVzdWx0XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ub3JpZ2luYWxSZXdyaXRlc1Jlc3VsdCxcbiAgICAgICAgYmVmb3JlRmlsZXM6IFsuLi5uZXdSZXdyaXRlcywgLi4uKG9yaWdpbmFsUmV3cml0ZXNSZXN1bHQuYmVmb3JlRmlsZXMgfHwgW10pXSxcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRVcEJ1aWxkVGltZVZhcmlhYmxlcyhcbiAgdXNlck5leHRDb25maWcsXG4gIHVzZXJTZW50cnlPcHRpb25zLFxuICByZWxlYXNlTmFtZSxcbikge1xuICBjb25zdCBhc3NldFByZWZpeCA9IHVzZXJOZXh0Q29uZmlnLmFzc2V0UHJlZml4IHx8IHVzZXJOZXh0Q29uZmlnLmJhc2VQYXRoIHx8ICcnO1xuICBjb25zdCBiYXNlUGF0aCA9IHVzZXJOZXh0Q29uZmlnLmJhc2VQYXRoID8/ICcnO1xuXG4gIGNvbnN0IHJld3JpdGVzVHVubmVsUGF0aCA9XG4gICAgdXNlclNlbnRyeU9wdGlvbnMudHVubmVsUm91dGUgIT09IHVuZGVmaW5lZCAmJlxuICAgIHVzZXJOZXh0Q29uZmlnLm91dHB1dCAhPT0gJ2V4cG9ydCcgJiZcbiAgICB0eXBlb2YgdXNlclNlbnRyeU9wdGlvbnMudHVubmVsUm91dGUgPT09ICdzdHJpbmcnXG4gICAgICA/IGAke2Jhc2VQYXRofSR7dXNlclNlbnRyeU9wdGlvbnMudHVubmVsUm91dGV9YFxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgYnVpbGRUaW1lVmFyaWFibGVzID0ge1xuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGlmIHdlIGhhdmUgYSB3aW5kb3dzIHBhdGgsIHRoZSBiYWNrc2xhc2hlcyBhcmUgaW50ZXJwcmV0ZWQgYXMgc3VjaCAocmF0aGVyIHRoYW4gYXMgZXNjYXBlXG4gICAgLy8gY2hhcmFjdGVycylcbiAgICBfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXI6IHVzZXJOZXh0Q29uZmlnLmRpc3REaXI/LnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJykgfHwgJy5uZXh0JyxcbiAgICAvLyBHZXQgdGhlIHBhdGggcGFydCBvZiBgYXNzZXRQcmVmaXhgLCBtaW51cyBhbnkgdHJhaWxpbmcgc2xhc2guIChXZSB1c2UgYSBwbGFjZWhvbGRlciBmb3IgdGhlIG9yaWdpbiBpZlxuICAgIC8vIGBhc3NldFByZWZpeGAgZG9lc24ndCBpbmNsdWRlIG9uZS4gU2luY2Ugd2Ugb25seSBjYXJlIGFib3V0IHRoZSBwYXRoLCBpdCBkb2Vzbid0IG1hdHRlciB3aGF0IGl0IGlzLilcbiAgICBfc2VudHJ5UmV3cml0ZUZyYW1lc0Fzc2V0UHJlZml4UGF0aDogYXNzZXRQcmVmaXhcbiAgICAgID8gbmV3IFVSTChhc3NldFByZWZpeCwgJ2h0dHA6Ly9kb2dzLmFyZS5ncmVhdCcpLnBhdGhuYW1lLnJlcGxhY2UoL1xcLyQvLCAnJylcbiAgICAgIDogJycsXG4gIH07XG5cbiAgaWYgKHVzZXJOZXh0Q29uZmlnLmFzc2V0UHJlZml4KSB7XG4gICAgYnVpbGRUaW1lVmFyaWFibGVzLl9hc3NldHNQcmVmaXggPSB1c2VyTmV4dENvbmZpZy5hc3NldFByZWZpeDtcbiAgfVxuXG4gIGlmICh1c2VyU2VudHJ5T3B0aW9ucy5fZXhwZXJpbWVudGFsPy50aGlyZFBhcnR5T3JpZ2luU3RhY2tGcmFtZXMpIHtcbiAgICBidWlsZFRpbWVWYXJpYWJsZXMuX2V4cGVyaW1lbnRhbFRoaXJkUGFydHlPcmlnaW5TdGFja0ZyYW1lcyA9ICd0cnVlJztcbiAgfVxuXG4gIGlmIChyZXdyaXRlc1R1bm5lbFBhdGgpIHtcbiAgICBidWlsZFRpbWVWYXJpYWJsZXMuX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aCA9IHJld3JpdGVzVHVubmVsUGF0aDtcbiAgfVxuXG4gIGlmIChiYXNlUGF0aCkge1xuICAgIGJ1aWxkVGltZVZhcmlhYmxlcy5fc2VudHJ5QmFzZVBhdGggPSBiYXNlUGF0aDtcbiAgfVxuXG4gIGlmICh1c2VyTmV4dENvbmZpZy5hc3NldFByZWZpeCkge1xuICAgIGJ1aWxkVGltZVZhcmlhYmxlcy5fc2VudHJ5QXNzZXRQcmVmaXggPSB1c2VyTmV4dENvbmZpZy5hc3NldFByZWZpeDtcbiAgfVxuXG4gIGlmICh1c2VyU2VudHJ5T3B0aW9ucy5fZXhwZXJpbWVudGFsPy50aGlyZFBhcnR5T3JpZ2luU3RhY2tGcmFtZXMpIHtcbiAgICBidWlsZFRpbWVWYXJpYWJsZXMuX2V4cGVyaW1lbnRhbFRoaXJkUGFydHlPcmlnaW5TdGFja0ZyYW1lcyA9ICd0cnVlJztcbiAgfVxuXG4gIGlmIChyZWxlYXNlTmFtZSkge1xuICAgIGJ1aWxkVGltZVZhcmlhYmxlcy5fc2VudHJ5UmVsZWFzZSA9IHJlbGVhc2VOYW1lO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB1c2VyTmV4dENvbmZpZy5lbnYgPT09ICdvYmplY3QnKSB7XG4gICAgdXNlck5leHRDb25maWcuZW52ID0geyAuLi5idWlsZFRpbWVWYXJpYWJsZXMsIC4uLnVzZXJOZXh0Q29uZmlnLmVudiB9O1xuICB9IGVsc2UgaWYgKHVzZXJOZXh0Q29uZmlnLmVudiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdXNlck5leHRDb25maWcuZW52ID0gYnVpbGRUaW1lVmFyaWFibGVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEdpdFJldmlzaW9uKCkge1xuICBsZXQgZ2l0UmV2aXNpb247XG4gIHRyeSB7XG4gICAgZ2l0UmV2aXNpb24gPSBjaGlsZFByb2Nlc3NcbiAgICAgIC5leGVjU3luYygnZ2l0IHJldi1wYXJzZSBIRUFEJywgeyBzdGRpbzogWydpZ25vcmUnLCAncGlwZScsICdpZ25vcmUnXSB9KVxuICAgICAgLnRvU3RyaW5nKClcbiAgICAgIC50cmltKCk7XG4gIH0gY2F0Y2gge1xuICAgIC8vIG5vb3BcbiAgfVxuICByZXR1cm4gZ2l0UmV2aXNpb247XG59XG5cbmZ1bmN0aW9uIGdldEluc3RydW1lbnRhdGlvbkNsaWVudEZpbGVDb250ZW50cygpIHtcbiAgY29uc3QgcG90ZW50aWFsSW5zdHJ1bWVudGF0aW9uQ2xpZW50RmlsZUxvY2F0aW9ucyA9IFtcbiAgICBbJ3NyYycsICdpbnN0cnVtZW50YXRpb24tY2xpZW50LnRzJ10sXG4gICAgWydzcmMnLCAnaW5zdHJ1bWVudGF0aW9uLWNsaWVudC5qcyddLFxuICAgIFsnaW5zdHJ1bWVudGF0aW9uLWNsaWVudC50cyddLFxuICAgIFsnaW5zdHJ1bWVudGF0aW9uLWNsaWVudC5qcyddLFxuICBdO1xuXG4gIGZvciAoY29uc3QgcGF0aFNlZ21lbnRzIG9mIHBvdGVudGlhbEluc3RydW1lbnRhdGlvbkNsaWVudEZpbGVMb2NhdGlvbnMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgLi4ucGF0aFNlZ21lbnRzKSwgJ3V0Zi04Jyk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBub29wXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuREVGQVVMVF9TRVJWRVJfRVhURVJOQUxfUEFDS0FHRVMgPSBERUZBVUxUX1NFUlZFUl9FWFRFUk5BTF9QQUNLQUdFUztcbmV4cG9ydHMud2l0aFNlbnRyeUNvbmZpZyA9IHdpdGhTZW50cnlDb25maWc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoU2VudHJ5Q29uZmlnLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ./server/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js\");\nconst withSentryConfig = __webpack_require__(/*! ./config/withSentryConfig.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\");\nconst _error = __webpack_require__(/*! ./common/pages-router-instrumentation/_error.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ./common/wrapServerComponentWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ./common/wrapRouteHandlerWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ./common/wrapMiddlewareWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ./common/wrapGenerationFunctionWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ./common/withServerActionInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ./common/captureRequestError.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\n\n\n\nexports.ErrorBoundary = index.ErrorBoundary;\nexports.createReduxEnhancer = index.createReduxEnhancer;\nexports.init = index.init;\nexports.showReportDialog = index.showReportDialog;\nexports.withErrorBoundary = index.withErrorBoundary;\nexports.withSentryConfig = withSentryConfig.withSentryConfig;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.claudeCodeIntegration = node.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = node.createInstrumentedClaudeQuery;\nexports.patchClaudeCodeQuery = node.patchClaudeCodeQuery;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n\t!Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n\tObject.defineProperty(exports, '__proto__', {\n\t\tenumerable: true,\n\t\tvalue: node['__proto__']\n\t});\n\nObject.keys(node).forEach(k => {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9pbmRleC5zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsY0FBYyxtQkFBTyxDQUFDLCtPQUFtQjtBQUN6Qyx5QkFBeUIsbUJBQU8sQ0FBQyxxUUFBOEI7QUFDL0QsZUFBZSxtQkFBTyxDQUFDLDJTQUFpRDtBQUN4RSxpQ0FBaUMsbUJBQU8sQ0FBQywrVUFBbUU7QUFDNUcscUNBQXFDLG1CQUFPLENBQUMsdVZBQXVFO0FBQ3BILHNDQUFzQyxtQkFBTyxDQUFDLHlWQUF3RTtBQUN0SCx5Q0FBeUMsbUJBQU8sQ0FBQywrVkFBMkU7QUFDNUgsOENBQThDLG1CQUFPLENBQUMseVdBQWdGO0FBQ3RJLDJDQUEyQyxtQkFBTyxDQUFDLG1XQUE2RTtBQUNoSSx5Q0FBeUMsbUJBQU8sQ0FBQywrVkFBMkU7QUFDNUgsc0NBQXNDLG1CQUFPLENBQUMsK1JBQTJDO0FBQ3pGLG1DQUFtQyxtQkFBTyxDQUFDLHlSQUF3QztBQUNuRiw0Q0FBNEMsbUJBQU8sQ0FBQyxxV0FBOEU7QUFDbEksaUNBQWlDLG1CQUFPLENBQUMscVJBQXNDO0FBQy9FLG9DQUFvQyxtQkFBTyxDQUFDLHFWQUFzRTtBQUNsSCx5Q0FBeUMsbUJBQU8sQ0FBQyxxU0FBOEM7QUFDL0Ysd0NBQXdDLG1CQUFPLENBQUMsbVNBQTZDO0FBQzdGLDRCQUE0QixtQkFBTyxDQUFDLDJRQUFpQztBQUNyRSxhQUFhLG1CQUFPLENBQUMseUtBQWM7Ozs7QUFJbkMscUJBQXFCO0FBQ3JCLDJCQUEyQjtBQUMzQixZQUFZO0FBQ1osd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsdUNBQXVDO0FBQ3ZDLGdDQUFnQztBQUNoQyxvQ0FBb0M7QUFDcEMscUNBQXFDO0FBQ3JDLHdDQUF3QztBQUN4Qyw2Q0FBNkM7QUFDN0MsMENBQTBDO0FBQzFDLHdDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsa0NBQWtDO0FBQ2xDLDJDQUEyQztBQUMzQyxnQ0FBZ0M7QUFDaEMsbUNBQW1DO0FBQ25DLHdDQUF3QztBQUN4Qyx1Q0FBdUM7QUFDdkMsMkJBQTJCO0FBQzNCLDZCQUE2QjtBQUM3QixxQ0FBcUM7QUFDckMsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2luZGV4LnNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL3NlcnZlci9pbmRleC5qcycpO1xuY29uc3Qgd2l0aFNlbnRyeUNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnL3dpdGhTZW50cnlDb25maWcuanMnKTtcbmNvbnN0IF9lcnJvciA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vX2Vycm9yLmpzJyk7XG5jb25zdCB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMnKTtcbmNvbnN0IHdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMnKTtcbmNvbnN0IHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMnKTtcbmNvbnN0IHdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5ID0gcmVxdWlyZSgnLi9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcFNlcnZlckNvbXBvbmVudFdpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi93cmFwU2VydmVyQ29tcG9uZW50V2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi93cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeS5qcycpO1xuY29uc3Qgd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMgPSByZXF1aXJlKCcuL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzJyk7XG5jb25zdCB3cmFwTWlkZGxld2FyZVdpdGhTZW50cnkgPSByZXF1aXJlKCcuL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMnKTtcbmNvbnN0IHdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3cmFwR2VuZXJhdGlvbkZ1bmN0aW9uV2l0aFNlbnRyeSA9IHJlcXVpcmUoJy4vY29tbW9uL3dyYXBHZW5lcmF0aW9uRnVuY3Rpb25XaXRoU2VudHJ5LmpzJyk7XG5jb25zdCB3aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9jb21tb24vd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbi5qcycpO1xuY29uc3QgY2FwdHVyZVJlcXVlc3RFcnJvciA9IHJlcXVpcmUoJy4vY29tbW9uL2NhcHR1cmVSZXF1ZXN0RXJyb3IuanMnKTtcbmNvbnN0IG5vZGUgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcblxuXG5cbmV4cG9ydHMuRXJyb3JCb3VuZGFyeSA9IGluZGV4LkVycm9yQm91bmRhcnk7XG5leHBvcnRzLmNyZWF0ZVJlZHV4RW5oYW5jZXIgPSBpbmRleC5jcmVhdGVSZWR1eEVuaGFuY2VyO1xuZXhwb3J0cy5pbml0ID0gaW5kZXguaW5pdDtcbmV4cG9ydHMuc2hvd1JlcG9ydERpYWxvZyA9IGluZGV4LnNob3dSZXBvcnREaWFsb2c7XG5leHBvcnRzLndpdGhFcnJvckJvdW5kYXJ5ID0gaW5kZXgud2l0aEVycm9yQm91bmRhcnk7XG5leHBvcnRzLndpdGhTZW50cnlDb25maWcgPSB3aXRoU2VudHJ5Q29uZmlnLndpdGhTZW50cnlDb25maWc7XG5leHBvcnRzLmNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24gPSBfZXJyb3IuY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbjtcbmV4cG9ydHMud3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5ID0gd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5LndyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkud3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS53cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS53cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkud3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkud3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkgPSB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS53cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcFNlcnZlckNvbXBvbmVudFdpdGhTZW50cnkgPSB3cmFwU2VydmVyQ29tcG9uZW50V2l0aFNlbnRyeS53cmFwU2VydmVyQ29tcG9uZW50V2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkgPSB3cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeS53cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMgPSB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy53cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucztcbmV4cG9ydHMud3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5ID0gd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LndyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5ID0gd3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5LndyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeTtcbmV4cG9ydHMud3JhcEdlbmVyYXRpb25GdW5jdGlvbldpdGhTZW50cnkgPSB3cmFwR2VuZXJhdGlvbkZ1bmN0aW9uV2l0aFNlbnRyeS53cmFwR2VuZXJhdGlvbkZ1bmN0aW9uV2l0aFNlbnRyeTtcbmV4cG9ydHMud2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbiA9IHdpdGhTZXJ2ZXJBY3Rpb25JbnN0cnVtZW50YXRpb24ud2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbjtcbmV4cG9ydHMuY2FwdHVyZVJlcXVlc3RFcnJvciA9IGNhcHR1cmVSZXF1ZXN0RXJyb3IuY2FwdHVyZVJlcXVlc3RFcnJvcjtcbmV4cG9ydHMuY2xhdWRlQ29kZUludGVncmF0aW9uID0gbm9kZS5jbGF1ZGVDb2RlSW50ZWdyYXRpb247XG5leHBvcnRzLmNyZWF0ZUluc3RydW1lbnRlZENsYXVkZVF1ZXJ5ID0gbm9kZS5jcmVhdGVJbnN0cnVtZW50ZWRDbGF1ZGVRdWVyeTtcbmV4cG9ydHMucGF0Y2hDbGF1ZGVDb2RlUXVlcnkgPSBub2RlLnBhdGNoQ2xhdWRlQ29kZVF1ZXJ5O1xuT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGUsICdfX3Byb3RvX18nKSAmJlxuXHQhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsICdfX3Byb3RvX18nKSAmJlxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fcHJvdG9fXycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHZhbHVlOiBub2RlWydfX3Byb3RvX18nXVxuXHR9KTtcblxuT2JqZWN0LmtleXMobm9kZSkuZm9yRWFjaChrID0+IHtcblx0aWYgKGsgIT09ICdkZWZhdWx0JyAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIGspKSBleHBvcnRzW2tdID0gbm9kZVtrXTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguc2VydmVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst distDirRewriteFramesIntegration = core.defineIntegration(({ distDirName }) => {\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n  // we can read in the project directory from the currently running process\n  const distDirAbsPath = path.resolve(distDirName).replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(core.escapeStringForRegex(distDirAbsPath));\n\n  const rewriteFramesInstance = core.rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n\nexports.distDirRewriteFramesIntegration = distDirRewriteFramesIntegration;\n//# sourceMappingURL=distDirRewriteFramesIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9zZXJ2ZXIvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLGtCQUFNOztBQUUzQixrRUFBa0UsYUFBYTtBQUMvRTtBQUNBO0FBQ0EsNEVBQTRFOztBQUU1RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvc2VydmVyL2Rpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IGRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKCh7IGRpc3REaXJOYW1lIH0pID0+IHtcbiAgLy8gbmV4dGpzIGFsd2F5cyBwdXRzIHRoZSBidWlsZCBkaXJlY3RvcnkgYXQgdGhlIHByb2plY3Qgcm9vdCBsZXZlbCwgd2hpY2ggaXMgYWxzbyB3aGVyZSB5b3UgcnVuIGBuZXh0IHN0YXJ0YCBmcm9tLCBzb1xuICAvLyB3ZSBjYW4gcmVhZCBpbiB0aGUgcHJvamVjdCBkaXJlY3RvcnkgZnJvbSB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcHJvY2Vzc1xuICBjb25zdCBkaXN0RGlyQWJzUGF0aCA9IHBhdGgucmVzb2x2ZShkaXN0RGlyTmFtZSkucmVwbGFjZSgvKFxcL3xcXFxcKSQvLCAnJyk7IC8vIFdlIHN0cmlwIHRyYWlsaW5nIHNsYXNoZXMgYmVjYXVzZSBcImFwcDovLy9fbmV4dFwiIGFsc28gZG9lc24ndCBoYXZlIG9uZVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAc2VudHJ5LWludGVybmFsL3Nkay9uby1yZWdleHAtY29uc3RydWN0b3IgLS0gdXNlciBpbnB1dCBpcyBlc2NhcGVkXG4gIGNvbnN0IFNPVVJDRU1BUF9GSUxFTkFNRV9SRUdFWCA9IG5ldyBSZWdFeHAoY29yZS5lc2NhcGVTdHJpbmdGb3JSZWdleChkaXN0RGlyQWJzUGF0aCkpO1xuXG4gIGNvbnN0IHJld3JpdGVGcmFtZXNJbnN0YW5jZSA9IGNvcmUucmV3cml0ZUZyYW1lc0ludGVncmF0aW9uKHtcbiAgICBpdGVyYXRlZTogZnJhbWUgPT4ge1xuICAgICAgZnJhbWUuZmlsZW5hbWUgPSBmcmFtZS5maWxlbmFtZT8ucmVwbGFjZShTT1VSQ0VNQVBfRklMRU5BTUVfUkVHRVgsICdhcHA6Ly8vX25leHQnKTtcbiAgICAgIHJldHVybiBmcmFtZTtcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIC4uLnJld3JpdGVGcmFtZXNJbnN0YW5jZSxcbiAgICBuYW1lOiAnRGlzdERpclJld3JpdGVGcmFtZXMnLFxuICB9O1xufSk7XG5cbmV4cG9ydHMuZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiA9IGRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../common/debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst devErrorSymbolicationEventProcessor = __webpack_require__(/*! ../common/devErrorSymbolicationEventProcessor.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\");\nconst getVercelEnv = __webpack_require__(/*! ../common/getVercelEnv.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../common/span-attributes-with-logic-attached.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst isBuild = __webpack_require__(/*! ../common/utils/isBuild.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst distDirRewriteFramesIntegration = __webpack_require__(/*! ./distDirRewriteFramesIntegration.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\");\nconst _error = __webpack_require__(/*! ../common/pages-router-instrumentation/_error.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ../common/wrapGenerationFunctionWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ../common/captureRequestError.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */\nconst ErrorBoundary = (props) => {\n  if (!props.children) {\n    return null;\n  }\n\n  if (typeof props.children === 'function') {\n    return (props.children )();\n  }\n\n  // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n  return props.children ;\n};\n\n/**\n * A passthrough redux enhancer for the server that doesn't depend on anything from the `@sentry/react` package.\n */\nfunction createReduxEnhancer() {\n  return (createStore) => createStore;\n}\n\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(\n  WrappedComponent,\n) {\n  return WrappedComponent ;\n}\n\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */\nfunction showReportDialog() {\n  return;\n}\n\n/** Inits the Sentry NextJS SDK on node. */\nfunction init(options) {\n  if (isBuild.isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = node.getDefaultIntegrations(options)\n    .filter(integration => integration.name !== 'Http')\n    .concat(\n      // We are using the HTTP integration without instrumenting incoming HTTP requests because Next.js does that by itself.\n      node.httpIntegration({\n        disableIncomingRequestSpans: true,\n      }),\n    );\n\n  // Turn off Next.js' own fetch instrumentation (only when we manage OTEL)\n  // https://github.com/lforst/nextjs-fork/blob/1994fd186defda77ad971c36dc3163db263c993f/packages/next/src/server/lib/patch-fetch.ts#L245\n  // Enable with custom OTel setup: https://github.com/getsentry/sentry-javascript/issues/17581\n  if (!options.skipOpenTelemetrySetup) {\n    process.env.NEXT_OTEL_FETCH_DISABLED = '1';\n  }\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = \".next\" || 0;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration.distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts = {\n    environment: process.env.SENTRY_ENVIRONMENT || getVercelEnv.getVercelEnv(false) || \"development\",\n    release: \"fca76ee7b26bb2d2d7d4693ef948bc93e8812918\" || 0,\n    defaultIntegrations: customDefaultIntegrations,\n    ...options,\n  };\n\n  if (debugBuild.DEBUG_BUILD && opts.debug) {\n    core.debug.enable();\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    debugBuild.DEBUG_BUILD && core.debug.log('SDK already initialized');\n    return;\n  }\n\n  core.applySdkMetadata(opts, 'nextjs', ['nextjs', 'node']);\n\n  const client = node.init(opts);\n  client?.on('beforeSampling', ({ spanAttributes }, samplingDecision) => {\n    // There are situations where the Next.js Node.js server forwards requests for the Edge Runtime server (e.g. in\n    // middleware) and this causes spans for Sentry ingest requests to be created. These are not exempt from our tracing\n    // because we didn't get the chance to do `suppressTracing`, since this happens outside of userland.\n    // We need to drop these spans.\n    if (\n      // eslint-disable-next-line deprecation/deprecation\n      (typeof spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET] === 'string' &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_key') &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_client')) ||\n      (typeof spanAttributes[semanticConventions.ATTR_URL_QUERY] === 'string' &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_key') &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_client'))\n    ) {\n      samplingDecision.decision = false;\n    }\n  });\n\n  client?.on('spanStart', span => {\n    const spanAttributes = core.spanToJSON(span).data;\n\n    // What we do in this glorious piece of code, is hoist any information about parameterized routes from spans emitted\n    // by Next.js via the `next.route` attribute, up to the transaction by setting the http.route attribute.\n    if (typeof spanAttributes?.['next.route'] === 'string') {\n      const rootSpan = core.getRootSpan(span);\n      const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n      // Only hoist the http.route attribute if the transaction doesn't already have it\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        (rootSpanAttributes?.[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || rootSpanAttributes?.[semanticConventions.SEMATTRS_HTTP_METHOD]) &&\n        !rootSpanAttributes?.[semanticConventions.ATTR_HTTP_ROUTE]\n      ) {\n        const route = spanAttributes['next.route'].replace(/\\/route$/, '');\n        rootSpan.updateName(route);\n        rootSpan.setAttribute(semanticConventions.ATTR_HTTP_ROUTE, route);\n        // Preserving the original attribute despite internally not depending on it\n        rootSpan.setAttribute('next.route', route);\n      }\n    }\n\n    // We want to skip span data inference for any spans generated by Next.js. Reason being that Next.js emits spans\n    // with patterns (e.g. http.server spans) that will produce confusing data.\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // We want to fork the isolation scope for incoming requests\n    if (spanAttributes?.['next.span_type'] === 'BaseServer.handleRequest' && span === core.getRootSpan(span)) {\n      const scopes = core.getCapturedScopesOnSpan(span);\n\n      const isolationScope = (scopes.isolationScope || core.getIsolationScope()).clone();\n      const scope = scopes.scope || core.getCurrentScope();\n\n      const currentScopesPointer = opentelemetry.getScopesFromContext(api.context.active());\n      if (currentScopesPointer) {\n        currentScopesPointer.isolationScope = isolationScope;\n      }\n\n      core.setCapturedScopesOnSpan(span, scope, isolationScope);\n    }\n  });\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      (event => {\n        if (event.type === 'transaction') {\n          // Filter out transactions for static assets\n          // This regex matches the default path to the static assets (`_next/static`) and could potentially filter out too many transactions.\n          // We match `/_next/static/` anywhere in the transaction name because its location may change with the basePath setting.\n          if (event.transaction?.match(/^GET (\\/.*)?\\/_next\\/static\\//)) {\n            return null;\n          }\n\n          // Filter out transactions for requests to the tunnel route\n          if (\n            (globalWithInjectedValues._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${globalWithInjectedValues._sentryRewritesTunnelPath}`) ||\n            (process.env._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${process.env._sentryRewritesTunnelPath}`)\n          ) {\n            return null;\n          }\n\n          // Filter out requests to resolve source maps for stack frames in dev mode\n          if (event.transaction?.match(/\\/__nextjs_original-stack-frame/)) {\n            return null;\n          }\n\n          // Filter out /404 transactions which seem to be created excessively\n          if (\n            // Pages router\n            event.transaction === '/404' ||\n            // App router (could be \"GET /404\", \"POST /404\", ...)\n            event.transaction?.match(/^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \\/(404|_not-found)$/)\n          ) {\n            return null;\n          }\n\n          // Filter transactions that we explicitly want to drop.\n          if (event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION]) {\n            return null;\n          }\n\n          // Next.js 13 sometimes names the root transactions like this containing useless tracing.\n          if (event.transaction === 'NextServer.getRequestHandler') {\n            return null;\n          }\n\n          // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n          if (typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string') {\n            const traceparentData = core.extractTraceparentData(\n              event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL],\n            );\n\n            if (traceparentData?.parentSampled === false) {\n              return null;\n            }\n          }\n\n          return event;\n        } else {\n          return event;\n        }\n      }) ,\n      { id: 'NextLowQualityTransactionsFilter' },\n    ),\n  );\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      ((event, hint) => {\n        if (event.type !== undefined) {\n          return event;\n        }\n\n        const originalException = hint.originalException;\n\n        const isPostponeError =\n          typeof originalException === 'object' &&\n          originalException !== null &&\n          '$$typeof' in originalException &&\n          originalException.$$typeof === Symbol.for('react.postpone');\n\n        if (isPostponeError) {\n          // Postpone errors are used for partial-pre-rendering (PPR)\n          return null;\n        }\n\n        // We don't want to capture suspense errors as they are simply used by React/Next.js for control flow\n        const exceptionMessage = event.exception?.values?.[0]?.value;\n        if (\n          exceptionMessage?.includes('Suspense Exception: This is not a real error!') ||\n          exceptionMessage?.includes('Suspense Exception: This is not a real error, and should not leak')\n        ) {\n          return null;\n        }\n\n        return event;\n      }) ,\n      { id: 'DropReactControlFlowErrors' },\n    ),\n  );\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // Enhance route handler transactions\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'BaseServer.handleRequest'\n    ) {\n      event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server';\n      event.contexts.trace.op = 'http.server';\n\n      if (event.transaction) {\n        event.transaction = core.stripUrlQueryAndFragment(event.transaction);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const method = event.contexts.trace.data[semanticConventions.SEMATTRS_HTTP_METHOD];\n      // eslint-disable-next-line deprecation/deprecation\n      const target = event.contexts?.trace?.data?.[semanticConventions.SEMATTRS_HTTP_TARGET];\n      const route = event.contexts.trace.data[semanticConventions.ATTR_HTTP_ROUTE] || event.contexts.trace.data['next.route'];\n\n      if (typeof method === 'string' && typeof route === 'string') {\n        const cleanRoute = route.replace(/\\/route$/, '');\n        event.transaction = `${method} ${cleanRoute}`;\n        event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n        // Preserve next.route in case it did not get hoisted\n        event.contexts.trace.data['next.route'] = cleanRoute;\n      }\n\n      // backfill transaction name for pages that would otherwise contain unparameterized routes\n      if (event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] && event.transaction !== 'GET /_app') {\n        event.transaction = `${method} ${event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`;\n      }\n\n      // Next.js overrides transaction names for page loads that throw an error\n      // but we want to keep the original target name\n      if (event.transaction === 'GET /_error' && target) {\n        event.transaction = `${method ? `${method} ` : ''}${target}`;\n      }\n    }\n\n    // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n    if (\n      event.type === 'transaction' &&\n      typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string'\n    ) {\n      const traceparentData = core.extractTraceparentData(event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n\n      if (traceparentData?.traceId) {\n        event.contexts.trace.trace_id = traceparentData.traceId;\n      }\n\n      if (traceparentData?.parentSpanId) {\n        event.contexts.trace.parent_span_id = traceparentData.parentSpanId;\n      }\n    }\n  });\n\n  if (true) {\n    core.getGlobalScope().addEventProcessor(devErrorSymbolicationEventProcessor.devErrorSymbolicationEventProcessor);\n  }\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (false) {}\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('SDK successfully initialized');\n\n  return client;\n}\n\nfunction sdkAlreadyInitialized() {\n  return !!core.getClient();\n}\n\nexports.claudeCodeIntegration = node.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = node.createInstrumentedClaudeQuery;\nexports.patchClaudeCodeQuery = node.patchClaudeCodeQuery;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.ErrorBoundary = ErrorBoundary;\nexports.createReduxEnhancer = createReduxEnhancer;\nexports.init = init;\nexports.showReportDialog = showReportDialog;\nexports.withErrorBoundary = withErrorBoundary;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n  !Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n  Object.defineProperty(exports, '__proto__', {\n    enumerable: true,\n    value: node['__proto__']\n  });\n\nObject.keys(node).forEach(k => {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nfunction captureRequestError(error, request, errorContext) {\n  core.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: core.headersToDict(request.headers),\n        method: request.method,\n      } ,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    core.captureException(error, {\n      mechanism: {\n        handled: false,\n        type: 'auto.function.nextjs.on_request_error',\n      },\n    });\n\n    core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n  });\n}\n\nexports.captureRequestError = captureRequestError;\n//# sourceMappingURL=captureRequestError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9jYXB0dXJlUmVxdWVzdEVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyx5UEFBd0I7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcmVzcG9uc2VFbmQgPSByZXF1aXJlKCcuL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogUmVwb3J0cyBlcnJvcnMgcGFzc2VkIHRvIHRoZSB0aGUgTmV4dC5qcyBgb25SZXF1ZXN0RXJyb3JgIGluc3RydW1lbnRhdGlvbiBob29rLlxuICovXG5mdW5jdGlvbiBjYXB0dXJlUmVxdWVzdEVycm9yKGVycm9yLCByZXF1ZXN0LCBlcnJvckNvbnRleHQpIHtcbiAgY29yZS53aXRoU2NvcGUoc2NvcGUgPT4ge1xuICAgIHNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICBub3JtYWxpemVkUmVxdWVzdDoge1xuICAgICAgICBoZWFkZXJzOiBjb3JlLmhlYWRlcnNUb0RpY3QocmVxdWVzdC5oZWFkZXJzKSxcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgIH0gLFxuICAgIH0pO1xuXG4gICAgc2NvcGUuc2V0Q29udGV4dCgnbmV4dGpzJywge1xuICAgICAgcmVxdWVzdF9wYXRoOiByZXF1ZXN0LnBhdGgsXG4gICAgICByb3V0ZXJfa2luZDogZXJyb3JDb250ZXh0LnJvdXRlcktpbmQsXG4gICAgICByb3V0ZXJfcGF0aDogZXJyb3JDb250ZXh0LnJvdXRlUGF0aCxcbiAgICAgIHJvdXRlX3R5cGU6IGVycm9yQ29udGV4dC5yb3V0ZVR5cGUsXG4gICAgfSk7XG5cbiAgICBzY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoZXJyb3JDb250ZXh0LnJvdXRlUGF0aCk7XG5cbiAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLm9uX3JlcXVlc3RfZXJyb3InLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvcmUudmVyY2VsV2FpdFVudGlsKHJlc3BvbnNlRW5kLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnRzLmNhcHR1cmVSZXF1ZXN0RXJyb3IgPSBjYXB0dXJlUmVxdWVzdEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwdHVyZVJlcXVlc3RFcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGVidWctYnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst stackTraceParser = __webpack_require__(/*! stacktrace-parser */ \"(rsc)/../../node_modules/.pnpm/stacktrace-parser@0.1.11/node_modules/stacktrace-parser/dist/stack-trace-parser.esm.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nasync function devErrorSymbolicationEventProcessor(event, hint) {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = event.spans?.filter(span => {\n      const httpUrlAttribute = span.data?.['http.url'];\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame'); // could also be __nextjs_original-stack-frames (plural)\n      }\n\n      return true;\n    });\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the\n  // entire event processor. Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n      const nextJsVersion = globalWithInjectedValues._sentryNextJsVersion;\n\n      // If we for whatever reason don't have a Next.js version,\n      // we don't want to symbolicate as this previously lead to infinite loops\n      if (!nextJsVersion) {\n        return event;\n      }\n\n      const parsedNextjsVersion = core.parseSemver(nextJsVersion);\n\n      let resolvedFrames\n\n;\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (parsedNextjsVersion.major > 15 || (parsedNextjsVersion.major === 15 && parsedNextjsVersion.minor >= 2)) {\n        const r = await resolveStackFrames(frames);\n        if (r === null) {\n          return event;\n        }\n        resolvedFrames = r;\n      } else {\n        resolvedFrames = await Promise.all(\n          frames.map(frame => resolveStackFrame(frame, hint.originalException )),\n        );\n      }\n\n      if (event.exception?.values?.[0]?.stacktrace?.frames) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map(\n          (frame, i, frames) => {\n            const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n            if (!resolvedFrame?.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n              return {\n                ...frame,\n                platform: frame.filename?.startsWith('node:internal') ? 'nodejs' : undefined, // simple hack that will prevent a source mapping error from showing up\n                in_app: false,\n              };\n            }\n\n            const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(\n              resolvedFrame.originalCodeFrame,\n            );\n\n            return {\n              ...frame,\n              pre_context: preContextLines,\n              context_line: contextLine,\n              post_context: postContextLines,\n              function: resolvedFrame.originalStackFrame.methodName,\n              filename: resolvedFrame.originalStackFrame.file\n                ? stripWebpackInternalPrefix(resolvedFrame.originalStackFrame.file)\n                : undefined,\n              lineno:\n                resolvedFrame.originalStackFrame.lineNumber || resolvedFrame.originalStackFrame.line1 || undefined,\n              colno: resolvedFrame.originalStackFrame.column || resolvedFrame.originalStackFrame.column1 || undefined,\n            };\n          },\n        );\n      }\n    }\n  } catch {\n    return event;\n  }\n\n  return event;\n}\n\nasync function resolveStackFrame(\n  frame,\n  error,\n) {\n  try {\n    if (!(frame.file?.startsWith('webpack-internal:') || frame.file?.startsWith('file:'))) {\n      return null;\n    }\n\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, (frame[key ] ?? '').toString());\n    });\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`,\n        {\n          signal: controller.signal,\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame,\n    };\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nasync function resolveStackFrames(\n  frames,\n) {\n  try {\n    const postBody = {\n      frames: frames\n        .filter(frame => {\n          return !!frame.file;\n        })\n        .map(frame => {\n          // https://github.com/vercel/next.js/blob/df0573a478baa8b55478a7963c473dddd59a5e40/packages/next/src/client/components/react-dev-overlay/server/middleware-turbopack.ts#L129\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          frame.file = frame.file.replace(/^rsc:\\/\\/React\\/[^/]+\\//, '').replace(/\\?\\d+$/, '');\n\n          return {\n            file: frame.file,\n            methodName: frame.methodName ?? '<unknown>',\n            arguments: [],\n            lineNumber: frame.lineNumber ?? 0,\n            column: frame.column ?? 0,\n            line1: frame.lineNumber ?? 0,\n            column1: frame.column ?? 0,\n          };\n        }),\n      isServer: false,\n      isEdgeServer: false,\n      isAppDirectory: true,\n    };\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frames`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal,\n          body: JSON.stringify(postBody),\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return body.map(frame => {\n      return {\n        originalCodeFrame: frame.value.originalCodeFrame,\n        originalStackFrame: frame.value.originalStackFrame,\n      };\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nfunction parseOriginalCodeFrame(codeFrame)\n\n {\n  const preProcessedLines = codeFrame\n    // Remove ASCII control characters that are used for syntax highlighting\n    .replace(\n      // eslint-disable-next-line no-control-regex\n      /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, // https://stackoverflow.com/a/29497680\n      '',\n    )\n    .split('\\n')\n    // Remove line that is supposed to indicate where the error happened\n    .filter(line => !line.match(/^\\s*\\|/))\n    // Find the error line\n    .map(line => ({\n      line,\n      isErrorLine: !!line.match(/^>/),\n    }))\n    // Remove the leading part that is just for prettier output\n    .map(lineObj => ({\n      ...lineObj,\n      line: lineObj.line.replace(/^.*\\|/, ''),\n    }));\n\n  const preContextLines = [];\n  let contextLine = undefined;\n  const postContextLines = [];\n\n  let reachedContextLine = false;\n\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines,\n  };\n}\n\n/**\n * Strips webpack-internal prefixes from filenames to clean up stack traces.\n *\n * Examples:\n * - \"webpack-internal:///./components/file.tsx\" -> \"./components/file.tsx\"\n * - \"webpack-internal:///(app-pages-browser)/./components/file.tsx\" -> \"./components/file.tsx\"\n */\nfunction stripWebpackInternalPrefix(filename) {\n  if (!filename) {\n    return filename;\n  }\n\n  const webpackInternalRegex = /^webpack-internal:(?:\\/+)?(?:\\([^)]*\\)\\/)?(.+)$/;\n  const match = filename.match(webpackInternalRegex);\n\n  return match ? match[1] : filename;\n}\n\nexports.devErrorSymbolicationEventProcessor = devErrorSymbolicationEventProcessor;\n//# sourceMappingURL=devErrorSymbolicationEventProcessor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nfunction getVercelEnv(isClient) {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n\nexports.getVercelEnv = getVercelEnv;\n//# sourceMappingURL=getVercelEnv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9nZXRWZXJjZWxFbnYuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsYUFBYTtBQUMvQzs7QUFFQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9nZXRWZXJjZWxFbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogUmV0dXJucyBhbiBlbnZpcm9ubWVudCBzZXR0aW5nIHZhbHVlIGRldGVybWluZWQgYnkgVmVyY2VsJ3MgYFZFUkNFTF9FTlZgIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICpcbiAqIEBwYXJhbSBpc0NsaWVudCBGbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdG8gdXNlIHRoZSBgTkVYVF9QVUJMSUNfYCBwcmVmaXhlZCB2ZXJzaW9uIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmVyY2VsRW52KGlzQ2xpZW50KSB7XG4gIGNvbnN0IHZlcmNlbEVudlZhciA9IGlzQ2xpZW50ID8gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVkVSQ0VMX0VOViA6IHByb2Nlc3MuZW52LlZFUkNFTF9FTlY7XG4gIHJldHVybiB2ZXJjZWxFbnZWYXIgPyBgdmVyY2VsLSR7dmVyY2VsRW52VmFyfWAgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydHMuZ2V0VmVyY2VsRW52ID0gZ2V0VmVyY2VsRW52O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VmVyY2VsRW52LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nfunction isNotFoundNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(\n      (subject ).digest ,\n    )\n  );\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nfunction isRedirectNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    typeof (subject ).digest === 'string' &&\n    (subject ).digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  );\n}\n\nexports.isNotFoundNavigationError = isNotFoundNavigationError;\nexports.isRedirectNavigationError = isRedirectNavigationError;\n//# sourceMappingURL=nextNavigationErrorUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGtEQUFrRDtBQUNsRztBQUNBOztBQUVBLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgaW5wdXQgaXMgYSBOZXh0LmpzIG5vdC1mb3VuZCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9ub3Rmb3VuZCNub3Rmb3VuZFxuICovXG5mdW5jdGlvbiBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICBbJ05FWFRfTk9UX0ZPVU5EJywgJ05FWFRfSFRUUF9FUlJPUl9GQUxMQkFDSzs0MDQnXS5pbmNsdWRlcyhcbiAgICAgIChzdWJqZWN0ICkuZGlnZXN0ICxcbiAgICApXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGlucHV0IGlzIGEgTmV4dC5qcyByZWRpcmVjdCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9yZWRpcmVjdCNyZWRpcmVjdFxuICovXG5mdW5jdGlvbiBpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICB0eXBlb2YgKHN1YmplY3QgKS5kaWdlc3QgPT09ICdzdHJpbmcnICYmXG4gICAgKHN1YmplY3QgKS5kaWdlc3Quc3RhcnRzV2l0aCgnTkVYVF9SRURJUkVDVDsnKSAvLyBhIHJlZGlyZWN0IGRpZ2VzdCBsb29rcyBsaWtlIFwiTkVYVF9SRURJUkVDVDtbcmVkaXJlY3QgcGF0aF1cIlxuICApO1xufVxuXG5leHBvcnRzLmlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IgPSBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yO1xuZXhwb3J0cy5pc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yID0gaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res?.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  core.withScope(scope => {\n    if (req) {\n      const normalizedRequest = core.httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({ normalizedRequest });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    core.captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'auto.function.nextjs.underscore_error',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      },\n    });\n  });\n\n  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n}\n\nexports.captureUnderscoreErrorException = captureUnderscoreErrorException;\n//# sourceMappingURL=_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL19lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsMFBBQXlCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdCQUFnQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsbUJBQW1CO0FBQzFEOztBQUVBO0FBQ0E7QUFDQSx1RUFBdUUsSUFBSTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBOztBQUVBLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vX2Vycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4uL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogQ2FwdHVyZSB0aGUgZXhjZXB0aW9uIHBhc3NlZCBieSBuZXh0anMgdG8gdGhlIGBfZXJyb3JgIHBhZ2UsIGFkZGluZyBjb250ZXh0IGRhdGEgYXMgYXBwcm9wcmlhdGUuXG4gKlxuICogQHBhcmFtIGNvbnRleHRPclByb3BzIFRoZSBkYXRhIHBhc3NlZCB0byBlaXRoZXIgYGdldEluaXRpYWxQcm9wc2Agb3IgYHJlbmRlcmAgYnkgbmV4dGpzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24oY29udGV4dE9yUHJvcHMpIHtcbiAgY29uc3QgeyByZXEsIHJlcywgZXJyIH0gPSBjb250ZXh0T3JQcm9wcztcblxuICAvLyA0MDRzIChhbmQgb3RoZXIgNDAwLXkgZnJpZW5kcykgY2FuIHRyaWdnZXIgYF9lcnJvcmAsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHNlbmQgdGhlbSB0byBTZW50cnlcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcz8uc3RhdHVzQ29kZSB8fCBjb250ZXh0T3JQcm9wcy5zdGF0dXNDb2RlO1xuICBpZiAoc3RhdHVzQ29kZSAmJiBzdGF0dXNDb2RlIDwgNTAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgLy8gSW4gcHJldmlvdXMgdmVyc2lvbnMgb2YgdGhlIHN1Z2dlc3RlZCBgX2Vycm9yLmpzYCBwYWdlIGluIHdoaWNoIHRoaXMgZnVuY3Rpb24gaXMgbWVhbnQgdG8gYmUgdXNlZCwgdGhlcmUgd2FzIGFcbiAgLy8gd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy84NTkyIHdoaWNoIGludm9sdmVkIGFuIGV4dHJhIGNhbGwgdG8gdGhpcyBmdW5jdGlvbiwgaW4gdGhlXG4gIC8vIGN1c3RvbSBlcnJvciBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QsIGp1c3QgaW4gY2FzZSBpdCBoYWRuJ3QgYmVlbiBjYWxsZWQgYnkgYGdldEluaXRpYWxQcm9wc2AuIE5vdyB0aGF0IHRoYXRcbiAgLy8gaXNzdWUgaGFzIGJlZW4gZml4ZWQsIHRoZSBzZWNvbmQgY2FsbCBpcyB1bm5lY2Vzc2FyeSwgYnV0IHNpbmNlIGl0IGxpdmVzIGluIHVzZXIgY29kZSByYXRoZXIgdGhhbiBvdXIgY29kZSwgdXNlcnNcbiAgLy8gaGF2ZSB0byBiZSB0aGUgb25lcyB0byBnZXQgcmlkIG9mIGl0LCBhbmQgZ3VhcmFuZXRlZWRseSwgbm90IGFsbCBvZiB0aGVtIHdpbGwuIFNvLCByYXRoZXIgdGhhbiBjYXB0dXJlIHRoZSBlcnJvclxuICAvLyB0d2ljZSwgd2UganVzdCBiYWlsIGlmIHdlIHNlbnNlIHdlJ3JlIGluIHRoYXQgbm93LWV4dHJhbmVvdXMgc2Vjb25kIGNhbGwuIChXZSBjYW4gdGVsbCB3aGljaCBmdW5jdGlvbiB3ZSdyZSBpblxuICAvLyBiZWNhdXNlIE5leHRqcyBwYXNzZXMgYHBhdGhuYW1lYCB0byBgZ2V0SW5pdGlhbFByb3BzYCBidXQgbm90IHRvIGByZW5kZXJgLilcbiAgaWYgKCFjb250ZXh0T3JQcm9wcy5wYXRobmFtZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGNvcmUud2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBpZiAocmVxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkUmVxdWVzdCA9IGNvcmUuaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKHJlcSk7XG4gICAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoeyBub3JtYWxpemVkUmVxdWVzdCB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlyZC1wYXJ0eSBsaWJyYXJpZXMgKG9yIHVzZXJzIHRoZW1zZWx2ZXMpIHRocm93IHNvbWV0aGluZyBmYWxzeSwgd2Ugd2FudCB0byBjYXB0dXJlIGl0IGFzIGEgbWVzc2FnZSAod2hpY2hcbiAgICAvLyBpcyB3aGF0IHBhc3NpbmcgYSBzdHJpbmcgdG8gYGNhcHR1cmVFeGNlcHRpb25gIHdpbGwgd2luZCB1cCBkb2luZylcbiAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyIHx8IGBfZXJyb3IuanMgY2FsbGVkIHdpdGggZmFsc3kgZXJyb3IgKCR7ZXJyfSlgLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLnVuZGVyc2NvcmVfZXJyb3InLFxuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGZ1bmN0aW9uOiAnX2Vycm9yLmdldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICBjb3JlLnZlcmNlbFdhaXRVbnRpbChyZXNwb25zZUVuZC5mbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xufVxuXG5leHBvcnRzLmNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24gPSBjYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Vycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js":
/*!***************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js ***!
  \***************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ../utils/addHeadersAsAttributes.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ../utils/tracingUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wrap the given API route handler with error nad performance monitoring.\n *\n * @param apiHandler The handler exported from the user's API page route file, which may or may not already be\n * wrapped with `withSentry`\n * @param parameterizedRoute The page's parameterized route.\n * @returns The wrapped handler which will always return a Promise.\n */\nfunction wrapApiHandlerWithSentry(apiHandler, parameterizedRoute) {\n  return new Proxy(apiHandler, {\n    apply: (\n      wrappingTarget,\n      thisArg,\n      args,\n    ) => {\n      tracingUtils.dropNextjsRootContext();\n      return tracingUtils.escapeNextjsTracing(() => {\n        const [req, res] = args;\n\n        if (!req) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a request object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        } else if (!res) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a response object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        }\n\n        // Prevent double wrapping of the same request.\n        if (req.__withSentry_applied__) {\n          return wrappingTarget.apply(thisArg, args);\n        }\n        req.__withSentry_applied__ = true;\n\n        return core.withIsolationScope(isolationScope => {\n          // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n          // Else, we manually continueTrace from the incoming headers\n          const continueTraceIfNoActiveSpan = core.getActiveSpan()\n            ? (_opts, callback) => callback()\n            : core.continueTrace;\n\n          return continueTraceIfNoActiveSpan(\n            {\n              sentryTrace:\n                req.headers && core.isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined,\n              baggage: req.headers?.baggage,\n            },\n            () => {\n              const reqMethod = `${(req.method || 'GET').toUpperCase()} `;\n              const normalizedRequest = core.httpRequestToRequestData(req);\n\n              isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n              isolationScope.setTransactionName(`${reqMethod}${parameterizedRoute}`);\n\n              return core.startSpanManual(\n                {\n                  name: `${reqMethod}${parameterizedRoute}`,\n                  op: 'http.server',\n                  forceTransaction: true,\n                  attributes: {\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.nextjs',\n                    ...addHeadersAsAttributes.addHeadersAsAttributes(normalizedRequest.headers || {}),\n                  },\n                },\n                async span => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  res.end = new Proxy(res.end, {\n                    apply(target, thisArg, argArray) {\n                      core.setHttpStatus(span, res.statusCode);\n                      span.end();\n                      core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                      return target.apply(thisArg, argArray);\n                    },\n                  });\n                  try {\n                    return await wrappingTarget.apply(thisArg, args);\n                  } catch (e) {\n                    // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n                    // store a seen flag on it. (Because of the one-way-on-Vercel-one-way-off-of-Vercel approach we've been forced\n                    // to take, it can happen that the same thrown object gets caught in two different ways, and flagging it is a\n                    // way to prevent it from actually being reported twice.)\n                    const objectifiedErr = core.objectify(e);\n\n                    core.captureException(objectifiedErr, {\n                      mechanism: {\n                        type: 'auto.http.nextjs.api_handler',\n                        handled: false,\n                        data: {\n                          wrapped_handler: wrappingTarget.name,\n                          function: 'withSentry',\n                        },\n                      },\n                    });\n\n                    core.setHttpStatus(span, 500);\n                    span.end();\n\n                    // we need to await the flush here to ensure that the error is captured\n                    // as the runtime freezes as soon as the error is thrown below\n                    await responseEnd.flushSafelyWithTimeout();\n\n                    // We rethrow here so that nextjs can do with the error whatever it would normally do. (Sometimes \"whatever it\n                    // would normally do\" is to allow the error to bubble up to the global handlers - another reason we need to mark\n                    // the error as already having been captured.)\n                    throw objectifiedErr;\n                  }\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry;\n//# sourceMappingURL=wrapApiHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js":
/*!**************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js ***!
  \**************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(\n  handler,\n  vercelCronsConfig,\n) {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args) => {\n      if (!args?.[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const [req] = args ;\n\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n\n      if (\n        !vercelCronsConfig || // do nothing if vercel crons config is missing\n        !userAgentHeader?.includes('vercel-cron') // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n\n      if (!vercelCron?.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const monitorSlug = vercelCron.path;\n\n      const checkInId = core.captureCheckIn(\n        {\n          monitorSlug,\n          status: 'in_progress',\n        },\n        {\n          maxRuntime: 60 * 12, // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n          schedule: {\n            type: 'crontab',\n            value: vercelCron.schedule,\n          },\n        },\n      );\n\n      const startTime = Date.now() / 1000;\n\n      const handleErrorCase = () => {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime,\n        });\n      };\n\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(\n          () => {\n            core.captureCheckIn({\n              checkInId,\n              monitorSlug,\n              status: 'ok',\n              duration: Date.now() / 1000 - startTime,\n            });\n          },\n          () => {\n            handleErrorCase();\n          },\n        );\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime,\n        });\n        return maybePromiseResult;\n      }\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons;\n//# sourceMappingURL=wrapApiHandlerWithSentryVercelCrons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogV3JhcHMgYSBmdW5jdGlvbiB3aXRoIFNlbnRyeSBjcm9ucyBpbnN0cnVtZW50YXRpb24gYnkgYXV0b21hdGljYWxseSBzZW5kaW5nIGNoZWNrLWlucyBmb3IgdGhlIGdpdmVuIFZlcmNlbCBjcm9ucyBjb25maWcuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyhcbiAgaGFuZGxlcixcbiAgdmVyY2VsQ3JvbnNDb25maWcsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShoYW5kbGVyLCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhcHBseTogKG9yaWdpbmFsRnVuY3Rpb24sIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmICghYXJncz8uWzBdKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbcmVxXSA9IGFyZ3MgO1xuXG4gICAgICBsZXQgbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgY29uc3QgY3JvbnNLZXkgPSAnbmV4dFVybCcgaW4gcmVxID8gcmVxLm5leHRVcmwucGF0aG5hbWUgOiByZXEudXJsO1xuICAgICAgY29uc3QgdXNlckFnZW50SGVhZGVyID0gJ25leHRVcmwnIGluIHJlcSA/IHJlcS5oZWFkZXJzLmdldCgndXNlci1hZ2VudCcpIDogcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXTtcblxuICAgICAgaWYgKFxuICAgICAgICAhdmVyY2VsQ3JvbnNDb25maWcgfHwgLy8gZG8gbm90aGluZyBpZiB2ZXJjZWwgY3JvbnMgY29uZmlnIGlzIG1pc3NpbmdcbiAgICAgICAgIXVzZXJBZ2VudEhlYWRlcj8uaW5jbHVkZXMoJ3ZlcmNlbC1jcm9uJykgLy8gZG8gbm90aGluZyBpZiBlbmRwb2ludCBpcyBub3QgY2FsbGVkIGZyb20gdmVyY2VsIGNyb25zXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZlcmNlbENyb24gPSB2ZXJjZWxDcm9uc0NvbmZpZy5maW5kKHZlcmNlbENyb24gPT4gdmVyY2VsQ3Jvbi5wYXRoID09PSBjcm9uc0tleSk7XG5cbiAgICAgIGlmICghdmVyY2VsQ3Jvbj8ucGF0aCB8fCAhdmVyY2VsQ3Jvbi5zY2hlZHVsZSkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSB2ZXJjZWxDcm9uLnBhdGg7XG5cbiAgICAgIGNvbnN0IGNoZWNrSW5JZCA9IGNvcmUuY2FwdHVyZUNoZWNrSW4oXG4gICAgICAgIHtcbiAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYXhSdW50aW1lOiA2MCAqIDEyLCAvLyAobWludXRlcykgc28gMTIgaG91cnMgLSBqdXN0IGEgdmVyeSBoaWdoIGFyYml0cmFyeSBudW1iZXIgc2luY2Ugd2UgZG9uJ3Qga25vdyB0aGUgYWN0dWFsIGR1cmF0aW9uIG9mIHRoZSB1c2VycyBjcm9uIGpvYlxuICAgICAgICAgIHNjaGVkdWxlOiB7XG4gICAgICAgICAgICB0eXBlOiAnY3JvbnRhYicsXG4gICAgICAgICAgICB2YWx1ZTogdmVyY2VsQ3Jvbi5zY2hlZHVsZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKSAvIDEwMDA7XG5cbiAgICAgIGNvbnN0IGhhbmRsZUVycm9yQ2FzZSA9ICgpID0+IHtcbiAgICAgICAgY29yZS5jYXB0dXJlQ2hlY2tJbih7XG4gICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgbWF5YmVQcm9taXNlUmVzdWx0ID0gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbWF5YmVQcm9taXNlUmVzdWx0ID09PSAnb2JqZWN0JyAmJiBtYXliZVByb21pc2VSZXN1bHQgIT09IG51bGwgJiYgJ3RoZW4nIGluIG1heWJlUHJvbWlzZVJlc3VsdCkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlUmVzdWx0KS50aGVuKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvcmUuY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgICAgICBjaGVja0luSWQsXG4gICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdvaycsXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBEYXRlLm5vdygpIC8gMTAwMCAtIHN0YXJ0VGltZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBJdCBpcyB2ZXJ5IGltcG9ydGFudCB0aGF0IHdlIHJldHVybiB0aGUgb3JpZ2luYWwgcHJvbWlzZSBoZXJlLCBiZWNhdXNlIE5leHQuanMgYXR0YWNoZXMgdmFyaW91cyBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIHRvIHRoYXQgcHJvbWlzZSBhbmQgd2lsbCB0aHJvdyBpZiB0aGV5IGFyZSBub3Qgb24gdGhlIHJldHVybmVkIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29yZS5jYXB0dXJlQ2hlY2tJbih7XG4gICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIHN0YXR1czogJ29rJyxcbiAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zID0gd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js":
/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context.ctx;\n\n      const errorWrappedAppGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!(appGetInitialProps ).pageProps) {\n            (appGetInitialProps ).pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (appGetInitialProps ).pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (appGetInitialProps ).pageProps._sentryBaggage = baggage;\n          }\n        }\n\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapAppGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLGtQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyw0UEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBhcHAgKFwiX2FwcC5qc1wiKS5cbiAqXG4gKiBAcGFyYW0gb3JpZ0FwcEdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdBcHBHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnQXBwR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQuY3R4O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcblxuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6ICcvX2FwcCcsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LmN0eC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGFwcEdldEluaXRpYWxQcm9wcyxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICB9XG5cbiA9IGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblxuICAgICAgICBpZiAodHlwZW9mIGFwcEdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgYXBwR2V0SW5pdGlhbFByb3BzICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gUGVyIGRlZmluaXRpb24sIGBwYWdlUHJvcHNgIGlzIG5vdCBvcHRpb25hbCwgaG93ZXZlciBhbiBpbmNyZWFzZWQgYW1vdW50IG9mIHVzZXJzIGRvZXNuJ3Qgc2VlbSB0byBjYWxsXG4gICAgICAgICAgLy8gYEFwcC5nZXRJbml0aWFsUHJvcHMoYXBwQ29udGV4dClgIGluIHRoZWlyIGN1c3RvbSBgX2FwcGAgcGFnZXMgd2hpY2ggaXMgcmVxdWlyZWQgYXMgcGVyXG4gICAgICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYWR2YW5jZWQtZmVhdHVyZXMvY3VzdG9tLWFwcCAtIHJlc3VsdGluZyBpbiBtaXNzaW5nIGBwYWdlUHJvcHNgLlxuICAgICAgICAgIC8vIEZvciB0aGlzIHJlYXNvbiwgd2UganVzdCBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYHBhZ2VQcm9wc2AgZG9lc24ndCBleGlzdCBleHBsaWNpdGx5LlxuICAgICAgICAgIGlmICghKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcykge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcyA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcy5fc2VudHJ5QmFnZ2FnZSA9IGJhZ2dhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwcEdldEluaXRpYWxQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js":
/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapDocumentGetInitialPropsWithSentry(\n  origDocumentGetInitialProps,\n) {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const { data } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapDocumentGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsa1BBQXFCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLDRQQUEwQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVCxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSw2Q0FBNkM7QUFDN0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZG9jdW1lbnQgKFwiX2RvY3VtZW50LmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fZG9jdW1lbnQnLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js":
/*!*************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js ***!
  \*************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapErrorGetInitialPropsWithSentry(\n  origErrorGetInitialProps,\n) {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            (errorGetInitialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (errorGetInitialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapErrorGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsa1BBQXFCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLDRQQUEwQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwwQ0FBMEM7QUFDMUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZXJyb3IgcGFnZSAoXCJfZXJyb3IuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdFcnJvckdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19lcnJvcicsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogZXJyb3JHZXRJbml0aWFsUHJvcHMsXG4gICAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgfVxuXG4gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvckdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgZXJyb3JHZXRJbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JHZXRJbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js":
/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js ***!
  \********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetInitialPropsWithSentry(origGetInitialProps) {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = (await tracedGetInitialProps.apply(thisArg, args)) ?? {}; // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (initialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (initialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLGtQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyw0UEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2REFBNkQ7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSxxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogaW5pdGlhbFByb3BzLFxuICAgICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgIH1cblxuID0gKGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKSkgPz8ge307IC8vIE5leHQuanMgYWxsb3dzIHVuZGVmaW5lZCB0byBiZSByZXR1cm5lZCBmcm9tIGEgZ2V0SW5pdGlhbFByb3BzRnVuY3Rpb24uXG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGluaXRpYWxQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChpbml0aWFsUHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgICAoaW5pdGlhbFByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js":
/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps,\n  parameterizedRoute,\n) {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }\n\n = await (tracedGetServerSideProps.apply(thisArg, args) );\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props )._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props )._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry;\n//# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLGtQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyw0UEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMgVGhlIHVzZXIncyBgZ2V0U2VydmVyU2lkZVByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0dldFNlcnZlclNpZGVQcm9wcyxcbiAgcGFyYW1ldGVyaXplZFJvdXRlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldFNlcnZlclNpZGVQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIGNvbnN0IHRyYWNlZEdldFNlcnZlclNpZGVQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldFNlcnZlclNpZGVQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6IHBhcmFtZXRlcml6ZWRSb3V0ZSxcbiAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBwYXJhbWV0ZXJpemVkUm91dGUsXG4gICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRTZXJ2ZXJTaWRlUHJvcHMnLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YTogc2VydmVyU2lkZVByb3BzLFxuICAgICAgICBiYWdnYWdlLFxuICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgIH1cblxuID0gYXdhaXQgKHRyYWNlZEdldFNlcnZlclNpZGVQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKSApO1xuXG4gICAgICBpZiAodHlwZW9mIHNlcnZlclNpZGVQcm9wcyA9PT0gJ29iamVjdCcgJiYgc2VydmVyU2lkZVByb3BzICE9PSBudWxsICYmICdwcm9wcycgaW4gc2VydmVyU2lkZVByb3BzKSB7XG4gICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgKHNlcnZlclNpZGVQcm9wcy5wcm9wcyApLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAoc2VydmVyU2lkZVByb3BzLnByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJ2ZXJTaWRlUHJvcHM7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkgPSB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js":
/*!*******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js ***!
  \*******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetStaticPropsWithSentry(\n  origGetStaticPropsa,\n  _parameterizedRoute,\n) {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const errorWrappedGetStaticProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      return wrapperUtils.callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    },\n  });\n}\n\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry;\n//# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsa1BBQXFCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLDRQQUEwQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldFN0YXRpY1Byb3BzYCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBvcmlnR2V0U3RhdGljUHJvcHMgVGhlIHVzZXIncyBgZ2V0U3RhdGljUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdHZXRTdGF0aWNQcm9wc2EsXG4gIF9wYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0U3RhdGljUHJvcHNhLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0U3RhdGljUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIHJldHVybiB3cmFwcGVyVXRpbHMuY2FsbERhdGFGZXRjaGVyVHJhY2VkKGVycm9yV3JhcHBlZEdldFN0YXRpY1Byb3BzLCBhcmdzKTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js":
/*!******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js ***!
  \******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction isReactClassComponent(target) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && target?.prototype?.isReactComponent;\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nfunction wrapPageComponentWithSentry(pageComponent) {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n       render(...args) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData =\n            typeof this.props === 'object' &&\n            this.props !== null &&\n            '_sentryTraceData' in this.props &&\n            typeof this.props._sentryTraceData === 'string'\n              ? this.props._sentryTraceData\n              : undefined;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return super.render(...args);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n                type: 'auto.function.nextjs.page_class',\n              },\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = argArray?.[0]?._sentryTraceData;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n                type: 'auto.function.nextjs.page_function',\n              },\n            });\n            throw e;\n          }\n        });\n      },\n    });\n  } else {\n    return pageComponent;\n  }\n}\n\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry;\n//# sourceMappingURL=wrapPageComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuZnVuY3Rpb24gaXNSZWFjdENsYXNzQ29tcG9uZW50KHRhcmdldCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nICYmIHRhcmdldD8ucHJvdG90eXBlPy5pc1JlYWN0Q29tcG9uZW50O1xufVxuXG4vKipcbiAqIFdyYXBzIGEgcGFnZSBjb21wb25lbnQgd2l0aCBTZW50cnkgZXJyb3IgaW5zdHJ1bWVudGF0aW9uLlxuICovXG5mdW5jdGlvbiB3cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkocGFnZUNvbXBvbmVudCkge1xuICBpZiAoaXNSZWFjdENsYXNzQ29tcG9uZW50KHBhZ2VDb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIGNsYXNzIFNlbnRyeVdyYXBwZWRQYWdlQ29tcG9uZW50IGV4dGVuZHMgcGFnZUNvbXBvbmVudCB7XG4gICAgICAgcmVuZGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2VudHJ5IHRyYWNlIGRhdGEgdGhhdCBpcyBwdXQgaW4gdGhlIGNvbXBvbmVudCBwcm9wcyBieSBkYXRhZmV0Y2hlciB3cmFwcGVyc1xuICAgICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlRGF0YSA9XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIHRoaXMucHJvcHMgIT09IG51bGwgJiZcbiAgICAgICAgICAgICdfc2VudHJ5VHJhY2VEYXRhJyBpbiB0aGlzLnByb3BzICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcy5fc2VudHJ5VHJhY2VEYXRhID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuX3NlbnRyeVRyYWNlRGF0YVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChzZW50cnlUcmFjZURhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNlcGFyZW50RGF0YSA9IGNvcmUuZXh0cmFjdFRyYWNlcGFyZW50RGF0YShzZW50cnlUcmFjZURhdGEpO1xuICAgICAgICAgICAgc2NvcGUuc2V0Q29udGV4dCgndHJhY2UnLCB7XG4gICAgICAgICAgICAgIHNwYW5faWQ6IHRyYWNlcGFyZW50RGF0YT8ucGFyZW50U3BhbklkLFxuICAgICAgICAgICAgICB0cmFjZV9pZDogdHJhY2VwYXJlbnREYXRhPy50cmFjZUlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5yZW5kZXIoLi4uYXJncyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUsIHtcbiAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLnBhZ2VfY2xhc3MnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGFnZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgUHJveHkocGFnZUNvbXBvbmVudCwge1xuICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjb3BlID0gY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgICAgICAvLyBXZSBleHRyYWN0IHRoZSBzZW50cnkgdHJhY2UgZGF0YSB0aGF0IGlzIHB1dCBpbiB0aGUgY29tcG9uZW50IHByb3BzIGJ5IGRhdGFmZXRjaGVyIHdyYXBwZXJzXG4gICAgICAgICAgY29uc3Qgc2VudHJ5VHJhY2VEYXRhID0gYXJnQXJyYXk/LlswXT8uX3NlbnRyeVRyYWNlRGF0YTtcblxuICAgICAgICAgIGlmIChzZW50cnlUcmFjZURhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNlcGFyZW50RGF0YSA9IGNvcmUuZXh0cmFjdFRyYWNlcGFyZW50RGF0YShzZW50cnlUcmFjZURhdGEpO1xuICAgICAgICAgICAgc2NvcGUuc2V0Q29udGV4dCgndHJhY2UnLCB7XG4gICAgICAgICAgICAgIHNwYW5faWQ6IHRyYWNlcGFyZW50RGF0YT8ucGFyZW50U3BhbklkLFxuICAgICAgICAgICAgICB0cmFjZV9pZDogdHJhY2VwYXJlbnREYXRhPy50cmFjZUlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJnQXJyYXkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlLCB7XG4gICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy5wYWdlX2Z1bmN0aW9uJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFnZUNvbXBvbmVudDtcbiAgfVxufVxuXG5leHBvcnRzLndyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeSA9IHdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nconst TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\n\nconst TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\n\nconst TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\n\nexports.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL;\nexports.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL;\nexports.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION;\n//# sourceMappingURL=span-attributes-with-logic-attached.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9zcGFuLWF0dHJpYnV0ZXMtd2l0aC1sb2dpYy1hdHRhY2hlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSw4Q0FBOEM7QUFDOUMsOENBQThDO0FBQzlDLGdEQUFnRDtBQUNoRCIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3NwYW4tYXR0cmlidXRlcy13aXRoLWxvZ2ljLWF0dGFjaGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIElmIHRoaXMgYXR0cmlidXRlIGlzIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24sIHRoZSBOZXh0LmpzIFNESyB3aWxsIGRyb3AgdGhhdCB0cmFuc2FjdGlvbi5cbiAqL1xuY29uc3QgVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiA9ICdzZW50cnkuZHJvcF90cmFuc2FjdGlvbic7XG5cbmNvbnN0IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gJ3NlbnRyeS5zZW50cnlfdHJhY2VfYmFja2ZpbGwnO1xuXG5jb25zdCBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCA9ICdzZW50cnkucm91dGVfYmFja2ZpbGwnO1xuXG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfUk9VVEVfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04gPSBUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Extracts HTTP request headers as span attributes and optionally applies them to a span.\n */\nfunction addHeadersAsAttributes(\n  headers,\n  span,\n) {\n  if (!headers) {\n    return {};\n  }\n\n  const client = core.getClient();\n  const sendDefaultPii = client?.getOptions().sendDefaultPii ?? false;\n\n  const headersDict =\n    headers instanceof Headers || (typeof headers === 'object' && 'get' in headers)\n      ? core.winterCGHeadersToDict(headers )\n      : headers;\n\n  const headerAttributes = core.httpHeadersToSpanAttributes(headersDict, sendDefaultPii);\n\n  if (span) {\n    span.setAttributes(headerAttributes);\n  }\n\n  return headerAttributes;\n}\n\nexports.addHeadersAsAttributes = addHeadersAsAttributes;\n//# sourceMappingURL=addHeadersAsAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogRXh0cmFjdHMgSFRUUCByZXF1ZXN0IGhlYWRlcnMgYXMgc3BhbiBhdHRyaWJ1dGVzIGFuZCBvcHRpb25hbGx5IGFwcGxpZXMgdGhlbSB0byBhIHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMoXG4gIGhlYWRlcnMsXG4gIHNwYW4sXG4pIHtcbiAgaWYgKCFoZWFkZXJzKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgY29uc3Qgc2VuZERlZmF1bHRQaWkgPSBjbGllbnQ/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaSA/PyBmYWxzZTtcblxuICBjb25zdCBoZWFkZXJzRGljdCA9XG4gICAgaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMgfHwgKHR5cGVvZiBoZWFkZXJzID09PSAnb2JqZWN0JyAmJiAnZ2V0JyBpbiBoZWFkZXJzKVxuICAgICAgPyBjb3JlLndpbnRlckNHSGVhZGVyc1RvRGljdChoZWFkZXJzIClcbiAgICAgIDogaGVhZGVycztcblxuICBjb25zdCBoZWFkZXJBdHRyaWJ1dGVzID0gY29yZS5odHRwSGVhZGVyc1RvU3BhbkF0dHJpYnV0ZXMoaGVhZGVyc0RpY3QsIHNlbmREZWZhdWx0UGlpKTtcblxuICBpZiAoc3Bhbikge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlcyhoZWFkZXJBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJBdHRyaWJ1dGVzO1xufVxuXG5leHBvcnRzLmFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMgPSBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkSGVhZGVyc0FzQXR0cmlidXRlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst constants = __webpack_require__(/*! next/constants */ \"(rsc)/../../node_modules/.pnpm/next@15.5.4_@babel+core@7.28.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/api/constants.js\");\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nfunction isBuild() {\n  return process.env.NEXT_PHASE === constants.PHASE_PRODUCTION_BUILD;\n}\n\nexports.isBuild = isBuild;\n//# sourceMappingURL=isBuild.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9pc0J1aWxkLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGtCQUFrQixtQkFBTyxDQUFDLGtNQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL2lzQnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJ25leHQvY29uc3RhbnRzJyk7XG5cbi8qKlxuICogRGVjaWRlIGlmIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzIGlzIHBhcnQgb2YgdGhlIGJ1aWxkIHBoYXNlIG9yIGhhcHBlbmluZyBhdCBydW50aW1lLlxuICovXG5mdW5jdGlvbiBpc0J1aWxkKCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuTkVYVF9QSEFTRSA9PT0gY29uc3RhbnRzLlBIQVNFX1BST0RVQ1RJT05fQlVJTEQ7XG59XG5cbmV4cG9ydHMuaXNCdWlsZCA9IGlzQnVpbGQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0J1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nasync function flushSafelyWithTimeout() {\n  try {\n    debugBuild.DEBUG_BUILD && core.debug.log('Flushing events...');\n    await core.flush(2000);\n    debugBuild.DEBUG_BUILD && core.debug.log('Done flushing events');\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.log('Error while flushing events:\\n', e);\n  }\n}\n\nexports.flushSafelyWithTimeout = flushSafelyWithTimeout;\n//# sourceMappingURL=responseEnd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9yZXNwb25zZUVuZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsOE9BQW1COztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9yZXNwb25zZUVuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbi8qKlxuICogRmx1c2hlcyBwZW5kaW5nIFNlbnRyeSBldmVudHMgd2l0aCBhIDIgc2Vjb25kIHRpbWVvdXQgYW5kIGluIGEgd2F5IHRoYXQgY2Fubm90IGNyZWF0ZSB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zLlxuICovXG5hc3luYyBmdW5jdGlvbiBmbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkge1xuICB0cnkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ0ZsdXNoaW5nIGV2ZW50cy4uLicpO1xuICAgIGF3YWl0IGNvcmUuZmx1c2goMjAwMCk7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZygnRG9uZSBmbHVzaGluZyBldmVudHMnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ0Vycm9yIHdoaWxlIGZsdXNoaW5nIGV2ZW50czpcXG4nLCBlKTtcbiAgfVxufVxuXG5leHBvcnRzLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQgPSBmbHVzaFNhZmVseVdpdGhUaW1lb3V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VFbmQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\nconst commonPropagationContextMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nfunction commonObjectToPropagationContext(\n  commonObject,\n  propagationContext,\n) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\n\nconst commonIsolationScopeMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nfunction commonObjectToIsolationScope(commonObject) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new core.Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new core.Scope();\n  }\n}\n\nlet nextjsEscapedAsyncStorage;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nfunction escapeNextjsTracing(cb) {\n  const MaybeGlobalAsyncLocalStorage = (core.GLOBAL_OBJ )\n    .AsyncLocalStorage;\n\n  if (!MaybeGlobalAsyncLocalStorage) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n      );\n    return cb();\n  }\n\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return core.startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nfunction dropNextjsRootContext() {\n  const nextJsOwnedSpan = core.getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = core.getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n    if (rootSpanAttributes?.['next.span_type']) {\n      core.getRootSpan(nextJsOwnedSpan)?.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true);\n    }\n  }\n}\n\nexports.commonObjectToIsolationScope = commonObjectToIsolationScope;\nexports.commonObjectToPropagationContext = commonObjectToPropagationContext;\nexports.dropNextjsRootContext = dropNextjsRootContext;\nexports.escapeNextjsTracing = escapeNextjsTracing;\n//# sourceMappingURL=tracingUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy90cmFjaW5nVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhPQUFtQjtBQUM5Qyx3Q0FBd0MsbUJBQU8sQ0FBQyw4UkFBMkM7O0FBRTNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQyx3Q0FBd0M7QUFDeEMsNkJBQTZCO0FBQzdCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL3RyYWNpbmdVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBzcGFuQXR0cmlidXRlc1dpdGhMb2dpY0F0dGFjaGVkID0gcmVxdWlyZSgnLi4vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMnKTtcblxuY29uc3QgY29tbW9uUHJvcGFnYXRpb25Db250ZXh0TWFwID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBUYWtlcyBhIHNoYXJlZCAoZ2FyYmFnZSBjb2xsZWN0YWJsZSkgb2JqZWN0IGJldHdlZW4gcmVzb3VyY2VzLCBlLmcuIGEgaGVhZGVycyBvYmplY3Qgc2hhcmVkIGJldHdlZW4gTmV4dC5qcyBzZXJ2ZXIgY29tcG9uZW50cyBhbmQgcmV0dXJucyBhIGNvbW1vbiBwcm9wYWdhdGlvbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSBjb21tb25PYmplY3QgVGhlIHNoYXJlZCBvYmplY3QuXG4gKiBAcGFyYW0gcHJvcGFnYXRpb25Db250ZXh0IFRoZSBwcm9wYWdhdGlvbiBjb250ZXh0IHRoYXQgc2hvdWxkIGJlIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGUgcmVzb3VyY2VzIGlmIG5vIHByb3BhZ2F0aW9uIGNvbnRleHQgd2FzIHJlZ2lzdGVyZWQgeWV0LlxuICogQHJldHVybnMgdGhlIHNoYXJlZCBwcm9wYWdhdGlvbiBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBjb21tb25PYmplY3RUb1Byb3BhZ2F0aW9uQ29udGV4dChcbiAgY29tbW9uT2JqZWN0LFxuICBwcm9wYWdhdGlvbkNvbnRleHQsXG4pIHtcbiAgaWYgKHR5cGVvZiBjb21tb25PYmplY3QgPT09ICdvYmplY3QnICYmIGNvbW1vbk9iamVjdCkge1xuICAgIGNvbnN0IG1lbW9Qcm9wYWdhdGlvbkNvbnRleHQgPSBjb21tb25Qcm9wYWdhdGlvbkNvbnRleHRNYXAuZ2V0KGNvbW1vbk9iamVjdCk7XG4gICAgaWYgKG1lbW9Qcm9wYWdhdGlvbkNvbnRleHQpIHtcbiAgICAgIHJldHVybiBtZW1vUHJvcGFnYXRpb25Db250ZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21tb25Qcm9wYWdhdGlvbkNvbnRleHRNYXAuc2V0KGNvbW1vbk9iamVjdCwgcHJvcGFnYXRpb25Db250ZXh0KTtcbiAgICAgIHJldHVybiBwcm9wYWdhdGlvbkNvbnRleHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcm9wYWdhdGlvbkNvbnRleHQ7XG4gIH1cbn1cblxuY29uc3QgY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFRha2VzIGEgc2hhcmVkIChnYXJiYWdlIGNvbGxlY3RhYmxlKSBvYmplY3QgYmV0d2VlbiByZXNvdXJjZXMsIGUuZy4gYSBoZWFkZXJzIG9iamVjdCBzaGFyZWQgYmV0d2VlbiBOZXh0LmpzIHNlcnZlciBjb21wb25lbnRzIGFuZCByZXR1cm5zIGEgY29tbW9uIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGNvbW1vbk9iamVjdCBUaGUgc2hhcmVkIG9iamVjdC5cbiAqIEBwYXJhbSBpc29sYXRpb25TY29wZSBUaGUgaXNvbGF0aW9uU2NvcGUgdGhhdCBzaG91bGQgYmUgc2hhcmVkIGJldHdlZW4gYWxsIHRoZSByZXNvdXJjZXMgaWYgbm8gaXNvbGF0aW9uIHNjb3BlIHdhcyBjcmVhdGVkIHlldC5cbiAqIEByZXR1cm5zIHRoZSBzaGFyZWQgaXNvbGF0aW9uIHNjb3BlLlxuICovXG5mdW5jdGlvbiBjb21tb25PYmplY3RUb0lzb2xhdGlvblNjb3BlKGNvbW1vbk9iamVjdCkge1xuICBpZiAodHlwZW9mIGNvbW1vbk9iamVjdCA9PT0gJ29iamVjdCcgJiYgY29tbW9uT2JqZWN0KSB7XG4gICAgY29uc3QgbWVtb0lzb2xhdGlvblNjb3BlID0gY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAuZ2V0KGNvbW1vbk9iamVjdCk7XG4gICAgaWYgKG1lbW9Jc29sYXRpb25TY29wZSkge1xuICAgICAgcmV0dXJuIG1lbW9Jc29sYXRpb25TY29wZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmV3SXNvbGF0aW9uU2NvcGUgPSBuZXcgY29yZS5TY29wZSgpO1xuICAgICAgY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAuc2V0KGNvbW1vbk9iamVjdCwgbmV3SXNvbGF0aW9uU2NvcGUpO1xuICAgICAgcmV0dXJuIG5ld0lzb2xhdGlvblNjb3BlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IGNvcmUuU2NvcGUoKTtcbiAgfVxufVxuXG5sZXQgbmV4dGpzRXNjYXBlZEFzeW5jU3RvcmFnZTtcblxuLyoqXG4gKiBXaWxsIG1hcmsgdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9mIHRoZSBjYWxsYmFjayBhcyBcImVzY2FwZWRcIiBmcm9tIE5leHQuanMgaW50ZXJuYWwgdHJhY2luZyBieSB1bnNldHRpbmcgdGhlIGFjdGl2ZVxuICogc3BhbiBhbmQgcHJvcGFnYXRpb24gY29udGV4dC4gV2hlbiBhbiBleGVjdXRpb24gcGFzc2VzIHRocm91Z2ggdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcywgaXQgaXMgYSBub29wIGFmdGVyIHRoZVxuICogZmlyc3QgdGltZS5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlTmV4dGpzVHJhY2luZyhjYikge1xuICBjb25zdCBNYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlID0gKGNvcmUuR0xPQkFMX09CSiApXG4gICAgLkFzeW5jTG9jYWxTdG9yYWdlO1xuXG4gIGlmICghTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgIGNvcmUuZGVidWcud2FybihcbiAgICAgICAgXCJUcmllZCB0byByZWdpc3RlciBBc3luY0xvY2FsU3RvcmFnZSBhc3luYyBjb250ZXh0IHN0cmF0ZWd5IGluIGEgcnVudGltZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBBc3luY0xvY2FsU3RvcmFnZS5cIixcbiAgICAgICk7XG4gICAgcmV0dXJuIGNiKCk7XG4gIH1cblxuICBpZiAoIW5leHRqc0VzY2FwZWRBc3luY1N0b3JhZ2UpIHtcbiAgICBuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlID0gbmV3IE1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgfVxuXG4gIGlmIChuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlLmdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY2IoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29yZS5zdGFydE5ld1RyYWNlKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlLnJ1bih0cnVlLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJZGVhbGx5IHRoaXMgZnVuY3Rpb24gbmV2ZXIgbGFuZHMgaW4gdGhlIGRldmVsb3AgYnJhbmNoLlxuICpcbiAqIERyb3BzIHRoZSBlbnRpcmUgc3BhbiB0cmVlIHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZCBpbiwgaWYgaXQgd2FzIGEgc3BhbiB0cmVlIGNyZWF0ZWQgYnkgTmV4dC5qcy5cbiAqL1xuZnVuY3Rpb24gZHJvcE5leHRqc1Jvb3RDb250ZXh0KCkge1xuICBjb25zdCBuZXh0SnNPd25lZFNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW4oKTtcbiAgaWYgKG5leHRKc093bmVkU3Bhbikge1xuICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihuZXh0SnNPd25lZFNwYW4pO1xuICAgIGNvbnN0IHJvb3RTcGFuQXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihyb290U3BhbikuZGF0YTtcbiAgICBpZiAocm9vdFNwYW5BdHRyaWJ1dGVzPy5bJ25leHQuc3Bhbl90eXBlJ10pIHtcbiAgICAgIGNvcmUuZ2V0Um9vdFNwYW4obmV4dEpzT3duZWRTcGFuKT8uc2V0QXR0cmlidXRlKHNwYW5BdHRyaWJ1dGVzV2l0aExvZ2ljQXR0YWNoZWQuVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiwgdHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuY29tbW9uT2JqZWN0VG9Jc29sYXRpb25TY29wZSA9IGNvbW1vbk9iamVjdFRvSXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLmNvbW1vbk9iamVjdFRvUHJvcGFnYXRpb25Db250ZXh0ID0gY29tbW9uT2JqZWN0VG9Qcm9wYWdhdGlvbkNvbnRleHQ7XG5leHBvcnRzLmRyb3BOZXh0anNSb290Q29udGV4dCA9IGRyb3BOZXh0anNSb290Q29udGV4dDtcbmV4cG9ydHMuZXNjYXBlTmV4dGpzVHJhY2luZyA9IGVzY2FwZU5leHRqc1RyYWNpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nVXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst HeaderKeys = {\n  FORWARDED_PROTO: 'x-forwarded-proto',\n  FORWARDED_HOST: 'x-forwarded-host',\n  HOST: 'host',\n  REFERER: 'referer',\n} ;\n\n/**\n * Replaces route parameters in a path template with their values\n * @param path - The path template containing parameters in [paramName] format\n * @param params - Optional route parameters to replace in the template\n * @returns The path with parameters replaced\n */\nfunction substituteRouteParams(path, params) {\n  if (!params || typeof params !== 'object') return path;\n\n  let resultPath = path;\n  for (const [key, value] of Object.entries(params)) {\n    resultPath = resultPath.split(`[${key}]`).join(encodeURIComponent(value));\n  }\n  return resultPath;\n}\n\n/**\n * Normalizes a path by removing route groups\n * @param path - The path to normalize\n * @returns The normalized path\n */\nfunction sanitizeRoutePath(path) {\n  const cleanedSegments = path\n    .split('/')\n    .filter(segment => segment && !(segment.startsWith('(') && segment.endsWith(')')));\n\n  return cleanedSegments.length > 0 ? `/${cleanedSegments.join('/')}` : '/';\n}\n\n/**\n * Constructs a full URL from the component route, parameters, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol and host information\n * @param pathname - Optional pathname coming from parent span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction buildUrlFromComponentRoute(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const parameterizedPath = substituteRouteParams(componentRoute, params);\n  // If available, the pathname from the http.target of the HTTP request server span takes precedence over the parameterized path.\n  // Spans such as generateMetadata and Server Component rendering are typically direct children of that span.\n  const path = pathname ?? sanitizeRoutePath(parameterizedPath);\n\n  const protocol = headersDict?.[HeaderKeys.FORWARDED_PROTO];\n  const host = headersDict?.[HeaderKeys.FORWARDED_HOST] || headersDict?.[HeaderKeys.HOST];\n\n  if (!protocol || !host) {\n    return path;\n  }\n\n  const fullUrl = `${protocol}://${host}${path}`;\n\n  const urlObject = core.parseStringToURLObject(fullUrl);\n  if (!urlObject) {\n    return path;\n  }\n\n  return core.getSanitizedUrlStringFromUrlObject(urlObject);\n}\n\n/**\n * Returns a sanitized URL string from the referer header if it exists and is valid.\n *\n * @param headersDict - Optional headers containing the referer\n * @returns A sanitized URL string or undefined if referer is missing/invalid\n */\nfunction extractSanitizedUrlFromRefererHeader(headersDict) {\n  const referer = headersDict?.[HeaderKeys.REFERER];\n  if (!referer) {\n    return undefined;\n  }\n\n  try {\n    const refererUrl = new URL(referer);\n    return core.getSanitizedUrlStringFromUrlObject(refererUrl);\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Returns a sanitized URL string using the referer header if available,\n * otherwise constructs the URL from the component route, params, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol, host, and referer\n * @param pathname - Optional pathname coming from root span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction getSanitizedRequestUrl(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const refererUrl = extractSanitizedUrlFromRefererHeader(headersDict);\n  if (refererUrl) {\n    return refererUrl;\n  }\n\n  return buildUrlFromComponentRoute(componentRoute, params, headersDict, pathname);\n}\n\nexports.buildUrlFromComponentRoute = buildUrlFromComponentRoute;\nexports.extractSanitizedUrlFromRefererHeader = extractSanitizedUrlFromRefererHeader;\nexports.getSanitizedRequestUrl = getSanitizedRequestUrl;\nexports.sanitizeRoutePath = sanitizeRoutePath;\nexports.substituteRouteParams = substituteRouteParams;\n//# sourceMappingURL=urls.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy91cmxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQyxJQUFJO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLDBCQUEwQjtBQUNwRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsU0FBUyxLQUFLLEtBQUssRUFBRSxLQUFLOztBQUUvQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDLDRDQUE0QztBQUM1Qyw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL3VybHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSGVhZGVyS2V5cyA9IHtcbiAgRk9SV0FSREVEX1BST1RPOiAneC1mb3J3YXJkZWQtcHJvdG8nLFxuICBGT1JXQVJERURfSE9TVDogJ3gtZm9yd2FyZGVkLWhvc3QnLFxuICBIT1NUOiAnaG9zdCcsXG4gIFJFRkVSRVI6ICdyZWZlcmVyJyxcbn0gO1xuXG4vKipcbiAqIFJlcGxhY2VzIHJvdXRlIHBhcmFtZXRlcnMgaW4gYSBwYXRoIHRlbXBsYXRlIHdpdGggdGhlaXIgdmFsdWVzXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIHRlbXBsYXRlIGNvbnRhaW5pbmcgcGFyYW1ldGVycyBpbiBbcGFyYW1OYW1lXSBmb3JtYXRcbiAqIEBwYXJhbSBwYXJhbXMgLSBPcHRpb25hbCByb3V0ZSBwYXJhbWV0ZXJzIHRvIHJlcGxhY2UgaW4gdGhlIHRlbXBsYXRlXG4gKiBAcmV0dXJucyBUaGUgcGF0aCB3aXRoIHBhcmFtZXRlcnMgcmVwbGFjZWRcbiAqL1xuZnVuY3Rpb24gc3Vic3RpdHV0ZVJvdXRlUGFyYW1zKHBhdGgsIHBhcmFtcykge1xuICBpZiAoIXBhcmFtcyB8fCB0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0JykgcmV0dXJuIHBhdGg7XG5cbiAgbGV0IHJlc3VsdFBhdGggPSBwYXRoO1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcmVzdWx0UGF0aCA9IHJlc3VsdFBhdGguc3BsaXQoYFske2tleX1dYCkuam9pbihlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0UGF0aDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIGEgcGF0aCBieSByZW1vdmluZyByb3V0ZSBncm91cHNcbiAqIEBwYXJhbSBwYXRoIC0gVGhlIHBhdGggdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyBUaGUgbm9ybWFsaXplZCBwYXRoXG4gKi9cbmZ1bmN0aW9uIHNhbml0aXplUm91dGVQYXRoKHBhdGgpIHtcbiAgY29uc3QgY2xlYW5lZFNlZ21lbnRzID0gcGF0aFxuICAgIC5zcGxpdCgnLycpXG4gICAgLmZpbHRlcihzZWdtZW50ID0+IHNlZ21lbnQgJiYgIShzZWdtZW50LnN0YXJ0c1dpdGgoJygnKSAmJiBzZWdtZW50LmVuZHNXaXRoKCcpJykpKTtcblxuICByZXR1cm4gY2xlYW5lZFNlZ21lbnRzLmxlbmd0aCA+IDAgPyBgLyR7Y2xlYW5lZFNlZ21lbnRzLmpvaW4oJy8nKX1gIDogJy8nO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBmdWxsIFVSTCBmcm9tIHRoZSBjb21wb25lbnQgcm91dGUsIHBhcmFtZXRlcnMsIGFuZCBoZWFkZXJzLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRSb3V0ZSAtIFRoZSByb3V0ZSB0ZW1wbGF0ZSB0byBjb25zdHJ1Y3QgdGhlIFVSTCBmcm9tXG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyB0byByZXBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICogQHBhcmFtIGhlYWRlcnNEaWN0IC0gT3B0aW9uYWwgaGVhZGVycyBjb250YWluaW5nIHByb3RvY29sIGFuZCBob3N0IGluZm9ybWF0aW9uXG4gKiBAcGFyYW0gcGF0aG5hbWUgLSBPcHRpb25hbCBwYXRobmFtZSBjb21pbmcgZnJvbSBwYXJlbnQgc3BhbiBcImh0dHAudGFyZ2V0XCJcbiAqIEByZXR1cm5zIEEgc2FuaXRpemVkIFVSTCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gYnVpbGRVcmxGcm9tQ29tcG9uZW50Um91dGUoXG4gIGNvbXBvbmVudFJvdXRlLFxuICBwYXJhbXMsXG4gIGhlYWRlcnNEaWN0LFxuICBwYXRobmFtZSxcbikge1xuICBjb25zdCBwYXJhbWV0ZXJpemVkUGF0aCA9IHN1YnN0aXR1dGVSb3V0ZVBhcmFtcyhjb21wb25lbnRSb3V0ZSwgcGFyYW1zKTtcbiAgLy8gSWYgYXZhaWxhYmxlLCB0aGUgcGF0aG5hbWUgZnJvbSB0aGUgaHR0cC50YXJnZXQgb2YgdGhlIEhUVFAgcmVxdWVzdCBzZXJ2ZXIgc3BhbiB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIHBhcmFtZXRlcml6ZWQgcGF0aC5cbiAgLy8gU3BhbnMgc3VjaCBhcyBnZW5lcmF0ZU1ldGFkYXRhIGFuZCBTZXJ2ZXIgQ29tcG9uZW50IHJlbmRlcmluZyBhcmUgdHlwaWNhbGx5IGRpcmVjdCBjaGlsZHJlbiBvZiB0aGF0IHNwYW4uXG4gIGNvbnN0IHBhdGggPSBwYXRobmFtZSA/PyBzYW5pdGl6ZVJvdXRlUGF0aChwYXJhbWV0ZXJpemVkUGF0aCk7XG5cbiAgY29uc3QgcHJvdG9jb2wgPSBoZWFkZXJzRGljdD8uW0hlYWRlcktleXMuRk9SV0FSREVEX1BST1RPXTtcbiAgY29uc3QgaG9zdCA9IGhlYWRlcnNEaWN0Py5bSGVhZGVyS2V5cy5GT1JXQVJERURfSE9TVF0gfHwgaGVhZGVyc0RpY3Q/LltIZWFkZXJLZXlzLkhPU1RdO1xuXG4gIGlmICghcHJvdG9jb2wgfHwgIWhvc3QpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGNvbnN0IGZ1bGxVcmwgPSBgJHtwcm90b2NvbH06Ly8ke2hvc3R9JHtwYXRofWA7XG5cbiAgY29uc3QgdXJsT2JqZWN0ID0gY29yZS5wYXJzZVN0cmluZ1RvVVJMT2JqZWN0KGZ1bGxVcmwpO1xuICBpZiAoIXVybE9iamVjdCkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgcmV0dXJuIGNvcmUuZ2V0U2FuaXRpemVkVXJsU3RyaW5nRnJvbVVybE9iamVjdCh1cmxPYmplY3QpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzYW5pdGl6ZWQgVVJMIHN0cmluZyBmcm9tIHRoZSByZWZlcmVyIGhlYWRlciBpZiBpdCBleGlzdHMgYW5kIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSBoZWFkZXJzRGljdCAtIE9wdGlvbmFsIGhlYWRlcnMgY29udGFpbmluZyB0aGUgcmVmZXJlclxuICogQHJldHVybnMgQSBzYW5pdGl6ZWQgVVJMIHN0cmluZyBvciB1bmRlZmluZWQgaWYgcmVmZXJlciBpcyBtaXNzaW5nL2ludmFsaWRcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFNhbml0aXplZFVybEZyb21SZWZlcmVySGVhZGVyKGhlYWRlcnNEaWN0KSB7XG4gIGNvbnN0IHJlZmVyZXIgPSBoZWFkZXJzRGljdD8uW0hlYWRlcktleXMuUkVGRVJFUl07XG4gIGlmICghcmVmZXJlcikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHJlZmVyZXJVcmwgPSBuZXcgVVJMKHJlZmVyZXIpO1xuICAgIHJldHVybiBjb3JlLmdldFNhbml0aXplZFVybFN0cmluZ0Zyb21VcmxPYmplY3QocmVmZXJlclVybCk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2FuaXRpemVkIFVSTCBzdHJpbmcgdXNpbmcgdGhlIHJlZmVyZXIgaGVhZGVyIGlmIGF2YWlsYWJsZSxcbiAqIG90aGVyd2lzZSBjb25zdHJ1Y3RzIHRoZSBVUkwgZnJvbSB0aGUgY29tcG9uZW50IHJvdXRlLCBwYXJhbXMsIGFuZCBoZWFkZXJzLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRSb3V0ZSAtIFRoZSByb3V0ZSB0ZW1wbGF0ZSB0byBjb25zdHJ1Y3QgdGhlIFVSTCBmcm9tXG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyB0byByZXBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICogQHBhcmFtIGhlYWRlcnNEaWN0IC0gT3B0aW9uYWwgaGVhZGVycyBjb250YWluaW5nIHByb3RvY29sLCBob3N0LCBhbmQgcmVmZXJlclxuICogQHBhcmFtIHBhdGhuYW1lIC0gT3B0aW9uYWwgcGF0aG5hbWUgY29taW5nIGZyb20gcm9vdCBzcGFuIFwiaHR0cC50YXJnZXRcIlxuICogQHJldHVybnMgQSBzYW5pdGl6ZWQgVVJMIHN0cmluZ1xuICovXG5mdW5jdGlvbiBnZXRTYW5pdGl6ZWRSZXF1ZXN0VXJsKFxuICBjb21wb25lbnRSb3V0ZSxcbiAgcGFyYW1zLFxuICBoZWFkZXJzRGljdCxcbiAgcGF0aG5hbWUsXG4pIHtcbiAgY29uc3QgcmVmZXJlclVybCA9IGV4dHJhY3RTYW5pdGl6ZWRVcmxGcm9tUmVmZXJlckhlYWRlcihoZWFkZXJzRGljdCk7XG4gIGlmIChyZWZlcmVyVXJsKSB7XG4gICAgcmV0dXJuIHJlZmVyZXJVcmw7XG4gIH1cblxuICByZXR1cm4gYnVpbGRVcmxGcm9tQ29tcG9uZW50Um91dGUoY29tcG9uZW50Um91dGUsIHBhcmFtcywgaGVhZGVyc0RpY3QsIHBhdGhuYW1lKTtcbn1cblxuZXhwb3J0cy5idWlsZFVybEZyb21Db21wb25lbnRSb3V0ZSA9IGJ1aWxkVXJsRnJvbUNvbXBvbmVudFJvdXRlO1xuZXhwb3J0cy5leHRyYWN0U2FuaXRpemVkVXJsRnJvbVJlZmVyZXJIZWFkZXIgPSBleHRyYWN0U2FuaXRpemVkVXJsRnJvbVJlZmVyZXJIZWFkZXI7XG5leHBvcnRzLmdldFNhbml0aXplZFJlcXVlc3RVcmwgPSBnZXRTYW5pdGl6ZWRSZXF1ZXN0VXJsO1xuZXhwb3J0cy5zYW5pdGl6ZVJvdXRlUGF0aCA9IHNhbml0aXplUm91dGVQYXRoO1xuZXhwb3J0cy5zdWJzdGl0dXRlUm91dGVQYXJhbXMgPSBzdWJzdGl0dXRlUm91dGVQYXJhbXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(\n  origFunction,\n) {\n  return async function ( ...origFunctionArguments) {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      core.captureException(e, {\n        // TODO: check if origFunction.name actually returns the correct name or minified garbage\n        // in this case, we can add another argument to this wrapper with the respective function name\n        mechanism: { handled: false, type: 'auto.function.nextjs.wrapped', data: { function: origFunction.name } },\n      });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(\n  origDataFetcher,\n  req,\n  res,\n  options\n\n,\n) {\n  return async function (\n\n    ...args\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(req);\n    core.getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const span = core.getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = core.getRootSpan(span);\n      root.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = core.getTraceData();\n\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args),\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(\n  origFunction,\n  origFunctionArgs,\n) {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    core.captureException(e, { mechanism: { handled: false, type: 'auto.function.nextjs.data_fetcher' } });\n    throw e;\n  }\n}\n\n/**\n * Extracts the params and searchParams from the props object.\n *\n * Depending on the next version, params and searchParams may be a promise which we do not want to resolve in this function.\n */\nfunction maybeExtractSynchronousParamsAndSearchParams(props)\n\n {\n  let params =\n    props && typeof props === 'object' && 'params' in props\n      ? (props.params )\n      : undefined;\n  if (core.isThenable(params)) {\n    params = undefined;\n  }\n\n  let searchParams =\n    props && typeof props === 'object' && 'searchParams' in props\n      ? (props.searchParams )\n      : undefined;\n  if (core.isThenable(searchParams)) {\n    searchParams = undefined;\n  }\n\n  return { params, searchParams };\n}\n\nexports.callDataFetcherTraced = callDataFetcherTraced;\nexports.maybeExtractSynchronousParamsAndSearchParams = maybeExtractSynchronousParamsAndSearchParams;\nexports.withErrorInstrumentation = withErrorInstrumentation;\nexports.withTracedServerSideDataFetcher = withTracedServerSideDataFetcher;\n//# sourceMappingURL=wrapperUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nfunction withServerActionInstrumentation(\n  ...args\n) {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(\n  serverActionName,\n  options,\n  callback,\n) {\n  return core.withIsolationScope(async isolationScope => {\n    const sendDefaultPii = core.getClient()?.getOptions().sendDefaultPii;\n\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject = {};\n    try {\n      const awaitedHeaders = await options.headers;\n      sentryTraceHeader = awaitedHeaders?.get('sentry-trace') ?? undefined;\n      baggageHeader = awaitedHeaders?.get('baggage');\n      awaitedHeaders?.forEach((value, key) => {\n        fullHeadersObject[key] = value;\n      });\n    } catch {\n      debugBuild.DEBUG_BUILD &&\n        core.debug.warn(\n          \"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\",\n        );\n    }\n\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject,\n      } ,\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = core.getActiveSpan()\n      ? (_opts, callback) => callback()\n      : core.continueTrace;\n\n    return continueTraceIfNoActiveSpan(\n      {\n        sentryTrace: sentryTraceHeader,\n        baggage: baggageHeader,\n      },\n      async () => {\n        try {\n          return await core.startSpan(\n            {\n              op: 'function.server_action',\n              name: `serverAction/${serverActionName}`,\n              forceTransaction: true,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.server_action',\n              },\n            },\n            async span => {\n              const result = await core.handleCallbackErrors(callback, error => {\n                if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  // We don't want to report \"not-found\"s\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                  // Don't do anything for redirects\n                } else {\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                      type: 'auto.function.nextjs.server_action',\n                    },\n                  });\n                }\n              });\n\n              if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                core.getIsolationScope().setExtra('server_action_result', result);\n              }\n\n              if (options.formData) {\n                options.formData.forEach((value, key) => {\n                  core.getIsolationScope().setExtra(\n                    `server_action_form_data.${key}`,\n                    typeof value === 'string' ? value : '[non-string value]',\n                  );\n                });\n              }\n\n              return result;\n            },\n          );\n        } finally {\n          core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n        }\n      },\n    );\n  });\n}\n\nexports.withServerActionInstrumentation = withServerActionInstrumentation;\n//# sourceMappingURL=withServerActionInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapGenerationFunctionWithSentry(\n  generationFunction,\n  context,\n) {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      let headers = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch {\n        /** empty */\n      }\n\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(headers);\n      let pathname = undefined ;\n\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target'] ;\n        }\n      }\n\n      const headersDict = headers ? core.winterCGHeadersToDict(headers) : undefined;\n\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        addHeadersAsAttributes.addHeadersAsAttributes(headers, rootSpan);\n      }\n\n      let data = undefined;\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params, searchParams } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        data = { params, searchParams };\n      }\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n              url: urls.getSanitizedRequestUrl(\n                componentRoute,\n                data?.params ,\n                headersDict,\n                pathname,\n              ),\n            } ,\n          });\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = tracingUtils.commonObjectToPropagationContext(\n            headers,\n            core.propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(err, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.generation_function',\n                        data: {\n                          function: generationFunctionIdentifier,\n                        },\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry;\n//# sourceMappingURL=wrapGenerationFunctionWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nfunction wrapMiddlewareWithSentry(\n  middleware,\n) {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      const tunnelRoute =\n        '_sentryRewritesTunnelPath' in globalThis\n          ? (globalThis )._sentryRewritesTunnelPath\n          : undefined;\n\n      if (tunnelRoute && typeof tunnelRoute === 'string') {\n        const req = args[0];\n        // Check if the current request matches the tunnel route\n        if (req instanceof Request) {\n          const url = new URL(req.url);\n          const isTunnelRequest = url.pathname.startsWith(tunnelRoute);\n\n          if (isTunnelRequest) {\n            // Create a simple response that mimics NextResponse.next() so we don't need to import internals here\n            // which breaks next 13 apps\n            // https://github.com/vercel/next.js/blob/c12c9c1f78ad384270902f0890dc4cd341408105/packages/next/src/server/web/spec-extension/response.ts#L146\n            return new Response(null, {\n              status: 200,\n              headers: {\n                'x-middleware-next': '1',\n              },\n            }) ;\n          }\n        }\n      }\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return core.withIsolationScope(isolationScope => {\n        const req = args[0];\n        const currentScope = core.getCurrentScope();\n\n        let spanName;\n        let spanSource;\n        let headerAttributes = {};\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: core.winterCGRequestToRequestData(req),\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n\n          headerAttributes = addHeadersAsAttributes.addHeadersAsAttributes(req.headers);\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n\n        currentScope.setTransactionName(spanName);\n\n        const activeSpan = core.getActiveSpan();\n\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n\n          const rootSpan = core.getRootSpan(activeSpan);\n          if (rootSpan) {\n            core.setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n            rootSpan.setAttributes(headerAttributes);\n          }\n        }\n\n        return core.startSpan(\n          {\n            name: spanName,\n            op: 'http.server.middleware',\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrap_middleware',\n              ...headerAttributes,\n            },\n          },\n          () => {\n            return core.handleCallbackErrors(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                core.captureException(error, {\n                  mechanism: {\n                    type: 'auto.function.nextjs.wrap_middleware',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry;\n//# sourceMappingURL=wrapMiddlewareWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLCtCQUErQixtQkFBTyxDQUFDLCtRQUFtQztBQUMxRSxvQkFBb0IsbUJBQU8sQ0FBQyx5UEFBd0I7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxtQ0FBbUMsWUFBWSxFQUFFLDBCQUEwQjtBQUMzRTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEhlYWRlcnNBc0F0dHJpYnV0ZXMuanMnKTtcbmNvbnN0IHJlc3BvbnNlRW5kID0gcmVxdWlyZSgnLi91dGlscy9yZXNwb25zZUVuZC5qcycpO1xuXG4vKipcbiAqIFdyYXBzIE5leHQuanMgbWlkZGxld2FyZSB3aXRoIFNlbnRyeSBlcnJvciBhbmQgcGVyZm9ybWFuY2UgaW5zdHJ1bWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBtaWRkbGV3YXJlIFRoZSBtaWRkbGV3YXJlIGhhbmRsZXIuXG4gKiBAcmV0dXJucyBhIHdyYXBwZWQgbWlkZGxld2FyZSBoYW5kbGVyLlxuICovXG5mdW5jdGlvbiB3cmFwTWlkZGxld2FyZVdpdGhTZW50cnkoXG4gIG1pZGRsZXdhcmUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShtaWRkbGV3YXJlLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgY29uc3QgdHVubmVsUm91dGUgPVxuICAgICAgICAnX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aCcgaW4gZ2xvYmFsVGhpc1xuICAgICAgICAgID8gKGdsb2JhbFRoaXMgKS5fc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0dW5uZWxSb3V0ZSAmJiB0eXBlb2YgdHVubmVsUm91dGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGFyZ3NbMF07XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHJlcXVlc3QgbWF0Y2hlcyB0aGUgdHVubmVsIHJvdXRlXG4gICAgICAgIGlmIChyZXEgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEudXJsKTtcbiAgICAgICAgICBjb25zdCBpc1R1bm5lbFJlcXVlc3QgPSB1cmwucGF0aG5hbWUuc3RhcnRzV2l0aCh0dW5uZWxSb3V0ZSk7XG5cbiAgICAgICAgICBpZiAoaXNUdW5uZWxSZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBzaW1wbGUgcmVzcG9uc2UgdGhhdCBtaW1pY3MgTmV4dFJlc3BvbnNlLm5leHQoKSBzbyB3ZSBkb24ndCBuZWVkIHRvIGltcG9ydCBpbnRlcm5hbHMgaGVyZVxuICAgICAgICAgICAgLy8gd2hpY2ggYnJlYWtzIG5leHQgMTMgYXBwc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2Jsb2IvYzEyYzljMWY3OGFkMzg0MjcwOTAyZjA4OTBkYzRjZDM0MTQwODEwNS9wYWNrYWdlcy9uZXh0L3NyYy9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL3Jlc3BvbnNlLnRzI0wxNDZcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICd4LW1pZGRsZXdhcmUtbmV4dCc6ICcxJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pIDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFRPRE86IFdlIHN0aWxsIHNob3VsZCBhZGQgY2VudHJhbCBpc29sYXRpb24gc2NvcGUgY3JlYXRpb24gZm9yIHdoZW4gb3VyIGJ1aWxkLXRpbWUgaW5zdHJ1bWVudGF0aW9uIGRvZXMgbm90IHdvcmsgYW55bW9yZSB3aXRoIHR1cmJvcGFjay5cbiAgICAgIHJldHVybiBjb3JlLndpdGhJc29sYXRpb25TY29wZShpc29sYXRpb25TY29wZSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGFyZ3NbMF07XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgbGV0IHNwYW5OYW1lO1xuICAgICAgICBsZXQgc3BhblNvdXJjZTtcbiAgICAgICAgbGV0IGhlYWRlckF0dHJpYnV0ZXMgPSB7fTtcblxuICAgICAgICBpZiAocmVxIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICAgICAgICBub3JtYWxpemVkUmVxdWVzdDogY29yZS53aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhKHJlcSksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3Bhbk5hbWUgPSBgbWlkZGxld2FyZSAke3JlcS5tZXRob2R9ICR7bmV3IFVSTChyZXEudXJsKS5wYXRobmFtZX1gO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAndXJsJztcblxuICAgICAgICAgIGhlYWRlckF0dHJpYnV0ZXMgPSBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMocmVxLmhlYWRlcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNwYW5OYW1lID0gJ21pZGRsZXdhcmUnO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAnY29tcG9uZW50JztcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoc3Bhbk5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGFjdGl2ZVNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW4oKTtcblxuICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGFjdGl2ZSBzcGFuLCBpdCBsaWtlbHkgbWVhbnMgdGhhdCB0aGUgYXV0b21hdGljIE5leHQuanMgT1RFTCBpbnN0cnVtZW50YXRpb24gd29ya2VkIGFuZCB3ZSBjYW5cbiAgICAgICAgICAvLyByZWx5IG9uIHRoYXQgZm9yIHBhcmFtZXRlcml6YXRpb24uXG4gICAgICAgICAgc3Bhbk5hbWUgPSAnbWlkZGxld2FyZSc7XG4gICAgICAgICAgc3BhblNvdXJjZSA9ICdjb21wb25lbnQnO1xuXG4gICAgICAgICAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuICAgICAgICAgIGlmIChyb290U3Bhbikge1xuICAgICAgICAgICAgY29yZS5zZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3BhbiwgY3VycmVudFNjb3BlLCBpc29sYXRpb25TY29wZSk7XG4gICAgICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGVzKGhlYWRlckF0dHJpYnV0ZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb3JlLnN0YXJ0U3BhbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBzcGFuTmFtZSxcbiAgICAgICAgICAgIG9wOiAnaHR0cC5zZXJ2ZXIubWlkZGxld2FyZScsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogc3BhblNvdXJjZSxcbiAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5mdW5jdGlvbi5uZXh0anMud3JhcF9taWRkbGV3YXJlJyxcbiAgICAgICAgICAgICAgLi4uaGVhZGVyQXR0cmlidXRlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS5oYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgKCkgPT4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyksXG4gICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5uZXh0anMud3JhcF9taWRkbGV3YXJlJyxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeSA9IHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(\n  routeHandler,\n  context,\n) {\n  const { method, parameterizedRoute, headers } = context;\n\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = core.getActiveSpan();\n      const rootSpan = activeSpan ? core.getRootSpan(activeSpan) : undefined;\n\n      if (rootSpan && \"nodejs\" !== 'edge') {\n        addHeadersAsAttributes.addHeadersAsAttributes(headers, rootSpan);\n      }\n\n      let edgeRuntimeIsolationScopeOverride;\n      if (rootSpan && \"nodejs\" === 'edge') {}\n\n      return core.withIsolationScope(\n         false ? 0 : core.getIsolationScope(),\n        () => {\n          return core.withScope(async scope => {\n            scope.setTransactionName(`${method} ${parameterizedRoute}`);\n\n            if (false) {}\n\n            const response = await core.handleCallbackErrors(\n              () => originalFunction.apply(thisArg, args),\n              error => {\n                // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                if (nextNavigationErrorUtils.isRedirectNavigationError(error)) ; else if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  if (activeSpan) {\n                    core.setHttpStatus(activeSpan, 404);\n                  }\n                  if (rootSpan) {\n                    core.setHttpStatus(rootSpan, 404);\n                  }\n                } else {\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                      type: 'auto.function.nextjs.route_handler',\n                    },\n                  });\n                }\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n\n            try {\n              if (response.status) {\n                if (activeSpan) {\n                  core.setHttpStatus(activeSpan, response.status);\n                }\n                if (rootSpan) {\n                  core.setHttpStatus(rootSpan, response.status);\n                }\n              }\n            } catch {\n              // best effort - response may be undefined?\n            }\n\n            return response;\n          });\n        },\n      );\n    },\n  });\n}\n\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry;\n//# sourceMappingURL=wrapRouteHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsaUNBQWlDLG1CQUFPLENBQUMsdVFBQStCO0FBQ3hFLCtCQUErQixtQkFBTyxDQUFDLCtRQUFtQztBQUMxRSxvQkFBb0IsbUJBQU8sQ0FBQyx5UEFBd0I7QUFDcEQscUJBQXFCLG1CQUFPLENBQUMsMlBBQXlCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0NBQXNDOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsUUFBd0I7QUFDOUM7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixRQUF3QixhQUFhLEVBV3BEOztBQUVQO0FBQ0EsUUFBUSxNQUFtQyxHQUFHLENBQWlDO0FBQy9FO0FBQ0E7QUFDQSx3Q0FBd0MsUUFBUSxFQUFFLG1CQUFtQjs7QUFFckUsZ0JBQWdCLEtBQW1DLEVBQUUsRUFheEM7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5leHROYXZpZ2F0aW9uRXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzJyk7XG5jb25zdCBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi91dGlscy9hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4vdXRpbHMvcmVzcG9uc2VFbmQuanMnKTtcbmNvbnN0IHRyYWNpbmdVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvdHJhY2luZ1V0aWxzLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgYSBOZXh0LmpzIEFwcCBSb3V0ZXIgUm91dGUgaGFuZGxlciB3aXRoIFNlbnRyeSBlcnJvciBhbmQgcGVyZm9ybWFuY2UgaW5zdHJ1bWVudGF0aW9uLlxuICpcbiAqIE5PVElDRTogVGhpcyB3cmFwcGVyIGlzIGZvciBBcHAgUm91dGVyIEFQSSByb3V0ZXMuIElmIHlvdSBhcmUgbG9va2luZyB0byB3cmFwIFBhZ2VzIFJvdXRlciBBUEkgcm91dGVzIHVzZSBgd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5YCBpbnN0ZWFkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkoXG4gIHJvdXRlSGFuZGxlcixcbiAgY29udGV4dCxcbikge1xuICBjb25zdCB7IG1ldGhvZCwgcGFyYW1ldGVyaXplZFJvdXRlLCBoZWFkZXJzIH0gPSBjb250ZXh0O1xuXG4gIHJldHVybiBuZXcgUHJveHkocm91dGVIYW5kbGVyLCB7XG4gICAgYXBwbHk6IGFzeW5jIChvcmlnaW5hbEZ1bmN0aW9uLCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKCk7XG4gICAgICBjb25zdCByb290U3BhbiA9IGFjdGl2ZVNwYW4gPyBjb3JlLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAocm9vdFNwYW4gJiYgcHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FICE9PSAnZWRnZScpIHtcbiAgICAgICAgYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzKGhlYWRlcnMsIHJvb3RTcGFuKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGVkZ2VSdW50aW1lSXNvbGF0aW9uU2NvcGVPdmVycmlkZTtcbiAgICAgIGlmIChyb290U3BhbiAmJiBwcm9jZXNzLmVudi5ORVhUX1JVTlRJTUUgPT09ICdlZGdlJykge1xuICAgICAgICBjb25zdCBpc29sYXRpb25TY29wZSA9IHRyYWNpbmdVdGlscy5jb21tb25PYmplY3RUb0lzb2xhdGlvblNjb3BlKGhlYWRlcnMpO1xuICAgICAgICBjb25zdCB7IHNjb3BlIH0gPSBjb3JlLmdldENhcHR1cmVkU2NvcGVzT25TcGFuKHJvb3RTcGFuKTtcbiAgICAgICAgY29yZS5zZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3Bhbiwgc2NvcGUgPz8gbmV3IGNvcmUuU2NvcGUoKSwgaXNvbGF0aW9uU2NvcGUpO1xuXG4gICAgICAgIGVkZ2VSdW50aW1lSXNvbGF0aW9uU2NvcGVPdmVycmlkZSA9IGlzb2xhdGlvblNjb3BlO1xuXG4gICAgICAgIHJvb3RTcGFuLnVwZGF0ZU5hbWUoYCR7bWV0aG9kfSAke3BhcmFtZXRlcml6ZWRSb3V0ZX1gKTtcbiAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UsICdyb3V0ZScpO1xuICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnaHR0cC5zZXJ2ZXInKTtcbiAgICAgICAgYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzKGhlYWRlcnMsIHJvb3RTcGFuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKFxuICAgICAgICBwcm9jZXNzLmVudi5ORVhUX1JVTlRJTUUgPT09ICdlZGdlJyA/IGVkZ2VSdW50aW1lSXNvbGF0aW9uU2NvcGVPdmVycmlkZSA6IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBjb3JlLndpdGhTY29wZShhc3luYyBzY29wZSA9PiB7XG4gICAgICAgICAgICBzY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3BhcmFtZXRlcml6ZWRSb3V0ZX1gKTtcblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ2VkZ2UnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlSGVhZGVyc0RpY3QgPSBoZWFkZXJzID8gY29yZS53aW50ZXJDR0hlYWRlcnNUb0RpY3QoaGVhZGVycykgOiB7fTtcbiAgICAgICAgICAgICAgY29uc3QgaW5jb21pbmdQcm9wYWdhdGlvbkNvbnRleHQgPSBjb3JlLnByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzKFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlSGVhZGVyc0RpY3RbJ3NlbnRyeS10cmFjZSddLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlSGVhZGVyc0RpY3RbJ2JhZ2dhZ2UnXSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgc2NvcGUuc2V0UHJvcGFnYXRpb25Db250ZXh0KGluY29taW5nUHJvcGFnYXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgICAgc2NvcGUuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUmVxdWVzdDoge1xuICAgICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgaGVhZGVyczogY29tcGxldGVIZWFkZXJzRGljdCxcbiAgICAgICAgICAgICAgICB9ICxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29yZS5oYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgKCkgPT4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKSxcbiAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIC8vIE5leHQuanMgdGhyb3dzIGVycm9ycyB3aGVuIGNhbGxpbmcgYHJlZGlyZWN0KClgLiBXZSBkb24ndCB3YW5uYSByZXBvcnQgdGhlc2UuXG4gICAgICAgICAgICAgICAgaWYgKG5leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5pc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yKGVycm9yKSkgOyBlbHNlIGlmIChuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhhY3RpdmVTcGFuLCA0MDQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHJvb3RTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhyb290U3BhbiwgNDA0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy5yb3V0ZV9oYW5kbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvcmUudmVyY2VsV2FpdFVudGlsKHJlc3BvbnNlRW5kLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhhY3RpdmVTcGFuLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhyb290U3BhbiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAvLyBiZXN0IGVmZm9ydCAtIHJlc3BvbnNlIG1heSBiZSB1bmRlZmluZWQ/XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkgPSB3cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js":
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js ***!
  \***************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(\n  appDirComponent,\n  context,\n) {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(context.headers);\n\n      let pathname = undefined ;\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target']?.toString();\n        }\n      }\n\n      const headersDict = context.headers ? core.winterCGHeadersToDict(context.headers) : undefined;\n\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        addHeadersAsAttributes.addHeadersAsAttributes(context.headers, rootSpan);\n      }\n\n      let params = undefined;\n\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params: paramsFromProps } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        params = paramsFromProps;\n      }\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n          url: urls.getSanitizedRequestUrl(componentRoute, params, headersDict, pathname),\n        } ,\n      });\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (false) {}\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.server_component',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(error, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.server_component',\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry;\n//# sourceMappingURL=wrapServerComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst LOGGER_PREFIXES = {\n  'webpack-nodejs': '[@sentry/nextjs - Node.js]',\n  'webpack-edge': '[@sentry/nextjs - Edge]',\n  'webpack-client': '[@sentry/nextjs - Client]',\n  'after-production-compile-webpack': '[@sentry/nextjs - After Production Compile (Webpack)]',\n  'after-production-compile-turbopack': '[@sentry/nextjs - After Production Compile (Turbopack)]',\n} ;\n\n// File patterns for source map operations\n// We use both glob patterns and directory paths for the sourcemap upload and deletion\n// -> Direct CLI invocation handles file paths better than glob patterns\n// -> Webpack/Bundler needs glob patterns as this is the format that is used by the plugin\nconst FILE_PATTERNS = {\n  SERVER: {\n    GLOB: 'server/**',\n    PATH: 'server',\n  },\n  SERVERLESS: 'serverless/**',\n  STATIC_CHUNKS: {\n    GLOB: 'static/chunks/**',\n    PATH: 'static/chunks',\n  },\n  STATIC_CHUNKS_PAGES: {\n    GLOB: 'static/chunks/pages/**',\n    PATH: 'static/chunks/pages',\n  },\n  STATIC_CHUNKS_APP: {\n    GLOB: 'static/chunks/app/**',\n    PATH: 'static/chunks/app',\n  },\n  MAIN_CHUNKS: 'static/chunks/main-*',\n  FRAMEWORK_CHUNKS: 'static/chunks/framework-*',\n  FRAMEWORK_CHUNKS_DOT: 'static/chunks/framework.*',\n  POLYFILLS_CHUNKS: 'static/chunks/polyfills-*',\n  WEBPACK_CHUNKS: 'static/chunks/webpack-*',\n} ;\n\n// Source map file extensions to delete\nconst SOURCEMAP_EXTENSIONS = ['*.js.map', '*.mjs.map', '*.cjs.map'] ;\n\n/**\n * Normalizes Windows paths to POSIX format for glob patterns\n */\nfunction normalizePathForGlob(distPath) {\n  return distPath.replace(/\\\\/g, '/');\n}\n\n/**\n * These functions are used to get the correct pattern for the sourcemap upload based on the build tool and the usage context\n * -> Direct CLI invocation handles file paths better than glob patterns\n */\nfunction getServerPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.SERVER.PATH : FILE_PATTERNS.SERVER.GLOB;\n}\n\nfunction getStaticChunksPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS.PATH : FILE_PATTERNS.STATIC_CHUNKS.GLOB;\n}\n\nfunction getStaticChunksPagesPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS_PAGES.PATH : FILE_PATTERNS.STATIC_CHUNKS_PAGES.GLOB;\n}\n\nfunction getStaticChunksAppPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS_APP.PATH : FILE_PATTERNS.STATIC_CHUNKS_APP.GLOB;\n}\n\n/**\n * Creates file patterns for source map uploads based on build tool and options\n */\nfunction createSourcemapUploadAssetPatterns(\n  normalizedDistPath,\n  buildTool,\n  widenClientFileUpload = false,\n) {\n  const assets = [];\n\n  if (buildTool.startsWith('after-production-compile')) {\n    assets.push(path.posix.join(normalizedDistPath, getServerPattern({ useDirectoryPath: true })));\n\n    if (buildTool === 'after-production-compile-turbopack') {\n      // In turbopack we always want to upload the full static chunks directory\n      // as the build output is not split into pages|app chunks\n      assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: true })));\n    } else {\n      // Webpack client builds in after-production-compile mode\n      if (widenClientFileUpload) {\n        assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: true })));\n      } else {\n        assets.push(\n          path.posix.join(normalizedDistPath, getStaticChunksPagesPattern({ useDirectoryPath: true })),\n          path.posix.join(normalizedDistPath, getStaticChunksAppPattern({ useDirectoryPath: true })),\n        );\n      }\n    }\n  } else {\n    if (buildTool === 'webpack-nodejs' || buildTool === 'webpack-edge') {\n      // Server builds\n      assets.push(\n        path.posix.join(normalizedDistPath, getServerPattern({ useDirectoryPath: false })),\n        path.posix.join(normalizedDistPath, FILE_PATTERNS.SERVERLESS),\n      );\n    } else if (buildTool === 'webpack-client') {\n      // Client builds\n      if (widenClientFileUpload) {\n        assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: false })));\n      } else {\n        assets.push(\n          path.posix.join(normalizedDistPath, getStaticChunksPagesPattern({ useDirectoryPath: false })),\n          path.posix.join(normalizedDistPath, getStaticChunksAppPattern({ useDirectoryPath: false })),\n        );\n      }\n    }\n  }\n\n  return assets;\n}\n\n/**\n * Creates ignore patterns for source map uploads\n */\nfunction createSourcemapUploadIgnorePattern(\n  normalizedDistPath,\n  widenClientFileUpload = false,\n) {\n  const ignore = [];\n\n  // We only add main-* files if the user has not opted into it\n  if (!widenClientFileUpload) {\n    ignore.push(path.posix.join(normalizedDistPath, FILE_PATTERNS.MAIN_CHUNKS));\n  }\n\n  // Always ignore these patterns\n  ignore.push(\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.FRAMEWORK_CHUNKS),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.FRAMEWORK_CHUNKS_DOT),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.POLYFILLS_CHUNKS),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.WEBPACK_CHUNKS),\n  );\n\n  return ignore;\n}\n\n/**\n * Creates file patterns for deletion after source map upload\n */\nfunction createFilesToDeleteAfterUploadPattern(\n  normalizedDistPath,\n  buildTool,\n  deleteSourcemapsAfterUpload,\n  useRunAfterProductionCompileHook = false,\n) {\n  if (!deleteSourcemapsAfterUpload) {\n    return undefined;\n  }\n\n  // We don't want to delete source maps for server builds as this led to errors on Vercel in the past\n  // See: https://github.com/getsentry/sentry-javascript/issues/13099\n  if (buildTool === 'webpack-nodejs' || buildTool === 'webpack-edge') {\n    return undefined;\n  }\n\n  // Skip deletion for webpack client builds when using the experimental hook\n  if (buildTool === 'webpack-client' && useRunAfterProductionCompileHook) {\n    return undefined;\n  }\n\n  return SOURCEMAP_EXTENSIONS.map(ext => path.posix.join(normalizedDistPath, 'static', '**', ext));\n}\n\n/**\n * Determines if sourcemap uploads should be skipped\n */\nfunction shouldSkipSourcemapUpload(buildTool, useRunAfterProductionCompileHook = false) {\n  return useRunAfterProductionCompileHook && buildTool.startsWith('webpack');\n}\n\n/**\n * Source rewriting function for webpack sources\n */\nfunction rewriteWebpackSources(source) {\n  return source.replace(/^webpack:\\/\\/(?:_N_E\\/)?/, '');\n}\n\n/**\n * Creates release configuration\n */\nfunction createReleaseConfig(\n  releaseName,\n  sentryBuildOptions,\n) {\n  if (releaseName !== undefined) {\n    return {\n      inject: false, // The webpack plugin's release injection breaks the `app` directory - we inject the release manually with the value injection loader instead.\n      name: releaseName,\n      create: sentryBuildOptions.release?.create,\n      finalize: sentryBuildOptions.release?.finalize,\n      dist: sentryBuildOptions.release?.dist,\n      vcsRemote: sentryBuildOptions.release?.vcsRemote,\n      setCommits: sentryBuildOptions.release?.setCommits,\n      deploy: sentryBuildOptions.release?.deploy,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.release,\n    };\n  }\n\n  return {\n    inject: false,\n    create: false,\n    finalize: false,\n  };\n}\n\n/**\n * Get Sentry Build Plugin options for both webpack and turbopack builds.\n * These options can be used in two ways:\n * 1. The options can be built in a single operation after the production build completes\n * 2. The options can be built in multiple operations, one for each webpack build\n */\nfunction getBuildPluginOptions({\n  sentryBuildOptions,\n  releaseName,\n  distDirAbsPath,\n  buildTool,\n  useRunAfterProductionCompileHook,\n}\n\n) {\n  // We need to convert paths to posix because Glob patterns use `\\` to escape\n  // glob characters. This clashes with Windows path separators.\n  // See: https://www.npmjs.com/package/glob\n  const normalizedDistDirAbsPath = normalizePathForGlob(distDirAbsPath);\n\n  const loggerPrefix = LOGGER_PREFIXES[buildTool];\n  const widenClientFileUpload = sentryBuildOptions.widenClientFileUpload ?? false;\n  const deleteSourcemapsAfterUpload = sentryBuildOptions.sourcemaps?.deleteSourcemapsAfterUpload ?? false;\n\n  const sourcemapUploadAssets = createSourcemapUploadAssetPatterns(\n    normalizedDistDirAbsPath,\n    buildTool,\n    widenClientFileUpload,\n  );\n\n  const sourcemapUploadIgnore = createSourcemapUploadIgnorePattern(normalizedDistDirAbsPath, widenClientFileUpload);\n\n  const filesToDeleteAfterUpload = createFilesToDeleteAfterUploadPattern(\n    normalizedDistDirAbsPath,\n    buildTool,\n    deleteSourcemapsAfterUpload,\n    useRunAfterProductionCompileHook,\n  );\n\n  const skipSourcemapsUpload = shouldSkipSourcemapUpload(buildTool, useRunAfterProductionCompileHook);\n\n  return {\n    authToken: sentryBuildOptions.authToken,\n    headers: sentryBuildOptions.headers,\n    org: sentryBuildOptions.org,\n    project: sentryBuildOptions.project,\n    telemetry: sentryBuildOptions.telemetry,\n    debug: sentryBuildOptions.debug,\n    errorHandler: sentryBuildOptions.errorHandler,\n    reactComponentAnnotation: buildTool.startsWith('after-production-compile')\n      ? undefined\n      : {\n          ...sentryBuildOptions.reactComponentAnnotation,\n          ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.reactComponentAnnotation,\n        },\n    silent: sentryBuildOptions.silent,\n    url: sentryBuildOptions.sentryUrl,\n    sourcemaps: {\n      disable: skipSourcemapsUpload ? true : (sentryBuildOptions.sourcemaps?.disable ?? false),\n      rewriteSources: rewriteWebpackSources,\n      assets: sentryBuildOptions.sourcemaps?.assets ?? sourcemapUploadAssets,\n      ignore: sentryBuildOptions.sourcemaps?.ignore ?? sourcemapUploadIgnore,\n      filesToDeleteAfterUpload,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.sourcemaps,\n    },\n    release: createReleaseConfig(releaseName, sentryBuildOptions),\n    bundleSizeOptimizations: {\n      ...sentryBuildOptions.bundleSizeOptimizations,\n    },\n    _metaOptions: {\n      loggerPrefixOverride: loggerPrefix,\n      telemetry: {\n        metaFramework: 'nextjs',\n      },\n    },\n    ...sentryBuildOptions.unstable_sentryWebpackPluginOptions,\n  };\n}\n\nexports.getBuildPluginOptions = getBuildPluginOptions;\nexports.normalizePathForGlob = normalizePathForGlob;\n//# sourceMappingURL=getBuildPluginOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst getBuildPluginOptions = __webpack_require__(/*! ./getBuildPluginOptions.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\");\n\n/**\n * This function is called by Next.js after the production build is complete.\n * It is used to upload sourcemaps to Sentry.\n */\nasync function handleRunAfterProductionCompile(\n  { releaseName, distDir, buildTool },\n  sentryBuildOptions,\n) {\n  if (sentryBuildOptions.debug) {\n    // eslint-disable-next-line no-console\n    console.debug('[@sentry/nextjs] Running runAfterProductionCompile logic.');\n  }\n\n  const { createSentryBuildPluginManager } =\n    core.loadModule(\n      '@sentry/bundler-plugin-core',\n      module,\n    ) ?? {};\n\n  if (!createSentryBuildPluginManager) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] Could not load build manager package. Will not run runAfterProductionCompile logic.',\n    );\n    return;\n  }\n\n  const options = getBuildPluginOptions.getBuildPluginOptions({\n    sentryBuildOptions,\n    releaseName,\n    distDirAbsPath: distDir,\n    buildTool: `after-production-compile-${buildTool}`,\n  });\n\n  const sentryBuildPluginManager = createSentryBuildPluginManager(options, {\n    buildTool,\n    loggerPrefix: '[@sentry/nextjs - After Production Compile]',\n  });\n\n  await sentryBuildPluginManager.telemetry.emitBundlerPluginExecutionSignal();\n  await sentryBuildPluginManager.createRelease();\n  await sentryBuildPluginManager.injectDebugIds([distDir]);\n  await sentryBuildPluginManager.uploadSourcemaps([distDir], {\n    // We don't want to prepare the artifacts because we injected debug ids manually before\n    prepareArtifacts: false,\n  });\n  await sentryBuildPluginManager.deleteArtifacts();\n}\n\nexports.handleRunAfterProductionCompile = handleRunAfterProductionCompile;\n//# sourceMappingURL=handleRunAfterProductionCompile.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy9oYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsOEJBQThCLG1CQUFPLENBQUMsaVFBQTRCOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxpQ0FBaUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUsaUNBQWlDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29uZmlnL2hhbmRsZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGdldEJ1aWxkUGx1Z2luT3B0aW9ucyA9IHJlcXVpcmUoJy4vZ2V0QnVpbGRQbHVnaW5PcHRpb25zLmpzJyk7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgTmV4dC5qcyBhZnRlciB0aGUgcHJvZHVjdGlvbiBidWlsZCBpcyBjb21wbGV0ZS5cbiAqIEl0IGlzIHVzZWQgdG8gdXBsb2FkIHNvdXJjZW1hcHMgdG8gU2VudHJ5LlxuICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlKFxuICB7IHJlbGVhc2VOYW1lLCBkaXN0RGlyLCBidWlsZFRvb2wgfSxcbiAgc2VudHJ5QnVpbGRPcHRpb25zLFxuKSB7XG4gIGlmIChzZW50cnlCdWlsZE9wdGlvbnMuZGVidWcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZGVidWcoJ1tAc2VudHJ5L25leHRqc10gUnVubmluZyBydW5BZnRlclByb2R1Y3Rpb25Db21waWxlIGxvZ2ljLicpO1xuICB9XG5cbiAgY29uc3QgeyBjcmVhdGVTZW50cnlCdWlsZFBsdWdpbk1hbmFnZXIgfSA9XG4gICAgY29yZS5sb2FkTW9kdWxlKFxuICAgICAgJ0BzZW50cnkvYnVuZGxlci1wbHVnaW4tY29yZScsXG4gICAgICBtb2R1bGUsXG4gICAgKSA/PyB7fTtcblxuICBpZiAoIWNyZWF0ZVNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tAc2VudHJ5L25leHRqc10gQ291bGQgbm90IGxvYWQgYnVpbGQgbWFuYWdlciBwYWNrYWdlLiBXaWxsIG5vdCBydW4gcnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZSBsb2dpYy4nLFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGdldEJ1aWxkUGx1Z2luT3B0aW9ucy5nZXRCdWlsZFBsdWdpbk9wdGlvbnMoe1xuICAgIHNlbnRyeUJ1aWxkT3B0aW9ucyxcbiAgICByZWxlYXNlTmFtZSxcbiAgICBkaXN0RGlyQWJzUGF0aDogZGlzdERpcixcbiAgICBidWlsZFRvb2w6IGBhZnRlci1wcm9kdWN0aW9uLWNvbXBpbGUtJHtidWlsZFRvb2x9YCxcbiAgfSk7XG5cbiAgY29uc3Qgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyID0gY3JlYXRlU2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyKG9wdGlvbnMsIHtcbiAgICBidWlsZFRvb2wsXG4gICAgbG9nZ2VyUHJlZml4OiAnW0BzZW50cnkvbmV4dGpzIC0gQWZ0ZXIgUHJvZHVjdGlvbiBDb21waWxlXScsXG4gIH0pO1xuXG4gIGF3YWl0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlci50ZWxlbWV0cnkuZW1pdEJ1bmRsZXJQbHVnaW5FeGVjdXRpb25TaWduYWwoKTtcbiAgYXdhaXQgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyLmNyZWF0ZVJlbGVhc2UoKTtcbiAgYXdhaXQgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyLmluamVjdERlYnVnSWRzKFtkaXN0RGlyXSk7XG4gIGF3YWl0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlci51cGxvYWRTb3VyY2VtYXBzKFtkaXN0RGlyXSwge1xuICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gcHJlcGFyZSB0aGUgYXJ0aWZhY3RzIGJlY2F1c2Ugd2UgaW5qZWN0ZWQgZGVidWcgaWRzIG1hbnVhbGx5IGJlZm9yZVxuICAgIHByZXBhcmVBcnRpZmFjdHM6IGZhbHNlLFxuICB9KTtcbiAgYXdhaXQgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyLmRlbGV0ZUFydGlmYWN0cygpO1xufVxuXG5leHBvcnRzLmhhbmRsZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUgPSBoYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, Symbol.toStringTag, {\n    value: 'Module'\n});\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nlet manifestCache = null;\nlet lastAppDirPath = null;\nlet lastIncludeRouteGroups = undefined;\nfunction isPageFile(filename) {\n    return filename === 'page.tsx' || filename === 'page.jsx' || filename === 'page.ts' || filename === 'page.js';\n}\nfunction isRouteGroup(name) {\n    return name.startsWith('(') && name.endsWith(')');\n}\nfunction normalizeRoutePath(routePath) {\n    // Remove route group segments from the path\n    return routePath.replace(/\\/\\([^)]+\\)/g, '');\n}\nfunction getDynamicRouteSegment(name) {\n    if (name.startsWith('[[...') && name.endsWith(']]')) {\n        // Optional catchall: [[...param]]\n        const paramName = name.slice(5, -2); // Remove [[... and ]]\n        return `:${paramName}*?`; // Mark with ? as optional\n    } else if (name.startsWith('[...') && name.endsWith(']')) {\n        // Required catchall: [...param]\n        const paramName = name.slice(4, -1); // Remove [... and ]\n        return `:${paramName}*`;\n    }\n    // Regular dynamic: [param]\n    return `:${name.slice(1, -1)}`;\n}\nfunction buildRegexForDynamicRoute(routePath) {\n    const segments = routePath.split('/').filter(Boolean);\n    const regexSegments = [];\n    const paramNames = [];\n    let hasOptionalCatchall = false;\n    for (const segment of segments){\n        if (segment.startsWith(':')) {\n            const paramName = segment.substring(1);\n            if (paramName.endsWith('*?')) {\n                // Optional catchall: matches zero or more segments\n                const cleanParamName = paramName.slice(0, -2);\n                paramNames.push(cleanParamName);\n                // Handling this special case in pattern construction below\n                hasOptionalCatchall = true;\n            } else if (paramName.endsWith('*')) {\n                // Required catchall: matches one or more segments\n                const cleanParamName = paramName.slice(0, -1);\n                paramNames.push(cleanParamName);\n                regexSegments.push('(.+)');\n            } else {\n                // Regular dynamic segment\n                paramNames.push(paramName);\n                regexSegments.push('([^/]+)');\n            }\n        } else {\n            // Static segment - escape regex special characters including route group parentheses\n            regexSegments.push(segment.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n        }\n    }\n    let pattern;\n    if (hasOptionalCatchall) {\n        if (regexSegments.length === 0) {\n            // If the optional catchall happens at the root, accept any path starting\n            // with a slash. Need capturing group for parameter extraction.\n            pattern = '^/(.*)$';\n        } else {\n            // For optional catchall, make the trailing slash and segments optional\n            // This allows matching both /catchall and /catchall/anything\n            const staticParts = regexSegments.join('/');\n            pattern = `^/${staticParts}(?:/(.*))?$`;\n        }\n    } else {\n        pattern = `^/${regexSegments.join('/')}$`;\n    }\n    return {\n        regex: pattern,\n        paramNames\n    };\n}\nfunction scanAppDirectory(dir, basePath = '', includeRouteGroups = false) {\n    const dynamicRoutes = [];\n    const staticRoutes = [];\n    try {\n        const entries = fs.readdirSync(dir, {\n            withFileTypes: true\n        });\n        const pageFile = entries.some((entry)=>isPageFile(entry.name));\n        if (pageFile) {\n            // Conditionally normalize the path based on includeRouteGroups option\n            const routePath = includeRouteGroups ? basePath || '/' : normalizeRoutePath(basePath || '/');\n            const isDynamic = routePath.includes(':');\n            if (isDynamic) {\n                const { regex, paramNames } = buildRegexForDynamicRoute(routePath);\n                dynamicRoutes.push({\n                    path: routePath,\n                    regex,\n                    paramNames\n                });\n            } else {\n                staticRoutes.push({\n                    path: routePath\n                });\n            }\n        }\n        for (const entry of entries){\n            if (entry.isDirectory()) {\n                const fullPath = path.join(dir, entry.name);\n                let routeSegment;\n                const isDynamic = entry.name.startsWith('[') && entry.name.endsWith(']');\n                const isRouteGroupDir = isRouteGroup(entry.name);\n                if (isRouteGroupDir) {\n                    if (includeRouteGroups) {\n                        routeSegment = entry.name;\n                    } else {\n                        routeSegment = '';\n                    }\n                } else if (isDynamic) {\n                    routeSegment = getDynamicRouteSegment(entry.name);\n                } else {\n                    routeSegment = entry.name;\n                }\n                const newBasePath = routeSegment ? `${basePath}/${routeSegment}` : basePath;\n                const subRoutes = scanAppDirectory(fullPath, newBasePath, includeRouteGroups);\n                dynamicRoutes.push(...subRoutes.dynamicRoutes);\n                staticRoutes.push(...subRoutes.staticRoutes);\n            }\n        }\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn('Error building route manifest:', error);\n    }\n    return {\n        dynamicRoutes,\n        staticRoutes\n    };\n}\n/**\n * Returns a route manifest for the given app directory\n */ function createRouteManifest(options) {\n    let targetDir;\n    {\n        const projectDir = process.cwd();\n        const maybeAppDirPath = path.join(projectDir, 'app');\n        const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n        if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n            targetDir = maybeAppDirPath;\n        } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n            targetDir = maybeSrcAppDirPath;\n        }\n    }\n    if (!targetDir) {\n        return {\n            dynamicRoutes: [],\n            staticRoutes: []\n        };\n    }\n    // Check if we can use cached version\n    if (manifestCache && lastAppDirPath === targetDir && lastIncludeRouteGroups === options?.includeRouteGroups) {\n        return manifestCache;\n    }\n    const { dynamicRoutes, staticRoutes } = scanAppDirectory(targetDir, '', options?.includeRouteGroups);\n    const manifest = {\n        dynamicRoutes,\n        staticRoutes\n    };\n    // set cache\n    manifestCache = manifest;\n    lastAppDirPath = targetDir;\n    lastIncludeRouteGroups = options?.includeRouteGroups;\n    return manifest;\n}\nexports.createRouteManifest = createRouteManifest; //# sourceMappingURL=createRouteManifest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst generateValueInjectionRules = __webpack_require__(/*! ./generateValueInjectionRules.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js\");\n\n/**\n * Construct a Turbopack config object from a Next.js config object and a Turbopack options object.\n *\n * @param userNextConfig - The Next.js config object.\n * @param turbopackOptions - The Turbopack options object.\n * @returns The Turbopack config object.\n */\nfunction constructTurbopackConfig({\n  userNextConfig,\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const newConfig = {\n    ...userNextConfig.turbopack,\n  };\n\n  const valueInjectionRules = generateValueInjectionRules.generateValueInjectionRules({\n    routeManifest,\n    nextJsVersion,\n  });\n\n  for (const { matcher, rule } of valueInjectionRules) {\n    newConfig.rules = safelyAddTurbopackRule(newConfig.rules, { matcher, rule });\n  }\n\n  return newConfig;\n}\n\n/**\n * Safely add a Turbopack rule to the existing rules.\n *\n * @param existingRules - The existing rules.\n * @param matcher - The matcher for the rule.\n * @param rule - The rule to add.\n * @returns The updated rules object.\n */\nfunction safelyAddTurbopackRule(\n  existingRules,\n  { matcher, rule },\n) {\n  if (!existingRules) {\n    return {\n      [matcher]: rule,\n    };\n  }\n\n  // If the rule already exists, we don't want to mess with it.\n  if (existingRules[matcher]) {\n    core.debug.log(\n      `[@sentry/nextjs] - Turbopack rule already exists for ${matcher}. Please remove it from your Next.js config in order for Sentry to work properly.`,\n    );\n    return existingRules;\n  }\n\n  return {\n    ...existingRules,\n    [matcher]: rule,\n  };\n}\n\nexports.constructTurbopackConfig = constructTurbopackConfig;\nexports.safelyAddTurbopackRule = safelyAddTurbopackRule;\n//# sourceMappingURL=constructTurbopackConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy90dXJib3BhY2svY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxvQ0FBb0MsbUJBQU8sQ0FBQyx1UkFBa0M7O0FBRTlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILGVBQWUsZ0JBQWdCO0FBQy9CLGdFQUFnRSxlQUFlO0FBQy9FOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGVBQWU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxRQUFRO0FBQ3RFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDQUFnQztBQUNoQyw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy90dXJib3BhY2svY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBnZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMgPSByZXF1aXJlKCcuL2dlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcy5qcycpO1xuXG4vKipcbiAqIENvbnN0cnVjdCBhIFR1cmJvcGFjayBjb25maWcgb2JqZWN0IGZyb20gYSBOZXh0LmpzIGNvbmZpZyBvYmplY3QgYW5kIGEgVHVyYm9wYWNrIG9wdGlvbnMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB1c2VyTmV4dENvbmZpZyAtIFRoZSBOZXh0LmpzIGNvbmZpZyBvYmplY3QuXG4gKiBAcGFyYW0gdHVyYm9wYWNrT3B0aW9ucyAtIFRoZSBUdXJib3BhY2sgb3B0aW9ucyBvYmplY3QuXG4gKiBAcmV0dXJucyBUaGUgVHVyYm9wYWNrIGNvbmZpZyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZyh7XG4gIHVzZXJOZXh0Q29uZmlnLFxuICByb3V0ZU1hbmlmZXN0LFxuICBuZXh0SnNWZXJzaW9uLFxufVxuXG4pIHtcbiAgY29uc3QgbmV3Q29uZmlnID0ge1xuICAgIC4uLnVzZXJOZXh0Q29uZmlnLnR1cmJvcGFjayxcbiAgfTtcblxuICBjb25zdCB2YWx1ZUluamVjdGlvblJ1bGVzID0gZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzLmdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcyh7XG4gICAgcm91dGVNYW5pZmVzdCxcbiAgICBuZXh0SnNWZXJzaW9uLFxuICB9KTtcblxuICBmb3IgKGNvbnN0IHsgbWF0Y2hlciwgcnVsZSB9IG9mIHZhbHVlSW5qZWN0aW9uUnVsZXMpIHtcbiAgICBuZXdDb25maWcucnVsZXMgPSBzYWZlbHlBZGRUdXJib3BhY2tSdWxlKG5ld0NvbmZpZy5ydWxlcywgeyBtYXRjaGVyLCBydWxlIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld0NvbmZpZztcbn1cblxuLyoqXG4gKiBTYWZlbHkgYWRkIGEgVHVyYm9wYWNrIHJ1bGUgdG8gdGhlIGV4aXN0aW5nIHJ1bGVzLlxuICpcbiAqIEBwYXJhbSBleGlzdGluZ1J1bGVzIC0gVGhlIGV4aXN0aW5nIHJ1bGVzLlxuICogQHBhcmFtIG1hdGNoZXIgLSBUaGUgbWF0Y2hlciBmb3IgdGhlIHJ1bGUuXG4gKiBAcGFyYW0gcnVsZSAtIFRoZSBydWxlIHRvIGFkZC5cbiAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIHJ1bGVzIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZShcbiAgZXhpc3RpbmdSdWxlcyxcbiAgeyBtYXRjaGVyLCBydWxlIH0sXG4pIHtcbiAgaWYgKCFleGlzdGluZ1J1bGVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFttYXRjaGVyXTogcnVsZSxcbiAgICB9O1xuICB9XG5cbiAgLy8gSWYgdGhlIHJ1bGUgYWxyZWFkeSBleGlzdHMsIHdlIGRvbid0IHdhbnQgdG8gbWVzcyB3aXRoIGl0LlxuICBpZiAoZXhpc3RpbmdSdWxlc1ttYXRjaGVyXSkge1xuICAgIGNvcmUuZGVidWcubG9nKFxuICAgICAgYFtAc2VudHJ5L25leHRqc10gLSBUdXJib3BhY2sgcnVsZSBhbHJlYWR5IGV4aXN0cyBmb3IgJHttYXRjaGVyfS4gUGxlYXNlIHJlbW92ZSBpdCBmcm9tIHlvdXIgTmV4dC5qcyBjb25maWcgaW4gb3JkZXIgZm9yIFNlbnRyeSB0byB3b3JrIHByb3Blcmx5LmAsXG4gICAgKTtcbiAgICByZXR1cm4gZXhpc3RpbmdSdWxlcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uZXhpc3RpbmdSdWxlcyxcbiAgICBbbWF0Y2hlcl06IHJ1bGUsXG4gIH07XG59XG5cbmV4cG9ydHMuY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnID0gY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnO1xuZXhwb3J0cy5zYWZlbHlBZGRUdXJib3BhY2tSdWxlID0gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\n/**\n * Generate the value injection rules for client and server in turbopack config.\n */\nfunction generateValueInjectionRules({\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const rules = [];\n  const isomorphicValues = {};\n  let clientValues = {};\n  let serverValues = {};\n\n  if (nextJsVersion) {\n    // This is used to determine version-based dev-symbolication behavior\n    isomorphicValues._sentryNextJsVersion = nextJsVersion;\n  }\n\n  if (routeManifest) {\n    clientValues._sentryRouteManifest = JSON.stringify(routeManifest);\n  }\n\n  if (Object.keys(isomorphicValues).length > 0) {\n    clientValues = { ...clientValues, ...isomorphicValues };\n    serverValues = { ...serverValues, ...isomorphicValues };\n  }\n\n  // Client value injection\n  if (Object.keys(clientValues).length > 0) {\n    rules.push({\n      matcher: '**/instrumentation-client.*',\n      rule: {\n        loaders: [\n          {\n            loader: path.resolve(__dirname, '..', 'loaders', 'valueInjectionLoader.js'),\n            options: {\n              values: clientValues,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  // Server value injection\n  if (Object.keys(serverValues).length > 0) {\n    rules.push({\n      matcher: '**/instrumentation.*',\n      rule: {\n        loaders: [\n          {\n            loader: path.resolve(__dirname, '..', 'loaders', 'valueInjectionLoader.js'),\n            options: {\n              values: serverValues,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  return rules;\n}\n\nexports.generateValueInjectionRules = generateValueInjectionRules;\n//# sourceMappingURL=generateValueInjectionRules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy90dXJib3BhY2svZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29uZmlnL3R1cmJvcGFjay9nZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8qKlxuICogR2VuZXJhdGUgdGhlIHZhbHVlIGluamVjdGlvbiBydWxlcyBmb3IgY2xpZW50IGFuZCBzZXJ2ZXIgaW4gdHVyYm9wYWNrIGNvbmZpZy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzKHtcbiAgcm91dGVNYW5pZmVzdCxcbiAgbmV4dEpzVmVyc2lvbixcbn1cblxuKSB7XG4gIGNvbnN0IHJ1bGVzID0gW107XG4gIGNvbnN0IGlzb21vcnBoaWNWYWx1ZXMgPSB7fTtcbiAgbGV0IGNsaWVudFZhbHVlcyA9IHt9O1xuICBsZXQgc2VydmVyVmFsdWVzID0ge307XG5cbiAgaWYgKG5leHRKc1ZlcnNpb24pIHtcbiAgICAvLyBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHZlcnNpb24tYmFzZWQgZGV2LXN5bWJvbGljYXRpb24gYmVoYXZpb3JcbiAgICBpc29tb3JwaGljVmFsdWVzLl9zZW50cnlOZXh0SnNWZXJzaW9uID0gbmV4dEpzVmVyc2lvbjtcbiAgfVxuXG4gIGlmIChyb3V0ZU1hbmlmZXN0KSB7XG4gICAgY2xpZW50VmFsdWVzLl9zZW50cnlSb3V0ZU1hbmlmZXN0ID0gSlNPTi5zdHJpbmdpZnkocm91dGVNYW5pZmVzdCk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoaXNvbW9ycGhpY1ZhbHVlcykubGVuZ3RoID4gMCkge1xuICAgIGNsaWVudFZhbHVlcyA9IHsgLi4uY2xpZW50VmFsdWVzLCAuLi5pc29tb3JwaGljVmFsdWVzIH07XG4gICAgc2VydmVyVmFsdWVzID0geyAuLi5zZXJ2ZXJWYWx1ZXMsIC4uLmlzb21vcnBoaWNWYWx1ZXMgfTtcbiAgfVxuXG4gIC8vIENsaWVudCB2YWx1ZSBpbmplY3Rpb25cbiAgaWYgKE9iamVjdC5rZXlzKGNsaWVudFZhbHVlcykubGVuZ3RoID4gMCkge1xuICAgIHJ1bGVzLnB1c2goe1xuICAgICAgbWF0Y2hlcjogJyoqL2luc3RydW1lbnRhdGlvbi1jbGllbnQuKicsXG4gICAgICBydWxlOiB7XG4gICAgICAgIGxvYWRlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2FkZXI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICdsb2FkZXJzJywgJ3ZhbHVlSW5qZWN0aW9uTG9hZGVyLmpzJyksXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIHZhbHVlczogY2xpZW50VmFsdWVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFNlcnZlciB2YWx1ZSBpbmplY3Rpb25cbiAgaWYgKE9iamVjdC5rZXlzKHNlcnZlclZhbHVlcykubGVuZ3RoID4gMCkge1xuICAgIHJ1bGVzLnB1c2goe1xuICAgICAgbWF0Y2hlcjogJyoqL2luc3RydW1lbnRhdGlvbi4qJyxcbiAgICAgIHJ1bGU6IHtcbiAgICAgICAgbG9hZGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxvYWRlcjogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ2xvYWRlcnMnLCAndmFsdWVJbmplY3Rpb25Mb2FkZXIuanMnKSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgdmFsdWVzOiBzZXJ2ZXJWYWx1ZXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcyA9IGdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst resolve = __webpack_require__(/*! resolve */ \"(rsc)/../../node_modules/.pnpm/resolve@1.22.8/node_modules/resolve/index.js\");\n\n/**\n * Returns the version of Next.js installed in the project, or undefined if it cannot be determined.\n */\nfunction getNextjsVersion() {\n  const nextjsPackageJsonPath = resolveNextjsPackageJson();\n  if (nextjsPackageJsonPath) {\n    try {\n      const nextjsPackageJson = JSON.parse(\n        fs.readFileSync(nextjsPackageJsonPath, { encoding: 'utf-8' }),\n      );\n      return nextjsPackageJson.version;\n    } catch {\n      // noop\n    }\n  }\n\n  return undefined;\n}\n\nfunction resolveNextjsPackageJson() {\n  try {\n    return resolve.sync('next/package.json', { basedir: process.cwd() });\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Checks if the current Next.js version supports the runAfterProductionCompile hook.\n * This hook was introduced in Next.js 15.4.1. (https://github.com/vercel/next.js/pull/77345)\n *\n * @param version - version string to check.\n * @returns true if Next.js version is 15.4.1 or higher\n */\nfunction supportsProductionCompileHook(version) {\n  const versionToCheck = version;\n  if (!versionToCheck) {\n    return false;\n  }\n\n  const { major, minor, patch } = core.parseSemver(versionToCheck);\n\n  if (major === undefined || minor === undefined || patch === undefined) {\n    return false;\n  }\n\n  if (major > 15) {\n    return true;\n  }\n\n  // For major version 15, check if it's 15.4.1 or higher\n  if (major === 15) {\n    if (minor > 4) {\n      return true;\n    }\n    if (minor === 4 && patch >= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  return false;\n}\n\nexports.getNextjsVersion = getNextjsVersion;\nexports.supportsProductionCompileHook = supportsProductionCompileHook;\n//# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixnQkFBZ0IsbUJBQU8sQ0FBQyw0RkFBUzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxtQkFBbUI7QUFDcEU7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLHdCQUF3QjtBQUN2RSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLHNCQUFzQjs7QUFFaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QixxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCByZXNvbHZlID0gcmVxdWlyZSgncmVzb2x2ZScpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHZlcnNpb24gb2YgTmV4dC5qcyBpbnN0YWxsZWQgaW4gdGhlIHByb2plY3QsIG9yIHVuZGVmaW5lZCBpZiBpdCBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dGpzVmVyc2lvbigpIHtcbiAgY29uc3QgbmV4dGpzUGFja2FnZUpzb25QYXRoID0gcmVzb2x2ZU5leHRqc1BhY2thZ2VKc29uKCk7XG4gIGlmIChuZXh0anNQYWNrYWdlSnNvblBhdGgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV4dGpzUGFja2FnZUpzb24gPSBKU09OLnBhcnNlKFxuICAgICAgICBmcy5yZWFkRmlsZVN5bmMobmV4dGpzUGFja2FnZUpzb25QYXRoLCB7IGVuY29kaW5nOiAndXRmLTgnIH0pLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXh0anNQYWNrYWdlSnNvbi52ZXJzaW9uO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVOZXh0anNQYWNrYWdlSnNvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVzb2x2ZS5zeW5jKCduZXh0L3BhY2thZ2UuanNvbicsIHsgYmFzZWRpcjogcHJvY2Vzcy5jd2QoKSB9KTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBOZXh0LmpzIHZlcnNpb24gc3VwcG9ydHMgdGhlIHJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUgaG9vay5cbiAqIFRoaXMgaG9vayB3YXMgaW50cm9kdWNlZCBpbiBOZXh0LmpzIDE1LjQuMS4gKGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9wdWxsLzc3MzQ1KVxuICpcbiAqIEBwYXJhbSB2ZXJzaW9uIC0gdmVyc2lvbiBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB0cnVlIGlmIE5leHQuanMgdmVyc2lvbiBpcyAxNS40LjEgb3IgaGlnaGVyXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRzUHJvZHVjdGlvbkNvbXBpbGVIb29rKHZlcnNpb24pIHtcbiAgY29uc3QgdmVyc2lvblRvQ2hlY2sgPSB2ZXJzaW9uO1xuICBpZiAoIXZlcnNpb25Ub0NoZWNrKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgeyBtYWpvciwgbWlub3IsIHBhdGNoIH0gPSBjb3JlLnBhcnNlU2VtdmVyKHZlcnNpb25Ub0NoZWNrKTtcblxuICBpZiAobWFqb3IgPT09IHVuZGVmaW5lZCB8fCBtaW5vciA9PT0gdW5kZWZpbmVkIHx8IHBhdGNoID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAobWFqb3IgPiAxNSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRm9yIG1ham9yIHZlcnNpb24gMTUsIGNoZWNrIGlmIGl0J3MgMTUuNC4xIG9yIGhpZ2hlclxuICBpZiAobWFqb3IgPT09IDE1KSB7XG4gICAgaWYgKG1pbm9yID4gNCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChtaW5vciA9PT0gNCAmJiBwYXRjaCA+PSAxKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnRzLmdldE5leHRqc1ZlcnNpb24gPSBnZXROZXh0anNWZXJzaW9uO1xuZXhwb3J0cy5zdXBwb3J0c1Byb2R1Y3Rpb25Db21waWxlSG9vayA9IHN1cHBvcnRzUHJvZHVjdGlvbkNvbXBpbGVIb29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst chalk = __webpack_require__(/*! chalk */ \"(rsc)/../../node_modules/.pnpm/chalk@3.0.0/node_modules/chalk/source/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst resolve = __webpack_require__(/*! resolve */ \"(rsc)/../../node_modules/.pnpm/resolve@1.22.8/node_modules/resolve/index.js\");\nconst getBuildPluginOptions = __webpack_require__(/*! ./getBuildPluginOptions.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\");\n\n/* eslint-disable complexity */\n/* eslint-disable max-lines */\n\n\n// Next.js runs webpack 3 times, once for the client, the server, and for edge. Because we don't want to print certain\n// warnings 3 times, we keep track of them here.\nlet showedMissingGlobalErrorWarningMsg = false;\n\n/**\n * Construct the function which will be used as the nextjs config's `webpack` value.\n *\n * Sets:\n *   - `devtool`, to ensure high-quality sourcemaps are generated\n *   - `entry`, to include user's sentry config files (where `Sentry.init` is called) in the build\n *   - `plugins`, to add SentryWebpackPlugin\n *\n * @param userNextConfig The user's existing nextjs config, as passed to `withSentryConfig`\n * @param userSentryOptions The user's SentryWebpackPlugin config, as passed to `withSentryConfig`\n * @returns The function to set as the nextjs config's `webpack` value\n */\nfunction constructWebpackConfigFunction({\n  userNextConfig = {},\n  userSentryOptions = {},\n  releaseName,\n  routeManifest,\n  nextJsVersion,\n  useRunAfterProductionCompileHook,\n}\n\n) {\n  // Will be called by nextjs and passed its default webpack configuration and context data about the build (whether\n  // we're building server or client, whether we're in dev, what version of webpack we're using, etc). Note that\n  // `incomingConfig` and `buildContext` are referred to as `config` and `options` in the nextjs docs.\n  return function newWebpackFunction(\n    incomingConfig,\n    buildContext,\n  ) {\n    const { isServer, dev: isDev, dir: projectDir } = buildContext;\n    const runtime = isServer ? (buildContext.nextRuntime === 'edge' ? 'edge' : 'server') : 'client';\n    // Default page extensions per https://github.com/vercel/next.js/blob/f1dbc9260d48c7995f6c52f8fbcc65f08e627992/packages/next/server/config-shared.ts#L161\n    const pageExtensions = userNextConfig.pageExtensions || ['tsx', 'ts', 'jsx', 'js'];\n    const dotPrefixedPageExtensions = pageExtensions.map(ext => `.${ext}`);\n    const pageExtensionRegex = pageExtensions.map(core.escapeStringForRegex).join('|');\n    const nextVersion = nextJsVersion || util.getNextjsVersion();\n    const { major } = core.parseSemver(nextVersion || '');\n\n    // We add `.ts` and `.js` back in because `pageExtensions` might not be relevant to the instrumentation file\n    // e.g. user's setting `.mdx`. In that case we still want to default look up\n    // `instrumentation.ts` and `instrumentation.js`\n    const instrumentationFile = getInstrumentationFile(projectDir, dotPrefixedPageExtensions.concat(['.ts', '.js']));\n\n    if (runtime !== 'client') {\n      warnAboutDeprecatedConfigFiles(projectDir, instrumentationFile, runtime);\n    }\n    if (runtime === 'server') {\n      // was added in v15 (https://github.com/vercel/next.js/pull/67539)\n      if (major && major >= 15) {\n        warnAboutMissingOnRequestErrorHandler(instrumentationFile);\n      }\n    }\n\n    let rawNewConfig = { ...incomingConfig };\n\n    // if user has custom webpack config (which always takes the form of a function), run it so we have actual values to\n    // work with\n    if ('webpack' in userNextConfig && typeof userNextConfig.webpack === 'function') {\n      rawNewConfig = userNextConfig.webpack(rawNewConfig, buildContext);\n    }\n\n    // This mutates `rawNewConfig` in place, but also returns it in order to switch its type to one in which\n    // `newConfig.module.rules` is required, so we don't have to keep asserting its existence\n    const newConfig = setUpModuleRules(rawNewConfig);\n\n    // Add a loader which will inject code that sets global values\n    addValueInjectionLoader({\n      newConfig,\n      userNextConfig,\n      userSentryOptions,\n      buildContext,\n      releaseName,\n      routeManifest,\n      nextJsVersion,\n    });\n\n    addOtelWarningIgnoreRule(newConfig);\n\n    // Add edge runtime polyfills when building for edge in dev mode\n    if (major && major === 13 && runtime === 'edge' && isDev) {\n      addEdgeRuntimePolyfills(newConfig, buildContext);\n    }\n\n    let pagesDirPath;\n    const maybePagesDirPath = path.join(projectDir, 'pages');\n    const maybeSrcPagesDirPath = path.join(projectDir, 'src', 'pages');\n    if (fs.existsSync(maybePagesDirPath) && fs.lstatSync(maybePagesDirPath).isDirectory()) {\n      pagesDirPath = maybePagesDirPath;\n    } else if (fs.existsSync(maybeSrcPagesDirPath) && fs.lstatSync(maybeSrcPagesDirPath).isDirectory()) {\n      pagesDirPath = maybeSrcPagesDirPath;\n    }\n\n    let appDirPath;\n    const maybeAppDirPath = path.join(projectDir, 'app');\n    const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n    if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n      appDirPath = maybeAppDirPath;\n    } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n      appDirPath = maybeSrcAppDirPath;\n    }\n\n    const apiRoutesPath = pagesDirPath ? path.join(pagesDirPath, 'api') : undefined;\n\n    const middlewareLocationFolder = pagesDirPath\n      ? path.join(pagesDirPath, '..')\n      : appDirPath\n        ? path.join(appDirPath, '..')\n        : projectDir;\n\n    const staticWrappingLoaderOptions = {\n      appDir: appDirPath,\n      pagesDir: pagesDirPath,\n      pageExtensionRegex,\n      excludeServerRoutes: userSentryOptions.excludeServerRoutes,\n      nextjsRequestAsyncStorageModulePath: getRequestAsyncStorageModuleLocation(\n        projectDir,\n        rawNewConfig.resolve?.modules,\n      ),\n    };\n\n    const normalizeLoaderResourcePath = (resourcePath) => {\n      // `resourcePath` may be an absolute path or a path relative to the context of the webpack config\n      let absoluteResourcePath;\n      if (path.isAbsolute(resourcePath)) {\n        absoluteResourcePath = resourcePath;\n      } else {\n        absoluteResourcePath = path.join(projectDir, resourcePath);\n      }\n\n      return path.normalize(absoluteResourcePath);\n    };\n\n    const isPageResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        pagesDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(pagesDirPath + path.sep) &&\n        !normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const isApiRouteResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const possibleMiddlewareLocations = pageExtensions.map(middlewareFileEnding => {\n      return path.join(middlewareLocationFolder, `middleware.${middlewareFileEnding}`);\n    });\n    const isMiddlewareResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return possibleMiddlewareLocations.includes(normalizedAbsoluteResourcePath);\n    };\n\n    const isServerComponentResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n\n      // \".js, .jsx, or .tsx file extensions can be used for Pages\"\n      // https://beta.nextjs.org/docs/routing/pages-and-layouts#pages:~:text=.js%2C%20.jsx%2C%20or%20.tsx%20file%20extensions%20can%20be%20used%20for%20Pages.\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/](page|layout|loading|head|not-found)\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    const isRouteHandlerResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/]route\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    if (isServer && userSentryOptions.autoInstrumentServerFunctions !== false) {\n      // It is very important that we insert our loaders at the beginning of the array because we expect any sort of transformations/transpilations (e.g. TS -> JS) to already have happened.\n\n      // Wrap pages\n      newConfig.module.rules.unshift({\n        test: isPageResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'page',\n            },\n          },\n        ],\n      });\n\n      let vercelCronsConfig = undefined;\n      try {\n        if (process.env.VERCEL && userSentryOptions.automaticVercelMonitors) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          vercelCronsConfig = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'vercel.json'), 'utf8')).crons;\n          if (vercelCronsConfig) {\n            core.debug.log(\n              `${chalk.cyan(\n                'info',\n              )} - Creating Sentry cron monitors for your Vercel Cron Jobs. You can disable this feature by setting the ${chalk.bold.cyan(\n                'automaticVercelMonitors',\n              )} option to false in you Next.js config.`,\n            );\n          }\n        }\n      } catch (e) {\n        if ((e ).code === 'ENOENT') ; else {\n          // log but noop\n          core.debug.error(\n            `${chalk.red(\n              'error',\n            )} - Sentry failed to read vercel.json for automatic cron job monitoring instrumentation`,\n            e,\n          );\n        }\n      }\n\n      // Wrap api routes\n      newConfig.module.rules.unshift({\n        test: isApiRouteResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              vercelCronsConfig,\n              wrappingTargetKind: 'api-route',\n            },\n          },\n        ],\n      });\n\n      // Wrap middleware\n      if (userSentryOptions.autoInstrumentMiddleware ?? true) {\n        newConfig.module.rules.unshift({\n          test: isMiddlewareResource,\n          use: [\n            {\n              loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n              options: {\n                ...staticWrappingLoaderOptions,\n                wrappingTargetKind: 'middleware',\n              },\n            },\n          ],\n        });\n      }\n    }\n\n    if (isServer && userSentryOptions.autoInstrumentAppDirectory !== false) {\n      // Wrap server components\n      newConfig.module.rules.unshift({\n        test: isServerComponentResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'server-component',\n            },\n          },\n        ],\n      });\n\n      // Wrap route handlers\n      newConfig.module.rules.unshift({\n        test: isRouteHandlerResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'route-handler',\n            },\n          },\n        ],\n      });\n    }\n\n    if (appDirPath) {\n      const hasGlobalErrorFile = pageExtensions\n        .map(extension => `global-error.${extension}`)\n        .some(\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          globalErrorFile => fs.existsSync(path.join(appDirPath, globalErrorFile)),\n        );\n\n      if (\n        !hasGlobalErrorFile &&\n        !showedMissingGlobalErrorWarningMsg &&\n        !process.env.SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING\n      ) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${chalk.yellow(\n            'warn',\n          )}  - It seems like you don't have a global error handler set up. It is recommended that you add a ${chalk.cyan(\n            'global-error.js',\n          )} file with Sentry instrumentation so that React rendering errors are reported to Sentry. Read more: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#react-render-errors-in-app-router (you can suppress this warning by setting SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1 as environment variable)`,\n        );\n        showedMissingGlobalErrorWarningMsg = true;\n      }\n    }\n\n    if (!isServer) {\n      // Tell webpack to inject the client config files (containing the client-side `Sentry.init()` call) into the appropriate output\n      // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (If we don't do\n      // this, we'll have a statement of the form `x.y = () => f(x.y)`, where one of the things `f` does is call `x.y`.\n      // Since we're setting `x.y` to be a callback (which, by definition, won't run until some time later), by the time\n      // the function runs (causing `f` to run, causing `x.y` to run), `x.y` will point to the callback itself, rather\n      // than its original value. So calling it will call the callback which will call `f` which will call `x.y` which\n      // will call the callback which will call `f` which will call `x.y`... and on and on. Theoretically this could also\n      // be fixed by using `bind`, but this is way simpler.)\n      const origEntryProperty = newConfig.entry;\n      newConfig.entry = async () => addSentryToClientEntryProperty(origEntryProperty, buildContext);\n\n      const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n      if (clientSentryConfigFileName) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] DEPRECATION WARNING: It is recommended renaming your \\`${clientSentryConfigFileName}\\` file, or moving its content to \\`instrumentation-client.ts\\`. When using Turbopack \\`${clientSentryConfigFileName}\\` will no longer work. Read more about the \\`instrumentation-client.ts\\` file: https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation-client`,\n        );\n      }\n    }\n\n    const isStaticExport = userNextConfig?.output === 'export';\n\n    // We don't want to do any webpack plugin stuff OR any source maps stuff in dev mode or for the server on static-only builds.\n    // Symbolication for dev-mode errors is done elsewhere.\n    if (!(isDev || (isStaticExport && isServer))) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const { sentryWebpackPlugin } = core.loadModule('@sentry/webpack-plugin', module) ?? {};\n\n      if (sentryWebpackPlugin) {\n        if (!userSentryOptions.sourcemaps?.disable) {\n          // Source maps can be configured in 3 ways:\n          // 1. (next config): productionBrowserSourceMaps\n          // 2. (next config): experimental.serverSourceMaps\n          // 3. custom webpack configuration\n          //\n          // We only update this if no explicit value is set\n          // (Next.js defaults to `false`: https://github.com/vercel/next.js/blob/5f4f96c133bd6b10954812cc2fef6af085b82aa5/packages/next/src/build/webpack/config/blocks/base.ts#L61)\n          if (!newConfig.devtool) {\n            core.debug.log(`[@sentry/nextjs] Automatically enabling source map generation for ${runtime} build.`);\n            // `hidden-source-map` produces the same sourcemaps as `source-map`, but doesn't include the `sourceMappingURL`\n            // comment at the bottom. For folks who aren't publicly hosting their sourcemaps, this is helpful because then\n            // the browser won't look for them and throw errors into the console when it can't find them. Because this is a\n            // front-end-only problem, and because `sentry-cli` handles sourcemaps more reliably with the comment than\n            // without, the option to use `hidden-source-map` only applies to the client-side build.\n            if (isServer) {\n              newConfig.devtool = 'source-map';\n            } else {\n              newConfig.devtool = 'hidden-source-map';\n            }\n          }\n\n          // enable source map deletion if not explicitly disabled\n          if (!isServer && userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n            core.debug.warn(\n              '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n            );\n            userSentryOptions.sourcemaps = {\n              ...userSentryOptions.sourcemaps,\n              deleteSourcemapsAfterUpload: true,\n            };\n          }\n        }\n\n        newConfig.plugins = newConfig.plugins || [];\n        const { config: userNextConfig, dir, nextRuntime } = buildContext;\n        const buildTool = isServer ? (nextRuntime === 'edge' ? 'webpack-edge' : 'webpack-nodejs') : 'webpack-client';\n        const projectDir = getBuildPluginOptions.normalizePathForGlob(dir);\n        const distDir = getBuildPluginOptions.normalizePathForGlob((userNextConfig ).distDir ?? '.next');\n        const distDirAbsPath = path.posix.join(projectDir, distDir);\n\n        const sentryWebpackPluginInstance = sentryWebpackPlugin(\n          getBuildPluginOptions.getBuildPluginOptions({\n            sentryBuildOptions: userSentryOptions,\n            releaseName,\n            distDirAbsPath,\n            buildTool,\n            useRunAfterProductionCompileHook,\n          }),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        sentryWebpackPluginInstance._name = 'sentry-webpack-plugin'; // For tests and debugging. Serves no other purpose.\n        newConfig.plugins.push(sentryWebpackPluginInstance);\n      }\n    }\n\n    if (userSentryOptions.disableLogger) {\n      newConfig.plugins = newConfig.plugins || [];\n      newConfig.plugins.push(\n        new buildContext.webpack.DefinePlugin({\n          __SENTRY_DEBUG__: false,\n        }),\n      );\n    }\n\n    // We inject a map of dependencies that the nextjs app has, as we cannot reliably extract them at runtime, sadly\n    newConfig.plugins = newConfig.plugins || [];\n    newConfig.plugins.push(\n      new buildContext.webpack.DefinePlugin({\n        __SENTRY_SERVER_MODULES__: JSON.stringify(_getModules(projectDir)),\n      }),\n    );\n\n    return newConfig;\n  };\n}\n\n/**\n * Modify the webpack `entry` property so that the code in `sentry.client.config.js` is\n * included in the the necessary bundles.\n *\n * @param currentEntryProperty The value of the property before Sentry code has been injected\n * @param buildContext Object passed by nextjs containing metadata about the build\n * @returns The value which the new `entry` property (which will be a function) will return (TODO: this should return\n * the function, rather than the function's return value)\n */\nasync function addSentryToClientEntryProperty(\n  currentEntryProperty,\n  buildContext,\n) {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  const { dir: projectDir, dev: isDevMode } = buildContext;\n\n  const newEntryProperty =\n    typeof currentEntryProperty === 'function' ? await currentEntryProperty() : { ...currentEntryProperty };\n\n  const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n  const instrumentationClientFileName = getInstrumentationClientFile(projectDir);\n\n  const filesToInject = [];\n  if (clientSentryConfigFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${clientSentryConfigFileName}`);\n  }\n  if (instrumentationClientFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${instrumentationClientFileName}`);\n  }\n\n  // inject into all entry points which might contain user's code\n  for (const entryPointName in newEntryProperty) {\n    if (\n      entryPointName === 'pages/_app' ||\n      // entrypoint for `/app` pages\n      entryPointName === 'main-app'\n    ) {\n      addFilesToWebpackEntryPoint(newEntryProperty, entryPointName, filesToInject, isDevMode);\n    }\n  }\n\n  return newEntryProperty;\n}\n\n/**\n * Gets the content of the user's instrumentation file\n */\nfunction getInstrumentationFile(projectDir, dotPrefixedExtensions) {\n  const paths = dotPrefixedExtensions.flatMap(extension => [\n    ['src', `instrumentation${extension}`],\n    [`instrumentation${extension}`],\n  ]);\n\n  for (const pathSegments of paths) {\n    try {\n      return fs.readFileSync(path.resolve(projectDir, ...pathSegments), { encoding: 'utf-8' });\n    } catch {\n      // no-op\n    }\n  }\n\n  return null;\n}\n\n/**\n * Make sure the instrumentation file has a `onRequestError` Handler\n */\nfunction warnAboutMissingOnRequestErrorHandler(instrumentationFile) {\n  if (!instrumentationFile) {\n    if (!process.env.SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        chalk.yellow(\n          '[@sentry/nextjs] Could not find a Next.js instrumentation file. This indicates an incomplete configuration of the Sentry SDK. An instrumentation file is required for the Sentry SDK to be initialized on the server: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#create-initialization-config-files (you can suppress this warning by setting SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING=1 as environment variable)',\n        ),\n      );\n    }\n    return;\n  }\n\n  if (!instrumentationFile.includes('onRequestError')) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      chalk.yellow(\n        '[@sentry/nextjs] Could not find `onRequestError` hook in instrumentation file. This indicates outdated configuration of the Sentry SDK. Use `Sentry.captureRequestError` to instrument the `onRequestError` hook: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#errors-from-nested-react-server-components',\n      ),\n    );\n  }\n}\n\n/**\n * Searches for old `sentry.(server|edge).config.ts` files and Next.js instrumentation hooks and warns if there are \"old\"\n * config files and no signs of them inside the instrumentation hook.\n *\n * @param projectDir The root directory of the project, where config files would be located\n * @param platform Either \"server\" or \"edge\", so that we know which file to look for\n */\nfunction warnAboutDeprecatedConfigFiles(\n  projectDir,\n  instrumentationFile,\n  platform,\n) {\n  const hasInstrumentationHookWithIndicationsOfSentry =\n    instrumentationFile &&\n    (instrumentationFile.includes('@sentry/') ||\n      instrumentationFile.match(/sentry\\.(server|edge)\\.config(\\.(ts|js))?/));\n\n  if (hasInstrumentationHookWithIndicationsOfSentry) {\n    return;\n  }\n\n  for (const filename of [`sentry.${platform}.config.ts`, `sentry.${platform}.config.js`]) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] It appears you've configured a \\`${filename}\\` file. Please ensure to put this file's content into the \\`register()\\` function of a Next.js instrumentation file instead. To ensure correct functionality of the SDK, \\`Sentry.init\\` must be called inside of an instrumentation file. Learn more about setting up an instrumentation file in Next.js: https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation. You can safely delete the \\`${filename}\\` file afterward.`,\n      );\n    }\n  }\n}\n\n/**\n * Searches for a `sentry.client.config.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getClientSentryConfigFile(projectDir) {\n  const possibilities = ['sentry.client.config.ts', 'sentry.client.config.js'];\n\n  for (const filename of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      return filename;\n    }\n  }\n}\n\n/**\n * Searches for a `instrumentation-client.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getInstrumentationClientFile(projectDir) {\n  const possibilities = [\n    ['src', 'instrumentation-client.js'],\n    ['src', 'instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n  ];\n\n  for (const pathParts of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, ...pathParts))) {\n      return path.join(...pathParts);\n    }\n  }\n}\n\n/**\n * Add files to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param entryPointName The key where the file should be injected\n * @param filesToInsert An array of paths to the injected files\n */\nfunction addFilesToWebpackEntryPoint(\n  entryProperty,\n  entryPointName,\n  filesToInsert,\n  isDevMode,\n) {\n  // BIG FAT NOTE: Order of insertion seems to matter here. If we insert the new files before the `currentEntrypoint`s,\n  // the Next.js dev server breaks. Because we generally still want the SDK to be initialized as early as possible we\n  // still keep it at the start of the entrypoints if we are not in dev mode.\n\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  const currentEntryPoint = entryProperty[entryPointName];\n  let newEntryPoint = currentEntryPoint;\n\n  if (typeof currentEntryPoint === 'string' || Array.isArray(currentEntryPoint)) {\n    newEntryPoint = Array.isArray(currentEntryPoint) ? currentEntryPoint : [currentEntryPoint];\n    if (newEntryPoint.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newEntryPoint.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newEntryPoint.unshift(...filesToInsert);\n    }\n  }\n  // descriptor object (webpack 5+)\n  else if (typeof currentEntryPoint === 'object' && 'import' in currentEntryPoint) {\n    const currentImportValue = currentEntryPoint.import;\n    const newImportValue = Array.isArray(currentImportValue) ? currentImportValue : [currentImportValue];\n    if (newImportValue.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newImportValue.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newImportValue.unshift(...filesToInsert);\n    }\n\n    newEntryPoint = {\n      ...currentEntryPoint,\n      import: newImportValue,\n    };\n  }\n  // malformed entry point (use `console.error` rather than `debug.error` because it will always be printed, regardless\n  // of SDK settings)\n  else {\n    // eslint-disable-next-line no-console\n    console.error(\n      'Sentry Logger [Error]:',\n      `Could not inject SDK initialization code into entry point ${entryPointName}, as its current value is not in a recognized format.\\n`,\n      'Expected: string | Array<string> | { [key:string]: any, import: string | Array<string> }\\n',\n      `Got: ${currentEntryPoint}`,\n    );\n  }\n\n  if (newEntryPoint) {\n    entryProperty[entryPointName] = newEntryPoint;\n  }\n}\n\n/**\n * Ensure that `newConfig.module.rules` exists. Modifies the given config in place but also returns it in order to\n * change its type.\n *\n * @param newConfig A webpack config object which may or may not contain `module` and `module.rules`\n * @returns The same object, with an empty `module.rules` array added if necessary\n */\nfunction setUpModuleRules(newConfig) {\n  newConfig.module = {\n    ...newConfig.module,\n    rules: [...(newConfig.module?.rules || [])],\n  };\n  // Surprising that we have to assert the type here, since we've demonstrably guaranteed the existence of\n  // `newConfig.module.rules` just above, but ¯\\_(ツ)_/¯\n  return newConfig ;\n}\n\n/**\n * Adds loaders to inject values on the global object based on user configuration.\n */\n// TODO: Remove this loader and replace it with a nextConfig.env (https://web.archive.org/web/20240917153554/https://nextjs.org/docs/app/api-reference/next-config-js/env) or define based (https://github.com/vercel/next.js/discussions/71476) approach.\n// In order to remove this loader though we need to make sure the minimum supported Next.js version includes this PR (https://github.com/vercel/next.js/pull/61194), otherwise the nextConfig.env based approach will not work, as our SDK code is not processed by Next.js.\nfunction addValueInjectionLoader({\n  newConfig,\n  userNextConfig,\n  userSentryOptions,\n  buildContext,\n  releaseName,\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n\n  // Check if release creation is disabled to prevent injection that breaks build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseToInject = releaseName && shouldCreateRelease ? releaseName : undefined;\n\n  const isomorphicValues = {\n    // `rewritesTunnel` set by the user in Next.js config\n    _sentryRewritesTunnelPath:\n      userSentryOptions.tunnelRoute !== undefined &&\n      userNextConfig.output !== 'export' &&\n      typeof userSentryOptions.tunnelRoute === 'string'\n        ? `${userNextConfig.basePath ?? ''}${userSentryOptions.tunnelRoute}`\n        : undefined,\n\n    // The webpack plugin's release injection breaks the `app` directory so we inject the release manually here instead.\n    // Having a release defined in dev-mode spams releases in Sentry so we only set one in non-dev mode\n    // Only inject if release creation is not explicitly disabled (to maintain build determinism)\n    SENTRY_RELEASE: releaseToInject && !buildContext.dev ? { id: releaseToInject } : undefined,\n    _sentryBasePath: buildContext.dev ? userNextConfig.basePath : undefined,\n    // This is used to determine version-based dev-symbolication behavior\n    _sentryNextJsVersion: nextJsVersion,\n  };\n\n  const serverValues = {\n    ...isomorphicValues,\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n  };\n\n  const clientValues = {\n    ...isomorphicValues,\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n    _sentryAssetPrefix: userNextConfig.assetPrefix,\n    _sentryExperimentalThirdPartyOriginStackFrames: userSentryOptions._experimental?.thirdPartyOriginStackFrames\n      ? 'true'\n      : undefined,\n    _sentryRouteManifest: JSON.stringify(routeManifest),\n  };\n\n  if (buildContext.isServer) {\n    newConfig.module.rules.push({\n      // TODO: Find a more bulletproof way of matching. For now this is fine and doesn't hurt anyone. It merely sets some globals.\n      test: /(src[\\\\/])?instrumentation.(js|ts)/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: serverValues,\n          },\n        },\n      ],\n    });\n  } else {\n    newConfig.module.rules.push({\n      test: /(?:sentry\\.client\\.config\\.(jsx?|tsx?)|(?:src[\\\\/])?instrumentation-client\\.(js|ts))$/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: clientValues,\n          },\n        },\n      ],\n    });\n  }\n}\n\nfunction resolveNextPackageDirFromDirectory(basedir) {\n  try {\n    return path.dirname(resolve.sync('next/package.json', { basedir }));\n  } catch {\n    // Should not happen in theory\n    return undefined;\n  }\n}\n\nconst POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS = [\n  // Original location of RequestAsyncStorage\n  // https://github.com/vercel/next.js/blob/46151dd68b417e7850146d00354f89930d10b43b/packages/next/src/client/components/request-async-storage.ts\n  'next/dist/client/components/request-async-storage.js',\n  // Introduced in Next.js 13.4.20\n  // https://github.com/vercel/next.js/blob/e1bc270830f2fc2df3542d4ef4c61b916c802df3/packages/next/src/client/components/request-async-storage.external.ts\n  'next/dist/client/components/request-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.180\n  // https://github.com/vercel/next.js/blob/541167b9b0fed6af9f36472e632863ffec41f18c/packages/next/src/server/app-render/work-unit-async-storage.external.ts\n  'next/dist/server/app-render/work-unit-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.182\n  // https://github.com/vercel/next.js/blob/f35159e5e80138ca7373f57b47edcaae3bcf1728/packages/next/src/client/components/work-unit-async-storage.external.ts\n  'next/dist/client/components/work-unit-async-storage.external.js',\n];\n\nfunction getRequestAsyncStorageModuleLocation(\n  webpackContextDir,\n  webpackResolvableModuleLocations,\n) {\n  if (webpackResolvableModuleLocations === undefined) {\n    return undefined;\n  }\n\n  const absoluteWebpackResolvableModuleLocations = webpackResolvableModuleLocations.map(loc =>\n    path.resolve(webpackContextDir, loc),\n  );\n\n  for (const webpackResolvableLocation of absoluteWebpackResolvableModuleLocations) {\n    const nextPackageDir = resolveNextPackageDirFromDirectory(webpackResolvableLocation);\n    if (nextPackageDir) {\n      const asyncLocalStorageLocation = POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS.find(loc =>\n        fs.existsSync(path.join(nextPackageDir, '..', loc)),\n      );\n      if (asyncLocalStorageLocation) {\n        return asyncLocalStorageLocation;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction addOtelWarningIgnoreRule(newConfig) {\n  const ignoreRules = [\n    // Inspired by @matmannion: https://github.com/getsentry/sentry-javascript/issues/12077#issuecomment-2180307072\n    (warning, compilation) => {\n      // This is wrapped in try-catch because we are vendoring types for this hook and we can't be 100% sure that we are accessing API that is there\n      try {\n        if (!warning.module) {\n          return false;\n        }\n\n        const isDependencyThatMayRaiseCriticalDependencyMessage =\n          /@opentelemetry\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener)) ||\n          /@prisma\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener));\n        const isCriticalDependencyMessage = /Critical dependency/.test(warning.message);\n\n        return isDependencyThatMayRaiseCriticalDependencyMessage && isCriticalDependencyMessage;\n      } catch {\n        return false;\n      }\n    },\n    // We provide these objects in addition to the hook above to provide redundancy in case the hook fails.\n    { module: /@opentelemetry\\/instrumentation/, message: /Critical dependency/ },\n    { module: /@prisma\\/instrumentation/, message: /Critical dependency/ },\n    { module: /require-in-the-middle/, message: /Critical dependency/ },\n  ] ;\n\n  if (newConfig.ignoreWarnings === undefined) {\n    newConfig.ignoreWarnings = ignoreRules;\n  } else if (Array.isArray(newConfig.ignoreWarnings)) {\n    newConfig.ignoreWarnings.push(...ignoreRules);\n  }\n}\n\nfunction addEdgeRuntimePolyfills(newConfig, buildContext) {\n  // Use ProvidePlugin to inject performance global only when accessed\n  newConfig.plugins = newConfig.plugins || [];\n  newConfig.plugins.push(\n    new buildContext.webpack.ProvidePlugin({\n      performance: [path.resolve(__dirname, 'polyfills', 'perf_hooks.js'), 'performance'],\n    }),\n  );\n\n  // Add module resolution aliases for problematic Node.js modules in edge runtime\n  newConfig.resolve = newConfig.resolve || {};\n  newConfig.resolve.alias = {\n    ...newConfig.resolve.alias,\n    // Redirect perf_hooks imports to a polyfilled version\n    perf_hooks: path.resolve(__dirname, 'polyfills', 'perf_hooks.js'),\n  };\n}\n\nfunction _getModules(projectDir) {\n  try {\n    const packageJson = path.join(projectDir, 'package.json');\n    const packageJsonContent = fs.readFileSync(packageJson, 'utf8');\n    const packageJsonObject = JSON.parse(packageJsonContent)\n\n;\n\n    return {\n      ...packageJsonObject.dependencies,\n      ...packageJsonObject.devDependencies,\n    };\n  } catch {\n    return {};\n  }\n}\n\nexports.constructWebpackConfigFunction = constructWebpackConfigFunction;\n//# sourceMappingURL=webpack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst handleRunAfterProductionCompile = __webpack_require__(/*! ./handleRunAfterProductionCompile.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js\");\nconst createRouteManifest = __webpack_require__(/*! ./manifest/createRouteManifest.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\");\nconst constructTurbopackConfig = __webpack_require__(/*! ./turbopack/constructTurbopackConfig.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\");\nconst webpack = __webpack_require__(/*! ./webpack.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js\");\n\n/* eslint-disable max-lines */\n/* eslint-disable complexity */\n\nlet showedExportModeTunnelWarning = false;\nlet showedExperimentalBuildModeWarning = false;\n\n// Packages we auto-instrument need to be external for instrumentation to work\n// Next.js externalizes some packages by default, see: https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages\n// Others we need to add ourselves\n//\n// NOTE: 'ai' (Vercel AI SDK) is intentionally NOT included in this list.\n// When externalized, Next.js doesn't properly handle the package's conditional exports,\n// specifically the \"react-server\" export condition. This causes client-side code to be\n// loaded in server components instead of the appropriate server-side functions.\nconst DEFAULT_SERVER_EXTERNAL_PACKAGES = [\n  'amqplib',\n  'connect',\n  'dataloader',\n  'express',\n  'generic-pool',\n  'graphql',\n  '@hapi/hapi',\n  'ioredis',\n  'kafkajs',\n  'koa',\n  'lru-memoizer',\n  'mongodb',\n  'mongoose',\n  'mysql',\n  'mysql2',\n  'knex',\n  'pg',\n  'pg-pool',\n  '@node-redis/client',\n  '@redis/client',\n  'redis',\n  'tedious',\n];\n\n/**\n * Modifies the passed in Next.js configuration with automatic build-time instrumentation and source map upload.\n *\n * @param nextConfig A Next.js configuration object, as usually exported in `next.config.js` or `next.config.mjs`.\n * @param sentryBuildOptions Additional options to configure instrumentation and\n * @returns The modified config to be exported\n */\nfunction withSentryConfig(nextConfig, sentryBuildOptions = {}) {\n  const castNextConfig = (nextConfig ) || {};\n  if (typeof castNextConfig === 'function') {\n    return function ( ...webpackConfigFunctionArgs) {\n      const maybePromiseNextConfig = castNextConfig.apply(\n        this,\n        webpackConfigFunctionArgs,\n      );\n\n      if (core.isThenable(maybePromiseNextConfig)) {\n        return maybePromiseNextConfig.then(promiseResultNextConfig => {\n          return getFinalConfigObject(promiseResultNextConfig, sentryBuildOptions);\n        });\n      }\n\n      return getFinalConfigObject(maybePromiseNextConfig, sentryBuildOptions);\n    } ;\n  } else {\n    return getFinalConfigObject(castNextConfig, sentryBuildOptions) ;\n  }\n}\n\n/**\n * Generates a random tunnel route path that's less likely to be blocked by ad-blockers\n */\nfunction generateRandomTunnelRoute() {\n  // Generate a random 8-character alphanumeric string\n  const randomString = Math.random().toString(36).substring(2, 10);\n  return `/${randomString}`;\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(\n  incomingUserNextConfigObject,\n  userSentryOptions,\n) {\n  // Only determine a release name if release creation is not explicitly disabled\n  // This prevents injection of Git commit hashes that break build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseName = shouldCreateRelease\n    ? (userSentryOptions.release?.name ?? node.getSentryRelease() ?? getGitRevision())\n    : userSentryOptions.release?.name;\n\n  if (userSentryOptions?.tunnelRoute) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses server-side features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option',\n        );\n      }\n    } else {\n      const resolvedTunnelRoute =\n        userSentryOptions.tunnelRoute === true ? generateRandomTunnelRoute() : userSentryOptions.tunnelRoute;\n\n      // Update the global options object to use the resolved value everywhere\n      userSentryOptions.tunnelRoute = resolvedTunnelRoute || undefined;\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, resolvedTunnelRoute);\n    }\n  }\n\n  if (process.argv.includes('--experimental-build-mode')) {\n    if (!showedExperimentalBuildModeWarning) {\n      showedExperimentalBuildModeWarning = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The Sentry Next.js SDK does not currently fully support next build --experimental-build-mode',\n      );\n    }\n    if (process.argv.includes('generate')) {\n      // Next.js v15.3.0-canary.1 splits the experimental build into two phases:\n      // 1. compile: Code compilation\n      // 2. generate: Environment variable inlining and prerendering (We don't instrument this phase, we inline in the compile phase)\n      //\n      // We assume a single \"full\" build and reruns Webpack instrumentation in both phases.\n      // During the generate step it collides with Next.js's inliner\n      // producing malformed JS and build failures.\n      // We skip Sentry processing during generate to avoid this issue.\n      return incomingUserNextConfigObject;\n    }\n  }\n\n  let routeManifest;\n  if (!userSentryOptions.disableManifestInjection) {\n    routeManifest = createRouteManifest.createRouteManifest();\n  }\n\n  setUpBuildTimeVariables(incomingUserNextConfigObject, userSentryOptions, releaseName);\n\n  const nextJsVersion = util.getNextjsVersion();\n\n  // Add the `clientTraceMetadata` experimental option based on Next.js version. The option got introduced in Next.js version 15.0.0 (actually 14.3.0-canary.64).\n  // Adding the option on lower versions will cause Next.js to print nasty warnings we wouldn't confront our users with.\n  if (nextJsVersion) {\n    const { major, minor } = core.parseSemver(nextJsVersion);\n    if (major !== undefined && minor !== undefined && (major >= 15 || (major === 14 && minor >= 3))) {\n      incomingUserNextConfigObject.experimental = incomingUserNextConfigObject.experimental || {};\n      incomingUserNextConfigObject.experimental.clientTraceMetadata = [\n        'baggage',\n        'sentry-trace',\n        ...(incomingUserNextConfigObject.experimental?.clientTraceMetadata || []),\n      ];\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\n      \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, please add `experimental.clientTraceMetadata: ['sentry-trace', 'baggage']` to your Next.js config to enable pageload tracing for App Router.\",\n    );\n  }\n\n  // From Next.js version (15.0.0-canary.124) onwards, Next.js does no longer require the `experimental.instrumentationHook` option and will\n  // print a warning when it is set, so we need to conditionally provide it for lower versions.\n  if (nextJsVersion) {\n    const { major, minor, patch, prerelease } = core.parseSemver(nextJsVersion);\n    const isFullySupportedRelease =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      major >= 15 &&\n      ((minor === 0 && patch === 0 && prerelease === undefined) || minor > 0 || patch > 0);\n    const isSupportedV15Rc =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('rc.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) > 0;\n    const isSupportedCanary =\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('canary.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) >= 124;\n\n    if (!isFullySupportedRelease && !isSupportedV15Rc && !isSupportedCanary) {\n      if (incomingUserNextConfigObject.experimental?.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You turned off the `experimental.instrumentationHook` option. Note that Sentry will not be initialized if you did not set it up inside `instrumentation.(js|ts)`.',\n        );\n      }\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  } else {\n    // If we cannot detect a Next.js version for whatever reason, the sensible default is to set the `experimental.instrumentationHook`, even though it may create a warning.\n    if (\n      incomingUserNextConfigObject.experimental &&\n      'instrumentationHook' in incomingUserNextConfigObject.experimental\n    ) {\n      if (incomingUserNextConfigObject.experimental.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You set `experimental.instrumentationHook` to `false`. If you are using Next.js version 15 or greater, you can remove that option. If you are using Next.js version 14 or lower, you need to set `experimental.instrumentationHook` in your `next.config.(js|mjs)` to `true` for the SDK to be properly initialized in combination with `instrumentation.(js|ts)`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, Next.js will probably show you a warning about the `experimental.instrumentationHook` being set. To silence Next.js' warning, explicitly set the `experimental.instrumentationHook` option in your `next.config.(js|mjs|ts)` to `undefined`. If you are on Next.js version 14 or lower, you can silence this particular warning by explicitly setting the `experimental.instrumentationHook` option in your `next.config.(js|mjs)` to `true`.\",\n      );\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  }\n\n  // We wanna check whether the user added a `onRouterTransitionStart` handler to their client instrumentation file.\n  const instrumentationClientFileContents = getInstrumentationClientFileContents();\n  if (\n    instrumentationClientFileContents !== undefined &&\n    !instrumentationClientFileContents.includes('onRouterTransitionStart') &&\n    !userSentryOptions.suppressOnRouterTransitionStartWarning\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] ACTION REQUIRED: To instrument navigations, the Sentry SDK requires you to export an `onRouterTransitionStart` hook from your `instrumentation-client.(js|ts)` file. You can do so by adding `export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;` to the file.',\n    );\n  }\n\n  let nextMajor;\n  if (nextJsVersion) {\n    const { major } = core.parseSemver(nextJsVersion);\n    nextMajor = major;\n  }\n\n  const isTurbopack = false;\n  const isTurbopackSupported = util.supportsProductionCompileHook(nextJsVersion ?? '');\n\n  if (!isTurbopackSupported && isTurbopack) {\n    if (true) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] WARNING: You are using the Sentry SDK with Turbopack (\\`next dev --turbopack\\`). The Sentry SDK is compatible with Turbopack on Next.js version 15.4.1 or later. You are currently on ${nextJsVersion}. Please upgrade to a newer Next.js version to use the Sentry SDK with Turbopack.`,\n      );\n    } else {}\n  }\n\n  // webpack case\n  if (\n    userSentryOptions.useRunAfterProductionCompileHook &&\n    !util.supportsProductionCompileHook(nextJsVersion ?? '') &&\n    !isTurbopack\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] The configured `useRunAfterProductionCompileHook` option is not compatible with your current Next.js version. This option is only supported on Next.js version 15.4.1 or later. Will not run source map and release management logic.',\n    );\n  }\n\n  // If not explicitly set, turbopack uses the runAfterProductionCompile hook (as there are no alternatives), webpack does not.\n  const shouldUseRunAfterProductionCompileHook =\n    userSentryOptions?.useRunAfterProductionCompileHook ?? (isTurbopack ? true : false);\n\n  if (shouldUseRunAfterProductionCompileHook && util.supportsProductionCompileHook(nextJsVersion ?? '')) {\n    if (incomingUserNextConfigObject?.compiler?.runAfterProductionCompile === undefined) {\n      incomingUserNextConfigObject.compiler ??= {};\n      incomingUserNextConfigObject.compiler.runAfterProductionCompile = async ({ distDir }) => {\n        await handleRunAfterProductionCompile.handleRunAfterProductionCompile(\n          { releaseName, distDir, buildTool: isTurbopack ? 'turbopack' : 'webpack' },\n          userSentryOptions,\n        );\n      };\n    } else if (typeof incomingUserNextConfigObject.compiler.runAfterProductionCompile === 'function') {\n      incomingUserNextConfigObject.compiler.runAfterProductionCompile = new Proxy(\n        incomingUserNextConfigObject.compiler.runAfterProductionCompile,\n        {\n          async apply(target, thisArg, argArray) {\n            const { distDir } = argArray[0] ?? { distDir: '.next' };\n            await target.apply(thisArg, argArray);\n            await handleRunAfterProductionCompile.handleRunAfterProductionCompile(\n              { releaseName, distDir, buildTool: isTurbopack ? 'turbopack' : 'webpack' },\n              userSentryOptions,\n            );\n          },\n        },\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The configured `compiler.runAfterProductionCompile` option is not a function. Will not run source map and release management logic.',\n      );\n    }\n  }\n\n  // Enable source maps for turbopack builds\n  if (isTurbopackSupported && isTurbopack && !userSentryOptions.sourcemaps?.disable) {\n    // Only set if not already configured by user\n    if (incomingUserNextConfigObject.productionBrowserSourceMaps === undefined) {\n      if (userSentryOptions.debug) {\n        // eslint-disable-next-line no-console\n        console.log('[@sentry/nextjs] Automatically enabling browser source map generation for turbopack build.');\n      }\n      incomingUserNextConfigObject.productionBrowserSourceMaps = true;\n\n      // Enable source map deletion if not explicitly disabled\n      if (userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n        if (userSentryOptions.debug) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n          );\n        }\n\n        userSentryOptions.sourcemaps = {\n          ...userSentryOptions.sourcemaps,\n          deleteSourcemapsAfterUpload: true,\n        };\n      }\n    }\n  }\n\n  return {\n    ...incomingUserNextConfigObject,\n    ...(nextMajor && nextMajor >= 15\n      ? {\n          serverExternalPackages: [\n            ...(incomingUserNextConfigObject.serverExternalPackages || []),\n            ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n          ],\n        }\n      : {\n          experimental: {\n            ...incomingUserNextConfigObject.experimental,\n            serverComponentsExternalPackages: [\n              ...(incomingUserNextConfigObject.experimental?.serverComponentsExternalPackages || []),\n              ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n            ],\n          },\n        }),\n    webpack:\n      isTurbopack || userSentryOptions.disableSentryWebpackConfig\n        ? incomingUserNextConfigObject.webpack // just return the original webpack config\n        : webpack.constructWebpackConfigFunction({\n            userNextConfig: incomingUserNextConfigObject,\n            userSentryOptions,\n            releaseName,\n            routeManifest,\n            nextJsVersion,\n            useRunAfterProductionCompileHook: shouldUseRunAfterProductionCompileHook,\n          }),\n    ...(isTurbopackSupported && isTurbopack\n      ? {\n          turbopack: constructTurbopackConfig.constructTurbopackConfig({\n            userNextConfig: incomingUserNextConfigObject,\n            routeManifest,\n            nextJsVersion,\n          }),\n        }\n      : {}),\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig, tunnelPath) {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args) => {\n    const tunnelRouteRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    const tunnelRouteRewriteWithRegion = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]?r=[region]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'r', // short for region - we keep it short so matching is harder for ad-blockers\n          value: '(?<region>[a-z]{2})',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.:region.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    // Order of these is important, they get applied first to last.\n    const newRewrites = [tunnelRouteRewriteWithRegion, tunnelRouteRewrite];\n\n    if (typeof originalRewrites !== 'function') {\n      return newRewrites;\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n\n    if (Array.isArray(originalRewritesResult)) {\n      return [...newRewrites, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [...newRewrites, ...(originalRewritesResult.beforeFiles || [])],\n      };\n    }\n  };\n}\n\nfunction setUpBuildTimeVariables(\n  userNextConfig,\n  userSentryOptions,\n  releaseName,\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n  const basePath = userNextConfig.basePath ?? '';\n\n  const rewritesTunnelPath =\n    userSentryOptions.tunnelRoute !== undefined &&\n    userNextConfig.output !== 'export' &&\n    typeof userSentryOptions.tunnelRoute === 'string'\n      ? `${basePath}${userSentryOptions.tunnelRoute}`\n      : undefined;\n\n  const buildTimeVariables = {\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n  };\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._assetsPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (rewritesTunnelPath) {\n    buildTimeVariables._sentryRewritesTunnelPath = rewritesTunnelPath;\n  }\n\n  if (basePath) {\n    buildTimeVariables._sentryBasePath = basePath;\n  }\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._sentryAssetPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (releaseName) {\n    buildTimeVariables._sentryRelease = releaseName;\n  }\n\n  if (typeof userNextConfig.env === 'object') {\n    userNextConfig.env = { ...buildTimeVariables, ...userNextConfig.env };\n  } else if (userNextConfig.env === undefined) {\n    userNextConfig.env = buildTimeVariables;\n  }\n}\n\nfunction getGitRevision() {\n  let gitRevision;\n  try {\n    gitRevision = childProcess\n      .execSync('git rev-parse HEAD', { stdio: ['ignore', 'pipe', 'ignore'] })\n      .toString()\n      .trim();\n  } catch {\n    // noop\n  }\n  return gitRevision;\n}\n\nfunction getInstrumentationClientFileContents() {\n  const potentialInstrumentationClientFileLocations = [\n    ['src', 'instrumentation-client.ts'],\n    ['src', 'instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n  ];\n\n  for (const pathSegments of potentialInstrumentationClientFileLocations) {\n    try {\n      return fs.readFileSync(path.join(process.cwd(), ...pathSegments), 'utf-8');\n    } catch {\n      // noop\n    }\n  }\n}\n\nexports.DEFAULT_SERVER_EXTERNAL_PACKAGES = DEFAULT_SERVER_EXTERNAL_PACKAGES;\nexports.withSentryConfig = withSentryConfig;\n//# sourceMappingURL=withSentryConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ./server/index.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js\");\nconst withSentryConfig = __webpack_require__(/*! ./config/withSentryConfig.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\");\nconst _error = __webpack_require__(/*! ./common/pages-router-instrumentation/_error.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ./common/wrapServerComponentWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ./common/wrapRouteHandlerWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ./common/wrapMiddlewareWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ./common/wrapGenerationFunctionWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ./common/withServerActionInstrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ./common/captureRequestError.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\n\n\n\nexports.ErrorBoundary = index.ErrorBoundary;\nexports.createReduxEnhancer = index.createReduxEnhancer;\nexports.init = index.init;\nexports.showReportDialog = index.showReportDialog;\nexports.withErrorBoundary = index.withErrorBoundary;\nexports.withSentryConfig = withSentryConfig.withSentryConfig;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.claudeCodeIntegration = node.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = node.createInstrumentedClaudeQuery;\nexports.patchClaudeCodeQuery = node.patchClaudeCodeQuery;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n\t!Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n\tObject.defineProperty(exports, '__proto__', {\n\t\tenumerable: true,\n\t\tvalue: node['__proto__']\n\t});\n\nObject.keys(node).forEach(k => {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst distDirRewriteFramesIntegration = core.defineIntegration(({ distDirName }) => {\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n  // we can read in the project directory from the currently running process\n  const distDirAbsPath = path.resolve(distDirName).replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(core.escapeStringForRegex(distDirAbsPath));\n\n  const rewriteFramesInstance = core.rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n\nexports.distDirRewriteFramesIntegration = distDirRewriteFramesIntegration;\n//# sourceMappingURL=distDirRewriteFramesIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL3NlcnZlci9kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsa0JBQU07O0FBRTNCLGtFQUFrRSxhQUFhO0FBQy9FO0FBQ0E7QUFDQSw0RUFBNEU7O0FBRTVFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsdUNBQXVDO0FBQ3ZDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9zZXJ2ZXIvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKHsgZGlzdERpck5hbWUgfSkgPT4ge1xuICAvLyBuZXh0anMgYWx3YXlzIHB1dHMgdGhlIGJ1aWxkIGRpcmVjdG9yeSBhdCB0aGUgcHJvamVjdCByb290IGxldmVsLCB3aGljaCBpcyBhbHNvIHdoZXJlIHlvdSBydW4gYG5leHQgc3RhcnRgIGZyb20sIHNvXG4gIC8vIHdlIGNhbiByZWFkIGluIHRoZSBwcm9qZWN0IGRpcmVjdG9yeSBmcm9tIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzXG4gIGNvbnN0IGRpc3REaXJBYnNQYXRoID0gcGF0aC5yZXNvbHZlKGRpc3REaXJOYW1lKS5yZXBsYWNlKC8oXFwvfFxcXFwpJC8sICcnKTsgLy8gV2Ugc3RyaXAgdHJhaWxpbmcgc2xhc2hlcyBiZWNhdXNlIFwiYXBwOi8vL19uZXh0XCIgYWxzbyBkb2Vzbid0IGhhdmUgb25lXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvciAtLSB1c2VyIGlucHV0IGlzIGVzY2FwZWRcbiAgY29uc3QgU09VUkNFTUFQX0ZJTEVOQU1FX1JFR0VYID0gbmV3IFJlZ0V4cChjb3JlLmVzY2FwZVN0cmluZ0ZvclJlZ2V4KGRpc3REaXJBYnNQYXRoKSk7XG5cbiAgY29uc3QgcmV3cml0ZUZyYW1lc0luc3RhbmNlID0gY29yZS5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24oe1xuICAgIGl0ZXJhdGVlOiBmcmFtZSA9PiB7XG4gICAgICBmcmFtZS5maWxlbmFtZSA9IGZyYW1lLmZpbGVuYW1lPy5yZXBsYWNlKFNPVVJDRU1BUF9GSUxFTkFNRV9SRUdFWCwgJ2FwcDovLy9fbmV4dCcpO1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmV3cml0ZUZyYW1lc0luc3RhbmNlLFxuICAgIG5hbWU6ICdEaXN0RGlyUmV3cml0ZUZyYW1lcycsXG4gIH07XG59KTtcblxuZXhwb3J0cy5kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uID0gZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(rsc)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(rsc)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(rsc)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../common/debug-build.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst devErrorSymbolicationEventProcessor = __webpack_require__(/*! ../common/devErrorSymbolicationEventProcessor.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\");\nconst getVercelEnv = __webpack_require__(/*! ../common/getVercelEnv.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../common/span-attributes-with-logic-attached.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst isBuild = __webpack_require__(/*! ../common/utils/isBuild.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst distDirRewriteFramesIntegration = __webpack_require__(/*! ./distDirRewriteFramesIntegration.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\");\nconst _error = __webpack_require__(/*! ../common/pages-router-instrumentation/_error.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ../common/wrapGenerationFunctionWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ../common/captureRequestError.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */\nconst ErrorBoundary = (props) => {\n  if (!props.children) {\n    return null;\n  }\n\n  if (typeof props.children === 'function') {\n    return (props.children )();\n  }\n\n  // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n  return props.children ;\n};\n\n/**\n * A passthrough redux enhancer for the server that doesn't depend on anything from the `@sentry/react` package.\n */\nfunction createReduxEnhancer() {\n  return (createStore) => createStore;\n}\n\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(\n  WrappedComponent,\n) {\n  return WrappedComponent ;\n}\n\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */\nfunction showReportDialog() {\n  return;\n}\n\n/** Inits the Sentry NextJS SDK on node. */\nfunction init(options) {\n  if (isBuild.isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = node.getDefaultIntegrations(options)\n    .filter(integration => integration.name !== 'Http')\n    .concat(\n      // We are using the HTTP integration without instrumenting incoming HTTP requests because Next.js does that by itself.\n      node.httpIntegration({\n        disableIncomingRequestSpans: true,\n      }),\n    );\n\n  // Turn off Next.js' own fetch instrumentation (only when we manage OTEL)\n  // https://github.com/lforst/nextjs-fork/blob/1994fd186defda77ad971c36dc3163db263c993f/packages/next/src/server/lib/patch-fetch.ts#L245\n  // Enable with custom OTel setup: https://github.com/getsentry/sentry-javascript/issues/17581\n  if (!options.skipOpenTelemetrySetup) {\n    process.env.NEXT_OTEL_FETCH_DISABLED = '1';\n  }\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = \".next\" || 0;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration.distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts = {\n    environment: process.env.SENTRY_ENVIRONMENT || getVercelEnv.getVercelEnv(false) || \"development\",\n    release: \"fca76ee7b26bb2d2d7d4693ef948bc93e8812918\" || 0,\n    defaultIntegrations: customDefaultIntegrations,\n    ...options,\n  };\n\n  if (debugBuild.DEBUG_BUILD && opts.debug) {\n    core.debug.enable();\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    debugBuild.DEBUG_BUILD && core.debug.log('SDK already initialized');\n    return;\n  }\n\n  core.applySdkMetadata(opts, 'nextjs', ['nextjs', 'node']);\n\n  const client = node.init(opts);\n  client?.on('beforeSampling', ({ spanAttributes }, samplingDecision) => {\n    // There are situations where the Next.js Node.js server forwards requests for the Edge Runtime server (e.g. in\n    // middleware) and this causes spans for Sentry ingest requests to be created. These are not exempt from our tracing\n    // because we didn't get the chance to do `suppressTracing`, since this happens outside of userland.\n    // We need to drop these spans.\n    if (\n      // eslint-disable-next-line deprecation/deprecation\n      (typeof spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET] === 'string' &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_key') &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_client')) ||\n      (typeof spanAttributes[semanticConventions.ATTR_URL_QUERY] === 'string' &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_key') &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_client'))\n    ) {\n      samplingDecision.decision = false;\n    }\n  });\n\n  client?.on('spanStart', span => {\n    const spanAttributes = core.spanToJSON(span).data;\n\n    // What we do in this glorious piece of code, is hoist any information about parameterized routes from spans emitted\n    // by Next.js via the `next.route` attribute, up to the transaction by setting the http.route attribute.\n    if (typeof spanAttributes?.['next.route'] === 'string') {\n      const rootSpan = core.getRootSpan(span);\n      const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n      // Only hoist the http.route attribute if the transaction doesn't already have it\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        (rootSpanAttributes?.[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || rootSpanAttributes?.[semanticConventions.SEMATTRS_HTTP_METHOD]) &&\n        !rootSpanAttributes?.[semanticConventions.ATTR_HTTP_ROUTE]\n      ) {\n        const route = spanAttributes['next.route'].replace(/\\/route$/, '');\n        rootSpan.updateName(route);\n        rootSpan.setAttribute(semanticConventions.ATTR_HTTP_ROUTE, route);\n        // Preserving the original attribute despite internally not depending on it\n        rootSpan.setAttribute('next.route', route);\n      }\n    }\n\n    // We want to skip span data inference for any spans generated by Next.js. Reason being that Next.js emits spans\n    // with patterns (e.g. http.server spans) that will produce confusing data.\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // We want to fork the isolation scope for incoming requests\n    if (spanAttributes?.['next.span_type'] === 'BaseServer.handleRequest' && span === core.getRootSpan(span)) {\n      const scopes = core.getCapturedScopesOnSpan(span);\n\n      const isolationScope = (scopes.isolationScope || core.getIsolationScope()).clone();\n      const scope = scopes.scope || core.getCurrentScope();\n\n      const currentScopesPointer = opentelemetry.getScopesFromContext(api.context.active());\n      if (currentScopesPointer) {\n        currentScopesPointer.isolationScope = isolationScope;\n      }\n\n      core.setCapturedScopesOnSpan(span, scope, isolationScope);\n    }\n  });\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      (event => {\n        if (event.type === 'transaction') {\n          // Filter out transactions for static assets\n          // This regex matches the default path to the static assets (`_next/static`) and could potentially filter out too many transactions.\n          // We match `/_next/static/` anywhere in the transaction name because its location may change with the basePath setting.\n          if (event.transaction?.match(/^GET (\\/.*)?\\/_next\\/static\\//)) {\n            return null;\n          }\n\n          // Filter out transactions for requests to the tunnel route\n          if (\n            (globalWithInjectedValues._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${globalWithInjectedValues._sentryRewritesTunnelPath}`) ||\n            (process.env._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${process.env._sentryRewritesTunnelPath}`)\n          ) {\n            return null;\n          }\n\n          // Filter out requests to resolve source maps for stack frames in dev mode\n          if (event.transaction?.match(/\\/__nextjs_original-stack-frame/)) {\n            return null;\n          }\n\n          // Filter out /404 transactions which seem to be created excessively\n          if (\n            // Pages router\n            event.transaction === '/404' ||\n            // App router (could be \"GET /404\", \"POST /404\", ...)\n            event.transaction?.match(/^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \\/(404|_not-found)$/)\n          ) {\n            return null;\n          }\n\n          // Filter transactions that we explicitly want to drop.\n          if (event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION]) {\n            return null;\n          }\n\n          // Next.js 13 sometimes names the root transactions like this containing useless tracing.\n          if (event.transaction === 'NextServer.getRequestHandler') {\n            return null;\n          }\n\n          // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n          if (typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string') {\n            const traceparentData = core.extractTraceparentData(\n              event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL],\n            );\n\n            if (traceparentData?.parentSampled === false) {\n              return null;\n            }\n          }\n\n          return event;\n        } else {\n          return event;\n        }\n      }) ,\n      { id: 'NextLowQualityTransactionsFilter' },\n    ),\n  );\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      ((event, hint) => {\n        if (event.type !== undefined) {\n          return event;\n        }\n\n        const originalException = hint.originalException;\n\n        const isPostponeError =\n          typeof originalException === 'object' &&\n          originalException !== null &&\n          '$$typeof' in originalException &&\n          originalException.$$typeof === Symbol.for('react.postpone');\n\n        if (isPostponeError) {\n          // Postpone errors are used for partial-pre-rendering (PPR)\n          return null;\n        }\n\n        // We don't want to capture suspense errors as they are simply used by React/Next.js for control flow\n        const exceptionMessage = event.exception?.values?.[0]?.value;\n        if (\n          exceptionMessage?.includes('Suspense Exception: This is not a real error!') ||\n          exceptionMessage?.includes('Suspense Exception: This is not a real error, and should not leak')\n        ) {\n          return null;\n        }\n\n        return event;\n      }) ,\n      { id: 'DropReactControlFlowErrors' },\n    ),\n  );\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // Enhance route handler transactions\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'BaseServer.handleRequest'\n    ) {\n      event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server';\n      event.contexts.trace.op = 'http.server';\n\n      if (event.transaction) {\n        event.transaction = core.stripUrlQueryAndFragment(event.transaction);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const method = event.contexts.trace.data[semanticConventions.SEMATTRS_HTTP_METHOD];\n      // eslint-disable-next-line deprecation/deprecation\n      const target = event.contexts?.trace?.data?.[semanticConventions.SEMATTRS_HTTP_TARGET];\n      const route = event.contexts.trace.data[semanticConventions.ATTR_HTTP_ROUTE] || event.contexts.trace.data['next.route'];\n\n      if (typeof method === 'string' && typeof route === 'string') {\n        const cleanRoute = route.replace(/\\/route$/, '');\n        event.transaction = `${method} ${cleanRoute}`;\n        event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n        // Preserve next.route in case it did not get hoisted\n        event.contexts.trace.data['next.route'] = cleanRoute;\n      }\n\n      // backfill transaction name for pages that would otherwise contain unparameterized routes\n      if (event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] && event.transaction !== 'GET /_app') {\n        event.transaction = `${method} ${event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`;\n      }\n\n      // Next.js overrides transaction names for page loads that throw an error\n      // but we want to keep the original target name\n      if (event.transaction === 'GET /_error' && target) {\n        event.transaction = `${method ? `${method} ` : ''}${target}`;\n      }\n    }\n\n    // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n    if (\n      event.type === 'transaction' &&\n      typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string'\n    ) {\n      const traceparentData = core.extractTraceparentData(event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n\n      if (traceparentData?.traceId) {\n        event.contexts.trace.trace_id = traceparentData.traceId;\n      }\n\n      if (traceparentData?.parentSpanId) {\n        event.contexts.trace.parent_span_id = traceparentData.parentSpanId;\n      }\n    }\n  });\n\n  if (true) {\n    core.getGlobalScope().addEventProcessor(devErrorSymbolicationEventProcessor.devErrorSymbolicationEventProcessor);\n  }\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (false) {}\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('SDK successfully initialized');\n\n  return client;\n}\n\nfunction sdkAlreadyInitialized() {\n  return !!core.getClient();\n}\n\nexports.claudeCodeIntegration = node.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = node.createInstrumentedClaudeQuery;\nexports.patchClaudeCodeQuery = node.patchClaudeCodeQuery;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.ErrorBoundary = ErrorBoundary;\nexports.createReduxEnhancer = createReduxEnhancer;\nexports.init = init;\nexports.showReportDialog = showReportDialog;\nexports.withErrorBoundary = withErrorBoundary;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n  !Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n  Object.defineProperty(exports, '__proto__', {\n    enumerable: true,\n    value: node['__proto__']\n  });\n\nObject.keys(node).forEach(k => {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nfunction captureRequestError(error, request, errorContext) {\n  core.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: core.headersToDict(request.headers),\n        method: request.method,\n      } ,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    core.captureException(error, {\n      mechanism: {\n        handled: false,\n        type: 'auto.function.nextjs.on_request_error',\n      },\n    });\n\n    core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n  });\n}\n\nexports.captureRequestError = captureRequestError;\n//# sourceMappingURL=captureRequestError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9jYXB0dXJlUmVxdWVzdEVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyx5UEFBd0I7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcmVzcG9uc2VFbmQgPSByZXF1aXJlKCcuL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogUmVwb3J0cyBlcnJvcnMgcGFzc2VkIHRvIHRoZSB0aGUgTmV4dC5qcyBgb25SZXF1ZXN0RXJyb3JgIGluc3RydW1lbnRhdGlvbiBob29rLlxuICovXG5mdW5jdGlvbiBjYXB0dXJlUmVxdWVzdEVycm9yKGVycm9yLCByZXF1ZXN0LCBlcnJvckNvbnRleHQpIHtcbiAgY29yZS53aXRoU2NvcGUoc2NvcGUgPT4ge1xuICAgIHNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICBub3JtYWxpemVkUmVxdWVzdDoge1xuICAgICAgICBoZWFkZXJzOiBjb3JlLmhlYWRlcnNUb0RpY3QocmVxdWVzdC5oZWFkZXJzKSxcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgIH0gLFxuICAgIH0pO1xuXG4gICAgc2NvcGUuc2V0Q29udGV4dCgnbmV4dGpzJywge1xuICAgICAgcmVxdWVzdF9wYXRoOiByZXF1ZXN0LnBhdGgsXG4gICAgICByb3V0ZXJfa2luZDogZXJyb3JDb250ZXh0LnJvdXRlcktpbmQsXG4gICAgICByb3V0ZXJfcGF0aDogZXJyb3JDb250ZXh0LnJvdXRlUGF0aCxcbiAgICAgIHJvdXRlX3R5cGU6IGVycm9yQ29udGV4dC5yb3V0ZVR5cGUsXG4gICAgfSk7XG5cbiAgICBzY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoZXJyb3JDb250ZXh0LnJvdXRlUGF0aCk7XG5cbiAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLm9uX3JlcXVlc3RfZXJyb3InLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvcmUudmVyY2VsV2FpdFVudGlsKHJlc3BvbnNlRW5kLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnRzLmNhcHR1cmVSZXF1ZXN0RXJyb3IgPSBjYXB0dXJlUmVxdWVzdEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwdHVyZVJlcXVlc3RFcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGVidWctYnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst stackTraceParser = __webpack_require__(/*! stacktrace-parser */ \"(ssr)/../../node_modules/.pnpm/stacktrace-parser@0.1.11/node_modules/stacktrace-parser/dist/stack-trace-parser.esm.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nasync function devErrorSymbolicationEventProcessor(event, hint) {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = event.spans?.filter(span => {\n      const httpUrlAttribute = span.data?.['http.url'];\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame'); // could also be __nextjs_original-stack-frames (plural)\n      }\n\n      return true;\n    });\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the\n  // entire event processor. Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n      const nextJsVersion = globalWithInjectedValues._sentryNextJsVersion;\n\n      // If we for whatever reason don't have a Next.js version,\n      // we don't want to symbolicate as this previously lead to infinite loops\n      if (!nextJsVersion) {\n        return event;\n      }\n\n      const parsedNextjsVersion = core.parseSemver(nextJsVersion);\n\n      let resolvedFrames\n\n;\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (parsedNextjsVersion.major > 15 || (parsedNextjsVersion.major === 15 && parsedNextjsVersion.minor >= 2)) {\n        const r = await resolveStackFrames(frames);\n        if (r === null) {\n          return event;\n        }\n        resolvedFrames = r;\n      } else {\n        resolvedFrames = await Promise.all(\n          frames.map(frame => resolveStackFrame(frame, hint.originalException )),\n        );\n      }\n\n      if (event.exception?.values?.[0]?.stacktrace?.frames) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map(\n          (frame, i, frames) => {\n            const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n            if (!resolvedFrame?.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n              return {\n                ...frame,\n                platform: frame.filename?.startsWith('node:internal') ? 'nodejs' : undefined, // simple hack that will prevent a source mapping error from showing up\n                in_app: false,\n              };\n            }\n\n            const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(\n              resolvedFrame.originalCodeFrame,\n            );\n\n            return {\n              ...frame,\n              pre_context: preContextLines,\n              context_line: contextLine,\n              post_context: postContextLines,\n              function: resolvedFrame.originalStackFrame.methodName,\n              filename: resolvedFrame.originalStackFrame.file\n                ? stripWebpackInternalPrefix(resolvedFrame.originalStackFrame.file)\n                : undefined,\n              lineno:\n                resolvedFrame.originalStackFrame.lineNumber || resolvedFrame.originalStackFrame.line1 || undefined,\n              colno: resolvedFrame.originalStackFrame.column || resolvedFrame.originalStackFrame.column1 || undefined,\n            };\n          },\n        );\n      }\n    }\n  } catch {\n    return event;\n  }\n\n  return event;\n}\n\nasync function resolveStackFrame(\n  frame,\n  error,\n) {\n  try {\n    if (!(frame.file?.startsWith('webpack-internal:') || frame.file?.startsWith('file:'))) {\n      return null;\n    }\n\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, (frame[key ] ?? '').toString());\n    });\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`,\n        {\n          signal: controller.signal,\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame,\n    };\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nasync function resolveStackFrames(\n  frames,\n) {\n  try {\n    const postBody = {\n      frames: frames\n        .filter(frame => {\n          return !!frame.file;\n        })\n        .map(frame => {\n          // https://github.com/vercel/next.js/blob/df0573a478baa8b55478a7963c473dddd59a5e40/packages/next/src/client/components/react-dev-overlay/server/middleware-turbopack.ts#L129\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          frame.file = frame.file.replace(/^rsc:\\/\\/React\\/[^/]+\\//, '').replace(/\\?\\d+$/, '');\n\n          return {\n            file: frame.file,\n            methodName: frame.methodName ?? '<unknown>',\n            arguments: [],\n            lineNumber: frame.lineNumber ?? 0,\n            column: frame.column ?? 0,\n            line1: frame.lineNumber ?? 0,\n            column1: frame.column ?? 0,\n          };\n        }),\n      isServer: false,\n      isEdgeServer: false,\n      isAppDirectory: true,\n    };\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n\n    const res = await core.suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frames`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: controller.signal,\n          body: JSON.stringify(postBody),\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body = await res.json();\n\n    return body.map(frame => {\n      return {\n        originalCodeFrame: frame.value.originalCodeFrame,\n        originalStackFrame: frame.value.originalStackFrame,\n      };\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nfunction parseOriginalCodeFrame(codeFrame)\n\n {\n  const preProcessedLines = codeFrame\n    // Remove ASCII control characters that are used for syntax highlighting\n    .replace(\n      // eslint-disable-next-line no-control-regex\n      /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, // https://stackoverflow.com/a/29497680\n      '',\n    )\n    .split('\\n')\n    // Remove line that is supposed to indicate where the error happened\n    .filter(line => !line.match(/^\\s*\\|/))\n    // Find the error line\n    .map(line => ({\n      line,\n      isErrorLine: !!line.match(/^>/),\n    }))\n    // Remove the leading part that is just for prettier output\n    .map(lineObj => ({\n      ...lineObj,\n      line: lineObj.line.replace(/^.*\\|/, ''),\n    }));\n\n  const preContextLines = [];\n  let contextLine = undefined;\n  const postContextLines = [];\n\n  let reachedContextLine = false;\n\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines,\n  };\n}\n\n/**\n * Strips webpack-internal prefixes from filenames to clean up stack traces.\n *\n * Examples:\n * - \"webpack-internal:///./components/file.tsx\" -> \"./components/file.tsx\"\n * - \"webpack-internal:///(app-pages-browser)/./components/file.tsx\" -> \"./components/file.tsx\"\n */\nfunction stripWebpackInternalPrefix(filename) {\n  if (!filename) {\n    return filename;\n  }\n\n  const webpackInternalRegex = /^webpack-internal:(?:\\/+)?(?:\\([^)]*\\)\\/)?(.+)$/;\n  const match = filename.match(webpackInternalRegex);\n\n  return match ? match[1] : filename;\n}\n\nexports.devErrorSymbolicationEventProcessor = devErrorSymbolicationEventProcessor;\n//# sourceMappingURL=devErrorSymbolicationEventProcessor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nfunction getVercelEnv(isClient) {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n\nexports.getVercelEnv = getVercelEnv;\n//# sourceMappingURL=getVercelEnv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9nZXRWZXJjZWxFbnYuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsYUFBYTtBQUMvQzs7QUFFQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9nZXRWZXJjZWxFbnYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKlxuICogUmV0dXJucyBhbiBlbnZpcm9ubWVudCBzZXR0aW5nIHZhbHVlIGRldGVybWluZWQgYnkgVmVyY2VsJ3MgYFZFUkNFTF9FTlZgIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICpcbiAqIEBwYXJhbSBpc0NsaWVudCBGbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdG8gdXNlIHRoZSBgTkVYVF9QVUJMSUNfYCBwcmVmaXhlZCB2ZXJzaW9uIG9mIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmVyY2VsRW52KGlzQ2xpZW50KSB7XG4gIGNvbnN0IHZlcmNlbEVudlZhciA9IGlzQ2xpZW50ID8gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVkVSQ0VMX0VOViA6IHByb2Nlc3MuZW52LlZFUkNFTF9FTlY7XG4gIHJldHVybiB2ZXJjZWxFbnZWYXIgPyBgdmVyY2VsLSR7dmVyY2VsRW52VmFyfWAgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydHMuZ2V0VmVyY2VsRW52ID0gZ2V0VmVyY2VsRW52O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VmVyY2VsRW52LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nfunction isNotFoundNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(\n      (subject ).digest ,\n    )\n  );\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nfunction isRedirectNavigationError(subject) {\n  return (\n    core.isError(subject) &&\n    typeof (subject ).digest === 'string' &&\n    (subject ).digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  );\n}\n\nexports.isNotFoundNavigationError = isNotFoundNavigationError;\nexports.isRedirectNavigationError = isRedirectNavigationError;\n//# sourceMappingURL=nextNavigationErrorUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGtEQUFrRDtBQUNsRztBQUNBOztBQUVBLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgaW5wdXQgaXMgYSBOZXh0LmpzIG5vdC1mb3VuZCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9ub3Rmb3VuZCNub3Rmb3VuZFxuICovXG5mdW5jdGlvbiBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICBbJ05FWFRfTk9UX0ZPVU5EJywgJ05FWFRfSFRUUF9FUlJPUl9GQUxMQkFDSzs0MDQnXS5pbmNsdWRlcyhcbiAgICAgIChzdWJqZWN0ICkuZGlnZXN0ICxcbiAgICApXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGlucHV0IGlzIGEgTmV4dC5qcyByZWRpcmVjdCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9yZWRpcmVjdCNyZWRpcmVjdFxuICovXG5mdW5jdGlvbiBpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICB0eXBlb2YgKHN1YmplY3QgKS5kaWdlc3QgPT09ICdzdHJpbmcnICYmXG4gICAgKHN1YmplY3QgKS5kaWdlc3Quc3RhcnRzV2l0aCgnTkVYVF9SRURJUkVDVDsnKSAvLyBhIHJlZGlyZWN0IGRpZ2VzdCBsb29rcyBsaWtlIFwiTkVYVF9SRURJUkVDVDtbcmVkaXJlY3QgcGF0aF1cIlxuICApO1xufVxuXG5leHBvcnRzLmlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IgPSBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yO1xuZXhwb3J0cy5pc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yID0gaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res?.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  core.withScope(scope => {\n    if (req) {\n      const normalizedRequest = core.httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({ normalizedRequest });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    core.captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'auto.function.nextjs.underscore_error',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      },\n    });\n  });\n\n  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n}\n\nexports.captureUnderscoreErrorException = captureUnderscoreErrorException;\n//# sourceMappingURL=_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL19lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsMFBBQXlCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdCQUFnQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsbUJBQW1CO0FBQzFEOztBQUVBO0FBQ0E7QUFDQSx1RUFBdUUsSUFBSTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBOztBQUVBLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vX2Vycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4uL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogQ2FwdHVyZSB0aGUgZXhjZXB0aW9uIHBhc3NlZCBieSBuZXh0anMgdG8gdGhlIGBfZXJyb3JgIHBhZ2UsIGFkZGluZyBjb250ZXh0IGRhdGEgYXMgYXBwcm9wcmlhdGUuXG4gKlxuICogQHBhcmFtIGNvbnRleHRPclByb3BzIFRoZSBkYXRhIHBhc3NlZCB0byBlaXRoZXIgYGdldEluaXRpYWxQcm9wc2Agb3IgYHJlbmRlcmAgYnkgbmV4dGpzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24oY29udGV4dE9yUHJvcHMpIHtcbiAgY29uc3QgeyByZXEsIHJlcywgZXJyIH0gPSBjb250ZXh0T3JQcm9wcztcblxuICAvLyA0MDRzIChhbmQgb3RoZXIgNDAwLXkgZnJpZW5kcykgY2FuIHRyaWdnZXIgYF9lcnJvcmAsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHNlbmQgdGhlbSB0byBTZW50cnlcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcz8uc3RhdHVzQ29kZSB8fCBjb250ZXh0T3JQcm9wcy5zdGF0dXNDb2RlO1xuICBpZiAoc3RhdHVzQ29kZSAmJiBzdGF0dXNDb2RlIDwgNTAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgLy8gSW4gcHJldmlvdXMgdmVyc2lvbnMgb2YgdGhlIHN1Z2dlc3RlZCBgX2Vycm9yLmpzYCBwYWdlIGluIHdoaWNoIHRoaXMgZnVuY3Rpb24gaXMgbWVhbnQgdG8gYmUgdXNlZCwgdGhlcmUgd2FzIGFcbiAgLy8gd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy84NTkyIHdoaWNoIGludm9sdmVkIGFuIGV4dHJhIGNhbGwgdG8gdGhpcyBmdW5jdGlvbiwgaW4gdGhlXG4gIC8vIGN1c3RvbSBlcnJvciBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QsIGp1c3QgaW4gY2FzZSBpdCBoYWRuJ3QgYmVlbiBjYWxsZWQgYnkgYGdldEluaXRpYWxQcm9wc2AuIE5vdyB0aGF0IHRoYXRcbiAgLy8gaXNzdWUgaGFzIGJlZW4gZml4ZWQsIHRoZSBzZWNvbmQgY2FsbCBpcyB1bm5lY2Vzc2FyeSwgYnV0IHNpbmNlIGl0IGxpdmVzIGluIHVzZXIgY29kZSByYXRoZXIgdGhhbiBvdXIgY29kZSwgdXNlcnNcbiAgLy8gaGF2ZSB0byBiZSB0aGUgb25lcyB0byBnZXQgcmlkIG9mIGl0LCBhbmQgZ3VhcmFuZXRlZWRseSwgbm90IGFsbCBvZiB0aGVtIHdpbGwuIFNvLCByYXRoZXIgdGhhbiBjYXB0dXJlIHRoZSBlcnJvclxuICAvLyB0d2ljZSwgd2UganVzdCBiYWlsIGlmIHdlIHNlbnNlIHdlJ3JlIGluIHRoYXQgbm93LWV4dHJhbmVvdXMgc2Vjb25kIGNhbGwuIChXZSBjYW4gdGVsbCB3aGljaCBmdW5jdGlvbiB3ZSdyZSBpblxuICAvLyBiZWNhdXNlIE5leHRqcyBwYXNzZXMgYHBhdGhuYW1lYCB0byBgZ2V0SW5pdGlhbFByb3BzYCBidXQgbm90IHRvIGByZW5kZXJgLilcbiAgaWYgKCFjb250ZXh0T3JQcm9wcy5wYXRobmFtZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGNvcmUud2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBpZiAocmVxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkUmVxdWVzdCA9IGNvcmUuaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKHJlcSk7XG4gICAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoeyBub3JtYWxpemVkUmVxdWVzdCB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlyZC1wYXJ0eSBsaWJyYXJpZXMgKG9yIHVzZXJzIHRoZW1zZWx2ZXMpIHRocm93IHNvbWV0aGluZyBmYWxzeSwgd2Ugd2FudCB0byBjYXB0dXJlIGl0IGFzIGEgbWVzc2FnZSAod2hpY2hcbiAgICAvLyBpcyB3aGF0IHBhc3NpbmcgYSBzdHJpbmcgdG8gYGNhcHR1cmVFeGNlcHRpb25gIHdpbGwgd2luZCB1cCBkb2luZylcbiAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyIHx8IGBfZXJyb3IuanMgY2FsbGVkIHdpdGggZmFsc3kgZXJyb3IgKCR7ZXJyfSlgLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLnVuZGVyc2NvcmVfZXJyb3InLFxuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGZ1bmN0aW9uOiAnX2Vycm9yLmdldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICBjb3JlLnZlcmNlbFdhaXRVbnRpbChyZXNwb25zZUVuZC5mbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xufVxuXG5leHBvcnRzLmNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24gPSBjYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Vycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js":
/*!***************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js ***!
  \***************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ../utils/addHeadersAsAttributes.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ../utils/tracingUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wrap the given API route handler with error nad performance monitoring.\n *\n * @param apiHandler The handler exported from the user's API page route file, which may or may not already be\n * wrapped with `withSentry`\n * @param parameterizedRoute The page's parameterized route.\n * @returns The wrapped handler which will always return a Promise.\n */\nfunction wrapApiHandlerWithSentry(apiHandler, parameterizedRoute) {\n  return new Proxy(apiHandler, {\n    apply: (\n      wrappingTarget,\n      thisArg,\n      args,\n    ) => {\n      tracingUtils.dropNextjsRootContext();\n      return tracingUtils.escapeNextjsTracing(() => {\n        const [req, res] = args;\n\n        if (!req) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a request object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        } else if (!res) {\n          core.debug.log(\n            `Wrapped API handler on route \"${parameterizedRoute}\" was not passed a response object. Will not instrument.`,\n          );\n          return wrappingTarget.apply(thisArg, args);\n        }\n\n        // Prevent double wrapping of the same request.\n        if (req.__withSentry_applied__) {\n          return wrappingTarget.apply(thisArg, args);\n        }\n        req.__withSentry_applied__ = true;\n\n        return core.withIsolationScope(isolationScope => {\n          // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n          // Else, we manually continueTrace from the incoming headers\n          const continueTraceIfNoActiveSpan = core.getActiveSpan()\n            ? (_opts, callback) => callback()\n            : core.continueTrace;\n\n          return continueTraceIfNoActiveSpan(\n            {\n              sentryTrace:\n                req.headers && core.isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined,\n              baggage: req.headers?.baggage,\n            },\n            () => {\n              const reqMethod = `${(req.method || 'GET').toUpperCase()} `;\n              const normalizedRequest = core.httpRequestToRequestData(req);\n\n              isolationScope.setSDKProcessingMetadata({ normalizedRequest });\n              isolationScope.setTransactionName(`${reqMethod}${parameterizedRoute}`);\n\n              return core.startSpanManual(\n                {\n                  name: `${reqMethod}${parameterizedRoute}`,\n                  op: 'http.server',\n                  forceTransaction: true,\n                  attributes: {\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.nextjs',\n                    ...addHeadersAsAttributes.addHeadersAsAttributes(normalizedRequest.headers || {}),\n                  },\n                },\n                async span => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  res.end = new Proxy(res.end, {\n                    apply(target, thisArg, argArray) {\n                      core.setHttpStatus(span, res.statusCode);\n                      span.end();\n                      core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                      return target.apply(thisArg, argArray);\n                    },\n                  });\n                  try {\n                    return await wrappingTarget.apply(thisArg, args);\n                  } catch (e) {\n                    // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n                    // store a seen flag on it. (Because of the one-way-on-Vercel-one-way-off-of-Vercel approach we've been forced\n                    // to take, it can happen that the same thrown object gets caught in two different ways, and flagging it is a\n                    // way to prevent it from actually being reported twice.)\n                    const objectifiedErr = core.objectify(e);\n\n                    core.captureException(objectifiedErr, {\n                      mechanism: {\n                        type: 'auto.http.nextjs.api_handler',\n                        handled: false,\n                        data: {\n                          wrapped_handler: wrappingTarget.name,\n                          function: 'withSentry',\n                        },\n                      },\n                    });\n\n                    core.setHttpStatus(span, 500);\n                    span.end();\n\n                    // we need to await the flush here to ensure that the error is captured\n                    // as the runtime freezes as soon as the error is thrown below\n                    await responseEnd.flushSafelyWithTimeout();\n\n                    // We rethrow here so that nextjs can do with the error whatever it would normally do. (Sometimes \"whatever it\n                    // would normally do\" is to allow the error to bubble up to the global handlers - another reason we need to mark\n                    // the error as already having been captured.)\n                    throw objectifiedErr;\n                  }\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry;\n//# sourceMappingURL=wrapApiHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js":
/*!**************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js ***!
  \**************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(\n  handler,\n  vercelCronsConfig,\n) {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args) => {\n      if (!args?.[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const [req] = args ;\n\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n\n      if (\n        !vercelCronsConfig || // do nothing if vercel crons config is missing\n        !userAgentHeader?.includes('vercel-cron') // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n\n      if (!vercelCron?.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const monitorSlug = vercelCron.path;\n\n      const checkInId = core.captureCheckIn(\n        {\n          monitorSlug,\n          status: 'in_progress',\n        },\n        {\n          maxRuntime: 60 * 12, // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n          schedule: {\n            type: 'crontab',\n            value: vercelCron.schedule,\n          },\n        },\n      );\n\n      const startTime = Date.now() / 1000;\n\n      const handleErrorCase = () => {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime,\n        });\n      };\n\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(\n          () => {\n            core.captureCheckIn({\n              checkInId,\n              monitorSlug,\n              status: 'ok',\n              duration: Date.now() / 1000 - startTime,\n            });\n          },\n          () => {\n            handleErrorCase();\n          },\n        );\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime,\n        });\n        return maybePromiseResult;\n      }\n    },\n  });\n}\n\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons;\n//# sourceMappingURL=wrapApiHandlerWithSentryVercelCrons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogV3JhcHMgYSBmdW5jdGlvbiB3aXRoIFNlbnRyeSBjcm9ucyBpbnN0cnVtZW50YXRpb24gYnkgYXV0b21hdGljYWxseSBzZW5kaW5nIGNoZWNrLWlucyBmb3IgdGhlIGdpdmVuIFZlcmNlbCBjcm9ucyBjb25maWcuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyhcbiAgaGFuZGxlcixcbiAgdmVyY2VsQ3JvbnNDb25maWcsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShoYW5kbGVyLCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhcHBseTogKG9yaWdpbmFsRnVuY3Rpb24sIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmICghYXJncz8uWzBdKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbcmVxXSA9IGFyZ3MgO1xuXG4gICAgICBsZXQgbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgY29uc3QgY3JvbnNLZXkgPSAnbmV4dFVybCcgaW4gcmVxID8gcmVxLm5leHRVcmwucGF0aG5hbWUgOiByZXEudXJsO1xuICAgICAgY29uc3QgdXNlckFnZW50SGVhZGVyID0gJ25leHRVcmwnIGluIHJlcSA/IHJlcS5oZWFkZXJzLmdldCgndXNlci1hZ2VudCcpIDogcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXTtcblxuICAgICAgaWYgKFxuICAgICAgICAhdmVyY2VsQ3JvbnNDb25maWcgfHwgLy8gZG8gbm90aGluZyBpZiB2ZXJjZWwgY3JvbnMgY29uZmlnIGlzIG1pc3NpbmdcbiAgICAgICAgIXVzZXJBZ2VudEhlYWRlcj8uaW5jbHVkZXMoJ3ZlcmNlbC1jcm9uJykgLy8gZG8gbm90aGluZyBpZiBlbmRwb2ludCBpcyBub3QgY2FsbGVkIGZyb20gdmVyY2VsIGNyb25zXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZlcmNlbENyb24gPSB2ZXJjZWxDcm9uc0NvbmZpZy5maW5kKHZlcmNlbENyb24gPT4gdmVyY2VsQ3Jvbi5wYXRoID09PSBjcm9uc0tleSk7XG5cbiAgICAgIGlmICghdmVyY2VsQ3Jvbj8ucGF0aCB8fCAhdmVyY2VsQ3Jvbi5zY2hlZHVsZSkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSB2ZXJjZWxDcm9uLnBhdGg7XG5cbiAgICAgIGNvbnN0IGNoZWNrSW5JZCA9IGNvcmUuY2FwdHVyZUNoZWNrSW4oXG4gICAgICAgIHtcbiAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBtYXhSdW50aW1lOiA2MCAqIDEyLCAvLyAobWludXRlcykgc28gMTIgaG91cnMgLSBqdXN0IGEgdmVyeSBoaWdoIGFyYml0cmFyeSBudW1iZXIgc2luY2Ugd2UgZG9uJ3Qga25vdyB0aGUgYWN0dWFsIGR1cmF0aW9uIG9mIHRoZSB1c2VycyBjcm9uIGpvYlxuICAgICAgICAgIHNjaGVkdWxlOiB7XG4gICAgICAgICAgICB0eXBlOiAnY3JvbnRhYicsXG4gICAgICAgICAgICB2YWx1ZTogdmVyY2VsQ3Jvbi5zY2hlZHVsZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKSAvIDEwMDA7XG5cbiAgICAgIGNvbnN0IGhhbmRsZUVycm9yQ2FzZSA9ICgpID0+IHtcbiAgICAgICAgY29yZS5jYXB0dXJlQ2hlY2tJbih7XG4gICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgbWF5YmVQcm9taXNlUmVzdWx0ID0gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbWF5YmVQcm9taXNlUmVzdWx0ID09PSAnb2JqZWN0JyAmJiBtYXliZVByb21pc2VSZXN1bHQgIT09IG51bGwgJiYgJ3RoZW4nIGluIG1heWJlUHJvbWlzZVJlc3VsdCkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlUmVzdWx0KS50aGVuKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvcmUuY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgICAgICBjaGVja0luSWQsXG4gICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdvaycsXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBEYXRlLm5vdygpIC8gMTAwMCAtIHN0YXJ0VGltZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBJdCBpcyB2ZXJ5IGltcG9ydGFudCB0aGF0IHdlIHJldHVybiB0aGUgb3JpZ2luYWwgcHJvbWlzZSBoZXJlLCBiZWNhdXNlIE5leHQuanMgYXR0YWNoZXMgdmFyaW91cyBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIHRvIHRoYXQgcHJvbWlzZSBhbmQgd2lsbCB0aHJvdyBpZiB0aGV5IGFyZSBub3Qgb24gdGhlIHJldHVybmVkIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29yZS5jYXB0dXJlQ2hlY2tJbih7XG4gICAgICAgICAgY2hlY2tJbklkLFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIHN0YXR1czogJ29rJyxcbiAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAvIDEwMDAgLSBzdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zID0gd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js":
/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context.ctx;\n\n      const errorWrappedAppGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!(appGetInitialProps ).pageProps) {\n            (appGetInitialProps ).pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (appGetInitialProps ).pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (appGetInitialProps ).pageProps._sentryBaggage = baggage;\n          }\n        }\n\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapAppGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLGtQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyw0UEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBhcHAgKFwiX2FwcC5qc1wiKS5cbiAqXG4gKiBAcGFyYW0gb3JpZ0FwcEdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdBcHBHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnQXBwR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQuY3R4O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcblxuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6ICcvX2FwcCcsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LmN0eC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGFwcEdldEluaXRpYWxQcm9wcyxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICB9XG5cbiA9IGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblxuICAgICAgICBpZiAodHlwZW9mIGFwcEdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgYXBwR2V0SW5pdGlhbFByb3BzICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gUGVyIGRlZmluaXRpb24sIGBwYWdlUHJvcHNgIGlzIG5vdCBvcHRpb25hbCwgaG93ZXZlciBhbiBpbmNyZWFzZWQgYW1vdW50IG9mIHVzZXJzIGRvZXNuJ3Qgc2VlbSB0byBjYWxsXG4gICAgICAgICAgLy8gYEFwcC5nZXRJbml0aWFsUHJvcHMoYXBwQ29udGV4dClgIGluIHRoZWlyIGN1c3RvbSBgX2FwcGAgcGFnZXMgd2hpY2ggaXMgcmVxdWlyZWQgYXMgcGVyXG4gICAgICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYWR2YW5jZWQtZmVhdHVyZXMvY3VzdG9tLWFwcCAtIHJlc3VsdGluZyBpbiBtaXNzaW5nIGBwYWdlUHJvcHNgLlxuICAgICAgICAgIC8vIEZvciB0aGlzIHJlYXNvbiwgd2UganVzdCBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYHBhZ2VQcm9wc2AgZG9lc24ndCBleGlzdCBleHBsaWNpdGx5LlxuICAgICAgICAgIGlmICghKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcykge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcyA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcy5fc2VudHJ5QmFnZ2FnZSA9IGJhZ2dhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwcEdldEluaXRpYWxQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js":
/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapDocumentGetInitialPropsWithSentry(\n  origDocumentGetInitialProps,\n) {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const { data } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapDocumentGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsa1BBQXFCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLDRQQUEwQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVCxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSw2Q0FBNkM7QUFDN0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZG9jdW1lbnQgKFwiX2RvY3VtZW50LmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fZG9jdW1lbnQnLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js":
/*!*************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js ***!
  \*************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapErrorGetInitialPropsWithSentry(\n  origErrorGetInitialProps,\n) {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            (errorGetInitialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (errorGetInitialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapErrorGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsa1BBQXFCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLDRQQUEwQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwwQ0FBMEM7QUFDMUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZXJyb3IgcGFnZSAoXCJfZXJyb3IuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdFcnJvckdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19lcnJvcicsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogZXJyb3JHZXRJbml0aWFsUHJvcHMsXG4gICAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgfVxuXG4gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvckdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgZXJyb3JHZXRJbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JHZXRJbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js":
/*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js ***!
  \********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetInitialPropsWithSentry(origGetInitialProps) {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = (await tracedGetInitialProps.apply(thisArg, args)) ?? {}; // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (initialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (initialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry;\n//# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLGtQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyw0UEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2REFBNkQ7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSxxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogaW5pdGlhbFByb3BzLFxuICAgICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgIH1cblxuID0gKGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKSkgPz8ge307IC8vIE5leHQuanMgYWxsb3dzIHVuZGVmaW5lZCB0byBiZSByZXR1cm5lZCBmcm9tIGEgZ2V0SW5pdGlhbFByb3BzRnVuY3Rpb24uXG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGluaXRpYWxQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChpbml0aWFsUHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgICAoaW5pdGlhbFByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js":
/*!***********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js ***!
  \***********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps,\n  parameterizedRoute,\n) {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }\n\n = await (tracedGetServerSideProps.apply(thisArg, args) );\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props )._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props )._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry;\n//# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGdCQUFnQixtQkFBTyxDQUFDLGtQQUFxQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyw0UEFBMEI7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxXQUFXOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsd0NBQXdDO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMgVGhlIHVzZXIncyBgZ2V0U2VydmVyU2lkZVByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0dldFNlcnZlclNpZGVQcm9wcyxcbiAgcGFyYW1ldGVyaXplZFJvdXRlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldFNlcnZlclNpZGVQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIGNvbnN0IHRyYWNlZEdldFNlcnZlclNpZGVQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldFNlcnZlclNpZGVQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6IHBhcmFtZXRlcml6ZWRSb3V0ZSxcbiAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBwYXJhbWV0ZXJpemVkUm91dGUsXG4gICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRTZXJ2ZXJTaWRlUHJvcHMnLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YTogc2VydmVyU2lkZVByb3BzLFxuICAgICAgICBiYWdnYWdlLFxuICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgIH1cblxuID0gYXdhaXQgKHRyYWNlZEdldFNlcnZlclNpZGVQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKSApO1xuXG4gICAgICBpZiAodHlwZW9mIHNlcnZlclNpZGVQcm9wcyA9PT0gJ29iamVjdCcgJiYgc2VydmVyU2lkZVByb3BzICE9PSBudWxsICYmICdwcm9wcycgaW4gc2VydmVyU2lkZVByb3BzKSB7XG4gICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgKHNlcnZlclNpZGVQcm9wcy5wcm9wcyApLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAoc2VydmVyU2lkZVByb3BzLnByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJ2ZXJTaWRlUHJvcHM7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkgPSB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js":
/*!*******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js ***!
  \*******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetStaticPropsWithSentry(\n  origGetStaticPropsa,\n  _parameterizedRoute,\n) {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const errorWrappedGetStaticProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      return wrapperUtils.callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    },\n  });\n}\n\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry;\n//# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsa1BBQXFCO0FBQzdDLHFCQUFxQixtQkFBTyxDQUFDLDRQQUEwQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldFN0YXRpY1Byb3BzYCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBvcmlnR2V0U3RhdGljUHJvcHMgVGhlIHVzZXIncyBgZ2V0U3RhdGljUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdHZXRTdGF0aWNQcm9wc2EsXG4gIF9wYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0U3RhdGljUHJvcHNhLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0U3RhdGljUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIHJldHVybiB3cmFwcGVyVXRpbHMuY2FsbERhdGFGZXRjaGVyVHJhY2VkKGVycm9yV3JhcHBlZEdldFN0YXRpY1Byb3BzLCBhcmdzKTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js":
/*!******************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js ***!
  \******************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction isReactClassComponent(target) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && target?.prototype?.isReactComponent;\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nfunction wrapPageComponentWithSentry(pageComponent) {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n       render(...args) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData =\n            typeof this.props === 'object' &&\n            this.props !== null &&\n            '_sentryTraceData' in this.props &&\n            typeof this.props._sentryTraceData === 'string'\n              ? this.props._sentryTraceData\n              : undefined;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return super.render(...args);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n                type: 'auto.function.nextjs.page_class',\n              },\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = argArray?.[0]?._sentryTraceData;\n\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false,\n                type: 'auto.function.nextjs.page_function',\n              },\n            });\n            throw e;\n          }\n        });\n      },\n    });\n  } else {\n    return pageComponent;\n  }\n}\n\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry;\n//# sourceMappingURL=wrapPageComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuZnVuY3Rpb24gaXNSZWFjdENsYXNzQ29tcG9uZW50KHRhcmdldCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nICYmIHRhcmdldD8ucHJvdG90eXBlPy5pc1JlYWN0Q29tcG9uZW50O1xufVxuXG4vKipcbiAqIFdyYXBzIGEgcGFnZSBjb21wb25lbnQgd2l0aCBTZW50cnkgZXJyb3IgaW5zdHJ1bWVudGF0aW9uLlxuICovXG5mdW5jdGlvbiB3cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkocGFnZUNvbXBvbmVudCkge1xuICBpZiAoaXNSZWFjdENsYXNzQ29tcG9uZW50KHBhZ2VDb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIGNsYXNzIFNlbnRyeVdyYXBwZWRQYWdlQ29tcG9uZW50IGV4dGVuZHMgcGFnZUNvbXBvbmVudCB7XG4gICAgICAgcmVuZGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2VudHJ5IHRyYWNlIGRhdGEgdGhhdCBpcyBwdXQgaW4gdGhlIGNvbXBvbmVudCBwcm9wcyBieSBkYXRhZmV0Y2hlciB3cmFwcGVyc1xuICAgICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlRGF0YSA9XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIHRoaXMucHJvcHMgIT09IG51bGwgJiZcbiAgICAgICAgICAgICdfc2VudHJ5VHJhY2VEYXRhJyBpbiB0aGlzLnByb3BzICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcy5fc2VudHJ5VHJhY2VEYXRhID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuX3NlbnRyeVRyYWNlRGF0YVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChzZW50cnlUcmFjZURhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNlcGFyZW50RGF0YSA9IGNvcmUuZXh0cmFjdFRyYWNlcGFyZW50RGF0YShzZW50cnlUcmFjZURhdGEpO1xuICAgICAgICAgICAgc2NvcGUuc2V0Q29udGV4dCgndHJhY2UnLCB7XG4gICAgICAgICAgICAgIHNwYW5faWQ6IHRyYWNlcGFyZW50RGF0YT8ucGFyZW50U3BhbklkLFxuICAgICAgICAgICAgICB0cmFjZV9pZDogdHJhY2VwYXJlbnREYXRhPy50cmFjZUlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5yZW5kZXIoLi4uYXJncyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUsIHtcbiAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLnBhZ2VfY2xhc3MnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGFnZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgUHJveHkocGFnZUNvbXBvbmVudCwge1xuICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjb3BlID0gY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgICAgICAvLyBXZSBleHRyYWN0IHRoZSBzZW50cnkgdHJhY2UgZGF0YSB0aGF0IGlzIHB1dCBpbiB0aGUgY29tcG9uZW50IHByb3BzIGJ5IGRhdGFmZXRjaGVyIHdyYXBwZXJzXG4gICAgICAgICAgY29uc3Qgc2VudHJ5VHJhY2VEYXRhID0gYXJnQXJyYXk/LlswXT8uX3NlbnRyeVRyYWNlRGF0YTtcblxuICAgICAgICAgIGlmIChzZW50cnlUcmFjZURhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNlcGFyZW50RGF0YSA9IGNvcmUuZXh0cmFjdFRyYWNlcGFyZW50RGF0YShzZW50cnlUcmFjZURhdGEpO1xuICAgICAgICAgICAgc2NvcGUuc2V0Q29udGV4dCgndHJhY2UnLCB7XG4gICAgICAgICAgICAgIHNwYW5faWQ6IHRyYWNlcGFyZW50RGF0YT8ucGFyZW50U3BhbklkLFxuICAgICAgICAgICAgICB0cmFjZV9pZDogdHJhY2VwYXJlbnREYXRhPy50cmFjZUlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJnQXJyYXkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlLCB7XG4gICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy5wYWdlX2Z1bmN0aW9uJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFnZUNvbXBvbmVudDtcbiAgfVxufVxuXG5leHBvcnRzLndyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeSA9IHdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nconst TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\n\nconst TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\n\nconst TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\n\nexports.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL;\nexports.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL;\nexports.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION;\n//# sourceMappingURL=span-attributes-with-logic-attached.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9zcGFuLWF0dHJpYnV0ZXMtd2l0aC1sb2dpYy1hdHRhY2hlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSw4Q0FBOEM7QUFDOUMsOENBQThDO0FBQzlDLGdEQUFnRDtBQUNoRCIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3NwYW4tYXR0cmlidXRlcy13aXRoLWxvZ2ljLWF0dGFjaGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIElmIHRoaXMgYXR0cmlidXRlIGlzIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24sIHRoZSBOZXh0LmpzIFNESyB3aWxsIGRyb3AgdGhhdCB0cmFuc2FjdGlvbi5cbiAqL1xuY29uc3QgVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiA9ICdzZW50cnkuZHJvcF90cmFuc2FjdGlvbic7XG5cbmNvbnN0IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gJ3NlbnRyeS5zZW50cnlfdHJhY2VfYmFja2ZpbGwnO1xuXG5jb25zdCBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCA9ICdzZW50cnkucm91dGVfYmFja2ZpbGwnO1xuXG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfUk9VVEVfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04gPSBUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Extracts HTTP request headers as span attributes and optionally applies them to a span.\n */\nfunction addHeadersAsAttributes(\n  headers,\n  span,\n) {\n  if (!headers) {\n    return {};\n  }\n\n  const client = core.getClient();\n  const sendDefaultPii = client?.getOptions().sendDefaultPii ?? false;\n\n  const headersDict =\n    headers instanceof Headers || (typeof headers === 'object' && 'get' in headers)\n      ? core.winterCGHeadersToDict(headers )\n      : headers;\n\n  const headerAttributes = core.httpHeadersToSpanAttributes(headersDict, sendDefaultPii);\n\n  if (span) {\n    span.setAttributes(headerAttributes);\n  }\n\n  return headerAttributes;\n}\n\nexports.addHeadersAsAttributes = addHeadersAsAttributes;\n//# sourceMappingURL=addHeadersAsAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogRXh0cmFjdHMgSFRUUCByZXF1ZXN0IGhlYWRlcnMgYXMgc3BhbiBhdHRyaWJ1dGVzIGFuZCBvcHRpb25hbGx5IGFwcGxpZXMgdGhlbSB0byBhIHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMoXG4gIGhlYWRlcnMsXG4gIHNwYW4sXG4pIHtcbiAgaWYgKCFoZWFkZXJzKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgY29uc3Qgc2VuZERlZmF1bHRQaWkgPSBjbGllbnQ/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaSA/PyBmYWxzZTtcblxuICBjb25zdCBoZWFkZXJzRGljdCA9XG4gICAgaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMgfHwgKHR5cGVvZiBoZWFkZXJzID09PSAnb2JqZWN0JyAmJiAnZ2V0JyBpbiBoZWFkZXJzKVxuICAgICAgPyBjb3JlLndpbnRlckNHSGVhZGVyc1RvRGljdChoZWFkZXJzIClcbiAgICAgIDogaGVhZGVycztcblxuICBjb25zdCBoZWFkZXJBdHRyaWJ1dGVzID0gY29yZS5odHRwSGVhZGVyc1RvU3BhbkF0dHJpYnV0ZXMoaGVhZGVyc0RpY3QsIHNlbmREZWZhdWx0UGlpKTtcblxuICBpZiAoc3Bhbikge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlcyhoZWFkZXJBdHRyaWJ1dGVzKTtcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJBdHRyaWJ1dGVzO1xufVxuXG5leHBvcnRzLmFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMgPSBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkSGVhZGVyc0FzQXR0cmlidXRlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst constants = __webpack_require__(/*! next/constants */ \"(ssr)/../../node_modules/.pnpm/next@15.5.4_@babel+core@7.28.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/api/constants.js\");\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nfunction isBuild() {\n  return process.env.NEXT_PHASE === constants.PHASE_PRODUCTION_BUILD;\n}\n\nexports.isBuild = isBuild;\n//# sourceMappingURL=isBuild.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9pc0J1aWxkLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGtCQUFrQixtQkFBTyxDQUFDLGtNQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL2lzQnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJ25leHQvY29uc3RhbnRzJyk7XG5cbi8qKlxuICogRGVjaWRlIGlmIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzIGlzIHBhcnQgb2YgdGhlIGJ1aWxkIHBoYXNlIG9yIGhhcHBlbmluZyBhdCBydW50aW1lLlxuICovXG5mdW5jdGlvbiBpc0J1aWxkKCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuTkVYVF9QSEFTRSA9PT0gY29uc3RhbnRzLlBIQVNFX1BST0RVQ1RJT05fQlVJTEQ7XG59XG5cbmV4cG9ydHMuaXNCdWlsZCA9IGlzQnVpbGQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0J1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nasync function flushSafelyWithTimeout() {\n  try {\n    debugBuild.DEBUG_BUILD && core.debug.log('Flushing events...');\n    await core.flush(2000);\n    debugBuild.DEBUG_BUILD && core.debug.log('Done flushing events');\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.debug.log('Error while flushing events:\\n', e);\n  }\n}\n\nexports.flushSafelyWithTimeout = flushSafelyWithTimeout;\n//# sourceMappingURL=responseEnd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9yZXNwb25zZUVuZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsOE9BQW1COztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9yZXNwb25zZUVuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbi8qKlxuICogRmx1c2hlcyBwZW5kaW5nIFNlbnRyeSBldmVudHMgd2l0aCBhIDIgc2Vjb25kIHRpbWVvdXQgYW5kIGluIGEgd2F5IHRoYXQgY2Fubm90IGNyZWF0ZSB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zLlxuICovXG5hc3luYyBmdW5jdGlvbiBmbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkge1xuICB0cnkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ0ZsdXNoaW5nIGV2ZW50cy4uLicpO1xuICAgIGF3YWl0IGNvcmUuZmx1c2goMjAwMCk7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZygnRG9uZSBmbHVzaGluZyBldmVudHMnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ0Vycm9yIHdoaWxlIGZsdXNoaW5nIGV2ZW50czpcXG4nLCBlKTtcbiAgfVxufVxuXG5leHBvcnRzLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQgPSBmbHVzaFNhZmVseVdpdGhUaW1lb3V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VFbmQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\nconst commonPropagationContextMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nfunction commonObjectToPropagationContext(\n  commonObject,\n  propagationContext,\n) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\n\nconst commonIsolationScopeMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nfunction commonObjectToIsolationScope(commonObject) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new core.Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new core.Scope();\n  }\n}\n\nlet nextjsEscapedAsyncStorage;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nfunction escapeNextjsTracing(cb) {\n  const MaybeGlobalAsyncLocalStorage = (core.GLOBAL_OBJ )\n    .AsyncLocalStorage;\n\n  if (!MaybeGlobalAsyncLocalStorage) {\n    debugBuild.DEBUG_BUILD &&\n      core.debug.warn(\n        \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n      );\n    return cb();\n  }\n\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return core.startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nfunction dropNextjsRootContext() {\n  const nextJsOwnedSpan = core.getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = core.getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n    if (rootSpanAttributes?.['next.span_type']) {\n      core.getRootSpan(nextJsOwnedSpan)?.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true);\n    }\n  }\n}\n\nexports.commonObjectToIsolationScope = commonObjectToIsolationScope;\nexports.commonObjectToPropagationContext = commonObjectToPropagationContext;\nexports.dropNextjsRootContext = dropNextjsRootContext;\nexports.escapeNextjsTracing = escapeNextjsTracing;\n//# sourceMappingURL=tracingUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy90cmFjaW5nVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDhPQUFtQjtBQUM5Qyx3Q0FBd0MsbUJBQU8sQ0FBQyw4UkFBMkM7O0FBRTNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQyx3Q0FBd0M7QUFDeEMsNkJBQTZCO0FBQzdCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL3RyYWNpbmdVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBzcGFuQXR0cmlidXRlc1dpdGhMb2dpY0F0dGFjaGVkID0gcmVxdWlyZSgnLi4vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMnKTtcblxuY29uc3QgY29tbW9uUHJvcGFnYXRpb25Db250ZXh0TWFwID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBUYWtlcyBhIHNoYXJlZCAoZ2FyYmFnZSBjb2xsZWN0YWJsZSkgb2JqZWN0IGJldHdlZW4gcmVzb3VyY2VzLCBlLmcuIGEgaGVhZGVycyBvYmplY3Qgc2hhcmVkIGJldHdlZW4gTmV4dC5qcyBzZXJ2ZXIgY29tcG9uZW50cyBhbmQgcmV0dXJucyBhIGNvbW1vbiBwcm9wYWdhdGlvbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSBjb21tb25PYmplY3QgVGhlIHNoYXJlZCBvYmplY3QuXG4gKiBAcGFyYW0gcHJvcGFnYXRpb25Db250ZXh0IFRoZSBwcm9wYWdhdGlvbiBjb250ZXh0IHRoYXQgc2hvdWxkIGJlIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGUgcmVzb3VyY2VzIGlmIG5vIHByb3BhZ2F0aW9uIGNvbnRleHQgd2FzIHJlZ2lzdGVyZWQgeWV0LlxuICogQHJldHVybnMgdGhlIHNoYXJlZCBwcm9wYWdhdGlvbiBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBjb21tb25PYmplY3RUb1Byb3BhZ2F0aW9uQ29udGV4dChcbiAgY29tbW9uT2JqZWN0LFxuICBwcm9wYWdhdGlvbkNvbnRleHQsXG4pIHtcbiAgaWYgKHR5cGVvZiBjb21tb25PYmplY3QgPT09ICdvYmplY3QnICYmIGNvbW1vbk9iamVjdCkge1xuICAgIGNvbnN0IG1lbW9Qcm9wYWdhdGlvbkNvbnRleHQgPSBjb21tb25Qcm9wYWdhdGlvbkNvbnRleHRNYXAuZ2V0KGNvbW1vbk9iamVjdCk7XG4gICAgaWYgKG1lbW9Qcm9wYWdhdGlvbkNvbnRleHQpIHtcbiAgICAgIHJldHVybiBtZW1vUHJvcGFnYXRpb25Db250ZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21tb25Qcm9wYWdhdGlvbkNvbnRleHRNYXAuc2V0KGNvbW1vbk9iamVjdCwgcHJvcGFnYXRpb25Db250ZXh0KTtcbiAgICAgIHJldHVybiBwcm9wYWdhdGlvbkNvbnRleHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcm9wYWdhdGlvbkNvbnRleHQ7XG4gIH1cbn1cblxuY29uc3QgY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFRha2VzIGEgc2hhcmVkIChnYXJiYWdlIGNvbGxlY3RhYmxlKSBvYmplY3QgYmV0d2VlbiByZXNvdXJjZXMsIGUuZy4gYSBoZWFkZXJzIG9iamVjdCBzaGFyZWQgYmV0d2VlbiBOZXh0LmpzIHNlcnZlciBjb21wb25lbnRzIGFuZCByZXR1cm5zIGEgY29tbW9uIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGNvbW1vbk9iamVjdCBUaGUgc2hhcmVkIG9iamVjdC5cbiAqIEBwYXJhbSBpc29sYXRpb25TY29wZSBUaGUgaXNvbGF0aW9uU2NvcGUgdGhhdCBzaG91bGQgYmUgc2hhcmVkIGJldHdlZW4gYWxsIHRoZSByZXNvdXJjZXMgaWYgbm8gaXNvbGF0aW9uIHNjb3BlIHdhcyBjcmVhdGVkIHlldC5cbiAqIEByZXR1cm5zIHRoZSBzaGFyZWQgaXNvbGF0aW9uIHNjb3BlLlxuICovXG5mdW5jdGlvbiBjb21tb25PYmplY3RUb0lzb2xhdGlvblNjb3BlKGNvbW1vbk9iamVjdCkge1xuICBpZiAodHlwZW9mIGNvbW1vbk9iamVjdCA9PT0gJ29iamVjdCcgJiYgY29tbW9uT2JqZWN0KSB7XG4gICAgY29uc3QgbWVtb0lzb2xhdGlvblNjb3BlID0gY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAuZ2V0KGNvbW1vbk9iamVjdCk7XG4gICAgaWYgKG1lbW9Jc29sYXRpb25TY29wZSkge1xuICAgICAgcmV0dXJuIG1lbW9Jc29sYXRpb25TY29wZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmV3SXNvbGF0aW9uU2NvcGUgPSBuZXcgY29yZS5TY29wZSgpO1xuICAgICAgY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAuc2V0KGNvbW1vbk9iamVjdCwgbmV3SXNvbGF0aW9uU2NvcGUpO1xuICAgICAgcmV0dXJuIG5ld0lzb2xhdGlvblNjb3BlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IGNvcmUuU2NvcGUoKTtcbiAgfVxufVxuXG5sZXQgbmV4dGpzRXNjYXBlZEFzeW5jU3RvcmFnZTtcblxuLyoqXG4gKiBXaWxsIG1hcmsgdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9mIHRoZSBjYWxsYmFjayBhcyBcImVzY2FwZWRcIiBmcm9tIE5leHQuanMgaW50ZXJuYWwgdHJhY2luZyBieSB1bnNldHRpbmcgdGhlIGFjdGl2ZVxuICogc3BhbiBhbmQgcHJvcGFnYXRpb24gY29udGV4dC4gV2hlbiBhbiBleGVjdXRpb24gcGFzc2VzIHRocm91Z2ggdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcywgaXQgaXMgYSBub29wIGFmdGVyIHRoZVxuICogZmlyc3QgdGltZS5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlTmV4dGpzVHJhY2luZyhjYikge1xuICBjb25zdCBNYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlID0gKGNvcmUuR0xPQkFMX09CSiApXG4gICAgLkFzeW5jTG9jYWxTdG9yYWdlO1xuXG4gIGlmICghTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgIGNvcmUuZGVidWcud2FybihcbiAgICAgICAgXCJUcmllZCB0byByZWdpc3RlciBBc3luY0xvY2FsU3RvcmFnZSBhc3luYyBjb250ZXh0IHN0cmF0ZWd5IGluIGEgcnVudGltZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBBc3luY0xvY2FsU3RvcmFnZS5cIixcbiAgICAgICk7XG4gICAgcmV0dXJuIGNiKCk7XG4gIH1cblxuICBpZiAoIW5leHRqc0VzY2FwZWRBc3luY1N0b3JhZ2UpIHtcbiAgICBuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlID0gbmV3IE1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgfVxuXG4gIGlmIChuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlLmdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY2IoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29yZS5zdGFydE5ld1RyYWNlKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlLnJ1bih0cnVlLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJZGVhbGx5IHRoaXMgZnVuY3Rpb24gbmV2ZXIgbGFuZHMgaW4gdGhlIGRldmVsb3AgYnJhbmNoLlxuICpcbiAqIERyb3BzIHRoZSBlbnRpcmUgc3BhbiB0cmVlIHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZCBpbiwgaWYgaXQgd2FzIGEgc3BhbiB0cmVlIGNyZWF0ZWQgYnkgTmV4dC5qcy5cbiAqL1xuZnVuY3Rpb24gZHJvcE5leHRqc1Jvb3RDb250ZXh0KCkge1xuICBjb25zdCBuZXh0SnNPd25lZFNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW4oKTtcbiAgaWYgKG5leHRKc093bmVkU3Bhbikge1xuICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihuZXh0SnNPd25lZFNwYW4pO1xuICAgIGNvbnN0IHJvb3RTcGFuQXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihyb290U3BhbikuZGF0YTtcbiAgICBpZiAocm9vdFNwYW5BdHRyaWJ1dGVzPy5bJ25leHQuc3Bhbl90eXBlJ10pIHtcbiAgICAgIGNvcmUuZ2V0Um9vdFNwYW4obmV4dEpzT3duZWRTcGFuKT8uc2V0QXR0cmlidXRlKHNwYW5BdHRyaWJ1dGVzV2l0aExvZ2ljQXR0YWNoZWQuVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiwgdHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuY29tbW9uT2JqZWN0VG9Jc29sYXRpb25TY29wZSA9IGNvbW1vbk9iamVjdFRvSXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLmNvbW1vbk9iamVjdFRvUHJvcGFnYXRpb25Db250ZXh0ID0gY29tbW9uT2JqZWN0VG9Qcm9wYWdhdGlvbkNvbnRleHQ7XG5leHBvcnRzLmRyb3BOZXh0anNSb290Q29udGV4dCA9IGRyb3BOZXh0anNSb290Q29udGV4dDtcbmV4cG9ydHMuZXNjYXBlTmV4dGpzVHJhY2luZyA9IGVzY2FwZU5leHRqc1RyYWNpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nVXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst HeaderKeys = {\n  FORWARDED_PROTO: 'x-forwarded-proto',\n  FORWARDED_HOST: 'x-forwarded-host',\n  HOST: 'host',\n  REFERER: 'referer',\n} ;\n\n/**\n * Replaces route parameters in a path template with their values\n * @param path - The path template containing parameters in [paramName] format\n * @param params - Optional route parameters to replace in the template\n * @returns The path with parameters replaced\n */\nfunction substituteRouteParams(path, params) {\n  if (!params || typeof params !== 'object') return path;\n\n  let resultPath = path;\n  for (const [key, value] of Object.entries(params)) {\n    resultPath = resultPath.split(`[${key}]`).join(encodeURIComponent(value));\n  }\n  return resultPath;\n}\n\n/**\n * Normalizes a path by removing route groups\n * @param path - The path to normalize\n * @returns The normalized path\n */\nfunction sanitizeRoutePath(path) {\n  const cleanedSegments = path\n    .split('/')\n    .filter(segment => segment && !(segment.startsWith('(') && segment.endsWith(')')));\n\n  return cleanedSegments.length > 0 ? `/${cleanedSegments.join('/')}` : '/';\n}\n\n/**\n * Constructs a full URL from the component route, parameters, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol and host information\n * @param pathname - Optional pathname coming from parent span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction buildUrlFromComponentRoute(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const parameterizedPath = substituteRouteParams(componentRoute, params);\n  // If available, the pathname from the http.target of the HTTP request server span takes precedence over the parameterized path.\n  // Spans such as generateMetadata and Server Component rendering are typically direct children of that span.\n  const path = pathname ?? sanitizeRoutePath(parameterizedPath);\n\n  const protocol = headersDict?.[HeaderKeys.FORWARDED_PROTO];\n  const host = headersDict?.[HeaderKeys.FORWARDED_HOST] || headersDict?.[HeaderKeys.HOST];\n\n  if (!protocol || !host) {\n    return path;\n  }\n\n  const fullUrl = `${protocol}://${host}${path}`;\n\n  const urlObject = core.parseStringToURLObject(fullUrl);\n  if (!urlObject) {\n    return path;\n  }\n\n  return core.getSanitizedUrlStringFromUrlObject(urlObject);\n}\n\n/**\n * Returns a sanitized URL string from the referer header if it exists and is valid.\n *\n * @param headersDict - Optional headers containing the referer\n * @returns A sanitized URL string or undefined if referer is missing/invalid\n */\nfunction extractSanitizedUrlFromRefererHeader(headersDict) {\n  const referer = headersDict?.[HeaderKeys.REFERER];\n  if (!referer) {\n    return undefined;\n  }\n\n  try {\n    const refererUrl = new URL(referer);\n    return core.getSanitizedUrlStringFromUrlObject(refererUrl);\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Returns a sanitized URL string using the referer header if available,\n * otherwise constructs the URL from the component route, params, and headers.\n *\n * @param componentRoute - The route template to construct the URL from\n * @param params - Optional route parameters to replace in the template\n * @param headersDict - Optional headers containing protocol, host, and referer\n * @param pathname - Optional pathname coming from root span \"http.target\"\n * @returns A sanitized URL string\n */\nfunction getSanitizedRequestUrl(\n  componentRoute,\n  params,\n  headersDict,\n  pathname,\n) {\n  const refererUrl = extractSanitizedUrlFromRefererHeader(headersDict);\n  if (refererUrl) {\n    return refererUrl;\n  }\n\n  return buildUrlFromComponentRoute(componentRoute, params, headersDict, pathname);\n}\n\nexports.buildUrlFromComponentRoute = buildUrlFromComponentRoute;\nexports.extractSanitizedUrlFromRefererHeader = extractSanitizedUrlFromRefererHeader;\nexports.getSanitizedRequestUrl = getSanitizedRequestUrl;\nexports.sanitizeRoutePath = sanitizeRoutePath;\nexports.substituteRouteParams = substituteRouteParams;\n//# sourceMappingURL=urls.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy91cmxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQyxJQUFJO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLDBCQUEwQjtBQUNwRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsU0FBUyxLQUFLLEtBQUssRUFBRSxLQUFLOztBQUUvQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDLDRDQUE0QztBQUM1Qyw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL3VybHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSGVhZGVyS2V5cyA9IHtcbiAgRk9SV0FSREVEX1BST1RPOiAneC1mb3J3YXJkZWQtcHJvdG8nLFxuICBGT1JXQVJERURfSE9TVDogJ3gtZm9yd2FyZGVkLWhvc3QnLFxuICBIT1NUOiAnaG9zdCcsXG4gIFJFRkVSRVI6ICdyZWZlcmVyJyxcbn0gO1xuXG4vKipcbiAqIFJlcGxhY2VzIHJvdXRlIHBhcmFtZXRlcnMgaW4gYSBwYXRoIHRlbXBsYXRlIHdpdGggdGhlaXIgdmFsdWVzXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIHRlbXBsYXRlIGNvbnRhaW5pbmcgcGFyYW1ldGVycyBpbiBbcGFyYW1OYW1lXSBmb3JtYXRcbiAqIEBwYXJhbSBwYXJhbXMgLSBPcHRpb25hbCByb3V0ZSBwYXJhbWV0ZXJzIHRvIHJlcGxhY2UgaW4gdGhlIHRlbXBsYXRlXG4gKiBAcmV0dXJucyBUaGUgcGF0aCB3aXRoIHBhcmFtZXRlcnMgcmVwbGFjZWRcbiAqL1xuZnVuY3Rpb24gc3Vic3RpdHV0ZVJvdXRlUGFyYW1zKHBhdGgsIHBhcmFtcykge1xuICBpZiAoIXBhcmFtcyB8fCB0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0JykgcmV0dXJuIHBhdGg7XG5cbiAgbGV0IHJlc3VsdFBhdGggPSBwYXRoO1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcmVzdWx0UGF0aCA9IHJlc3VsdFBhdGguc3BsaXQoYFske2tleX1dYCkuam9pbihlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0UGF0aDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIGEgcGF0aCBieSByZW1vdmluZyByb3V0ZSBncm91cHNcbiAqIEBwYXJhbSBwYXRoIC0gVGhlIHBhdGggdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyBUaGUgbm9ybWFsaXplZCBwYXRoXG4gKi9cbmZ1bmN0aW9uIHNhbml0aXplUm91dGVQYXRoKHBhdGgpIHtcbiAgY29uc3QgY2xlYW5lZFNlZ21lbnRzID0gcGF0aFxuICAgIC5zcGxpdCgnLycpXG4gICAgLmZpbHRlcihzZWdtZW50ID0+IHNlZ21lbnQgJiYgIShzZWdtZW50LnN0YXJ0c1dpdGgoJygnKSAmJiBzZWdtZW50LmVuZHNXaXRoKCcpJykpKTtcblxuICByZXR1cm4gY2xlYW5lZFNlZ21lbnRzLmxlbmd0aCA+IDAgPyBgLyR7Y2xlYW5lZFNlZ21lbnRzLmpvaW4oJy8nKX1gIDogJy8nO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBmdWxsIFVSTCBmcm9tIHRoZSBjb21wb25lbnQgcm91dGUsIHBhcmFtZXRlcnMsIGFuZCBoZWFkZXJzLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRSb3V0ZSAtIFRoZSByb3V0ZSB0ZW1wbGF0ZSB0byBjb25zdHJ1Y3QgdGhlIFVSTCBmcm9tXG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyB0byByZXBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICogQHBhcmFtIGhlYWRlcnNEaWN0IC0gT3B0aW9uYWwgaGVhZGVycyBjb250YWluaW5nIHByb3RvY29sIGFuZCBob3N0IGluZm9ybWF0aW9uXG4gKiBAcGFyYW0gcGF0aG5hbWUgLSBPcHRpb25hbCBwYXRobmFtZSBjb21pbmcgZnJvbSBwYXJlbnQgc3BhbiBcImh0dHAudGFyZ2V0XCJcbiAqIEByZXR1cm5zIEEgc2FuaXRpemVkIFVSTCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gYnVpbGRVcmxGcm9tQ29tcG9uZW50Um91dGUoXG4gIGNvbXBvbmVudFJvdXRlLFxuICBwYXJhbXMsXG4gIGhlYWRlcnNEaWN0LFxuICBwYXRobmFtZSxcbikge1xuICBjb25zdCBwYXJhbWV0ZXJpemVkUGF0aCA9IHN1YnN0aXR1dGVSb3V0ZVBhcmFtcyhjb21wb25lbnRSb3V0ZSwgcGFyYW1zKTtcbiAgLy8gSWYgYXZhaWxhYmxlLCB0aGUgcGF0aG5hbWUgZnJvbSB0aGUgaHR0cC50YXJnZXQgb2YgdGhlIEhUVFAgcmVxdWVzdCBzZXJ2ZXIgc3BhbiB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIHBhcmFtZXRlcml6ZWQgcGF0aC5cbiAgLy8gU3BhbnMgc3VjaCBhcyBnZW5lcmF0ZU1ldGFkYXRhIGFuZCBTZXJ2ZXIgQ29tcG9uZW50IHJlbmRlcmluZyBhcmUgdHlwaWNhbGx5IGRpcmVjdCBjaGlsZHJlbiBvZiB0aGF0IHNwYW4uXG4gIGNvbnN0IHBhdGggPSBwYXRobmFtZSA/PyBzYW5pdGl6ZVJvdXRlUGF0aChwYXJhbWV0ZXJpemVkUGF0aCk7XG5cbiAgY29uc3QgcHJvdG9jb2wgPSBoZWFkZXJzRGljdD8uW0hlYWRlcktleXMuRk9SV0FSREVEX1BST1RPXTtcbiAgY29uc3QgaG9zdCA9IGhlYWRlcnNEaWN0Py5bSGVhZGVyS2V5cy5GT1JXQVJERURfSE9TVF0gfHwgaGVhZGVyc0RpY3Q/LltIZWFkZXJLZXlzLkhPU1RdO1xuXG4gIGlmICghcHJvdG9jb2wgfHwgIWhvc3QpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGNvbnN0IGZ1bGxVcmwgPSBgJHtwcm90b2NvbH06Ly8ke2hvc3R9JHtwYXRofWA7XG5cbiAgY29uc3QgdXJsT2JqZWN0ID0gY29yZS5wYXJzZVN0cmluZ1RvVVJMT2JqZWN0KGZ1bGxVcmwpO1xuICBpZiAoIXVybE9iamVjdCkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgcmV0dXJuIGNvcmUuZ2V0U2FuaXRpemVkVXJsU3RyaW5nRnJvbVVybE9iamVjdCh1cmxPYmplY3QpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzYW5pdGl6ZWQgVVJMIHN0cmluZyBmcm9tIHRoZSByZWZlcmVyIGhlYWRlciBpZiBpdCBleGlzdHMgYW5kIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSBoZWFkZXJzRGljdCAtIE9wdGlvbmFsIGhlYWRlcnMgY29udGFpbmluZyB0aGUgcmVmZXJlclxuICogQHJldHVybnMgQSBzYW5pdGl6ZWQgVVJMIHN0cmluZyBvciB1bmRlZmluZWQgaWYgcmVmZXJlciBpcyBtaXNzaW5nL2ludmFsaWRcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFNhbml0aXplZFVybEZyb21SZWZlcmVySGVhZGVyKGhlYWRlcnNEaWN0KSB7XG4gIGNvbnN0IHJlZmVyZXIgPSBoZWFkZXJzRGljdD8uW0hlYWRlcktleXMuUkVGRVJFUl07XG4gIGlmICghcmVmZXJlcikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHJlZmVyZXJVcmwgPSBuZXcgVVJMKHJlZmVyZXIpO1xuICAgIHJldHVybiBjb3JlLmdldFNhbml0aXplZFVybFN0cmluZ0Zyb21VcmxPYmplY3QocmVmZXJlclVybCk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2FuaXRpemVkIFVSTCBzdHJpbmcgdXNpbmcgdGhlIHJlZmVyZXIgaGVhZGVyIGlmIGF2YWlsYWJsZSxcbiAqIG90aGVyd2lzZSBjb25zdHJ1Y3RzIHRoZSBVUkwgZnJvbSB0aGUgY29tcG9uZW50IHJvdXRlLCBwYXJhbXMsIGFuZCBoZWFkZXJzLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnRSb3V0ZSAtIFRoZSByb3V0ZSB0ZW1wbGF0ZSB0byBjb25zdHJ1Y3QgdGhlIFVSTCBmcm9tXG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcm91dGUgcGFyYW1ldGVycyB0byByZXBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICogQHBhcmFtIGhlYWRlcnNEaWN0IC0gT3B0aW9uYWwgaGVhZGVycyBjb250YWluaW5nIHByb3RvY29sLCBob3N0LCBhbmQgcmVmZXJlclxuICogQHBhcmFtIHBhdGhuYW1lIC0gT3B0aW9uYWwgcGF0aG5hbWUgY29taW5nIGZyb20gcm9vdCBzcGFuIFwiaHR0cC50YXJnZXRcIlxuICogQHJldHVybnMgQSBzYW5pdGl6ZWQgVVJMIHN0cmluZ1xuICovXG5mdW5jdGlvbiBnZXRTYW5pdGl6ZWRSZXF1ZXN0VXJsKFxuICBjb21wb25lbnRSb3V0ZSxcbiAgcGFyYW1zLFxuICBoZWFkZXJzRGljdCxcbiAgcGF0aG5hbWUsXG4pIHtcbiAgY29uc3QgcmVmZXJlclVybCA9IGV4dHJhY3RTYW5pdGl6ZWRVcmxGcm9tUmVmZXJlckhlYWRlcihoZWFkZXJzRGljdCk7XG4gIGlmIChyZWZlcmVyVXJsKSB7XG4gICAgcmV0dXJuIHJlZmVyZXJVcmw7XG4gIH1cblxuICByZXR1cm4gYnVpbGRVcmxGcm9tQ29tcG9uZW50Um91dGUoY29tcG9uZW50Um91dGUsIHBhcmFtcywgaGVhZGVyc0RpY3QsIHBhdGhuYW1lKTtcbn1cblxuZXhwb3J0cy5idWlsZFVybEZyb21Db21wb25lbnRSb3V0ZSA9IGJ1aWxkVXJsRnJvbUNvbXBvbmVudFJvdXRlO1xuZXhwb3J0cy5leHRyYWN0U2FuaXRpemVkVXJsRnJvbVJlZmVyZXJIZWFkZXIgPSBleHRyYWN0U2FuaXRpemVkVXJsRnJvbVJlZmVyZXJIZWFkZXI7XG5leHBvcnRzLmdldFNhbml0aXplZFJlcXVlc3RVcmwgPSBnZXRTYW5pdGl6ZWRSZXF1ZXN0VXJsO1xuZXhwb3J0cy5zYW5pdGl6ZVJvdXRlUGF0aCA9IHNhbml0aXplUm91dGVQYXRoO1xuZXhwb3J0cy5zdWJzdGl0dXRlUm91dGVQYXJhbXMgPSBzdWJzdGl0dXRlUm91dGVQYXJhbXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(\n  origFunction,\n) {\n  return async function ( ...origFunctionArguments) {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      core.captureException(e, {\n        // TODO: check if origFunction.name actually returns the correct name or minified garbage\n        // in this case, we can add another argument to this wrapper with the respective function name\n        mechanism: { handled: false, type: 'auto.function.nextjs.wrapped', data: { function: origFunction.name } },\n      });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(\n  origDataFetcher,\n  req,\n  res,\n  options\n\n,\n) {\n  return async function (\n\n    ...args\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(req);\n    core.getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const span = core.getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = core.getRootSpan(span);\n      root.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = core.getTraceData();\n\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args),\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(\n  origFunction,\n  origFunctionArgs,\n) {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    core.captureException(e, { mechanism: { handled: false, type: 'auto.function.nextjs.data_fetcher' } });\n    throw e;\n  }\n}\n\n/**\n * Extracts the params and searchParams from the props object.\n *\n * Depending on the next version, params and searchParams may be a promise which we do not want to resolve in this function.\n */\nfunction maybeExtractSynchronousParamsAndSearchParams(props)\n\n {\n  let params =\n    props && typeof props === 'object' && 'params' in props\n      ? (props.params )\n      : undefined;\n  if (core.isThenable(params)) {\n    params = undefined;\n  }\n\n  let searchParams =\n    props && typeof props === 'object' && 'searchParams' in props\n      ? (props.searchParams )\n      : undefined;\n  if (core.isThenable(searchParams)) {\n    searchParams = undefined;\n  }\n\n  return { params, searchParams };\n}\n\nexports.callDataFetcherTraced = callDataFetcherTraced;\nexports.maybeExtractSynchronousParamsAndSearchParams = maybeExtractSynchronousParamsAndSearchParams;\nexports.withErrorInstrumentation = withErrorInstrumentation;\nexports.withTracedServerSideDataFetcher = withTracedServerSideDataFetcher;\n//# sourceMappingURL=wrapperUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nfunction withServerActionInstrumentation(\n  ...args\n) {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(\n  serverActionName,\n  options,\n  callback,\n) {\n  return core.withIsolationScope(async isolationScope => {\n    const sendDefaultPii = core.getClient()?.getOptions().sendDefaultPii;\n\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject = {};\n    try {\n      const awaitedHeaders = await options.headers;\n      sentryTraceHeader = awaitedHeaders?.get('sentry-trace') ?? undefined;\n      baggageHeader = awaitedHeaders?.get('baggage');\n      awaitedHeaders?.forEach((value, key) => {\n        fullHeadersObject[key] = value;\n      });\n    } catch {\n      debugBuild.DEBUG_BUILD &&\n        core.debug.warn(\n          \"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\",\n        );\n    }\n\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject,\n      } ,\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = core.getActiveSpan()\n      ? (_opts, callback) => callback()\n      : core.continueTrace;\n\n    return continueTraceIfNoActiveSpan(\n      {\n        sentryTrace: sentryTraceHeader,\n        baggage: baggageHeader,\n      },\n      async () => {\n        try {\n          return await core.startSpan(\n            {\n              op: 'function.server_action',\n              name: `serverAction/${serverActionName}`,\n              forceTransaction: true,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.server_action',\n              },\n            },\n            async span => {\n              const result = await core.handleCallbackErrors(callback, error => {\n                if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  // We don't want to report \"not-found\"s\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                  // Don't do anything for redirects\n                } else {\n                  span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                      type: 'auto.function.nextjs.server_action',\n                    },\n                  });\n                }\n              });\n\n              if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                core.getIsolationScope().setExtra('server_action_result', result);\n              }\n\n              if (options.formData) {\n                options.formData.forEach((value, key) => {\n                  core.getIsolationScope().setExtra(\n                    `server_action_form_data.${key}`,\n                    typeof value === 'string' ? value : '[non-string value]',\n                  );\n                });\n              }\n\n              return result;\n            },\n          );\n        } finally {\n          core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n        }\n      },\n    );\n  });\n}\n\nexports.withServerActionInstrumentation = withServerActionInstrumentation;\n//# sourceMappingURL=withServerActionInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapGenerationFunctionWithSentry(\n  generationFunction,\n  context,\n) {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      let headers = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch {\n        /** empty */\n      }\n\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(headers);\n      let pathname = undefined ;\n\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target'] ;\n        }\n      }\n\n      const headersDict = headers ? core.winterCGHeadersToDict(headers) : undefined;\n\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        addHeadersAsAttributes.addHeadersAsAttributes(headers, rootSpan);\n      }\n\n      let data = undefined;\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params, searchParams } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        data = { params, searchParams };\n      }\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n              url: urls.getSanitizedRequestUrl(\n                componentRoute,\n                data?.params ,\n                headersDict,\n                pathname,\n              ),\n            } ,\n          });\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = tracingUtils.commonObjectToPropagationContext(\n            headers,\n            core.propagationContextFromHeaders(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.getRootSpan(span).setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(err, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.generation_function',\n                        data: {\n                          function: generationFunctionIdentifier,\n                        },\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry;\n//# sourceMappingURL=wrapGenerationFunctionWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nfunction wrapMiddlewareWithSentry(\n  middleware,\n) {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      const tunnelRoute =\n        '_sentryRewritesTunnelPath' in globalThis\n          ? (globalThis )._sentryRewritesTunnelPath\n          : undefined;\n\n      if (tunnelRoute && typeof tunnelRoute === 'string') {\n        const req = args[0];\n        // Check if the current request matches the tunnel route\n        if (req instanceof Request) {\n          const url = new URL(req.url);\n          const isTunnelRequest = url.pathname.startsWith(tunnelRoute);\n\n          if (isTunnelRequest) {\n            // Create a simple response that mimics NextResponse.next() so we don't need to import internals here\n            // which breaks next 13 apps\n            // https://github.com/vercel/next.js/blob/c12c9c1f78ad384270902f0890dc4cd341408105/packages/next/src/server/web/spec-extension/response.ts#L146\n            return new Response(null, {\n              status: 200,\n              headers: {\n                'x-middleware-next': '1',\n              },\n            }) ;\n          }\n        }\n      }\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return core.withIsolationScope(isolationScope => {\n        const req = args[0];\n        const currentScope = core.getCurrentScope();\n\n        let spanName;\n        let spanSource;\n        let headerAttributes = {};\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: core.winterCGRequestToRequestData(req),\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n\n          headerAttributes = addHeadersAsAttributes.addHeadersAsAttributes(req.headers);\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n\n        currentScope.setTransactionName(spanName);\n\n        const activeSpan = core.getActiveSpan();\n\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n\n          const rootSpan = core.getRootSpan(activeSpan);\n          if (rootSpan) {\n            core.setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n            rootSpan.setAttributes(headerAttributes);\n          }\n        }\n\n        return core.startSpan(\n          {\n            name: spanName,\n            op: 'http.server.middleware',\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrap_middleware',\n              ...headerAttributes,\n            },\n          },\n          () => {\n            return core.handleCallbackErrors(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                core.captureException(error, {\n                  mechanism: {\n                    type: 'auto.function.nextjs.wrap_middleware',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry;\n//# sourceMappingURL=wrapMiddlewareWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLHNIQUFjO0FBQ25DLCtCQUErQixtQkFBTyxDQUFDLCtRQUFtQztBQUMxRSxvQkFBb0IsbUJBQU8sQ0FBQyx5UEFBd0I7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxtQ0FBbUMsWUFBWSxFQUFFLDBCQUEwQjtBQUMzRTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL3V0aWxzL2FkZEhlYWRlcnNBc0F0dHJpYnV0ZXMuanMnKTtcbmNvbnN0IHJlc3BvbnNlRW5kID0gcmVxdWlyZSgnLi91dGlscy9yZXNwb25zZUVuZC5qcycpO1xuXG4vKipcbiAqIFdyYXBzIE5leHQuanMgbWlkZGxld2FyZSB3aXRoIFNlbnRyeSBlcnJvciBhbmQgcGVyZm9ybWFuY2UgaW5zdHJ1bWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBtaWRkbGV3YXJlIFRoZSBtaWRkbGV3YXJlIGhhbmRsZXIuXG4gKiBAcmV0dXJucyBhIHdyYXBwZWQgbWlkZGxld2FyZSBoYW5kbGVyLlxuICovXG5mdW5jdGlvbiB3cmFwTWlkZGxld2FyZVdpdGhTZW50cnkoXG4gIG1pZGRsZXdhcmUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShtaWRkbGV3YXJlLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgY29uc3QgdHVubmVsUm91dGUgPVxuICAgICAgICAnX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aCcgaW4gZ2xvYmFsVGhpc1xuICAgICAgICAgID8gKGdsb2JhbFRoaXMgKS5fc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0dW5uZWxSb3V0ZSAmJiB0eXBlb2YgdHVubmVsUm91dGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGFyZ3NbMF07XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHJlcXVlc3QgbWF0Y2hlcyB0aGUgdHVubmVsIHJvdXRlXG4gICAgICAgIGlmIChyZXEgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEudXJsKTtcbiAgICAgICAgICBjb25zdCBpc1R1bm5lbFJlcXVlc3QgPSB1cmwucGF0aG5hbWUuc3RhcnRzV2l0aCh0dW5uZWxSb3V0ZSk7XG5cbiAgICAgICAgICBpZiAoaXNUdW5uZWxSZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBzaW1wbGUgcmVzcG9uc2UgdGhhdCBtaW1pY3MgTmV4dFJlc3BvbnNlLm5leHQoKSBzbyB3ZSBkb24ndCBuZWVkIHRvIGltcG9ydCBpbnRlcm5hbHMgaGVyZVxuICAgICAgICAgICAgLy8gd2hpY2ggYnJlYWtzIG5leHQgMTMgYXBwc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2Jsb2IvYzEyYzljMWY3OGFkMzg0MjcwOTAyZjA4OTBkYzRjZDM0MTQwODEwNS9wYWNrYWdlcy9uZXh0L3NyYy9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL3Jlc3BvbnNlLnRzI0wxNDZcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICd4LW1pZGRsZXdhcmUtbmV4dCc6ICcxJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pIDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFRPRE86IFdlIHN0aWxsIHNob3VsZCBhZGQgY2VudHJhbCBpc29sYXRpb24gc2NvcGUgY3JlYXRpb24gZm9yIHdoZW4gb3VyIGJ1aWxkLXRpbWUgaW5zdHJ1bWVudGF0aW9uIGRvZXMgbm90IHdvcmsgYW55bW9yZSB3aXRoIHR1cmJvcGFjay5cbiAgICAgIHJldHVybiBjb3JlLndpdGhJc29sYXRpb25TY29wZShpc29sYXRpb25TY29wZSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGFyZ3NbMF07XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgbGV0IHNwYW5OYW1lO1xuICAgICAgICBsZXQgc3BhblNvdXJjZTtcbiAgICAgICAgbGV0IGhlYWRlckF0dHJpYnV0ZXMgPSB7fTtcblxuICAgICAgICBpZiAocmVxIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICAgICAgICBub3JtYWxpemVkUmVxdWVzdDogY29yZS53aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhKHJlcSksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3Bhbk5hbWUgPSBgbWlkZGxld2FyZSAke3JlcS5tZXRob2R9ICR7bmV3IFVSTChyZXEudXJsKS5wYXRobmFtZX1gO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAndXJsJztcblxuICAgICAgICAgIGhlYWRlckF0dHJpYnV0ZXMgPSBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMocmVxLmhlYWRlcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNwYW5OYW1lID0gJ21pZGRsZXdhcmUnO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAnY29tcG9uZW50JztcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoc3Bhbk5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGFjdGl2ZVNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW4oKTtcblxuICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGFjdGl2ZSBzcGFuLCBpdCBsaWtlbHkgbWVhbnMgdGhhdCB0aGUgYXV0b21hdGljIE5leHQuanMgT1RFTCBpbnN0cnVtZW50YXRpb24gd29ya2VkIGFuZCB3ZSBjYW5cbiAgICAgICAgICAvLyByZWx5IG9uIHRoYXQgZm9yIHBhcmFtZXRlcml6YXRpb24uXG4gICAgICAgICAgc3Bhbk5hbWUgPSAnbWlkZGxld2FyZSc7XG4gICAgICAgICAgc3BhblNvdXJjZSA9ICdjb21wb25lbnQnO1xuXG4gICAgICAgICAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuICAgICAgICAgIGlmIChyb290U3Bhbikge1xuICAgICAgICAgICAgY29yZS5zZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3BhbiwgY3VycmVudFNjb3BlLCBpc29sYXRpb25TY29wZSk7XG4gICAgICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGVzKGhlYWRlckF0dHJpYnV0ZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb3JlLnN0YXJ0U3BhbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBzcGFuTmFtZSxcbiAgICAgICAgICAgIG9wOiAnaHR0cC5zZXJ2ZXIubWlkZGxld2FyZScsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogc3BhblNvdXJjZSxcbiAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5mdW5jdGlvbi5uZXh0anMud3JhcF9taWRkbGV3YXJlJyxcbiAgICAgICAgICAgICAgLi4uaGVhZGVyQXR0cmlidXRlcyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS5oYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgKCkgPT4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyksXG4gICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5uZXh0anMud3JhcF9taWRkbGV3YXJlJyxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeSA9IHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(\n  routeHandler,\n  context,\n) {\n  const { method, parameterizedRoute, headers } = context;\n\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = core.getActiveSpan();\n      const rootSpan = activeSpan ? core.getRootSpan(activeSpan) : undefined;\n\n      if (rootSpan && \"nodejs\" !== 'edge') {\n        addHeadersAsAttributes.addHeadersAsAttributes(headers, rootSpan);\n      }\n\n      let edgeRuntimeIsolationScopeOverride;\n      if (rootSpan && \"nodejs\" === 'edge') {}\n\n      return core.withIsolationScope(\n         false ? 0 : core.getIsolationScope(),\n        () => {\n          return core.withScope(async scope => {\n            scope.setTransactionName(`${method} ${parameterizedRoute}`);\n\n            if (false) {}\n\n            const response = await core.handleCallbackErrors(\n              () => originalFunction.apply(thisArg, args),\n              error => {\n                // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                if (nextNavigationErrorUtils.isRedirectNavigationError(error)) ; else if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                  if (activeSpan) {\n                    core.setHttpStatus(activeSpan, 404);\n                  }\n                  if (rootSpan) {\n                    core.setHttpStatus(rootSpan, 404);\n                  }\n                } else {\n                  core.captureException(error, {\n                    mechanism: {\n                      handled: false,\n                      type: 'auto.function.nextjs.route_handler',\n                    },\n                  });\n                }\n              },\n              () => {\n                core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n              },\n            );\n\n            try {\n              if (response.status) {\n                if (activeSpan) {\n                  core.setHttpStatus(activeSpan, response.status);\n                }\n                if (rootSpan) {\n                  core.setHttpStatus(rootSpan, response.status);\n                }\n              }\n            } catch {\n              // best effort - response may be undefined?\n            }\n\n            return response;\n          });\n        },\n      );\n    },\n  });\n}\n\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry;\n//# sourceMappingURL=wrapRouteHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsaUNBQWlDLG1CQUFPLENBQUMsdVFBQStCO0FBQ3hFLCtCQUErQixtQkFBTyxDQUFDLCtRQUFtQztBQUMxRSxvQkFBb0IsbUJBQU8sQ0FBQyx5UEFBd0I7QUFDcEQscUJBQXFCLG1CQUFPLENBQUMsMlBBQXlCOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0NBQXNDOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsUUFBd0I7QUFDOUM7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixRQUF3QixhQUFhLEVBV3BEOztBQUVQO0FBQ0EsUUFBUSxNQUFtQyxHQUFHLENBQWlDO0FBQy9FO0FBQ0E7QUFDQSx3Q0FBd0MsUUFBUSxFQUFFLG1CQUFtQjs7QUFFckUsZ0JBQWdCLEtBQW1DLEVBQUUsRUFheEM7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsZUFBZTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG5leHROYXZpZ2F0aW9uRXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzJyk7XG5jb25zdCBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi91dGlscy9hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4vdXRpbHMvcmVzcG9uc2VFbmQuanMnKTtcbmNvbnN0IHRyYWNpbmdVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvdHJhY2luZ1V0aWxzLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgYSBOZXh0LmpzIEFwcCBSb3V0ZXIgUm91dGUgaGFuZGxlciB3aXRoIFNlbnRyeSBlcnJvciBhbmQgcGVyZm9ybWFuY2UgaW5zdHJ1bWVudGF0aW9uLlxuICpcbiAqIE5PVElDRTogVGhpcyB3cmFwcGVyIGlzIGZvciBBcHAgUm91dGVyIEFQSSByb3V0ZXMuIElmIHlvdSBhcmUgbG9va2luZyB0byB3cmFwIFBhZ2VzIFJvdXRlciBBUEkgcm91dGVzIHVzZSBgd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5YCBpbnN0ZWFkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gd3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkoXG4gIHJvdXRlSGFuZGxlcixcbiAgY29udGV4dCxcbikge1xuICBjb25zdCB7IG1ldGhvZCwgcGFyYW1ldGVyaXplZFJvdXRlLCBoZWFkZXJzIH0gPSBjb250ZXh0O1xuXG4gIHJldHVybiBuZXcgUHJveHkocm91dGVIYW5kbGVyLCB7XG4gICAgYXBwbHk6IGFzeW5jIChvcmlnaW5hbEZ1bmN0aW9uLCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKCk7XG4gICAgICBjb25zdCByb290U3BhbiA9IGFjdGl2ZVNwYW4gPyBjb3JlLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAocm9vdFNwYW4gJiYgcHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FICE9PSAnZWRnZScpIHtcbiAgICAgICAgYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzKGhlYWRlcnMsIHJvb3RTcGFuKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGVkZ2VSdW50aW1lSXNvbGF0aW9uU2NvcGVPdmVycmlkZTtcbiAgICAgIGlmIChyb290U3BhbiAmJiBwcm9jZXNzLmVudi5ORVhUX1JVTlRJTUUgPT09ICdlZGdlJykge1xuICAgICAgICBjb25zdCBpc29sYXRpb25TY29wZSA9IHRyYWNpbmdVdGlscy5jb21tb25PYmplY3RUb0lzb2xhdGlvblNjb3BlKGhlYWRlcnMpO1xuICAgICAgICBjb25zdCB7IHNjb3BlIH0gPSBjb3JlLmdldENhcHR1cmVkU2NvcGVzT25TcGFuKHJvb3RTcGFuKTtcbiAgICAgICAgY29yZS5zZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3Bhbiwgc2NvcGUgPz8gbmV3IGNvcmUuU2NvcGUoKSwgaXNvbGF0aW9uU2NvcGUpO1xuXG4gICAgICAgIGVkZ2VSdW50aW1lSXNvbGF0aW9uU2NvcGVPdmVycmlkZSA9IGlzb2xhdGlvblNjb3BlO1xuXG4gICAgICAgIHJvb3RTcGFuLnVwZGF0ZU5hbWUoYCR7bWV0aG9kfSAke3BhcmFtZXRlcml6ZWRSb3V0ZX1gKTtcbiAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UsICdyb3V0ZScpO1xuICAgICAgICByb290U3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnaHR0cC5zZXJ2ZXInKTtcbiAgICAgICAgYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5hZGRIZWFkZXJzQXNBdHRyaWJ1dGVzKGhlYWRlcnMsIHJvb3RTcGFuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKFxuICAgICAgICBwcm9jZXNzLmVudi5ORVhUX1JVTlRJTUUgPT09ICdlZGdlJyA/IGVkZ2VSdW50aW1lSXNvbGF0aW9uU2NvcGVPdmVycmlkZSA6IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBjb3JlLndpdGhTY29wZShhc3luYyBzY29wZSA9PiB7XG4gICAgICAgICAgICBzY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3BhcmFtZXRlcml6ZWRSb3V0ZX1gKTtcblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ2VkZ2UnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlSGVhZGVyc0RpY3QgPSBoZWFkZXJzID8gY29yZS53aW50ZXJDR0hlYWRlcnNUb0RpY3QoaGVhZGVycykgOiB7fTtcbiAgICAgICAgICAgICAgY29uc3QgaW5jb21pbmdQcm9wYWdhdGlvbkNvbnRleHQgPSBjb3JlLnByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzKFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlSGVhZGVyc0RpY3RbJ3NlbnRyeS10cmFjZSddLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlSGVhZGVyc0RpY3RbJ2JhZ2dhZ2UnXSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgc2NvcGUuc2V0UHJvcGFnYXRpb25Db250ZXh0KGluY29taW5nUHJvcGFnYXRpb25Db250ZXh0KTtcbiAgICAgICAgICAgICAgc2NvcGUuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUmVxdWVzdDoge1xuICAgICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgaGVhZGVyczogY29tcGxldGVIZWFkZXJzRGljdCxcbiAgICAgICAgICAgICAgICB9ICxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29yZS5oYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgKCkgPT4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKSxcbiAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIC8vIE5leHQuanMgdGhyb3dzIGVycm9ycyB3aGVuIGNhbGxpbmcgYHJlZGlyZWN0KClgLiBXZSBkb24ndCB3YW5uYSByZXBvcnQgdGhlc2UuXG4gICAgICAgICAgICAgICAgaWYgKG5leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5pc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yKGVycm9yKSkgOyBlbHNlIGlmIChuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhhY3RpdmVTcGFuLCA0MDQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHJvb3RTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhyb290U3BhbiwgNDA0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy5yb3V0ZV9oYW5kbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvcmUudmVyY2VsV2FpdFVudGlsKHJlc3BvbnNlRW5kLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhhY3RpdmVTcGFuLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuc2V0SHR0cFN0YXR1cyhyb290U3BhbiwgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAvLyBiZXN0IGVmZm9ydCAtIHJlc3BvbnNlIG1heSBiZSB1bmRlZmluZWQ/XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkgPSB3cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js":
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js ***!
  \***************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst addHeadersAsAttributes = __webpack_require__(/*! ./utils/addHeadersAsAttributes.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/addHeadersAsAttributes.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\nconst urls = __webpack_require__(/*! ./utils/urls.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/urls.js\");\nconst wrapperUtils = __webpack_require__(/*! ./utils/wrapperUtils.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(\n  appDirComponent,\n  context,\n) {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = core.getActiveSpan()?.spanContext().traceId;\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(context.headers);\n\n      let pathname = undefined ;\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const { scope } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, scope ?? new core.Scope(), isolationScope);\n\n        const spanData = core.spanToJSON(rootSpan);\n\n        if (spanData.data && 'http.target' in spanData.data) {\n          pathname = spanData.data['http.target']?.toString();\n        }\n      }\n\n      const headersDict = context.headers ? core.winterCGHeadersToDict(context.headers) : undefined;\n\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        addHeadersAsAttributes.addHeadersAsAttributes(context.headers, rootSpan);\n      }\n\n      let params = undefined;\n\n      if (core.getClient()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const { params: paramsFromProps } = wrapperUtils.maybeExtractSynchronousParamsAndSearchParams(props);\n        params = paramsFromProps;\n      }\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n          url: urls.getSanitizedRequestUrl(componentRoute, params, headersDict, pathname),\n        } ,\n      });\n\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (false) {}\n\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return core.startSpanManual(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.server_component',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return core.handleCallbackErrors(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: core.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: core.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    core.captureException(error, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.nextjs.server_component',\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry;\n//# sourceMappingURL=wrapServerComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwU2VydmVyQ29tcG9uZW50V2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsaUNBQWlDLG1CQUFPLENBQUMsdVFBQStCO0FBQ3hFLG9CQUFvQixtQkFBTyxDQUFDLHlQQUF3QjtBQUNwRCx3Q0FBd0MsbUJBQU8sQ0FBQyw2UkFBMEM7QUFDMUYsK0JBQStCLG1CQUFPLENBQUMsK1FBQW1DO0FBQzFFLHFCQUFxQixtQkFBTyxDQUFDLDJQQUF5QjtBQUN0RCxhQUFhLG1CQUFPLENBQUMsMk9BQWlCO0FBQ3RDLHFCQUFxQixtQkFBTyxDQUFDLDJQQUF5Qjs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0NBQWdDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixPQUFPOztBQUVQO0FBQ0E7QUFDQSxzQ0FBc0MsZUFBZSxvQkFBb0IsZUFBZTs7QUFFeEYsY0FBYyxLQUFtQyxFQUFFLEVBV3hDOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGVBQWUsb0JBQW9CLGVBQWU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxvREFBb0Q7QUFDekYsb0JBQW9CO0FBQ3BCO0FBQ0EscUNBQXFDLDJCQUEyQjtBQUNoRSxvQkFBb0I7QUFDcEIscUNBQXFDLHlEQUF5RDtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QixxQkFBcUI7QUFDckI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLHFDQUFxQztBQUNyQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3dyYXBTZXJ2ZXJDb21wb25lbnRXaXRoU2VudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMgPSByZXF1aXJlKCcuL25leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcycpO1xuY29uc3QgcmVzcG9uc2VFbmQgPSByZXF1aXJlKCcuL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5jb25zdCBzcGFuQXR0cmlidXRlc1dpdGhMb2dpY0F0dGFjaGVkID0gcmVxdWlyZSgnLi9zcGFuLWF0dHJpYnV0ZXMtd2l0aC1sb2dpYy1hdHRhY2hlZC5qcycpO1xuY29uc3QgYWRkSGVhZGVyc0FzQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vdXRpbHMvYWRkSGVhZGVyc0FzQXR0cmlidXRlcy5qcycpO1xuY29uc3QgdHJhY2luZ1V0aWxzID0gcmVxdWlyZSgnLi91dGlscy90cmFjaW5nVXRpbHMuanMnKTtcbmNvbnN0IHVybHMgPSByZXF1aXJlKCcuL3V0aWxzL3VybHMuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgYW4gYGFwcGAgZGlyZWN0b3J5IHNlcnZlciBjb21wb25lbnQgd2l0aCBTZW50cnkgZXJyb3IgaW5zdHJ1bWVudGF0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gd3JhcFNlcnZlckNvbXBvbmVudFdpdGhTZW50cnkoXG4gIGFwcERpckNvbXBvbmVudCxcbiAgY29udGV4dCxcbikge1xuICBjb25zdCB7IGNvbXBvbmVudFJvdXRlLCBjb21wb25lbnRUeXBlIH0gPSBjb250ZXh0O1xuICAvLyBFdmVuIHRob3VnaCB1c2VycyBtYXkgZGVmaW5lIHNlcnZlciBjb21wb25lbnRzIGFzIGFzeW5jIGZ1bmN0aW9ucywgZm9yIHRoZSBjbGllbnQgYnVuZGxlc1xuICAvLyBOZXh0LmpzIHdpbGwgdHVybiB0aGVtIGludG8gc3luY2hyb25vdXMgZnVuY3Rpb25zIGFuZCBpdCB3aWxsIHRyYW5zZm9ybSBhbnkgYGF3YWl0YHMgaW50byBpbnN0YW5jZXMgb2YgdGhlIGB1c2VgXG4gIC8vIGhvb2suIPCfpK9cbiAgcmV0dXJuIG5ldyBQcm94eShhcHBEaXJDb21wb25lbnQsIHtcbiAgICBhcHBseTogKG9yaWdpbmFsRnVuY3Rpb24sIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3RUcmFjZUlkID0gY29yZS5nZXRBY3RpdmVTcGFuKCk/LnNwYW5Db250ZXh0KCkudHJhY2VJZDtcbiAgICAgIGNvbnN0IGlzb2xhdGlvblNjb3BlID0gdHJhY2luZ1V0aWxzLmNvbW1vbk9iamVjdFRvSXNvbGF0aW9uU2NvcGUoY29udGV4dC5oZWFkZXJzKTtcblxuICAgICAgbGV0IHBhdGhuYW1lID0gdW5kZWZpbmVkIDtcbiAgICAgIGNvbnN0IGFjdGl2ZVNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW4oKTtcbiAgICAgIGlmIChhY3RpdmVTcGFuKSB7XG4gICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihhY3RpdmVTcGFuKTtcbiAgICAgICAgY29uc3QgeyBzY29wZSB9ID0gY29yZS5nZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3Bhbik7XG4gICAgICAgIGNvcmUuc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4ocm9vdFNwYW4sIHNjb3BlID8/IG5ldyBjb3JlLlNjb3BlKCksIGlzb2xhdGlvblNjb3BlKTtcblxuICAgICAgICBjb25zdCBzcGFuRGF0YSA9IGNvcmUuc3BhblRvSlNPTihyb290U3Bhbik7XG5cbiAgICAgICAgaWYgKHNwYW5EYXRhLmRhdGEgJiYgJ2h0dHAudGFyZ2V0JyBpbiBzcGFuRGF0YS5kYXRhKSB7XG4gICAgICAgICAgcGF0aG5hbWUgPSBzcGFuRGF0YS5kYXRhWydodHRwLnRhcmdldCddPy50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhlYWRlcnNEaWN0ID0gY29udGV4dC5oZWFkZXJzID8gY29yZS53aW50ZXJDR0hlYWRlcnNUb0RpY3QoY29udGV4dC5oZWFkZXJzKSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgY29uc3Qgcm9vdFNwYW4gPSBjb3JlLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuICAgICAgICBhZGRIZWFkZXJzQXNBdHRyaWJ1dGVzLmFkZEhlYWRlcnNBc0F0dHJpYnV0ZXMoY29udGV4dC5oZWFkZXJzLCByb290U3Bhbik7XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXJhbXMgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChjb3JlLmdldENsaWVudCgpPy5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBhcmdzWzBdO1xuICAgICAgICBjb25zdCB7IHBhcmFtczogcGFyYW1zRnJvbVByb3BzIH0gPSB3cmFwcGVyVXRpbHMubWF5YmVFeHRyYWN0U3luY2hyb25vdXNQYXJhbXNBbmRTZWFyY2hQYXJhbXMocHJvcHMpO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXNGcm9tUHJvcHM7XG4gICAgICB9XG5cbiAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICAgIG5vcm1hbGl6ZWRSZXF1ZXN0OiB7XG4gICAgICAgICAgaGVhZGVyczogaGVhZGVyc0RpY3QsXG4gICAgICAgICAgdXJsOiB1cmxzLmdldFNhbml0aXplZFJlcXVlc3RVcmwoY29tcG9uZW50Um91dGUsIHBhcmFtcywgaGVhZGVyc0RpY3QsIHBhdGhuYW1lKSxcbiAgICAgICAgfSAsXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGNvcmUud2l0aElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjb3JlLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgICAgICAgc2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGAke2NvbXBvbmVudFR5cGV9IFNlcnZlciBDb21wb25lbnQgKCR7Y29tcG9uZW50Um91dGV9KWApO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ2VkZ2UnKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSB0cmFjaW5nVXRpbHMuY29tbW9uT2JqZWN0VG9Qcm9wYWdhdGlvbkNvbnRleHQoXG4gICAgICAgICAgICAgIGNvbnRleHQuaGVhZGVycyxcbiAgICAgICAgICAgICAgY29yZS5wcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyhoZWFkZXJzRGljdD8uWydzZW50cnktdHJhY2UnXSwgaGVhZGVyc0RpY3Q/LlsnYmFnZ2FnZSddKSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0VHJhY2VJZCkge1xuICAgICAgICAgICAgICBwcm9wYWdhdGlvbkNvbnRleHQudHJhY2VJZCA9IHJlcXVlc3RUcmFjZUlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS5zZXRQcm9wYWdhdGlvbkNvbnRleHQocHJvcGFnYXRpb25Db250ZXh0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBhY3RpdmVTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKCk7XG4gICAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihhY3RpdmVTcGFuKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlID0gaGVhZGVyc0RpY3Q/Llsnc2VudHJ5LXRyYWNlJ107XG4gICAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKHNwYW5BdHRyaWJ1dGVzV2l0aExvZ2ljQXR0YWNoZWQuVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEwsIHNlbnRyeVRyYWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29yZS5zdGFydFNwYW5NYW51YWwoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG9wOiAnZnVuY3Rpb24ubmV4dGpzJyxcbiAgICAgICAgICAgICAgbmFtZTogYCR7Y29tcG9uZW50VHlwZX0gU2VydmVyIENvbXBvbmVudCAoJHtjb21wb25lbnRSb3V0ZX0pYCxcbiAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogJ2NvbXBvbmVudCcsXG4gICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5mdW5jdGlvbi5uZXh0anMuc2VydmVyX2NvbXBvbmVudCcsXG4gICAgICAgICAgICAgICAgJ3NlbnRyeS5uZXh0anMuc3NyLmZ1bmN0aW9uLnR5cGUnOiBjb21wb25lbnRUeXBlLFxuICAgICAgICAgICAgICAgICdzZW50cnkubmV4dGpzLnNzci5mdW5jdGlvbi5yb3V0ZSc6IGNvbXBvbmVudFJvdXRlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNwYW4gPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gY29yZS5oYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgICAoKSA9PiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpLFxuICAgICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgIC8vIFdoZW4geW91IHJlYWQgdGhpcyBjb2RlIHlvdSBtaWdodCB0aGluazogXCJXYWl0IGEgbWludXRlLCBzaG91bGRuJ3Qgd2Ugc2V0IHRoZSBzdGF0dXMgb24gdGhlIHJvb3Qgc3BhbiB0b28/XCJcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBhbnN3ZXIgaXM6IFwiTm8uXCIgLSBUaGUgc3RhdHVzIG9mIHRoZSByb290IHNwYW4gaXMgZGV0ZXJtaW5lZCBieSB3aGF0ZXZlciBzdGF0dXMgY29kZSBOZXh0LmpzIGRlY2lkZXMgdG8gcHV0IG9uIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgICAgIGlmIChuZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byByZXBvcnQgXCJub3QtZm91bmRcInNcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoeyBjb2RlOiBjb3JlLlNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAnbm90X2ZvdW5kJyB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gcmVwb3J0IHJlZGlyZWN0c1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IGNvZGU6IGNvcmUuU1BBTl9TVEFUVVNfT0sgfSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IGNvZGU6IGNvcmUuU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdpbnRlcm5hbF9lcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5uZXh0anMuc2VydmVyX2NvbXBvbmVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBTZXJ2ZXJDb21wb25lbnRXaXRoU2VudHJ5ID0gd3JhcFNlcnZlckNvbXBvbmVudFdpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwU2VydmVyQ29tcG9uZW50V2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst LOGGER_PREFIXES = {\n  'webpack-nodejs': '[@sentry/nextjs - Node.js]',\n  'webpack-edge': '[@sentry/nextjs - Edge]',\n  'webpack-client': '[@sentry/nextjs - Client]',\n  'after-production-compile-webpack': '[@sentry/nextjs - After Production Compile (Webpack)]',\n  'after-production-compile-turbopack': '[@sentry/nextjs - After Production Compile (Turbopack)]',\n} ;\n\n// File patterns for source map operations\n// We use both glob patterns and directory paths for the sourcemap upload and deletion\n// -> Direct CLI invocation handles file paths better than glob patterns\n// -> Webpack/Bundler needs glob patterns as this is the format that is used by the plugin\nconst FILE_PATTERNS = {\n  SERVER: {\n    GLOB: 'server/**',\n    PATH: 'server',\n  },\n  SERVERLESS: 'serverless/**',\n  STATIC_CHUNKS: {\n    GLOB: 'static/chunks/**',\n    PATH: 'static/chunks',\n  },\n  STATIC_CHUNKS_PAGES: {\n    GLOB: 'static/chunks/pages/**',\n    PATH: 'static/chunks/pages',\n  },\n  STATIC_CHUNKS_APP: {\n    GLOB: 'static/chunks/app/**',\n    PATH: 'static/chunks/app',\n  },\n  MAIN_CHUNKS: 'static/chunks/main-*',\n  FRAMEWORK_CHUNKS: 'static/chunks/framework-*',\n  FRAMEWORK_CHUNKS_DOT: 'static/chunks/framework.*',\n  POLYFILLS_CHUNKS: 'static/chunks/polyfills-*',\n  WEBPACK_CHUNKS: 'static/chunks/webpack-*',\n} ;\n\n// Source map file extensions to delete\nconst SOURCEMAP_EXTENSIONS = ['*.js.map', '*.mjs.map', '*.cjs.map'] ;\n\n/**\n * Normalizes Windows paths to POSIX format for glob patterns\n */\nfunction normalizePathForGlob(distPath) {\n  return distPath.replace(/\\\\/g, '/');\n}\n\n/**\n * These functions are used to get the correct pattern for the sourcemap upload based on the build tool and the usage context\n * -> Direct CLI invocation handles file paths better than glob patterns\n */\nfunction getServerPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.SERVER.PATH : FILE_PATTERNS.SERVER.GLOB;\n}\n\nfunction getStaticChunksPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS.PATH : FILE_PATTERNS.STATIC_CHUNKS.GLOB;\n}\n\nfunction getStaticChunksPagesPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS_PAGES.PATH : FILE_PATTERNS.STATIC_CHUNKS_PAGES.GLOB;\n}\n\nfunction getStaticChunksAppPattern({ useDirectoryPath = false }) {\n  return useDirectoryPath ? FILE_PATTERNS.STATIC_CHUNKS_APP.PATH : FILE_PATTERNS.STATIC_CHUNKS_APP.GLOB;\n}\n\n/**\n * Creates file patterns for source map uploads based on build tool and options\n */\nfunction createSourcemapUploadAssetPatterns(\n  normalizedDistPath,\n  buildTool,\n  widenClientFileUpload = false,\n) {\n  const assets = [];\n\n  if (buildTool.startsWith('after-production-compile')) {\n    assets.push(path.posix.join(normalizedDistPath, getServerPattern({ useDirectoryPath: true })));\n\n    if (buildTool === 'after-production-compile-turbopack') {\n      // In turbopack we always want to upload the full static chunks directory\n      // as the build output is not split into pages|app chunks\n      assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: true })));\n    } else {\n      // Webpack client builds in after-production-compile mode\n      if (widenClientFileUpload) {\n        assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: true })));\n      } else {\n        assets.push(\n          path.posix.join(normalizedDistPath, getStaticChunksPagesPattern({ useDirectoryPath: true })),\n          path.posix.join(normalizedDistPath, getStaticChunksAppPattern({ useDirectoryPath: true })),\n        );\n      }\n    }\n  } else {\n    if (buildTool === 'webpack-nodejs' || buildTool === 'webpack-edge') {\n      // Server builds\n      assets.push(\n        path.posix.join(normalizedDistPath, getServerPattern({ useDirectoryPath: false })),\n        path.posix.join(normalizedDistPath, FILE_PATTERNS.SERVERLESS),\n      );\n    } else if (buildTool === 'webpack-client') {\n      // Client builds\n      if (widenClientFileUpload) {\n        assets.push(path.posix.join(normalizedDistPath, getStaticChunksPattern({ useDirectoryPath: false })));\n      } else {\n        assets.push(\n          path.posix.join(normalizedDistPath, getStaticChunksPagesPattern({ useDirectoryPath: false })),\n          path.posix.join(normalizedDistPath, getStaticChunksAppPattern({ useDirectoryPath: false })),\n        );\n      }\n    }\n  }\n\n  return assets;\n}\n\n/**\n * Creates ignore patterns for source map uploads\n */\nfunction createSourcemapUploadIgnorePattern(\n  normalizedDistPath,\n  widenClientFileUpload = false,\n) {\n  const ignore = [];\n\n  // We only add main-* files if the user has not opted into it\n  if (!widenClientFileUpload) {\n    ignore.push(path.posix.join(normalizedDistPath, FILE_PATTERNS.MAIN_CHUNKS));\n  }\n\n  // Always ignore these patterns\n  ignore.push(\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.FRAMEWORK_CHUNKS),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.FRAMEWORK_CHUNKS_DOT),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.POLYFILLS_CHUNKS),\n    path.posix.join(normalizedDistPath, FILE_PATTERNS.WEBPACK_CHUNKS),\n  );\n\n  return ignore;\n}\n\n/**\n * Creates file patterns for deletion after source map upload\n */\nfunction createFilesToDeleteAfterUploadPattern(\n  normalizedDistPath,\n  buildTool,\n  deleteSourcemapsAfterUpload,\n  useRunAfterProductionCompileHook = false,\n) {\n  if (!deleteSourcemapsAfterUpload) {\n    return undefined;\n  }\n\n  // We don't want to delete source maps for server builds as this led to errors on Vercel in the past\n  // See: https://github.com/getsentry/sentry-javascript/issues/13099\n  if (buildTool === 'webpack-nodejs' || buildTool === 'webpack-edge') {\n    return undefined;\n  }\n\n  // Skip deletion for webpack client builds when using the experimental hook\n  if (buildTool === 'webpack-client' && useRunAfterProductionCompileHook) {\n    return undefined;\n  }\n\n  return SOURCEMAP_EXTENSIONS.map(ext => path.posix.join(normalizedDistPath, 'static', '**', ext));\n}\n\n/**\n * Determines if sourcemap uploads should be skipped\n */\nfunction shouldSkipSourcemapUpload(buildTool, useRunAfterProductionCompileHook = false) {\n  return useRunAfterProductionCompileHook && buildTool.startsWith('webpack');\n}\n\n/**\n * Source rewriting function for webpack sources\n */\nfunction rewriteWebpackSources(source) {\n  return source.replace(/^webpack:\\/\\/(?:_N_E\\/)?/, '');\n}\n\n/**\n * Creates release configuration\n */\nfunction createReleaseConfig(\n  releaseName,\n  sentryBuildOptions,\n) {\n  if (releaseName !== undefined) {\n    return {\n      inject: false, // The webpack plugin's release injection breaks the `app` directory - we inject the release manually with the value injection loader instead.\n      name: releaseName,\n      create: sentryBuildOptions.release?.create,\n      finalize: sentryBuildOptions.release?.finalize,\n      dist: sentryBuildOptions.release?.dist,\n      vcsRemote: sentryBuildOptions.release?.vcsRemote,\n      setCommits: sentryBuildOptions.release?.setCommits,\n      deploy: sentryBuildOptions.release?.deploy,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.release,\n    };\n  }\n\n  return {\n    inject: false,\n    create: false,\n    finalize: false,\n  };\n}\n\n/**\n * Get Sentry Build Plugin options for both webpack and turbopack builds.\n * These options can be used in two ways:\n * 1. The options can be built in a single operation after the production build completes\n * 2. The options can be built in multiple operations, one for each webpack build\n */\nfunction getBuildPluginOptions({\n  sentryBuildOptions,\n  releaseName,\n  distDirAbsPath,\n  buildTool,\n  useRunAfterProductionCompileHook,\n}\n\n) {\n  // We need to convert paths to posix because Glob patterns use `\\` to escape\n  // glob characters. This clashes with Windows path separators.\n  // See: https://www.npmjs.com/package/glob\n  const normalizedDistDirAbsPath = normalizePathForGlob(distDirAbsPath);\n\n  const loggerPrefix = LOGGER_PREFIXES[buildTool];\n  const widenClientFileUpload = sentryBuildOptions.widenClientFileUpload ?? false;\n  const deleteSourcemapsAfterUpload = sentryBuildOptions.sourcemaps?.deleteSourcemapsAfterUpload ?? false;\n\n  const sourcemapUploadAssets = createSourcemapUploadAssetPatterns(\n    normalizedDistDirAbsPath,\n    buildTool,\n    widenClientFileUpload,\n  );\n\n  const sourcemapUploadIgnore = createSourcemapUploadIgnorePattern(normalizedDistDirAbsPath, widenClientFileUpload);\n\n  const filesToDeleteAfterUpload = createFilesToDeleteAfterUploadPattern(\n    normalizedDistDirAbsPath,\n    buildTool,\n    deleteSourcemapsAfterUpload,\n    useRunAfterProductionCompileHook,\n  );\n\n  const skipSourcemapsUpload = shouldSkipSourcemapUpload(buildTool, useRunAfterProductionCompileHook);\n\n  return {\n    authToken: sentryBuildOptions.authToken,\n    headers: sentryBuildOptions.headers,\n    org: sentryBuildOptions.org,\n    project: sentryBuildOptions.project,\n    telemetry: sentryBuildOptions.telemetry,\n    debug: sentryBuildOptions.debug,\n    errorHandler: sentryBuildOptions.errorHandler,\n    reactComponentAnnotation: buildTool.startsWith('after-production-compile')\n      ? undefined\n      : {\n          ...sentryBuildOptions.reactComponentAnnotation,\n          ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.reactComponentAnnotation,\n        },\n    silent: sentryBuildOptions.silent,\n    url: sentryBuildOptions.sentryUrl,\n    sourcemaps: {\n      disable: skipSourcemapsUpload ? true : (sentryBuildOptions.sourcemaps?.disable ?? false),\n      rewriteSources: rewriteWebpackSources,\n      assets: sentryBuildOptions.sourcemaps?.assets ?? sourcemapUploadAssets,\n      ignore: sentryBuildOptions.sourcemaps?.ignore ?? sourcemapUploadIgnore,\n      filesToDeleteAfterUpload,\n      ...sentryBuildOptions.unstable_sentryWebpackPluginOptions?.sourcemaps,\n    },\n    release: createReleaseConfig(releaseName, sentryBuildOptions),\n    bundleSizeOptimizations: {\n      ...sentryBuildOptions.bundleSizeOptimizations,\n    },\n    _metaOptions: {\n      loggerPrefixOverride: loggerPrefix,\n      telemetry: {\n        metaFramework: 'nextjs',\n      },\n    },\n    ...sentryBuildOptions.unstable_sentryWebpackPluginOptions,\n  };\n}\n\nexports.getBuildPluginOptions = getBuildPluginOptions;\nexports.normalizePathForGlob = normalizePathForGlob;\n//# sourceMappingURL=getBuildPluginOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst getBuildPluginOptions = __webpack_require__(/*! ./getBuildPluginOptions.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\");\n\n/**\n * This function is called by Next.js after the production build is complete.\n * It is used to upload sourcemaps to Sentry.\n */\nasync function handleRunAfterProductionCompile(\n  { releaseName, distDir, buildTool },\n  sentryBuildOptions,\n) {\n  if (sentryBuildOptions.debug) {\n    // eslint-disable-next-line no-console\n    console.debug('[@sentry/nextjs] Running runAfterProductionCompile logic.');\n  }\n\n  const { createSentryBuildPluginManager } =\n    core.loadModule(\n      '@sentry/bundler-plugin-core',\n      module,\n    ) ?? {};\n\n  if (!createSentryBuildPluginManager) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] Could not load build manager package. Will not run runAfterProductionCompile logic.',\n    );\n    return;\n  }\n\n  const options = getBuildPluginOptions.getBuildPluginOptions({\n    sentryBuildOptions,\n    releaseName,\n    distDirAbsPath: distDir,\n    buildTool: `after-production-compile-${buildTool}`,\n  });\n\n  const sentryBuildPluginManager = createSentryBuildPluginManager(options, {\n    buildTool,\n    loggerPrefix: '[@sentry/nextjs - After Production Compile]',\n  });\n\n  await sentryBuildPluginManager.telemetry.emitBundlerPluginExecutionSignal();\n  await sentryBuildPluginManager.createRelease();\n  await sentryBuildPluginManager.injectDebugIds([distDir]);\n  await sentryBuildPluginManager.uploadSourcemaps([distDir], {\n    // We don't want to prepare the artifacts because we injected debug ids manually before\n    prepareArtifacts: false,\n  });\n  await sentryBuildPluginManager.deleteArtifacts();\n}\n\nexports.handleRunAfterProductionCompile = handleRunAfterProductionCompile;\n//# sourceMappingURL=handleRunAfterProductionCompile.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy9oYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsc0hBQWM7QUFDbkMsOEJBQThCLG1CQUFPLENBQUMsaVFBQTRCOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxpQ0FBaUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUsaUNBQWlDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29uZmlnL2hhbmRsZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGdldEJ1aWxkUGx1Z2luT3B0aW9ucyA9IHJlcXVpcmUoJy4vZ2V0QnVpbGRQbHVnaW5PcHRpb25zLmpzJyk7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgTmV4dC5qcyBhZnRlciB0aGUgcHJvZHVjdGlvbiBidWlsZCBpcyBjb21wbGV0ZS5cbiAqIEl0IGlzIHVzZWQgdG8gdXBsb2FkIHNvdXJjZW1hcHMgdG8gU2VudHJ5LlxuICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlKFxuICB7IHJlbGVhc2VOYW1lLCBkaXN0RGlyLCBidWlsZFRvb2wgfSxcbiAgc2VudHJ5QnVpbGRPcHRpb25zLFxuKSB7XG4gIGlmIChzZW50cnlCdWlsZE9wdGlvbnMuZGVidWcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZGVidWcoJ1tAc2VudHJ5L25leHRqc10gUnVubmluZyBydW5BZnRlclByb2R1Y3Rpb25Db21waWxlIGxvZ2ljLicpO1xuICB9XG5cbiAgY29uc3QgeyBjcmVhdGVTZW50cnlCdWlsZFBsdWdpbk1hbmFnZXIgfSA9XG4gICAgY29yZS5sb2FkTW9kdWxlKFxuICAgICAgJ0BzZW50cnkvYnVuZGxlci1wbHVnaW4tY29yZScsXG4gICAgICBtb2R1bGUsXG4gICAgKSA/PyB7fTtcblxuICBpZiAoIWNyZWF0ZVNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tAc2VudHJ5L25leHRqc10gQ291bGQgbm90IGxvYWQgYnVpbGQgbWFuYWdlciBwYWNrYWdlLiBXaWxsIG5vdCBydW4gcnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZSBsb2dpYy4nLFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGdldEJ1aWxkUGx1Z2luT3B0aW9ucy5nZXRCdWlsZFBsdWdpbk9wdGlvbnMoe1xuICAgIHNlbnRyeUJ1aWxkT3B0aW9ucyxcbiAgICByZWxlYXNlTmFtZSxcbiAgICBkaXN0RGlyQWJzUGF0aDogZGlzdERpcixcbiAgICBidWlsZFRvb2w6IGBhZnRlci1wcm9kdWN0aW9uLWNvbXBpbGUtJHtidWlsZFRvb2x9YCxcbiAgfSk7XG5cbiAgY29uc3Qgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyID0gY3JlYXRlU2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyKG9wdGlvbnMsIHtcbiAgICBidWlsZFRvb2wsXG4gICAgbG9nZ2VyUHJlZml4OiAnW0BzZW50cnkvbmV4dGpzIC0gQWZ0ZXIgUHJvZHVjdGlvbiBDb21waWxlXScsXG4gIH0pO1xuXG4gIGF3YWl0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlci50ZWxlbWV0cnkuZW1pdEJ1bmRsZXJQbHVnaW5FeGVjdXRpb25TaWduYWwoKTtcbiAgYXdhaXQgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyLmNyZWF0ZVJlbGVhc2UoKTtcbiAgYXdhaXQgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyLmluamVjdERlYnVnSWRzKFtkaXN0RGlyXSk7XG4gIGF3YWl0IHNlbnRyeUJ1aWxkUGx1Z2luTWFuYWdlci51cGxvYWRTb3VyY2VtYXBzKFtkaXN0RGlyXSwge1xuICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gcHJlcGFyZSB0aGUgYXJ0aWZhY3RzIGJlY2F1c2Ugd2UgaW5qZWN0ZWQgZGVidWcgaWRzIG1hbnVhbGx5IGJlZm9yZVxuICAgIHByZXBhcmVBcnRpZmFjdHM6IGZhbHNlLFxuICB9KTtcbiAgYXdhaXQgc2VudHJ5QnVpbGRQbHVnaW5NYW5hZ2VyLmRlbGV0ZUFydGlmYWN0cygpO1xufVxuXG5leHBvcnRzLmhhbmRsZVJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUgPSBoYW5kbGVSdW5BZnRlclByb2R1Y3Rpb25Db21waWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlUnVuQWZ0ZXJQcm9kdWN0aW9uQ29tcGlsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, Symbol.toStringTag, {\n    value: 'Module'\n});\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nlet manifestCache = null;\nlet lastAppDirPath = null;\nlet lastIncludeRouteGroups = undefined;\nfunction isPageFile(filename) {\n    return filename === 'page.tsx' || filename === 'page.jsx' || filename === 'page.ts' || filename === 'page.js';\n}\nfunction isRouteGroup(name) {\n    return name.startsWith('(') && name.endsWith(')');\n}\nfunction normalizeRoutePath(routePath) {\n    // Remove route group segments from the path\n    return routePath.replace(/\\/\\([^)]+\\)/g, '');\n}\nfunction getDynamicRouteSegment(name) {\n    if (name.startsWith('[[...') && name.endsWith(']]')) {\n        // Optional catchall: [[...param]]\n        const paramName = name.slice(5, -2); // Remove [[... and ]]\n        return `:${paramName}*?`; // Mark with ? as optional\n    } else if (name.startsWith('[...') && name.endsWith(']')) {\n        // Required catchall: [...param]\n        const paramName = name.slice(4, -1); // Remove [... and ]\n        return `:${paramName}*`;\n    }\n    // Regular dynamic: [param]\n    return `:${name.slice(1, -1)}`;\n}\nfunction buildRegexForDynamicRoute(routePath) {\n    const segments = routePath.split('/').filter(Boolean);\n    const regexSegments = [];\n    const paramNames = [];\n    let hasOptionalCatchall = false;\n    for (const segment of segments){\n        if (segment.startsWith(':')) {\n            const paramName = segment.substring(1);\n            if (paramName.endsWith('*?')) {\n                // Optional catchall: matches zero or more segments\n                const cleanParamName = paramName.slice(0, -2);\n                paramNames.push(cleanParamName);\n                // Handling this special case in pattern construction below\n                hasOptionalCatchall = true;\n            } else if (paramName.endsWith('*')) {\n                // Required catchall: matches one or more segments\n                const cleanParamName = paramName.slice(0, -1);\n                paramNames.push(cleanParamName);\n                regexSegments.push('(.+)');\n            } else {\n                // Regular dynamic segment\n                paramNames.push(paramName);\n                regexSegments.push('([^/]+)');\n            }\n        } else {\n            // Static segment - escape regex special characters including route group parentheses\n            regexSegments.push(segment.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n        }\n    }\n    let pattern;\n    if (hasOptionalCatchall) {\n        if (regexSegments.length === 0) {\n            // If the optional catchall happens at the root, accept any path starting\n            // with a slash. Need capturing group for parameter extraction.\n            pattern = '^/(.*)$';\n        } else {\n            // For optional catchall, make the trailing slash and segments optional\n            // This allows matching both /catchall and /catchall/anything\n            const staticParts = regexSegments.join('/');\n            pattern = `^/${staticParts}(?:/(.*))?$`;\n        }\n    } else {\n        pattern = `^/${regexSegments.join('/')}$`;\n    }\n    return {\n        regex: pattern,\n        paramNames\n    };\n}\nfunction scanAppDirectory(dir, basePath = '', includeRouteGroups = false) {\n    const dynamicRoutes = [];\n    const staticRoutes = [];\n    try {\n        const entries = fs.readdirSync(dir, {\n            withFileTypes: true\n        });\n        const pageFile = entries.some((entry)=>isPageFile(entry.name));\n        if (pageFile) {\n            // Conditionally normalize the path based on includeRouteGroups option\n            const routePath = includeRouteGroups ? basePath || '/' : normalizeRoutePath(basePath || '/');\n            const isDynamic = routePath.includes(':');\n            if (isDynamic) {\n                const { regex, paramNames } = buildRegexForDynamicRoute(routePath);\n                dynamicRoutes.push({\n                    path: routePath,\n                    regex,\n                    paramNames\n                });\n            } else {\n                staticRoutes.push({\n                    path: routePath\n                });\n            }\n        }\n        for (const entry of entries){\n            if (entry.isDirectory()) {\n                const fullPath = path.join(dir, entry.name);\n                let routeSegment;\n                const isDynamic = entry.name.startsWith('[') && entry.name.endsWith(']');\n                const isRouteGroupDir = isRouteGroup(entry.name);\n                if (isRouteGroupDir) {\n                    if (includeRouteGroups) {\n                        routeSegment = entry.name;\n                    } else {\n                        routeSegment = '';\n                    }\n                } else if (isDynamic) {\n                    routeSegment = getDynamicRouteSegment(entry.name);\n                } else {\n                    routeSegment = entry.name;\n                }\n                const newBasePath = routeSegment ? `${basePath}/${routeSegment}` : basePath;\n                const subRoutes = scanAppDirectory(fullPath, newBasePath, includeRouteGroups);\n                dynamicRoutes.push(...subRoutes.dynamicRoutes);\n                staticRoutes.push(...subRoutes.staticRoutes);\n            }\n        }\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn('Error building route manifest:', error);\n    }\n    return {\n        dynamicRoutes,\n        staticRoutes\n    };\n}\n/**\n * Returns a route manifest for the given app directory\n */ function createRouteManifest(options) {\n    let targetDir;\n    {\n        const projectDir = process.cwd();\n        const maybeAppDirPath = path.join(projectDir, 'app');\n        const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n        if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n            targetDir = maybeAppDirPath;\n        } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n            targetDir = maybeSrcAppDirPath;\n        }\n    }\n    if (!targetDir) {\n        return {\n            dynamicRoutes: [],\n            staticRoutes: []\n        };\n    }\n    // Check if we can use cached version\n    if (manifestCache && lastAppDirPath === targetDir && lastIncludeRouteGroups === options?.includeRouteGroups) {\n        return manifestCache;\n    }\n    const { dynamicRoutes, staticRoutes } = scanAppDirectory(targetDir, '', options?.includeRouteGroups);\n    const manifest = {\n        dynamicRoutes,\n        staticRoutes\n    };\n    // set cache\n    manifestCache = manifest;\n    lastAppDirPath = targetDir;\n    lastIncludeRouteGroups = options?.includeRouteGroups;\n    return manifest;\n}\nexports.createRouteManifest = createRouteManifest; //# sourceMappingURL=createRouteManifest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst generateValueInjectionRules = __webpack_require__(/*! ./generateValueInjectionRules.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js\");\n\n/**\n * Construct a Turbopack config object from a Next.js config object and a Turbopack options object.\n *\n * @param userNextConfig - The Next.js config object.\n * @param turbopackOptions - The Turbopack options object.\n * @returns The Turbopack config object.\n */\nfunction constructTurbopackConfig({\n  userNextConfig,\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const newConfig = {\n    ...userNextConfig.turbopack,\n  };\n\n  const valueInjectionRules = generateValueInjectionRules.generateValueInjectionRules({\n    routeManifest,\n    nextJsVersion,\n  });\n\n  for (const { matcher, rule } of valueInjectionRules) {\n    newConfig.rules = safelyAddTurbopackRule(newConfig.rules, { matcher, rule });\n  }\n\n  return newConfig;\n}\n\n/**\n * Safely add a Turbopack rule to the existing rules.\n *\n * @param existingRules - The existing rules.\n * @param matcher - The matcher for the rule.\n * @param rule - The rule to add.\n * @returns The updated rules object.\n */\nfunction safelyAddTurbopackRule(\n  existingRules,\n  { matcher, rule },\n) {\n  if (!existingRules) {\n    return {\n      [matcher]: rule,\n    };\n  }\n\n  // If the rule already exists, we don't want to mess with it.\n  if (existingRules[matcher]) {\n    core.debug.log(\n      `[@sentry/nextjs] - Turbopack rule already exists for ${matcher}. Please remove it from your Next.js config in order for Sentry to work properly.`,\n    );\n    return existingRules;\n  }\n\n  return {\n    ...existingRules,\n    [matcher]: rule,\n  };\n}\n\nexports.constructTurbopackConfig = constructTurbopackConfig;\nexports.safelyAddTurbopackRule = safelyAddTurbopackRule;\n//# sourceMappingURL=constructTurbopackConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy90dXJib3BhY2svY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxvQ0FBb0MsbUJBQU8sQ0FBQyx1UkFBa0M7O0FBRTlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILGVBQWUsZ0JBQWdCO0FBQy9CLGdFQUFnRSxlQUFlO0FBQy9FOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGVBQWU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxRQUFRO0FBQ3RFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDQUFnQztBQUNoQyw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy90dXJib3BhY2svY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBnZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMgPSByZXF1aXJlKCcuL2dlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcy5qcycpO1xuXG4vKipcbiAqIENvbnN0cnVjdCBhIFR1cmJvcGFjayBjb25maWcgb2JqZWN0IGZyb20gYSBOZXh0LmpzIGNvbmZpZyBvYmplY3QgYW5kIGEgVHVyYm9wYWNrIG9wdGlvbnMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB1c2VyTmV4dENvbmZpZyAtIFRoZSBOZXh0LmpzIGNvbmZpZyBvYmplY3QuXG4gKiBAcGFyYW0gdHVyYm9wYWNrT3B0aW9ucyAtIFRoZSBUdXJib3BhY2sgb3B0aW9ucyBvYmplY3QuXG4gKiBAcmV0dXJucyBUaGUgVHVyYm9wYWNrIGNvbmZpZyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZyh7XG4gIHVzZXJOZXh0Q29uZmlnLFxuICByb3V0ZU1hbmlmZXN0LFxuICBuZXh0SnNWZXJzaW9uLFxufVxuXG4pIHtcbiAgY29uc3QgbmV3Q29uZmlnID0ge1xuICAgIC4uLnVzZXJOZXh0Q29uZmlnLnR1cmJvcGFjayxcbiAgfTtcblxuICBjb25zdCB2YWx1ZUluamVjdGlvblJ1bGVzID0gZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzLmdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcyh7XG4gICAgcm91dGVNYW5pZmVzdCxcbiAgICBuZXh0SnNWZXJzaW9uLFxuICB9KTtcblxuICBmb3IgKGNvbnN0IHsgbWF0Y2hlciwgcnVsZSB9IG9mIHZhbHVlSW5qZWN0aW9uUnVsZXMpIHtcbiAgICBuZXdDb25maWcucnVsZXMgPSBzYWZlbHlBZGRUdXJib3BhY2tSdWxlKG5ld0NvbmZpZy5ydWxlcywgeyBtYXRjaGVyLCBydWxlIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld0NvbmZpZztcbn1cblxuLyoqXG4gKiBTYWZlbHkgYWRkIGEgVHVyYm9wYWNrIHJ1bGUgdG8gdGhlIGV4aXN0aW5nIHJ1bGVzLlxuICpcbiAqIEBwYXJhbSBleGlzdGluZ1J1bGVzIC0gVGhlIGV4aXN0aW5nIHJ1bGVzLlxuICogQHBhcmFtIG1hdGNoZXIgLSBUaGUgbWF0Y2hlciBmb3IgdGhlIHJ1bGUuXG4gKiBAcGFyYW0gcnVsZSAtIFRoZSBydWxlIHRvIGFkZC5cbiAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIHJ1bGVzIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZShcbiAgZXhpc3RpbmdSdWxlcyxcbiAgeyBtYXRjaGVyLCBydWxlIH0sXG4pIHtcbiAgaWYgKCFleGlzdGluZ1J1bGVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFttYXRjaGVyXTogcnVsZSxcbiAgICB9O1xuICB9XG5cbiAgLy8gSWYgdGhlIHJ1bGUgYWxyZWFkeSBleGlzdHMsIHdlIGRvbid0IHdhbnQgdG8gbWVzcyB3aXRoIGl0LlxuICBpZiAoZXhpc3RpbmdSdWxlc1ttYXRjaGVyXSkge1xuICAgIGNvcmUuZGVidWcubG9nKFxuICAgICAgYFtAc2VudHJ5L25leHRqc10gLSBUdXJib3BhY2sgcnVsZSBhbHJlYWR5IGV4aXN0cyBmb3IgJHttYXRjaGVyfS4gUGxlYXNlIHJlbW92ZSBpdCBmcm9tIHlvdXIgTmV4dC5qcyBjb25maWcgaW4gb3JkZXIgZm9yIFNlbnRyeSB0byB3b3JrIHByb3Blcmx5LmAsXG4gICAgKTtcbiAgICByZXR1cm4gZXhpc3RpbmdSdWxlcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uZXhpc3RpbmdSdWxlcyxcbiAgICBbbWF0Y2hlcl06IHJ1bGUsXG4gIH07XG59XG5cbmV4cG9ydHMuY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnID0gY29uc3RydWN0VHVyYm9wYWNrQ29uZmlnO1xuZXhwb3J0cy5zYWZlbHlBZGRUdXJib3BhY2tSdWxlID0gc2FmZWx5QWRkVHVyYm9wYWNrUnVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0cnVjdFR1cmJvcGFja0NvbmZpZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst path = __webpack_require__(/*! path */ \"path\");\n\n/**\n * Generate the value injection rules for client and server in turbopack config.\n */\nfunction generateValueInjectionRules({\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const rules = [];\n  const isomorphicValues = {};\n  let clientValues = {};\n  let serverValues = {};\n\n  if (nextJsVersion) {\n    // This is used to determine version-based dev-symbolication behavior\n    isomorphicValues._sentryNextJsVersion = nextJsVersion;\n  }\n\n  if (routeManifest) {\n    clientValues._sentryRouteManifest = JSON.stringify(routeManifest);\n  }\n\n  if (Object.keys(isomorphicValues).length > 0) {\n    clientValues = { ...clientValues, ...isomorphicValues };\n    serverValues = { ...serverValues, ...isomorphicValues };\n  }\n\n  // Client value injection\n  if (Object.keys(clientValues).length > 0) {\n    rules.push({\n      matcher: '**/instrumentation-client.*',\n      rule: {\n        loaders: [\n          {\n            loader: path.resolve(__dirname, '..', 'loaders', 'valueInjectionLoader.js'),\n            options: {\n              values: clientValues,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  // Server value injection\n  if (Object.keys(serverValues).length > 0) {\n    rules.push({\n      matcher: '**/instrumentation.*',\n      rule: {\n        loaders: [\n          {\n            loader: path.resolve(__dirname, '..', 'loaders', 'valueInjectionLoader.js'),\n            options: {\n              values: serverValues,\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  return rules;\n}\n\nexports.generateValueInjectionRules = generateValueInjectionRules;\n//# sourceMappingURL=generateValueInjectionRules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy90dXJib3BhY2svZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStuZXh0anNAZmlsZSthcHBzK3NlbnRyeXZpYmUrdmVuZG9yK3NlbnRyeS1uZXh0anMtMTAuMTcuMC50Z3pfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hX2I2a2lreXkyd3ducWZpdmtpNDJvNHZtemhxL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29uZmlnL3R1cmJvcGFjay9nZW5lcmF0ZVZhbHVlSW5qZWN0aW9uUnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8qKlxuICogR2VuZXJhdGUgdGhlIHZhbHVlIGluamVjdGlvbiBydWxlcyBmb3IgY2xpZW50IGFuZCBzZXJ2ZXIgaW4gdHVyYm9wYWNrIGNvbmZpZy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVWYWx1ZUluamVjdGlvblJ1bGVzKHtcbiAgcm91dGVNYW5pZmVzdCxcbiAgbmV4dEpzVmVyc2lvbixcbn1cblxuKSB7XG4gIGNvbnN0IHJ1bGVzID0gW107XG4gIGNvbnN0IGlzb21vcnBoaWNWYWx1ZXMgPSB7fTtcbiAgbGV0IGNsaWVudFZhbHVlcyA9IHt9O1xuICBsZXQgc2VydmVyVmFsdWVzID0ge307XG5cbiAgaWYgKG5leHRKc1ZlcnNpb24pIHtcbiAgICAvLyBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHZlcnNpb24tYmFzZWQgZGV2LXN5bWJvbGljYXRpb24gYmVoYXZpb3JcbiAgICBpc29tb3JwaGljVmFsdWVzLl9zZW50cnlOZXh0SnNWZXJzaW9uID0gbmV4dEpzVmVyc2lvbjtcbiAgfVxuXG4gIGlmIChyb3V0ZU1hbmlmZXN0KSB7XG4gICAgY2xpZW50VmFsdWVzLl9zZW50cnlSb3V0ZU1hbmlmZXN0ID0gSlNPTi5zdHJpbmdpZnkocm91dGVNYW5pZmVzdCk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoaXNvbW9ycGhpY1ZhbHVlcykubGVuZ3RoID4gMCkge1xuICAgIGNsaWVudFZhbHVlcyA9IHsgLi4uY2xpZW50VmFsdWVzLCAuLi5pc29tb3JwaGljVmFsdWVzIH07XG4gICAgc2VydmVyVmFsdWVzID0geyAuLi5zZXJ2ZXJWYWx1ZXMsIC4uLmlzb21vcnBoaWNWYWx1ZXMgfTtcbiAgfVxuXG4gIC8vIENsaWVudCB2YWx1ZSBpbmplY3Rpb25cbiAgaWYgKE9iamVjdC5rZXlzKGNsaWVudFZhbHVlcykubGVuZ3RoID4gMCkge1xuICAgIHJ1bGVzLnB1c2goe1xuICAgICAgbWF0Y2hlcjogJyoqL2luc3RydW1lbnRhdGlvbi1jbGllbnQuKicsXG4gICAgICBydWxlOiB7XG4gICAgICAgIGxvYWRlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2FkZXI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICdsb2FkZXJzJywgJ3ZhbHVlSW5qZWN0aW9uTG9hZGVyLmpzJyksXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIHZhbHVlczogY2xpZW50VmFsdWVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFNlcnZlciB2YWx1ZSBpbmplY3Rpb25cbiAgaWYgKE9iamVjdC5rZXlzKHNlcnZlclZhbHVlcykubGVuZ3RoID4gMCkge1xuICAgIHJ1bGVzLnB1c2goe1xuICAgICAgbWF0Y2hlcjogJyoqL2luc3RydW1lbnRhdGlvbi4qJyxcbiAgICAgIHJ1bGU6IHtcbiAgICAgICAgbG9hZGVyczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxvYWRlcjogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ2xvYWRlcnMnLCAndmFsdWVJbmplY3Rpb25Mb2FkZXIuanMnKSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgdmFsdWVzOiBzZXJ2ZXJWYWx1ZXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcyA9IGdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlVmFsdWVJbmplY3Rpb25SdWxlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/generateValueInjectionRules.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst resolve = __webpack_require__(/*! resolve */ \"(ssr)/../../node_modules/.pnpm/resolve@1.22.8/node_modules/resolve/index.js\");\n\n/**\n * Returns the version of Next.js installed in the project, or undefined if it cannot be determined.\n */\nfunction getNextjsVersion() {\n  const nextjsPackageJsonPath = resolveNextjsPackageJson();\n  if (nextjsPackageJsonPath) {\n    try {\n      const nextjsPackageJson = JSON.parse(\n        fs.readFileSync(nextjsPackageJsonPath, { encoding: 'utf-8' }),\n      );\n      return nextjsPackageJson.version;\n    } catch {\n      // noop\n    }\n  }\n\n  return undefined;\n}\n\nfunction resolveNextjsPackageJson() {\n  try {\n    return resolve.sync('next/package.json', { basedir: process.cwd() });\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Checks if the current Next.js version supports the runAfterProductionCompile hook.\n * This hook was introduced in Next.js 15.4.1. (https://github.com/vercel/next.js/pull/77345)\n *\n * @param version - version string to check.\n * @returns true if Next.js version is 15.4.1 or higher\n */\nfunction supportsProductionCompileHook(version) {\n  const versionToCheck = version;\n  if (!versionToCheck) {\n    return false;\n  }\n\n  const { major, minor, patch } = core.parseSemver(versionToCheck);\n\n  if (major === undefined || minor === undefined || patch === undefined) {\n    return false;\n  }\n\n  if (major > 15) {\n    return true;\n  }\n\n  // For major version 15, check if it's 15.4.1 or higher\n  if (major === 15) {\n    if (minor > 4) {\n      return true;\n    }\n    if (minor === 4 && patch >= 1) {\n      return true;\n    }\n    return false;\n  }\n\n  return false;\n}\n\nexports.getNextjsVersion = getNextjsVersion;\nexports.supportsProductionCompileHook = supportsProductionCompileHook;\n//# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixnQkFBZ0IsbUJBQU8sQ0FBQyw0RkFBUzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxtQkFBbUI7QUFDcEU7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLHdCQUF3QjtBQUN2RSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLHNCQUFzQjs7QUFFaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QixxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbmZpZy91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCByZXNvbHZlID0gcmVxdWlyZSgncmVzb2x2ZScpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHZlcnNpb24gb2YgTmV4dC5qcyBpbnN0YWxsZWQgaW4gdGhlIHByb2plY3QsIG9yIHVuZGVmaW5lZCBpZiBpdCBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dGpzVmVyc2lvbigpIHtcbiAgY29uc3QgbmV4dGpzUGFja2FnZUpzb25QYXRoID0gcmVzb2x2ZU5leHRqc1BhY2thZ2VKc29uKCk7XG4gIGlmIChuZXh0anNQYWNrYWdlSnNvblBhdGgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV4dGpzUGFja2FnZUpzb24gPSBKU09OLnBhcnNlKFxuICAgICAgICBmcy5yZWFkRmlsZVN5bmMobmV4dGpzUGFja2FnZUpzb25QYXRoLCB7IGVuY29kaW5nOiAndXRmLTgnIH0pLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXh0anNQYWNrYWdlSnNvbi52ZXJzaW9uO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gbm9vcFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVOZXh0anNQYWNrYWdlSnNvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVzb2x2ZS5zeW5jKCduZXh0L3BhY2thZ2UuanNvbicsIHsgYmFzZWRpcjogcHJvY2Vzcy5jd2QoKSB9KTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBOZXh0LmpzIHZlcnNpb24gc3VwcG9ydHMgdGhlIHJ1bkFmdGVyUHJvZHVjdGlvbkNvbXBpbGUgaG9vay5cbiAqIFRoaXMgaG9vayB3YXMgaW50cm9kdWNlZCBpbiBOZXh0LmpzIDE1LjQuMS4gKGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9wdWxsLzc3MzQ1KVxuICpcbiAqIEBwYXJhbSB2ZXJzaW9uIC0gdmVyc2lvbiBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB0cnVlIGlmIE5leHQuanMgdmVyc2lvbiBpcyAxNS40LjEgb3IgaGlnaGVyXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRzUHJvZHVjdGlvbkNvbXBpbGVIb29rKHZlcnNpb24pIHtcbiAgY29uc3QgdmVyc2lvblRvQ2hlY2sgPSB2ZXJzaW9uO1xuICBpZiAoIXZlcnNpb25Ub0NoZWNrKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgeyBtYWpvciwgbWlub3IsIHBhdGNoIH0gPSBjb3JlLnBhcnNlU2VtdmVyKHZlcnNpb25Ub0NoZWNrKTtcblxuICBpZiAobWFqb3IgPT09IHVuZGVmaW5lZCB8fCBtaW5vciA9PT0gdW5kZWZpbmVkIHx8IHBhdGNoID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAobWFqb3IgPiAxNSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRm9yIG1ham9yIHZlcnNpb24gMTUsIGNoZWNrIGlmIGl0J3MgMTUuNC4xIG9yIGhpZ2hlclxuICBpZiAobWFqb3IgPT09IDE1KSB7XG4gICAgaWYgKG1pbm9yID4gNCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChtaW5vciA9PT0gNCAmJiBwYXRjaCA+PSAxKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnRzLmdldE5leHRqc1ZlcnNpb24gPSBnZXROZXh0anNWZXJzaW9uO1xuZXhwb3J0cy5zdXBwb3J0c1Byb2R1Y3Rpb25Db21waWxlSG9vayA9IHN1cHBvcnRzUHJvZHVjdGlvbkNvbXBpbGVIb29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst chalk = __webpack_require__(/*! chalk */ \"(ssr)/../../node_modules/.pnpm/chalk@3.0.0/node_modules/chalk/source/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst resolve = __webpack_require__(/*! resolve */ \"(ssr)/../../node_modules/.pnpm/resolve@1.22.8/node_modules/resolve/index.js\");\nconst getBuildPluginOptions = __webpack_require__(/*! ./getBuildPluginOptions.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/getBuildPluginOptions.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\");\n\n/* eslint-disable complexity */\n/* eslint-disable max-lines */\n\n\n// Next.js runs webpack 3 times, once for the client, the server, and for edge. Because we don't want to print certain\n// warnings 3 times, we keep track of them here.\nlet showedMissingGlobalErrorWarningMsg = false;\n\n/**\n * Construct the function which will be used as the nextjs config's `webpack` value.\n *\n * Sets:\n *   - `devtool`, to ensure high-quality sourcemaps are generated\n *   - `entry`, to include user's sentry config files (where `Sentry.init` is called) in the build\n *   - `plugins`, to add SentryWebpackPlugin\n *\n * @param userNextConfig The user's existing nextjs config, as passed to `withSentryConfig`\n * @param userSentryOptions The user's SentryWebpackPlugin config, as passed to `withSentryConfig`\n * @returns The function to set as the nextjs config's `webpack` value\n */\nfunction constructWebpackConfigFunction({\n  userNextConfig = {},\n  userSentryOptions = {},\n  releaseName,\n  routeManifest,\n  nextJsVersion,\n  useRunAfterProductionCompileHook,\n}\n\n) {\n  // Will be called by nextjs and passed its default webpack configuration and context data about the build (whether\n  // we're building server or client, whether we're in dev, what version of webpack we're using, etc). Note that\n  // `incomingConfig` and `buildContext` are referred to as `config` and `options` in the nextjs docs.\n  return function newWebpackFunction(\n    incomingConfig,\n    buildContext,\n  ) {\n    const { isServer, dev: isDev, dir: projectDir } = buildContext;\n    const runtime = isServer ? (buildContext.nextRuntime === 'edge' ? 'edge' : 'server') : 'client';\n    // Default page extensions per https://github.com/vercel/next.js/blob/f1dbc9260d48c7995f6c52f8fbcc65f08e627992/packages/next/server/config-shared.ts#L161\n    const pageExtensions = userNextConfig.pageExtensions || ['tsx', 'ts', 'jsx', 'js'];\n    const dotPrefixedPageExtensions = pageExtensions.map(ext => `.${ext}`);\n    const pageExtensionRegex = pageExtensions.map(core.escapeStringForRegex).join('|');\n    const nextVersion = nextJsVersion || util.getNextjsVersion();\n    const { major } = core.parseSemver(nextVersion || '');\n\n    // We add `.ts` and `.js` back in because `pageExtensions` might not be relevant to the instrumentation file\n    // e.g. user's setting `.mdx`. In that case we still want to default look up\n    // `instrumentation.ts` and `instrumentation.js`\n    const instrumentationFile = getInstrumentationFile(projectDir, dotPrefixedPageExtensions.concat(['.ts', '.js']));\n\n    if (runtime !== 'client') {\n      warnAboutDeprecatedConfigFiles(projectDir, instrumentationFile, runtime);\n    }\n    if (runtime === 'server') {\n      // was added in v15 (https://github.com/vercel/next.js/pull/67539)\n      if (major && major >= 15) {\n        warnAboutMissingOnRequestErrorHandler(instrumentationFile);\n      }\n    }\n\n    let rawNewConfig = { ...incomingConfig };\n\n    // if user has custom webpack config (which always takes the form of a function), run it so we have actual values to\n    // work with\n    if ('webpack' in userNextConfig && typeof userNextConfig.webpack === 'function') {\n      rawNewConfig = userNextConfig.webpack(rawNewConfig, buildContext);\n    }\n\n    // This mutates `rawNewConfig` in place, but also returns it in order to switch its type to one in which\n    // `newConfig.module.rules` is required, so we don't have to keep asserting its existence\n    const newConfig = setUpModuleRules(rawNewConfig);\n\n    // Add a loader which will inject code that sets global values\n    addValueInjectionLoader({\n      newConfig,\n      userNextConfig,\n      userSentryOptions,\n      buildContext,\n      releaseName,\n      routeManifest,\n      nextJsVersion,\n    });\n\n    addOtelWarningIgnoreRule(newConfig);\n\n    // Add edge runtime polyfills when building for edge in dev mode\n    if (major && major === 13 && runtime === 'edge' && isDev) {\n      addEdgeRuntimePolyfills(newConfig, buildContext);\n    }\n\n    let pagesDirPath;\n    const maybePagesDirPath = path.join(projectDir, 'pages');\n    const maybeSrcPagesDirPath = path.join(projectDir, 'src', 'pages');\n    if (fs.existsSync(maybePagesDirPath) && fs.lstatSync(maybePagesDirPath).isDirectory()) {\n      pagesDirPath = maybePagesDirPath;\n    } else if (fs.existsSync(maybeSrcPagesDirPath) && fs.lstatSync(maybeSrcPagesDirPath).isDirectory()) {\n      pagesDirPath = maybeSrcPagesDirPath;\n    }\n\n    let appDirPath;\n    const maybeAppDirPath = path.join(projectDir, 'app');\n    const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n    if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n      appDirPath = maybeAppDirPath;\n    } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n      appDirPath = maybeSrcAppDirPath;\n    }\n\n    const apiRoutesPath = pagesDirPath ? path.join(pagesDirPath, 'api') : undefined;\n\n    const middlewareLocationFolder = pagesDirPath\n      ? path.join(pagesDirPath, '..')\n      : appDirPath\n        ? path.join(appDirPath, '..')\n        : projectDir;\n\n    const staticWrappingLoaderOptions = {\n      appDir: appDirPath,\n      pagesDir: pagesDirPath,\n      pageExtensionRegex,\n      excludeServerRoutes: userSentryOptions.excludeServerRoutes,\n      nextjsRequestAsyncStorageModulePath: getRequestAsyncStorageModuleLocation(\n        projectDir,\n        rawNewConfig.resolve?.modules,\n      ),\n    };\n\n    const normalizeLoaderResourcePath = (resourcePath) => {\n      // `resourcePath` may be an absolute path or a path relative to the context of the webpack config\n      let absoluteResourcePath;\n      if (path.isAbsolute(resourcePath)) {\n        absoluteResourcePath = resourcePath;\n      } else {\n        absoluteResourcePath = path.join(projectDir, resourcePath);\n      }\n\n      return path.normalize(absoluteResourcePath);\n    };\n\n    const isPageResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        pagesDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(pagesDirPath + path.sep) &&\n        !normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const isApiRouteResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) &&\n        dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext))\n      );\n    };\n\n    const possibleMiddlewareLocations = pageExtensions.map(middlewareFileEnding => {\n      return path.join(middlewareLocationFolder, `middleware.${middlewareFileEnding}`);\n    });\n    const isMiddlewareResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return possibleMiddlewareLocations.includes(normalizedAbsoluteResourcePath);\n    };\n\n    const isServerComponentResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n\n      // \".js, .jsx, or .tsx file extensions can be used for Pages\"\n      // https://beta.nextjs.org/docs/routing/pages-and-layouts#pages:~:text=.js%2C%20.jsx%2C%20or%20.tsx%20file%20extensions%20can%20be%20used%20for%20Pages.\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/](page|layout|loading|head|not-found)\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    const isRouteHandlerResource = (resourcePath) => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return (\n        appDirPath !== undefined &&\n        normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) &&\n        !!normalizedAbsoluteResourcePath.match(\n          // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n          new RegExp(`[\\\\\\\\/]route\\\\.(${pageExtensionRegex})$`),\n        )\n      );\n    };\n\n    if (isServer && userSentryOptions.autoInstrumentServerFunctions !== false) {\n      // It is very important that we insert our loaders at the beginning of the array because we expect any sort of transformations/transpilations (e.g. TS -> JS) to already have happened.\n\n      // Wrap pages\n      newConfig.module.rules.unshift({\n        test: isPageResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'page',\n            },\n          },\n        ],\n      });\n\n      let vercelCronsConfig = undefined;\n      try {\n        if (process.env.VERCEL && userSentryOptions.automaticVercelMonitors) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          vercelCronsConfig = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'vercel.json'), 'utf8')).crons;\n          if (vercelCronsConfig) {\n            core.debug.log(\n              `${chalk.cyan(\n                'info',\n              )} - Creating Sentry cron monitors for your Vercel Cron Jobs. You can disable this feature by setting the ${chalk.bold.cyan(\n                'automaticVercelMonitors',\n              )} option to false in you Next.js config.`,\n            );\n          }\n        }\n      } catch (e) {\n        if ((e ).code === 'ENOENT') ; else {\n          // log but noop\n          core.debug.error(\n            `${chalk.red(\n              'error',\n            )} - Sentry failed to read vercel.json for automatic cron job monitoring instrumentation`,\n            e,\n          );\n        }\n      }\n\n      // Wrap api routes\n      newConfig.module.rules.unshift({\n        test: isApiRouteResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              vercelCronsConfig,\n              wrappingTargetKind: 'api-route',\n            },\n          },\n        ],\n      });\n\n      // Wrap middleware\n      if (userSentryOptions.autoInstrumentMiddleware ?? true) {\n        newConfig.module.rules.unshift({\n          test: isMiddlewareResource,\n          use: [\n            {\n              loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n              options: {\n                ...staticWrappingLoaderOptions,\n                wrappingTargetKind: 'middleware',\n              },\n            },\n          ],\n        });\n      }\n    }\n\n    if (isServer && userSentryOptions.autoInstrumentAppDirectory !== false) {\n      // Wrap server components\n      newConfig.module.rules.unshift({\n        test: isServerComponentResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'server-component',\n            },\n          },\n        ],\n      });\n\n      // Wrap route handlers\n      newConfig.module.rules.unshift({\n        test: isRouteHandlerResource,\n        use: [\n          {\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'route-handler',\n            },\n          },\n        ],\n      });\n    }\n\n    if (appDirPath) {\n      const hasGlobalErrorFile = pageExtensions\n        .map(extension => `global-error.${extension}`)\n        .some(\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          globalErrorFile => fs.existsSync(path.join(appDirPath, globalErrorFile)),\n        );\n\n      if (\n        !hasGlobalErrorFile &&\n        !showedMissingGlobalErrorWarningMsg &&\n        !process.env.SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING\n      ) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${chalk.yellow(\n            'warn',\n          )}  - It seems like you don't have a global error handler set up. It is recommended that you add a ${chalk.cyan(\n            'global-error.js',\n          )} file with Sentry instrumentation so that React rendering errors are reported to Sentry. Read more: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#react-render-errors-in-app-router (you can suppress this warning by setting SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1 as environment variable)`,\n        );\n        showedMissingGlobalErrorWarningMsg = true;\n      }\n    }\n\n    if (!isServer) {\n      // Tell webpack to inject the client config files (containing the client-side `Sentry.init()` call) into the appropriate output\n      // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (If we don't do\n      // this, we'll have a statement of the form `x.y = () => f(x.y)`, where one of the things `f` does is call `x.y`.\n      // Since we're setting `x.y` to be a callback (which, by definition, won't run until some time later), by the time\n      // the function runs (causing `f` to run, causing `x.y` to run), `x.y` will point to the callback itself, rather\n      // than its original value. So calling it will call the callback which will call `f` which will call `x.y` which\n      // will call the callback which will call `f` which will call `x.y`... and on and on. Theoretically this could also\n      // be fixed by using `bind`, but this is way simpler.)\n      const origEntryProperty = newConfig.entry;\n      newConfig.entry = async () => addSentryToClientEntryProperty(origEntryProperty, buildContext);\n\n      const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n      if (clientSentryConfigFileName) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[@sentry/nextjs] DEPRECATION WARNING: It is recommended renaming your \\`${clientSentryConfigFileName}\\` file, or moving its content to \\`instrumentation-client.ts\\`. When using Turbopack \\`${clientSentryConfigFileName}\\` will no longer work. Read more about the \\`instrumentation-client.ts\\` file: https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation-client`,\n        );\n      }\n    }\n\n    const isStaticExport = userNextConfig?.output === 'export';\n\n    // We don't want to do any webpack plugin stuff OR any source maps stuff in dev mode or for the server on static-only builds.\n    // Symbolication for dev-mode errors is done elsewhere.\n    if (!(isDev || (isStaticExport && isServer))) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const { sentryWebpackPlugin } = core.loadModule('@sentry/webpack-plugin', module) ?? {};\n\n      if (sentryWebpackPlugin) {\n        if (!userSentryOptions.sourcemaps?.disable) {\n          // Source maps can be configured in 3 ways:\n          // 1. (next config): productionBrowserSourceMaps\n          // 2. (next config): experimental.serverSourceMaps\n          // 3. custom webpack configuration\n          //\n          // We only update this if no explicit value is set\n          // (Next.js defaults to `false`: https://github.com/vercel/next.js/blob/5f4f96c133bd6b10954812cc2fef6af085b82aa5/packages/next/src/build/webpack/config/blocks/base.ts#L61)\n          if (!newConfig.devtool) {\n            core.debug.log(`[@sentry/nextjs] Automatically enabling source map generation for ${runtime} build.`);\n            // `hidden-source-map` produces the same sourcemaps as `source-map`, but doesn't include the `sourceMappingURL`\n            // comment at the bottom. For folks who aren't publicly hosting their sourcemaps, this is helpful because then\n            // the browser won't look for them and throw errors into the console when it can't find them. Because this is a\n            // front-end-only problem, and because `sentry-cli` handles sourcemaps more reliably with the comment than\n            // without, the option to use `hidden-source-map` only applies to the client-side build.\n            if (isServer) {\n              newConfig.devtool = 'source-map';\n            } else {\n              newConfig.devtool = 'hidden-source-map';\n            }\n          }\n\n          // enable source map deletion if not explicitly disabled\n          if (!isServer && userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n            core.debug.warn(\n              '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n            );\n            userSentryOptions.sourcemaps = {\n              ...userSentryOptions.sourcemaps,\n              deleteSourcemapsAfterUpload: true,\n            };\n          }\n        }\n\n        newConfig.plugins = newConfig.plugins || [];\n        const { config: userNextConfig, dir, nextRuntime } = buildContext;\n        const buildTool = isServer ? (nextRuntime === 'edge' ? 'webpack-edge' : 'webpack-nodejs') : 'webpack-client';\n        const projectDir = getBuildPluginOptions.normalizePathForGlob(dir);\n        const distDir = getBuildPluginOptions.normalizePathForGlob((userNextConfig ).distDir ?? '.next');\n        const distDirAbsPath = path.posix.join(projectDir, distDir);\n\n        const sentryWebpackPluginInstance = sentryWebpackPlugin(\n          getBuildPluginOptions.getBuildPluginOptions({\n            sentryBuildOptions: userSentryOptions,\n            releaseName,\n            distDirAbsPath,\n            buildTool,\n            useRunAfterProductionCompileHook,\n          }),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        sentryWebpackPluginInstance._name = 'sentry-webpack-plugin'; // For tests and debugging. Serves no other purpose.\n        newConfig.plugins.push(sentryWebpackPluginInstance);\n      }\n    }\n\n    if (userSentryOptions.disableLogger) {\n      newConfig.plugins = newConfig.plugins || [];\n      newConfig.plugins.push(\n        new buildContext.webpack.DefinePlugin({\n          __SENTRY_DEBUG__: false,\n        }),\n      );\n    }\n\n    // We inject a map of dependencies that the nextjs app has, as we cannot reliably extract them at runtime, sadly\n    newConfig.plugins = newConfig.plugins || [];\n    newConfig.plugins.push(\n      new buildContext.webpack.DefinePlugin({\n        __SENTRY_SERVER_MODULES__: JSON.stringify(_getModules(projectDir)),\n      }),\n    );\n\n    return newConfig;\n  };\n}\n\n/**\n * Modify the webpack `entry` property so that the code in `sentry.client.config.js` is\n * included in the the necessary bundles.\n *\n * @param currentEntryProperty The value of the property before Sentry code has been injected\n * @param buildContext Object passed by nextjs containing metadata about the build\n * @returns The value which the new `entry` property (which will be a function) will return (TODO: this should return\n * the function, rather than the function's return value)\n */\nasync function addSentryToClientEntryProperty(\n  currentEntryProperty,\n  buildContext,\n) {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  const { dir: projectDir, dev: isDevMode } = buildContext;\n\n  const newEntryProperty =\n    typeof currentEntryProperty === 'function' ? await currentEntryProperty() : { ...currentEntryProperty };\n\n  const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n  const instrumentationClientFileName = getInstrumentationClientFile(projectDir);\n\n  const filesToInject = [];\n  if (clientSentryConfigFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${clientSentryConfigFileName}`);\n  }\n  if (instrumentationClientFileName) {\n    // we need to turn the filename into a path so webpack can find it\n    filesToInject.push(`./${instrumentationClientFileName}`);\n  }\n\n  // inject into all entry points which might contain user's code\n  for (const entryPointName in newEntryProperty) {\n    if (\n      entryPointName === 'pages/_app' ||\n      // entrypoint for `/app` pages\n      entryPointName === 'main-app'\n    ) {\n      addFilesToWebpackEntryPoint(newEntryProperty, entryPointName, filesToInject, isDevMode);\n    }\n  }\n\n  return newEntryProperty;\n}\n\n/**\n * Gets the content of the user's instrumentation file\n */\nfunction getInstrumentationFile(projectDir, dotPrefixedExtensions) {\n  const paths = dotPrefixedExtensions.flatMap(extension => [\n    ['src', `instrumentation${extension}`],\n    [`instrumentation${extension}`],\n  ]);\n\n  for (const pathSegments of paths) {\n    try {\n      return fs.readFileSync(path.resolve(projectDir, ...pathSegments), { encoding: 'utf-8' });\n    } catch {\n      // no-op\n    }\n  }\n\n  return null;\n}\n\n/**\n * Make sure the instrumentation file has a `onRequestError` Handler\n */\nfunction warnAboutMissingOnRequestErrorHandler(instrumentationFile) {\n  if (!instrumentationFile) {\n    if (!process.env.SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        chalk.yellow(\n          '[@sentry/nextjs] Could not find a Next.js instrumentation file. This indicates an incomplete configuration of the Sentry SDK. An instrumentation file is required for the Sentry SDK to be initialized on the server: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#create-initialization-config-files (you can suppress this warning by setting SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING=1 as environment variable)',\n        ),\n      );\n    }\n    return;\n  }\n\n  if (!instrumentationFile.includes('onRequestError')) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      chalk.yellow(\n        '[@sentry/nextjs] Could not find `onRequestError` hook in instrumentation file. This indicates outdated configuration of the Sentry SDK. Use `Sentry.captureRequestError` to instrument the `onRequestError` hook: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#errors-from-nested-react-server-components',\n      ),\n    );\n  }\n}\n\n/**\n * Searches for old `sentry.(server|edge).config.ts` files and Next.js instrumentation hooks and warns if there are \"old\"\n * config files and no signs of them inside the instrumentation hook.\n *\n * @param projectDir The root directory of the project, where config files would be located\n * @param platform Either \"server\" or \"edge\", so that we know which file to look for\n */\nfunction warnAboutDeprecatedConfigFiles(\n  projectDir,\n  instrumentationFile,\n  platform,\n) {\n  const hasInstrumentationHookWithIndicationsOfSentry =\n    instrumentationFile &&\n    (instrumentationFile.includes('@sentry/') ||\n      instrumentationFile.match(/sentry\\.(server|edge)\\.config(\\.(ts|js))?/));\n\n  if (hasInstrumentationHookWithIndicationsOfSentry) {\n    return;\n  }\n\n  for (const filename of [`sentry.${platform}.config.ts`, `sentry.${platform}.config.js`]) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] It appears you've configured a \\`${filename}\\` file. Please ensure to put this file's content into the \\`register()\\` function of a Next.js instrumentation file instead. To ensure correct functionality of the SDK, \\`Sentry.init\\` must be called inside of an instrumentation file. Learn more about setting up an instrumentation file in Next.js: https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation. You can safely delete the \\`${filename}\\` file afterward.`,\n      );\n    }\n  }\n}\n\n/**\n * Searches for a `sentry.client.config.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getClientSentryConfigFile(projectDir) {\n  const possibilities = ['sentry.client.config.ts', 'sentry.client.config.js'];\n\n  for (const filename of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      return filename;\n    }\n  }\n}\n\n/**\n * Searches for a `instrumentation-client.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getInstrumentationClientFile(projectDir) {\n  const possibilities = [\n    ['src', 'instrumentation-client.js'],\n    ['src', 'instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n  ];\n\n  for (const pathParts of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, ...pathParts))) {\n      return path.join(...pathParts);\n    }\n  }\n}\n\n/**\n * Add files to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param entryPointName The key where the file should be injected\n * @param filesToInsert An array of paths to the injected files\n */\nfunction addFilesToWebpackEntryPoint(\n  entryProperty,\n  entryPointName,\n  filesToInsert,\n  isDevMode,\n) {\n  // BIG FAT NOTE: Order of insertion seems to matter here. If we insert the new files before the `currentEntrypoint`s,\n  // the Next.js dev server breaks. Because we generally still want the SDK to be initialized as early as possible we\n  // still keep it at the start of the entrypoints if we are not in dev mode.\n\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  const currentEntryPoint = entryProperty[entryPointName];\n  let newEntryPoint = currentEntryPoint;\n\n  if (typeof currentEntryPoint === 'string' || Array.isArray(currentEntryPoint)) {\n    newEntryPoint = Array.isArray(currentEntryPoint) ? currentEntryPoint : [currentEntryPoint];\n    if (newEntryPoint.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newEntryPoint.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newEntryPoint.unshift(...filesToInsert);\n    }\n  }\n  // descriptor object (webpack 5+)\n  else if (typeof currentEntryPoint === 'object' && 'import' in currentEntryPoint) {\n    const currentImportValue = currentEntryPoint.import;\n    const newImportValue = Array.isArray(currentImportValue) ? currentImportValue : [currentImportValue];\n    if (newImportValue.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newImportValue.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newImportValue.unshift(...filesToInsert);\n    }\n\n    newEntryPoint = {\n      ...currentEntryPoint,\n      import: newImportValue,\n    };\n  }\n  // malformed entry point (use `console.error` rather than `debug.error` because it will always be printed, regardless\n  // of SDK settings)\n  else {\n    // eslint-disable-next-line no-console\n    console.error(\n      'Sentry Logger [Error]:',\n      `Could not inject SDK initialization code into entry point ${entryPointName}, as its current value is not in a recognized format.\\n`,\n      'Expected: string | Array<string> | { [key:string]: any, import: string | Array<string> }\\n',\n      `Got: ${currentEntryPoint}`,\n    );\n  }\n\n  if (newEntryPoint) {\n    entryProperty[entryPointName] = newEntryPoint;\n  }\n}\n\n/**\n * Ensure that `newConfig.module.rules` exists. Modifies the given config in place but also returns it in order to\n * change its type.\n *\n * @param newConfig A webpack config object which may or may not contain `module` and `module.rules`\n * @returns The same object, with an empty `module.rules` array added if necessary\n */\nfunction setUpModuleRules(newConfig) {\n  newConfig.module = {\n    ...newConfig.module,\n    rules: [...(newConfig.module?.rules || [])],\n  };\n  // Surprising that we have to assert the type here, since we've demonstrably guaranteed the existence of\n  // `newConfig.module.rules` just above, but ¯\\_(ツ)_/¯\n  return newConfig ;\n}\n\n/**\n * Adds loaders to inject values on the global object based on user configuration.\n */\n// TODO: Remove this loader and replace it with a nextConfig.env (https://web.archive.org/web/20240917153554/https://nextjs.org/docs/app/api-reference/next-config-js/env) or define based (https://github.com/vercel/next.js/discussions/71476) approach.\n// In order to remove this loader though we need to make sure the minimum supported Next.js version includes this PR (https://github.com/vercel/next.js/pull/61194), otherwise the nextConfig.env based approach will not work, as our SDK code is not processed by Next.js.\nfunction addValueInjectionLoader({\n  newConfig,\n  userNextConfig,\n  userSentryOptions,\n  buildContext,\n  releaseName,\n  routeManifest,\n  nextJsVersion,\n}\n\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n\n  // Check if release creation is disabled to prevent injection that breaks build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseToInject = releaseName && shouldCreateRelease ? releaseName : undefined;\n\n  const isomorphicValues = {\n    // `rewritesTunnel` set by the user in Next.js config\n    _sentryRewritesTunnelPath:\n      userSentryOptions.tunnelRoute !== undefined &&\n      userNextConfig.output !== 'export' &&\n      typeof userSentryOptions.tunnelRoute === 'string'\n        ? `${userNextConfig.basePath ?? ''}${userSentryOptions.tunnelRoute}`\n        : undefined,\n\n    // The webpack plugin's release injection breaks the `app` directory so we inject the release manually here instead.\n    // Having a release defined in dev-mode spams releases in Sentry so we only set one in non-dev mode\n    // Only inject if release creation is not explicitly disabled (to maintain build determinism)\n    SENTRY_RELEASE: releaseToInject && !buildContext.dev ? { id: releaseToInject } : undefined,\n    _sentryBasePath: buildContext.dev ? userNextConfig.basePath : undefined,\n    // This is used to determine version-based dev-symbolication behavior\n    _sentryNextJsVersion: nextJsVersion,\n  };\n\n  const serverValues = {\n    ...isomorphicValues,\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n  };\n\n  const clientValues = {\n    ...isomorphicValues,\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n    _sentryAssetPrefix: userNextConfig.assetPrefix,\n    _sentryExperimentalThirdPartyOriginStackFrames: userSentryOptions._experimental?.thirdPartyOriginStackFrames\n      ? 'true'\n      : undefined,\n    _sentryRouteManifest: JSON.stringify(routeManifest),\n  };\n\n  if (buildContext.isServer) {\n    newConfig.module.rules.push({\n      // TODO: Find a more bulletproof way of matching. For now this is fine and doesn't hurt anyone. It merely sets some globals.\n      test: /(src[\\\\/])?instrumentation.(js|ts)/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: serverValues,\n          },\n        },\n      ],\n    });\n  } else {\n    newConfig.module.rules.push({\n      test: /(?:sentry\\.client\\.config\\.(jsx?|tsx?)|(?:src[\\\\/])?instrumentation-client\\.(js|ts))$/,\n      use: [\n        {\n          loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n          options: {\n            values: clientValues,\n          },\n        },\n      ],\n    });\n  }\n}\n\nfunction resolveNextPackageDirFromDirectory(basedir) {\n  try {\n    return path.dirname(resolve.sync('next/package.json', { basedir }));\n  } catch {\n    // Should not happen in theory\n    return undefined;\n  }\n}\n\nconst POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS = [\n  // Original location of RequestAsyncStorage\n  // https://github.com/vercel/next.js/blob/46151dd68b417e7850146d00354f89930d10b43b/packages/next/src/client/components/request-async-storage.ts\n  'next/dist/client/components/request-async-storage.js',\n  // Introduced in Next.js 13.4.20\n  // https://github.com/vercel/next.js/blob/e1bc270830f2fc2df3542d4ef4c61b916c802df3/packages/next/src/client/components/request-async-storage.external.ts\n  'next/dist/client/components/request-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.180\n  // https://github.com/vercel/next.js/blob/541167b9b0fed6af9f36472e632863ffec41f18c/packages/next/src/server/app-render/work-unit-async-storage.external.ts\n  'next/dist/server/app-render/work-unit-async-storage.external.js',\n  // Introduced in Next.js 15.0.0-canary.182\n  // https://github.com/vercel/next.js/blob/f35159e5e80138ca7373f57b47edcaae3bcf1728/packages/next/src/client/components/work-unit-async-storage.external.ts\n  'next/dist/client/components/work-unit-async-storage.external.js',\n];\n\nfunction getRequestAsyncStorageModuleLocation(\n  webpackContextDir,\n  webpackResolvableModuleLocations,\n) {\n  if (webpackResolvableModuleLocations === undefined) {\n    return undefined;\n  }\n\n  const absoluteWebpackResolvableModuleLocations = webpackResolvableModuleLocations.map(loc =>\n    path.resolve(webpackContextDir, loc),\n  );\n\n  for (const webpackResolvableLocation of absoluteWebpackResolvableModuleLocations) {\n    const nextPackageDir = resolveNextPackageDirFromDirectory(webpackResolvableLocation);\n    if (nextPackageDir) {\n      const asyncLocalStorageLocation = POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS.find(loc =>\n        fs.existsSync(path.join(nextPackageDir, '..', loc)),\n      );\n      if (asyncLocalStorageLocation) {\n        return asyncLocalStorageLocation;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction addOtelWarningIgnoreRule(newConfig) {\n  const ignoreRules = [\n    // Inspired by @matmannion: https://github.com/getsentry/sentry-javascript/issues/12077#issuecomment-2180307072\n    (warning, compilation) => {\n      // This is wrapped in try-catch because we are vendoring types for this hook and we can't be 100% sure that we are accessing API that is there\n      try {\n        if (!warning.module) {\n          return false;\n        }\n\n        const isDependencyThatMayRaiseCriticalDependencyMessage =\n          /@opentelemetry\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener)) ||\n          /@prisma\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener));\n        const isCriticalDependencyMessage = /Critical dependency/.test(warning.message);\n\n        return isDependencyThatMayRaiseCriticalDependencyMessage && isCriticalDependencyMessage;\n      } catch {\n        return false;\n      }\n    },\n    // We provide these objects in addition to the hook above to provide redundancy in case the hook fails.\n    { module: /@opentelemetry\\/instrumentation/, message: /Critical dependency/ },\n    { module: /@prisma\\/instrumentation/, message: /Critical dependency/ },\n    { module: /require-in-the-middle/, message: /Critical dependency/ },\n  ] ;\n\n  if (newConfig.ignoreWarnings === undefined) {\n    newConfig.ignoreWarnings = ignoreRules;\n  } else if (Array.isArray(newConfig.ignoreWarnings)) {\n    newConfig.ignoreWarnings.push(...ignoreRules);\n  }\n}\n\nfunction addEdgeRuntimePolyfills(newConfig, buildContext) {\n  // Use ProvidePlugin to inject performance global only when accessed\n  newConfig.plugins = newConfig.plugins || [];\n  newConfig.plugins.push(\n    new buildContext.webpack.ProvidePlugin({\n      performance: [path.resolve(__dirname, 'polyfills', 'perf_hooks.js'), 'performance'],\n    }),\n  );\n\n  // Add module resolution aliases for problematic Node.js modules in edge runtime\n  newConfig.resolve = newConfig.resolve || {};\n  newConfig.resolve.alias = {\n    ...newConfig.resolve.alias,\n    // Redirect perf_hooks imports to a polyfilled version\n    perf_hooks: path.resolve(__dirname, 'polyfills', 'perf_hooks.js'),\n  };\n}\n\nfunction _getModules(projectDir) {\n  try {\n    const packageJson = path.join(projectDir, 'package.json');\n    const packageJsonContent = fs.readFileSync(packageJson, 'utf8');\n    const packageJsonObject = JSON.parse(packageJsonContent)\n\n;\n\n    return {\n      ...packageJsonObject.dependencies,\n      ...packageJsonObject.devDependencies,\n    };\n  } catch {\n    return {};\n  }\n}\n\nexports.constructWebpackConfigFunction = constructWebpackConfigFunction;\n//# sourceMappingURL=webpack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst handleRunAfterProductionCompile = __webpack_require__(/*! ./handleRunAfterProductionCompile.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/handleRunAfterProductionCompile.js\");\nconst createRouteManifest = __webpack_require__(/*! ./manifest/createRouteManifest.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/manifest/createRouteManifest.js\");\nconst constructTurbopackConfig = __webpack_require__(/*! ./turbopack/constructTurbopackConfig.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/turbopack/constructTurbopackConfig.js\");\nconst util = __webpack_require__(/*! ./util.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/util.js\");\nconst webpack = __webpack_require__(/*! ./webpack.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/webpack.js\");\n\n/* eslint-disable max-lines */\n/* eslint-disable complexity */\n\nlet showedExportModeTunnelWarning = false;\nlet showedExperimentalBuildModeWarning = false;\n\n// Packages we auto-instrument need to be external for instrumentation to work\n// Next.js externalizes some packages by default, see: https://nextjs.org/docs/app/api-reference/config/next-config-js/serverExternalPackages\n// Others we need to add ourselves\n//\n// NOTE: 'ai' (Vercel AI SDK) is intentionally NOT included in this list.\n// When externalized, Next.js doesn't properly handle the package's conditional exports,\n// specifically the \"react-server\" export condition. This causes client-side code to be\n// loaded in server components instead of the appropriate server-side functions.\nconst DEFAULT_SERVER_EXTERNAL_PACKAGES = [\n  'amqplib',\n  'connect',\n  'dataloader',\n  'express',\n  'generic-pool',\n  'graphql',\n  '@hapi/hapi',\n  'ioredis',\n  'kafkajs',\n  'koa',\n  'lru-memoizer',\n  'mongodb',\n  'mongoose',\n  'mysql',\n  'mysql2',\n  'knex',\n  'pg',\n  'pg-pool',\n  '@node-redis/client',\n  '@redis/client',\n  'redis',\n  'tedious',\n];\n\n/**\n * Modifies the passed in Next.js configuration with automatic build-time instrumentation and source map upload.\n *\n * @param nextConfig A Next.js configuration object, as usually exported in `next.config.js` or `next.config.mjs`.\n * @param sentryBuildOptions Additional options to configure instrumentation and\n * @returns The modified config to be exported\n */\nfunction withSentryConfig(nextConfig, sentryBuildOptions = {}) {\n  const castNextConfig = (nextConfig ) || {};\n  if (typeof castNextConfig === 'function') {\n    return function ( ...webpackConfigFunctionArgs) {\n      const maybePromiseNextConfig = castNextConfig.apply(\n        this,\n        webpackConfigFunctionArgs,\n      );\n\n      if (core.isThenable(maybePromiseNextConfig)) {\n        return maybePromiseNextConfig.then(promiseResultNextConfig => {\n          return getFinalConfigObject(promiseResultNextConfig, sentryBuildOptions);\n        });\n      }\n\n      return getFinalConfigObject(maybePromiseNextConfig, sentryBuildOptions);\n    } ;\n  } else {\n    return getFinalConfigObject(castNextConfig, sentryBuildOptions) ;\n  }\n}\n\n/**\n * Generates a random tunnel route path that's less likely to be blocked by ad-blockers\n */\nfunction generateRandomTunnelRoute() {\n  // Generate a random 8-character alphanumeric string\n  const randomString = Math.random().toString(36).substring(2, 10);\n  return `/${randomString}`;\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(\n  incomingUserNextConfigObject,\n  userSentryOptions,\n) {\n  // Only determine a release name if release creation is not explicitly disabled\n  // This prevents injection of Git commit hashes that break build determinism\n  const shouldCreateRelease = userSentryOptions.release?.create !== false;\n  const releaseName = shouldCreateRelease\n    ? (userSentryOptions.release?.name ?? node.getSentryRelease() ?? getGitRevision())\n    : userSentryOptions.release?.name;\n\n  if (userSentryOptions?.tunnelRoute) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses server-side features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option',\n        );\n      }\n    } else {\n      const resolvedTunnelRoute =\n        userSentryOptions.tunnelRoute === true ? generateRandomTunnelRoute() : userSentryOptions.tunnelRoute;\n\n      // Update the global options object to use the resolved value everywhere\n      userSentryOptions.tunnelRoute = resolvedTunnelRoute || undefined;\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, resolvedTunnelRoute);\n    }\n  }\n\n  if (process.argv.includes('--experimental-build-mode')) {\n    if (!showedExperimentalBuildModeWarning) {\n      showedExperimentalBuildModeWarning = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The Sentry Next.js SDK does not currently fully support next build --experimental-build-mode',\n      );\n    }\n    if (process.argv.includes('generate')) {\n      // Next.js v15.3.0-canary.1 splits the experimental build into two phases:\n      // 1. compile: Code compilation\n      // 2. generate: Environment variable inlining and prerendering (We don't instrument this phase, we inline in the compile phase)\n      //\n      // We assume a single \"full\" build and reruns Webpack instrumentation in both phases.\n      // During the generate step it collides with Next.js's inliner\n      // producing malformed JS and build failures.\n      // We skip Sentry processing during generate to avoid this issue.\n      return incomingUserNextConfigObject;\n    }\n  }\n\n  let routeManifest;\n  if (!userSentryOptions.disableManifestInjection) {\n    routeManifest = createRouteManifest.createRouteManifest();\n  }\n\n  setUpBuildTimeVariables(incomingUserNextConfigObject, userSentryOptions, releaseName);\n\n  const nextJsVersion = util.getNextjsVersion();\n\n  // Add the `clientTraceMetadata` experimental option based on Next.js version. The option got introduced in Next.js version 15.0.0 (actually 14.3.0-canary.64).\n  // Adding the option on lower versions will cause Next.js to print nasty warnings we wouldn't confront our users with.\n  if (nextJsVersion) {\n    const { major, minor } = core.parseSemver(nextJsVersion);\n    if (major !== undefined && minor !== undefined && (major >= 15 || (major === 14 && minor >= 3))) {\n      incomingUserNextConfigObject.experimental = incomingUserNextConfigObject.experimental || {};\n      incomingUserNextConfigObject.experimental.clientTraceMetadata = [\n        'baggage',\n        'sentry-trace',\n        ...(incomingUserNextConfigObject.experimental?.clientTraceMetadata || []),\n      ];\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\n      \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, please add `experimental.clientTraceMetadata: ['sentry-trace', 'baggage']` to your Next.js config to enable pageload tracing for App Router.\",\n    );\n  }\n\n  // From Next.js version (15.0.0-canary.124) onwards, Next.js does no longer require the `experimental.instrumentationHook` option and will\n  // print a warning when it is set, so we need to conditionally provide it for lower versions.\n  if (nextJsVersion) {\n    const { major, minor, patch, prerelease } = core.parseSemver(nextJsVersion);\n    const isFullySupportedRelease =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      major >= 15 &&\n      ((minor === 0 && patch === 0 && prerelease === undefined) || minor > 0 || patch > 0);\n    const isSupportedV15Rc =\n      major !== undefined &&\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('rc.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) > 0;\n    const isSupportedCanary =\n      minor !== undefined &&\n      patch !== undefined &&\n      prerelease !== undefined &&\n      major === 15 &&\n      minor === 0 &&\n      patch === 0 &&\n      prerelease.startsWith('canary.') &&\n      parseInt(prerelease.split('.')[1] || '', 10) >= 124;\n\n    if (!isFullySupportedRelease && !isSupportedV15Rc && !isSupportedCanary) {\n      if (incomingUserNextConfigObject.experimental?.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You turned off the `experimental.instrumentationHook` option. Note that Sentry will not be initialized if you did not set it up inside `instrumentation.(js|ts)`.',\n        );\n      }\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  } else {\n    // If we cannot detect a Next.js version for whatever reason, the sensible default is to set the `experimental.instrumentationHook`, even though it may create a warning.\n    if (\n      incomingUserNextConfigObject.experimental &&\n      'instrumentationHook' in incomingUserNextConfigObject.experimental\n    ) {\n      if (incomingUserNextConfigObject.experimental.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] You set `experimental.instrumentationHook` to `false`. If you are using Next.js version 15 or greater, you can remove that option. If you are using Next.js version 14 or lower, you need to set `experimental.instrumentationHook` in your `next.config.(js|mjs)` to `true` for the SDK to be properly initialized in combination with `instrumentation.(js|ts)`.',\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, Next.js will probably show you a warning about the `experimental.instrumentationHook` being set. To silence Next.js' warning, explicitly set the `experimental.instrumentationHook` option in your `next.config.(js|mjs|ts)` to `undefined`. If you are on Next.js version 14 or lower, you can silence this particular warning by explicitly setting the `experimental.instrumentationHook` option in your `next.config.(js|mjs)` to `true`.\",\n      );\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental,\n      };\n    }\n  }\n\n  // We wanna check whether the user added a `onRouterTransitionStart` handler to their client instrumentation file.\n  const instrumentationClientFileContents = getInstrumentationClientFileContents();\n  if (\n    instrumentationClientFileContents !== undefined &&\n    !instrumentationClientFileContents.includes('onRouterTransitionStart') &&\n    !userSentryOptions.suppressOnRouterTransitionStartWarning\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] ACTION REQUIRED: To instrument navigations, the Sentry SDK requires you to export an `onRouterTransitionStart` hook from your `instrumentation-client.(js|ts)` file. You can do so by adding `export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;` to the file.',\n    );\n  }\n\n  let nextMajor;\n  if (nextJsVersion) {\n    const { major } = core.parseSemver(nextJsVersion);\n    nextMajor = major;\n  }\n\n  const isTurbopack = false;\n  const isTurbopackSupported = util.supportsProductionCompileHook(nextJsVersion ?? '');\n\n  if (!isTurbopackSupported && isTurbopack) {\n    if (true) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] WARNING: You are using the Sentry SDK with Turbopack (\\`next dev --turbopack\\`). The Sentry SDK is compatible with Turbopack on Next.js version 15.4.1 or later. You are currently on ${nextJsVersion}. Please upgrade to a newer Next.js version to use the Sentry SDK with Turbopack.`,\n      );\n    } else {}\n  }\n\n  // webpack case\n  if (\n    userSentryOptions.useRunAfterProductionCompileHook &&\n    !util.supportsProductionCompileHook(nextJsVersion ?? '') &&\n    !isTurbopack\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[@sentry/nextjs] The configured `useRunAfterProductionCompileHook` option is not compatible with your current Next.js version. This option is only supported on Next.js version 15.4.1 or later. Will not run source map and release management logic.',\n    );\n  }\n\n  // If not explicitly set, turbopack uses the runAfterProductionCompile hook (as there are no alternatives), webpack does not.\n  const shouldUseRunAfterProductionCompileHook =\n    userSentryOptions?.useRunAfterProductionCompileHook ?? (isTurbopack ? true : false);\n\n  if (shouldUseRunAfterProductionCompileHook && util.supportsProductionCompileHook(nextJsVersion ?? '')) {\n    if (incomingUserNextConfigObject?.compiler?.runAfterProductionCompile === undefined) {\n      incomingUserNextConfigObject.compiler ??= {};\n      incomingUserNextConfigObject.compiler.runAfterProductionCompile = async ({ distDir }) => {\n        await handleRunAfterProductionCompile.handleRunAfterProductionCompile(\n          { releaseName, distDir, buildTool: isTurbopack ? 'turbopack' : 'webpack' },\n          userSentryOptions,\n        );\n      };\n    } else if (typeof incomingUserNextConfigObject.compiler.runAfterProductionCompile === 'function') {\n      incomingUserNextConfigObject.compiler.runAfterProductionCompile = new Proxy(\n        incomingUserNextConfigObject.compiler.runAfterProductionCompile,\n        {\n          async apply(target, thisArg, argArray) {\n            const { distDir } = argArray[0] ?? { distDir: '.next' };\n            await target.apply(thisArg, argArray);\n            await handleRunAfterProductionCompile.handleRunAfterProductionCompile(\n              { releaseName, distDir, buildTool: isTurbopack ? 'turbopack' : 'webpack' },\n              userSentryOptions,\n            );\n          },\n        },\n      );\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/nextjs] The configured `compiler.runAfterProductionCompile` option is not a function. Will not run source map and release management logic.',\n      );\n    }\n  }\n\n  // Enable source maps for turbopack builds\n  if (isTurbopackSupported && isTurbopack && !userSentryOptions.sourcemaps?.disable) {\n    // Only set if not already configured by user\n    if (incomingUserNextConfigObject.productionBrowserSourceMaps === undefined) {\n      if (userSentryOptions.debug) {\n        // eslint-disable-next-line no-console\n        console.log('[@sentry/nextjs] Automatically enabling browser source map generation for turbopack build.');\n      }\n      incomingUserNextConfigObject.productionBrowserSourceMaps = true;\n\n      // Enable source map deletion if not explicitly disabled\n      if (userSentryOptions.sourcemaps?.deleteSourcemapsAfterUpload === undefined) {\n        if (userSentryOptions.debug) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.',\n          );\n        }\n\n        userSentryOptions.sourcemaps = {\n          ...userSentryOptions.sourcemaps,\n          deleteSourcemapsAfterUpload: true,\n        };\n      }\n    }\n  }\n\n  return {\n    ...incomingUserNextConfigObject,\n    ...(nextMajor && nextMajor >= 15\n      ? {\n          serverExternalPackages: [\n            ...(incomingUserNextConfigObject.serverExternalPackages || []),\n            ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n          ],\n        }\n      : {\n          experimental: {\n            ...incomingUserNextConfigObject.experimental,\n            serverComponentsExternalPackages: [\n              ...(incomingUserNextConfigObject.experimental?.serverComponentsExternalPackages || []),\n              ...DEFAULT_SERVER_EXTERNAL_PACKAGES,\n            ],\n          },\n        }),\n    webpack:\n      isTurbopack || userSentryOptions.disableSentryWebpackConfig\n        ? incomingUserNextConfigObject.webpack // just return the original webpack config\n        : webpack.constructWebpackConfigFunction({\n            userNextConfig: incomingUserNextConfigObject,\n            userSentryOptions,\n            releaseName,\n            routeManifest,\n            nextJsVersion,\n            useRunAfterProductionCompileHook: shouldUseRunAfterProductionCompileHook,\n          }),\n    ...(isTurbopackSupported && isTurbopack\n      ? {\n          turbopack: constructTurbopackConfig.constructTurbopackConfig({\n            userNextConfig: incomingUserNextConfigObject,\n            routeManifest,\n            nextJsVersion,\n          }),\n        }\n      : {}),\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig, tunnelPath) {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args) => {\n    const tunnelRouteRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    const tunnelRouteRewriteWithRegion = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]?r=[region]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n        {\n          type: 'query',\n          key: 'r', // short for region - we keep it short so matching is harder for ad-blockers\n          value: '(?<region>[a-z]{2})',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.:region.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    // Order of these is important, they get applied first to last.\n    const newRewrites = [tunnelRouteRewriteWithRegion, tunnelRouteRewrite];\n\n    if (typeof originalRewrites !== 'function') {\n      return newRewrites;\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n\n    if (Array.isArray(originalRewritesResult)) {\n      return [...newRewrites, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [...newRewrites, ...(originalRewritesResult.beforeFiles || [])],\n      };\n    }\n  };\n}\n\nfunction setUpBuildTimeVariables(\n  userNextConfig,\n  userSentryOptions,\n  releaseName,\n) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n  const basePath = userNextConfig.basePath ?? '';\n\n  const rewritesTunnelPath =\n    userSentryOptions.tunnelRoute !== undefined &&\n    userNextConfig.output !== 'export' &&\n    typeof userSentryOptions.tunnelRoute === 'string'\n      ? `${basePath}${userSentryOptions.tunnelRoute}`\n      : undefined;\n\n  const buildTimeVariables = {\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: userNextConfig.distDir?.replace(/\\\\/g, '\\\\\\\\') || '.next',\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix\n      ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '')\n      : '',\n  };\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._assetsPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (rewritesTunnelPath) {\n    buildTimeVariables._sentryRewritesTunnelPath = rewritesTunnelPath;\n  }\n\n  if (basePath) {\n    buildTimeVariables._sentryBasePath = basePath;\n  }\n\n  if (userNextConfig.assetPrefix) {\n    buildTimeVariables._sentryAssetPrefix = userNextConfig.assetPrefix;\n  }\n\n  if (userSentryOptions._experimental?.thirdPartyOriginStackFrames) {\n    buildTimeVariables._experimentalThirdPartyOriginStackFrames = 'true';\n  }\n\n  if (releaseName) {\n    buildTimeVariables._sentryRelease = releaseName;\n  }\n\n  if (typeof userNextConfig.env === 'object') {\n    userNextConfig.env = { ...buildTimeVariables, ...userNextConfig.env };\n  } else if (userNextConfig.env === undefined) {\n    userNextConfig.env = buildTimeVariables;\n  }\n}\n\nfunction getGitRevision() {\n  let gitRevision;\n  try {\n    gitRevision = childProcess\n      .execSync('git rev-parse HEAD', { stdio: ['ignore', 'pipe', 'ignore'] })\n      .toString()\n      .trim();\n  } catch {\n    // noop\n  }\n  return gitRevision;\n}\n\nfunction getInstrumentationClientFileContents() {\n  const potentialInstrumentationClientFileLocations = [\n    ['src', 'instrumentation-client.ts'],\n    ['src', 'instrumentation-client.js'],\n    ['instrumentation-client.ts'],\n    ['instrumentation-client.js'],\n  ];\n\n  for (const pathSegments of potentialInstrumentationClientFileLocations) {\n    try {\n      return fs.readFileSync(path.join(process.cwd(), ...pathSegments), 'utf-8');\n    } catch {\n      // noop\n    }\n  }\n}\n\nexports.DEFAULT_SERVER_EXTERNAL_PACKAGES = DEFAULT_SERVER_EXTERNAL_PACKAGES;\nexports.withSentryConfig = withSentryConfig;\n//# sourceMappingURL=withSentryConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst index = __webpack_require__(/*! ./server/index.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js\");\nconst withSentryConfig = __webpack_require__(/*! ./config/withSentryConfig.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\");\nconst _error = __webpack_require__(/*! ./common/pages-router-instrumentation/_error.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ./common/wrapServerComponentWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ./common/wrapRouteHandlerWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ./common/wrapMiddlewareWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ./common/wrapGenerationFunctionWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ./common/withServerActionInstrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ./common/captureRequestError.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\n\n\n\nexports.ErrorBoundary = index.ErrorBoundary;\nexports.createReduxEnhancer = index.createReduxEnhancer;\nexports.init = index.init;\nexports.showReportDialog = index.showReportDialog;\nexports.withErrorBoundary = index.withErrorBoundary;\nexports.withSentryConfig = withSentryConfig.withSentryConfig;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.claudeCodeIntegration = node.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = node.createInstrumentedClaudeQuery;\nexports.patchClaudeCodeQuery = node.patchClaudeCodeQuery;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n\t!Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n\tObject.defineProperty(exports, '__proto__', {\n\t\tenumerable: true,\n\t\tvalue: node['__proto__']\n\t});\n\nObject.keys(node).forEach(k => {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/index.server.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst distDirRewriteFramesIntegration = core.defineIntegration(({ distDirName }) => {\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n  // we can read in the project directory from the currently running process\n  const distDirAbsPath = path.resolve(distDirName).replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(core.escapeStringForRegex(distDirAbsPath));\n\n  const rewriteFramesInstance = core.rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n\nexports.distDirRewriteFramesIntegration = distDirRewriteFramesIntegration;\n//# sourceMappingURL=distDirRewriteFramesIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbmV4dGpzQGZpbGUrYXBwcytzZW50cnl2aWJlK3ZlbmRvcitzZW50cnktbmV4dGpzLTEwLjE3LjAudGd6X0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYV9iNmtpa3l5Mnd3bnFmaXZraTQybzR2bXpocS9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL3NlcnZlci9kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxzSEFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsa0JBQU07O0FBRTNCLGtFQUFrRSxhQUFhO0FBQy9FO0FBQ0E7QUFDQSw0RUFBNEU7O0FBRTVFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsdUNBQXVDO0FBQ3ZDIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25leHRqc0BmaWxlK2FwcHMrc2VudHJ5dmliZSt2ZW5kb3Irc2VudHJ5LW5leHRqcy0xMC4xNy4wLnRnel9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFfYjZraWt5eTJ3d25xZml2a2k0Mm80dm16aHEvbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9zZXJ2ZXIvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKHsgZGlzdERpck5hbWUgfSkgPT4ge1xuICAvLyBuZXh0anMgYWx3YXlzIHB1dHMgdGhlIGJ1aWxkIGRpcmVjdG9yeSBhdCB0aGUgcHJvamVjdCByb290IGxldmVsLCB3aGljaCBpcyBhbHNvIHdoZXJlIHlvdSBydW4gYG5leHQgc3RhcnRgIGZyb20sIHNvXG4gIC8vIHdlIGNhbiByZWFkIGluIHRoZSBwcm9qZWN0IGRpcmVjdG9yeSBmcm9tIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzXG4gIGNvbnN0IGRpc3REaXJBYnNQYXRoID0gcGF0aC5yZXNvbHZlKGRpc3REaXJOYW1lKS5yZXBsYWNlKC8oXFwvfFxcXFwpJC8sICcnKTsgLy8gV2Ugc3RyaXAgdHJhaWxpbmcgc2xhc2hlcyBiZWNhdXNlIFwiYXBwOi8vL19uZXh0XCIgYWxzbyBkb2Vzbid0IGhhdmUgb25lXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvciAtLSB1c2VyIGlucHV0IGlzIGVzY2FwZWRcbiAgY29uc3QgU09VUkNFTUFQX0ZJTEVOQU1FX1JFR0VYID0gbmV3IFJlZ0V4cChjb3JlLmVzY2FwZVN0cmluZ0ZvclJlZ2V4KGRpc3REaXJBYnNQYXRoKSk7XG5cbiAgY29uc3QgcmV3cml0ZUZyYW1lc0luc3RhbmNlID0gY29yZS5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24oe1xuICAgIGl0ZXJhdGVlOiBmcmFtZSA9PiB7XG4gICAgICBmcmFtZS5maWxlbmFtZSA9IGZyYW1lLmZpbGVuYW1lPy5yZXBsYWNlKFNPVVJDRU1BUF9GSUxFTkFNRV9SRUdFWCwgJ2FwcDovLy9fbmV4dCcpO1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmV3cml0ZUZyYW1lc0luc3RhbmNlLFxuICAgIG5hbWU6ICdEaXN0RGlyUmV3cml0ZUZyYW1lcycsXG4gIH07XG59KTtcblxuZXhwb3J0cy5kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uID0gZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/../../node_modules/.pnpm/@sentry+core@10.17.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(ssr)/../../node_modules/.pnpm/@sentry+node@file+apps+sentryvibe+vendor+sentry-node-10.17.0.tgz/node_modules/@sentry/node/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/../../node_modules/.pnpm/@sentry+opentelemetry@10.17.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_lnanjtbeaorg7cpyd6d5aj7lji/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../common/debug-build.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst devErrorSymbolicationEventProcessor = __webpack_require__(/*! ../common/devErrorSymbolicationEventProcessor.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\");\nconst getVercelEnv = __webpack_require__(/*! ../common/getVercelEnv.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../common/span-attributes-with-logic-attached.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst isBuild = __webpack_require__(/*! ../common/utils/isBuild.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst distDirRewriteFramesIntegration = __webpack_require__(/*! ./distDirRewriteFramesIntegration.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\");\nconst _error = __webpack_require__(/*! ../common/pages-router-instrumentation/_error.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ../common/wrapGenerationFunctionWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ../common/captureRequestError.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\n\nconst globalWithInjectedValues = core.GLOBAL_OBJ\n\n;\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */\nconst ErrorBoundary = (props) => {\n  if (!props.children) {\n    return null;\n  }\n\n  if (typeof props.children === 'function') {\n    return (props.children )();\n  }\n\n  // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n  return props.children ;\n};\n\n/**\n * A passthrough redux enhancer for the server that doesn't depend on anything from the `@sentry/react` package.\n */\nfunction createReduxEnhancer() {\n  return (createStore) => createStore;\n}\n\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(\n  WrappedComponent,\n) {\n  return WrappedComponent ;\n}\n\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */\nfunction showReportDialog() {\n  return;\n}\n\n/** Inits the Sentry NextJS SDK on node. */\nfunction init(options) {\n  if (isBuild.isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = node.getDefaultIntegrations(options)\n    .filter(integration => integration.name !== 'Http')\n    .concat(\n      // We are using the HTTP integration without instrumenting incoming HTTP requests because Next.js does that by itself.\n      node.httpIntegration({\n        disableIncomingRequestSpans: true,\n      }),\n    );\n\n  // Turn off Next.js' own fetch instrumentation (only when we manage OTEL)\n  // https://github.com/lforst/nextjs-fork/blob/1994fd186defda77ad971c36dc3163db263c993f/packages/next/src/server/lib/patch-fetch.ts#L245\n  // Enable with custom OTel setup: https://github.com/getsentry/sentry-javascript/issues/17581\n  if (!options.skipOpenTelemetrySetup) {\n    process.env.NEXT_OTEL_FETCH_DISABLED = '1';\n  }\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = \".next\" || 0;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration.distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts = {\n    environment: process.env.SENTRY_ENVIRONMENT || getVercelEnv.getVercelEnv(false) || \"development\",\n    release: \"fca76ee7b26bb2d2d7d4693ef948bc93e8812918\" || 0,\n    defaultIntegrations: customDefaultIntegrations,\n    ...options,\n  };\n\n  if (debugBuild.DEBUG_BUILD && opts.debug) {\n    core.debug.enable();\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    debugBuild.DEBUG_BUILD && core.debug.log('SDK already initialized');\n    return;\n  }\n\n  core.applySdkMetadata(opts, 'nextjs', ['nextjs', 'node']);\n\n  const client = node.init(opts);\n  client?.on('beforeSampling', ({ spanAttributes }, samplingDecision) => {\n    // There are situations where the Next.js Node.js server forwards requests for the Edge Runtime server (e.g. in\n    // middleware) and this causes spans for Sentry ingest requests to be created. These are not exempt from our tracing\n    // because we didn't get the chance to do `suppressTracing`, since this happens outside of userland.\n    // We need to drop these spans.\n    if (\n      // eslint-disable-next-line deprecation/deprecation\n      (typeof spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET] === 'string' &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_key') &&\n        // eslint-disable-next-line deprecation/deprecation\n        spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_client')) ||\n      (typeof spanAttributes[semanticConventions.ATTR_URL_QUERY] === 'string' &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_key') &&\n        spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_client'))\n    ) {\n      samplingDecision.decision = false;\n    }\n  });\n\n  client?.on('spanStart', span => {\n    const spanAttributes = core.spanToJSON(span).data;\n\n    // What we do in this glorious piece of code, is hoist any information about parameterized routes from spans emitted\n    // by Next.js via the `next.route` attribute, up to the transaction by setting the http.route attribute.\n    if (typeof spanAttributes?.['next.route'] === 'string') {\n      const rootSpan = core.getRootSpan(span);\n      const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n      // Only hoist the http.route attribute if the transaction doesn't already have it\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        (rootSpanAttributes?.[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || rootSpanAttributes?.[semanticConventions.SEMATTRS_HTTP_METHOD]) &&\n        !rootSpanAttributes?.[semanticConventions.ATTR_HTTP_ROUTE]\n      ) {\n        const route = spanAttributes['next.route'].replace(/\\/route$/, '');\n        rootSpan.updateName(route);\n        rootSpan.setAttribute(semanticConventions.ATTR_HTTP_ROUTE, route);\n        // Preserving the original attribute despite internally not depending on it\n        rootSpan.setAttribute('next.route', route);\n      }\n    }\n\n    // We want to skip span data inference for any spans generated by Next.js. Reason being that Next.js emits spans\n    // with patterns (e.g. http.server spans) that will produce confusing data.\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // We want to fork the isolation scope for incoming requests\n    if (spanAttributes?.['next.span_type'] === 'BaseServer.handleRequest' && span === core.getRootSpan(span)) {\n      const scopes = core.getCapturedScopesOnSpan(span);\n\n      const isolationScope = (scopes.isolationScope || core.getIsolationScope()).clone();\n      const scope = scopes.scope || core.getCurrentScope();\n\n      const currentScopesPointer = opentelemetry.getScopesFromContext(api.context.active());\n      if (currentScopesPointer) {\n        currentScopesPointer.isolationScope = isolationScope;\n      }\n\n      core.setCapturedScopesOnSpan(span, scope, isolationScope);\n    }\n  });\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      (event => {\n        if (event.type === 'transaction') {\n          // Filter out transactions for static assets\n          // This regex matches the default path to the static assets (`_next/static`) and could potentially filter out too many transactions.\n          // We match `/_next/static/` anywhere in the transaction name because its location may change with the basePath setting.\n          if (event.transaction?.match(/^GET (\\/.*)?\\/_next\\/static\\//)) {\n            return null;\n          }\n\n          // Filter out transactions for requests to the tunnel route\n          if (\n            (globalWithInjectedValues._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${globalWithInjectedValues._sentryRewritesTunnelPath}`) ||\n            (process.env._sentryRewritesTunnelPath &&\n              event.transaction === `POST ${process.env._sentryRewritesTunnelPath}`)\n          ) {\n            return null;\n          }\n\n          // Filter out requests to resolve source maps for stack frames in dev mode\n          if (event.transaction?.match(/\\/__nextjs_original-stack-frame/)) {\n            return null;\n          }\n\n          // Filter out /404 transactions which seem to be created excessively\n          if (\n            // Pages router\n            event.transaction === '/404' ||\n            // App router (could be \"GET /404\", \"POST /404\", ...)\n            event.transaction?.match(/^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \\/(404|_not-found)$/)\n          ) {\n            return null;\n          }\n\n          // Filter transactions that we explicitly want to drop.\n          if (event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION]) {\n            return null;\n          }\n\n          // Next.js 13 sometimes names the root transactions like this containing useless tracing.\n          if (event.transaction === 'NextServer.getRequestHandler') {\n            return null;\n          }\n\n          // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n          if (typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string') {\n            const traceparentData = core.extractTraceparentData(\n              event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL],\n            );\n\n            if (traceparentData?.parentSampled === false) {\n              return null;\n            }\n          }\n\n          return event;\n        } else {\n          return event;\n        }\n      }) ,\n      { id: 'NextLowQualityTransactionsFilter' },\n    ),\n  );\n\n  core.getGlobalScope().addEventProcessor(\n    Object.assign(\n      ((event, hint) => {\n        if (event.type !== undefined) {\n          return event;\n        }\n\n        const originalException = hint.originalException;\n\n        const isPostponeError =\n          typeof originalException === 'object' &&\n          originalException !== null &&\n          '$$typeof' in originalException &&\n          originalException.$$typeof === Symbol.for('react.postpone');\n\n        if (isPostponeError) {\n          // Postpone errors are used for partial-pre-rendering (PPR)\n          return null;\n        }\n\n        // We don't want to capture suspense errors as they are simply used by React/Next.js for control flow\n        const exceptionMessage = event.exception?.values?.[0]?.value;\n        if (\n          exceptionMessage?.includes('Suspense Exception: This is not a real error!') ||\n          exceptionMessage?.includes('Suspense Exception: This is not a real error, and should not leak')\n        ) {\n          return null;\n        }\n\n        return event;\n      }) ,\n      { id: 'DropReactControlFlowErrors' },\n    ),\n  );\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // Enhance route handler transactions\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'BaseServer.handleRequest'\n    ) {\n      event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server';\n      event.contexts.trace.op = 'http.server';\n\n      if (event.transaction) {\n        event.transaction = core.stripUrlQueryAndFragment(event.transaction);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const method = event.contexts.trace.data[semanticConventions.SEMATTRS_HTTP_METHOD];\n      // eslint-disable-next-line deprecation/deprecation\n      const target = event.contexts?.trace?.data?.[semanticConventions.SEMATTRS_HTTP_TARGET];\n      const route = event.contexts.trace.data[semanticConventions.ATTR_HTTP_ROUTE] || event.contexts.trace.data['next.route'];\n\n      if (typeof method === 'string' && typeof route === 'string') {\n        const cleanRoute = route.replace(/\\/route$/, '');\n        event.transaction = `${method} ${cleanRoute}`;\n        event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n        // Preserve next.route in case it did not get hoisted\n        event.contexts.trace.data['next.route'] = cleanRoute;\n      }\n\n      // backfill transaction name for pages that would otherwise contain unparameterized routes\n      if (event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] && event.transaction !== 'GET /_app') {\n        event.transaction = `${method} ${event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`;\n      }\n\n      // Next.js overrides transaction names for page loads that throw an error\n      // but we want to keep the original target name\n      if (event.transaction === 'GET /_error' && target) {\n        event.transaction = `${method ? `${method} ` : ''}${target}`;\n      }\n    }\n\n    // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n    if (\n      event.type === 'transaction' &&\n      typeof event.contexts?.trace?.data?.[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL] === 'string'\n    ) {\n      const traceparentData = core.extractTraceparentData(event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n\n      if (traceparentData?.traceId) {\n        event.contexts.trace.trace_id = traceparentData.traceId;\n      }\n\n      if (traceparentData?.parentSpanId) {\n        event.contexts.trace.parent_span_id = traceparentData.parentSpanId;\n      }\n    }\n  });\n\n  if (true) {\n    core.getGlobalScope().addEventProcessor(devErrorSymbolicationEventProcessor.devErrorSymbolicationEventProcessor);\n  }\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (false) {}\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n\n  debugBuild.DEBUG_BUILD && core.debug.log('SDK successfully initialized');\n\n  return client;\n}\n\nfunction sdkAlreadyInitialized() {\n  return !!core.getClient();\n}\n\nexports.claudeCodeIntegration = node.claudeCodeIntegration;\nexports.createInstrumentedClaudeQuery = node.createInstrumentedClaudeQuery;\nexports.patchClaudeCodeQuery = node.patchClaudeCodeQuery;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.ErrorBoundary = ErrorBoundary;\nexports.createReduxEnhancer = createReduxEnhancer;\nexports.init = init;\nexports.showReportDialog = showReportDialog;\nexports.withErrorBoundary = withErrorBoundary;\nObject.prototype.hasOwnProperty.call(node, '__proto__') &&\n  !Object.prototype.hasOwnProperty.call(exports, '__proto__') &&\n  Object.defineProperty(exports, '__proto__', {\n    enumerable: true,\n    value: node['__proto__']\n  });\n\nObject.keys(node).forEach(k => {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@sentry+nextjs@file+apps+sentryvibe+vendor+sentry-nextjs-10.17.0.tgz_@opentelemetry+context-a_b6kikyy2wwnqfivki42o4vmzhq/node_modules/@sentry/nextjs/build/cjs/server/index.js\n");

/***/ })

};
;