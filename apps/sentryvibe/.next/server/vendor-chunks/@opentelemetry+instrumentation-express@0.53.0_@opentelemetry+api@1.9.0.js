"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"EXPRESS_TYPE\"] = \"express.type\";\n    AttributeNames[\"EXPRESS_NAME\"] = \"express.name\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEMsc0JBQXNCLEtBQUs7QUFDMUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIEF0dHJpYnV0ZU5hbWVzO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiRVhQUkVTU19UWVBFXCJdID0gXCJleHByZXNzLnR5cGVcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkVYUFJFU1NfTkFNRVwiXSA9IFwiZXhwcmVzcy5uYW1lXCI7XG59KShBdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js ***!
  \***********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressLayerType = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExpressLayerType;\n(function (ExpressLayerType) {\n    ExpressLayerType[\"ROUTER\"] = \"router\";\n    ExpressLayerType[\"MIDDLEWARE\"] = \"middleware\";\n    ExpressLayerType[\"REQUEST_HANDLER\"] = \"request_handler\";\n})(ExpressLayerType = exports.ExpressLayerType || (exports.ExpressLayerType = {}));\n//# sourceMappingURL=ExpressLayerType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvZW51bXMvRXhwcmVzc0xheWVyVHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0RBQWtELHdCQUF3QixLQUFLO0FBQ2hGIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvZW51bXMvRXhwcmVzc0xheWVyVHlwZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXhwcmVzc0xheWVyVHlwZSA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgRXhwcmVzc0xheWVyVHlwZTtcbihmdW5jdGlvbiAoRXhwcmVzc0xheWVyVHlwZSkge1xuICAgIEV4cHJlc3NMYXllclR5cGVbXCJST1VURVJcIl0gPSBcInJvdXRlclwiO1xuICAgIEV4cHJlc3NMYXllclR5cGVbXCJNSURETEVXQVJFXCJdID0gXCJtaWRkbGV3YXJlXCI7XG4gICAgRXhwcmVzc0xheWVyVHlwZVtcIlJFUVVFU1RfSEFORExFUlwiXSA9IFwicmVxdWVzdF9oYW5kbGVyXCI7XG59KShFeHByZXNzTGF5ZXJUeXBlID0gZXhwb3J0cy5FeHByZXNzTGF5ZXJUeXBlIHx8IChleHBvcnRzLkV4cHJlc3NMYXllclR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXhwcmVzc0xheWVyVHlwZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = exports.ExpressLayerType = exports.ExpressInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"ExpressInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.ExpressInstrumentation; } }));\nvar ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nObject.defineProperty(exports, \"ExpressLayerType\", ({ enumerable: true, get: function () { return ExpressLayerType_1.ExpressLayerType; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsd0JBQXdCLEdBQUcsOEJBQThCO0FBQ2xGLHdCQUF3QixtQkFBTyxDQUFDLHdOQUFtQjtBQUNuRCwwREFBeUQsRUFBRSxxQ0FBcUMsb0RBQW9ELEVBQUM7QUFDckoseUJBQXlCLG1CQUFPLENBQUMsc09BQTBCO0FBQzNELG9EQUFtRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQztBQUMxSSx1QkFBdUIsbUJBQU8sQ0FBQyxrT0FBd0I7QUFDdkQsa0RBQWlELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3BJIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuRXhwcmVzc0xheWVyVHlwZSA9IGV4cG9ydHMuRXhwcmVzc0luc3RydW1lbnRhdGlvbiA9IHZvaWQgMDtcbnZhciBpbnN0cnVtZW50YXRpb25fMSA9IHJlcXVpcmUoXCIuL2luc3RydW1lbnRhdGlvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV4cHJlc3NJbnN0cnVtZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RydW1lbnRhdGlvbl8xLkV4cHJlc3NJbnN0cnVtZW50YXRpb247IH0gfSk7XG52YXIgRXhwcmVzc0xheWVyVHlwZV8xID0gcmVxdWlyZShcIi4vZW51bXMvRXhwcmVzc0xheWVyVHlwZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV4cHJlc3NMYXllclR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEV4cHJlc3NMYXllclR5cGVfMS5FeHByZXNzTGF5ZXJUeXBlOyB9IH0pO1xudmFyIEF0dHJpYnV0ZU5hbWVzXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9BdHRyaWJ1dGVOYW1lc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF0dHJpYnV0ZU5hbWVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBdHRyaWJ1dGVOYW1lc18xLkF0dHJpYnV0ZU5hbWVzOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressInstrumentation = void 0;\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/** Express instrumentation for OpenTelemetry */\nclass ExpressInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('express', ['>=4.0.0 <6'], moduleExports => {\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype // Express v5\n                    : moduleExports.Router; // Express v4\n                // patch express.Router.route\n                if ((0, instrumentation_1.isWrapped)(routerProto.route)) {\n                    this._unwrap(routerProto, 'route');\n                }\n                this._wrap(routerProto, 'route', this._getRoutePatch());\n                // patch express.Router.use\n                if ((0, instrumentation_1.isWrapped)(routerProto.use)) {\n                    this._unwrap(routerProto, 'use');\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._wrap(routerProto, 'use', this._getRouterUsePatch());\n                // patch express.Application.use\n                if ((0, instrumentation_1.isWrapped)(moduleExports.application.use)) {\n                    this._unwrap(moduleExports.application, 'use');\n                }\n                this._wrap(moduleExports.application, 'use', \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._getAppUsePatch(isExpressWithRouterPrototype));\n                return moduleExports;\n            }, moduleExports => {\n                if (moduleExports === undefined)\n                    return;\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype\n                    : moduleExports.Router;\n                this._unwrap(routerProto, 'route');\n                this._unwrap(routerProto, 'use');\n                this._unwrap(moduleExports.application, 'use');\n            }),\n        ];\n    }\n    /**\n     * Get the patch for Router.route function\n     */\n    _getRoutePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function route_trace(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Router.use function\n     */\n    _getRouterUsePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Application.use function\n     */\n    _getAppUsePatch(isExpressWithRouterPrototype) {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                // If we access app.router in express 4.x we trigger an assertion error.\n                // This property existed in v3, was removed in v4 and then re-added in v5.\n                const router = isExpressWithRouterPrototype\n                    ? this.router\n                    : this._router;\n                const route = original.apply(this, args);\n                if (router) {\n                    const layer = router.stack[router.stack.length - 1];\n                    instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                }\n                return route;\n            };\n        };\n    }\n    /** Patch each express layer to create span and propagate context */\n    _applyPatch(layer, layerPath) {\n        const instrumentation = this;\n        // avoid patching multiple times the same layer\n        if (layer[internal_types_1.kLayerPatched] === true)\n            return;\n        layer[internal_types_1.kLayerPatched] = true;\n        this._wrap(layer, 'handle', original => {\n            // TODO: instrument error handlers\n            if (original.length === 4)\n                return original;\n            const patched = function (req, res) {\n                const { isLayerPathStored } = (0, utils_1.storeLayerPath)(req, layerPath);\n                const constructedRoute = (0, utils_1.getConstructedRoute)(req);\n                const actualMatchedRoute = (0, utils_1.getActualMatchedRoute)(req);\n                const attributes = {\n                    [semantic_conventions_1.ATTR_HTTP_ROUTE]: actualMatchedRoute,\n                };\n                const metadata = (0, utils_1.getLayerMetadata)(constructedRoute, layer, layerPath);\n                const type = metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE];\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n                if (rpcMetadata?.type === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = actualMatchedRoute;\n                }\n                // verify against the config if the layer should be ignored\n                if ((0, utils_1.isLayerIgnored)(metadata.name, type, instrumentation.getConfig())) {\n                    if (type === ExpressLayerType_1.ExpressLayerType.MIDDLEWARE) {\n                        req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                    }\n                    return original.apply(this, arguments);\n                }\n                if (api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return original.apply(this, arguments);\n                }\n                const spanName = instrumentation._getSpanName({\n                    request: req,\n                    layerType: type,\n                    route: constructedRoute,\n                }, metadata.name);\n                const span = instrumentation.tracer.startSpan(spanName, {\n                    attributes: Object.assign(attributes, metadata.attributes),\n                });\n                const parentContext = api_1.context.active();\n                let currentContext = api_1.trace.setSpan(parentContext, span);\n                const { requestHook } = instrumentation.getConfig();\n                if (requestHook) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => requestHook(span, {\n                        request: req,\n                        layerType: type,\n                        route: constructedRoute,\n                    }), e => {\n                        if (e) {\n                            api_1.diag.error('express instrumentation: request hook failed', e);\n                        }\n                    }, true);\n                }\n                let spanHasEnded = false;\n                // TODO: Fix router spans (getRouterPath does not work properly) to\n                // have useful names before removing this branch\n                if (metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE] ===\n                    ExpressLayerType_1.ExpressLayerType.ROUTER) {\n                    span.end();\n                    spanHasEnded = true;\n                    currentContext = parentContext;\n                }\n                // listener for response.on('finish')\n                const onResponseFinish = () => {\n                    if (spanHasEnded === false) {\n                        spanHasEnded = true;\n                        span.end();\n                    }\n                };\n                // verify we have a callback\n                const args = Array.from(arguments);\n                const callbackIdx = args.findIndex(arg => typeof arg === 'function');\n                if (callbackIdx >= 0) {\n                    arguments[callbackIdx] = function () {\n                        // express considers anything but an empty value, \"route\" or \"router\"\n                        // passed to its callback to be an error\n                        const maybeError = arguments[0];\n                        const isError = ![undefined, null, 'route', 'router'].includes(maybeError);\n                        if (!spanHasEnded && isError) {\n                            const [error, message] = (0, utils_1.asErrorAndMessage)(maybeError);\n                            span.recordException(error);\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message,\n                            });\n                        }\n                        if (spanHasEnded === false) {\n                            spanHasEnded = true;\n                            req.res?.removeListener('finish', onResponseFinish);\n                            span.end();\n                        }\n                        if (!(req.route && isError) && isLayerPathStored) {\n                            req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                        }\n                        const callback = args[callbackIdx];\n                        return api_1.context.bind(parentContext, callback).apply(this, arguments);\n                    };\n                }\n                try {\n                    return api_1.context.bind(currentContext, original).apply(this, arguments);\n                }\n                catch (anyError) {\n                    const [error, message] = (0, utils_1.asErrorAndMessage)(anyError);\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message,\n                    });\n                    throw anyError;\n                }\n                finally {\n                    /**\n                     * At this point if the callback wasn't called, that means either the\n                     * layer is asynchronous (so it will call the callback later on) or that\n                     * the layer directly ends the http response, so we'll hook into the \"finish\"\n                     * event to handle the later case.\n                     */\n                    if (!spanHasEnded) {\n                        res.once('finish', onResponseFinish);\n                    }\n                }\n            };\n            // `handle` isn't just a regular function in some cases. It also contains\n            // some properties holding metadata and state so we need to proxy them\n            // through through patched function\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1950\n            // Also some apps/libs do their own patching before OTEL and have these properties\n            // in the proptotype. So we use a `for...in` loop to get own properties and also\n            // any enumerable prop in the prototype chain\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2271\n            for (const key in original) {\n                Object.defineProperty(patched, key, {\n                    get() {\n                        return original[key];\n                    },\n                    set(value) {\n                        original[key] = value;\n                    },\n                });\n            }\n            return patched;\n        });\n    }\n    _getSpanName(info, defaultName) {\n        const { spanNameHook } = this.getConfig();\n        if (!(spanNameHook instanceof Function)) {\n            return defaultName;\n        }\n        try {\n            return spanNameHook(info, defaultName) ?? defaultName;\n        }\n        catch (err) {\n            api_1.diag.error('express instrumentation: error calling span name rewrite hook', err);\n            return defaultName;\n        }\n    }\n}\nexports.ExpressInstrumentation = ExpressInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._LAYERS_STORE_PROPERTY = exports.kLayerPatched = void 0;\n/**\n * This symbol is used to mark express layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexports.kLayerPatched = Symbol('express-layer-patched');\n/**\n * This const define where on the `request` object the Instrumentation will mount the\n * current stack of express layer.\n *\n * It is necessary because express doesn't store the different layers\n * (ie: middleware, router etc) that it called to get to the current layer.\n * Given that, the only way to know the route of a given layer is to\n * store the path of where each previous layer has been mounted.\n *\n * ex: bodyParser > auth middleware > /users router > get /:id\n *  in this case the stack would be: [\"/users\", \"/:id\"]\n *\n * ex2: bodyParser > /api router > /v1 router > /users router > get /:id\n *  stack: [\"/api\", \"/v1\", \"/users\", \":id\"]\n *\n */\nexports._LAYERS_STORE_PROPERTY = '__ot_middlewares';\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcscUJBQXFCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5fTEFZRVJTX1NUT1JFX1BST1BFUlRZID0gZXhwb3J0cy5rTGF5ZXJQYXRjaGVkID0gdm9pZCAwO1xuLyoqXG4gKiBUaGlzIHN5bWJvbCBpcyB1c2VkIHRvIG1hcmsgZXhwcmVzcyBsYXllciBhcyBiZWluZyBhbHJlYWR5IGluc3RydW1lbnRlZFxuICogc2luY2UgaXRzIHBvc3NpYmxlIHRvIHVzZSBhIGdpdmVuIGxheWVyIG11bHRpcGxlIHRpbWVzIChleDogbWlkZGxld2FyZXMpXG4gKi9cbmV4cG9ydHMua0xheWVyUGF0Y2hlZCA9IFN5bWJvbCgnZXhwcmVzcy1sYXllci1wYXRjaGVkJyk7XG4vKipcbiAqIFRoaXMgY29uc3QgZGVmaW5lIHdoZXJlIG9uIHRoZSBgcmVxdWVzdGAgb2JqZWN0IHRoZSBJbnN0cnVtZW50YXRpb24gd2lsbCBtb3VudCB0aGVcbiAqIGN1cnJlbnQgc3RhY2sgb2YgZXhwcmVzcyBsYXllci5cbiAqXG4gKiBJdCBpcyBuZWNlc3NhcnkgYmVjYXVzZSBleHByZXNzIGRvZXNuJ3Qgc3RvcmUgdGhlIGRpZmZlcmVudCBsYXllcnNcbiAqIChpZTogbWlkZGxld2FyZSwgcm91dGVyIGV0YykgdGhhdCBpdCBjYWxsZWQgdG8gZ2V0IHRvIHRoZSBjdXJyZW50IGxheWVyLlxuICogR2l2ZW4gdGhhdCwgdGhlIG9ubHkgd2F5IHRvIGtub3cgdGhlIHJvdXRlIG9mIGEgZ2l2ZW4gbGF5ZXIgaXMgdG9cbiAqIHN0b3JlIHRoZSBwYXRoIG9mIHdoZXJlIGVhY2ggcHJldmlvdXMgbGF5ZXIgaGFzIGJlZW4gbW91bnRlZC5cbiAqXG4gKiBleDogYm9keVBhcnNlciA+IGF1dGggbWlkZGxld2FyZSA+IC91c2VycyByb3V0ZXIgPiBnZXQgLzppZFxuICogIGluIHRoaXMgY2FzZSB0aGUgc3RhY2sgd291bGQgYmU6IFtcIi91c2Vyc1wiLCBcIi86aWRcIl1cbiAqXG4gKiBleDI6IGJvZHlQYXJzZXIgPiAvYXBpIHJvdXRlciA+IC92MSByb3V0ZXIgPiAvdXNlcnMgcm91dGVyID4gZ2V0IC86aWRcbiAqICBzdGFjazogW1wiL2FwaVwiLCBcIi92MVwiLCBcIi91c2Vyc1wiLCBcIjppZFwiXVxuICpcbiAqL1xuZXhwb3J0cy5fTEFZRVJTX1NUT1JFX1BST1BFUlRZID0gJ19fb3RfbWlkZGxld2FyZXMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWwtdHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getActualMatchedRoute = exports.getConstructedRoute = exports.getLayerPath = exports.asErrorAndMessage = exports.isLayerIgnored = exports.getLayerMetadata = exports.getRouterPath = exports.storeLayerPath = void 0;\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/**\n * Store layers path in the request to be able to construct route later\n * @param request The request where\n * @param [value] the value to push into the array\n */\nconst storeLayerPath = (request, value) => {\n    if (Array.isArray(request[internal_types_1._LAYERS_STORE_PROPERTY]) === false) {\n        Object.defineProperty(request, internal_types_1._LAYERS_STORE_PROPERTY, {\n            enumerable: false,\n            value: [],\n        });\n    }\n    if (value === undefined)\n        return { isLayerPathStored: false };\n    request[internal_types_1._LAYERS_STORE_PROPERTY].push(value);\n    return { isLayerPathStored: true };\n};\nexports.storeLayerPath = storeLayerPath;\n/**\n * Recursively search the router path from layer stack\n * @param path The path to reconstruct\n * @param layer The layer to reconstruct from\n * @returns The reconstructed path\n */\nconst getRouterPath = (path, layer) => {\n    const stackLayer = layer.handle?.stack?.[0];\n    if (stackLayer?.route?.path) {\n        return `${path}${stackLayer.route.path}`;\n    }\n    if (stackLayer?.handle?.stack) {\n        return (0, exports.getRouterPath)(path, stackLayer);\n    }\n    return path;\n};\nexports.getRouterPath = getRouterPath;\n/**\n * Parse express layer context to retrieve a name and attributes.\n * @param route The route of the layer\n * @param layer Express layer\n * @param [layerPath] if present, the path on which the layer has been mounted\n */\nconst getLayerMetadata = (route, layer, layerPath) => {\n    if (layer.name === 'router') {\n        const maybeRouterPath = (0, exports.getRouterPath)('', layer);\n        const extractedRouterPath = maybeRouterPath\n            ? maybeRouterPath\n            : layerPath || route || '/';\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: extractedRouterPath,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.ROUTER,\n            },\n            name: `router - ${extractedRouterPath}`,\n        };\n    }\n    else if (layer.name === 'bound dispatch' || layer.name === 'handle') {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: (route || layerPath) ?? 'request handler',\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.REQUEST_HANDLER,\n            },\n            name: `request handler${layer.path ? ` - ${route || layerPath}` : ''}`,\n        };\n    }\n    else {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: layer.name,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.MIDDLEWARE,\n            },\n            name: `middleware - ${layer.name}`,\n        };\n    }\n};\nexports.getLayerMetadata = getLayerMetadata;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param obj obj to inspect\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isLayerIgnored = (name, type, config) => {\n    if (Array.isArray(config?.ignoreLayersType) &&\n        config?.ignoreLayersType?.includes(type)) {\n        return true;\n    }\n    if (Array.isArray(config?.ignoreLayers) === false)\n        return false;\n    try {\n        for (const pattern of config.ignoreLayers) {\n            if (satisfiesPattern(name, pattern)) {\n                return true;\n            }\n        }\n    }\n    catch (e) {\n        /* catch block*/\n    }\n    return false;\n};\nexports.isLayerIgnored = isLayerIgnored;\n/**\n * Converts a user-provided error value into an error and error message pair\n *\n * @param error - User-provided error value\n * @returns Both an Error or string representation of the value and an error message\n */\nconst asErrorAndMessage = (error) => error instanceof Error\n    ? [error, error.message]\n    : [String(error), String(error)];\nexports.asErrorAndMessage = asErrorAndMessage;\n/**\n * Extracts the layer path from the route arguments\n *\n * @param args - Arguments of the route\n * @returns The layer path\n */\nconst getLayerPath = (args) => {\n    const firstArg = args[0];\n    if (Array.isArray(firstArg)) {\n        return firstArg.map(arg => extractLayerPathSegment(arg) || '').join(',');\n    }\n    return extractLayerPathSegment(firstArg);\n};\nexports.getLayerPath = getLayerPath;\nconst extractLayerPathSegment = (arg) => {\n    if (typeof arg === 'string') {\n        return arg;\n    }\n    if (arg instanceof RegExp || typeof arg === 'number') {\n        return arg.toString();\n    }\n    return;\n};\nfunction getConstructedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    const meaningfulPaths = layersStore.filter(path => path !== '/' && path !== '/*');\n    if (meaningfulPaths.length === 1 && meaningfulPaths[0] === '*') {\n        return '*';\n    }\n    // Join parts and remove duplicate slashes\n    return meaningfulPaths.join('').replace(/\\/{2,}/g, '/');\n}\nexports.getConstructedRoute = getConstructedRoute;\n/**\n * Extracts the actual matched route from Express request for OpenTelemetry instrumentation.\n * Returns the route that should be used as the http.route attribute.\n *\n * @param req - The Express request object with layers store\n * @param layersStoreProperty - The property name where layer paths are stored\n * @returns The matched route string or undefined if no valid route is found\n */\nfunction getActualMatchedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    // If no layers are stored, no route can be determined\n    if (layersStore.length === 0) {\n        return undefined;\n    }\n    // Handle root path case - if all paths are root, only return root if originalUrl is also root\n    // The layer store also includes root paths in case a non-existing url was requested\n    if (layersStore.every(path => path === '/')) {\n        return req.originalUrl === '/' ? '/' : undefined;\n    }\n    const constructedRoute = getConstructedRoute(req);\n    if (constructedRoute === '*') {\n        return constructedRoute;\n    }\n    // For RegExp routes or route arrays, return the constructed route\n    // This handles the case where the route is defined using RegExp or an array\n    if (constructedRoute.includes('/') &&\n        (constructedRoute.includes(',') ||\n            constructedRoute.includes('\\\\') ||\n            constructedRoute.includes('*') ||\n            constructedRoute.includes('['))) {\n        return constructedRoute;\n    }\n    // Ensure route starts with '/' if it doesn't already\n    const normalizedRoute = constructedRoute.startsWith('/')\n        ? constructedRoute\n        : `/${constructedRoute}`;\n    // Validate that this appears to be a matched route\n    // A route is considered matched if:\n    // 1. We have a constructed route\n    // 2. The original URL matches or starts with our route pattern\n    const isValidRoute = normalizedRoute.length > 0 &&\n        (req.originalUrl === normalizedRoute ||\n            req.originalUrl.startsWith(normalizedRoute) ||\n            isRoutePattern(normalizedRoute));\n    return isValidRoute ? normalizedRoute : undefined;\n}\nexports.getActualMatchedRoute = getActualMatchedRoute;\n/**\n * Checks if a route contains parameter patterns (e.g., :id, :userId)\n * which are valid even if they don't exactly match the original URL\n */\nfunction isRoutePattern(route) {\n    return route.includes(':') || route.includes('*');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.53.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-express';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvY29keWRlYXJrbGFuZC9zZW50cnl2aWJlL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tZXhwcmVzc0AwLjUzLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcy9idWlsZC9zcmMvdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IGV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gdm9pZCAwO1xuLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG5leHBvcnRzLlBBQ0tBR0VfVkVSU0lPTiA9ICcwLjUzLjAnO1xuZXhwb3J0cy5QQUNLQUdFX05BTUUgPSAnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"EXPRESS_TYPE\"] = \"express.type\";\n    AttributeNames[\"EXPRESS_NAME\"] = \"express.name\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRSIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWV4cHJlc3NAMC41My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJFWFBSRVNTX1RZUEVcIl0gPSBcImV4cHJlc3MudHlwZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiRVhQUkVTU19OQU1FXCJdID0gXCJleHByZXNzLm5hbWVcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js ***!
  \***********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressLayerType = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExpressLayerType;\n(function (ExpressLayerType) {\n    ExpressLayerType[\"ROUTER\"] = \"router\";\n    ExpressLayerType[\"MIDDLEWARE\"] = \"middleware\";\n    ExpressLayerType[\"REQUEST_HANDLER\"] = \"request_handler\";\n})(ExpressLayerType = exports.ExpressLayerType || (exports.ExpressLayerType = {}));\n//# sourceMappingURL=ExpressLayerType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrREFBa0Qsd0JBQXdCLEtBQUs7QUFDaEYiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHByZXNzTGF5ZXJUeXBlID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBFeHByZXNzTGF5ZXJUeXBlO1xuKGZ1bmN0aW9uIChFeHByZXNzTGF5ZXJUeXBlKSB7XG4gICAgRXhwcmVzc0xheWVyVHlwZVtcIlJPVVRFUlwiXSA9IFwicm91dGVyXCI7XG4gICAgRXhwcmVzc0xheWVyVHlwZVtcIk1JRERMRVdBUkVcIl0gPSBcIm1pZGRsZXdhcmVcIjtcbiAgICBFeHByZXNzTGF5ZXJUeXBlW1wiUkVRVUVTVF9IQU5ETEVSXCJdID0gXCJyZXF1ZXN0X2hhbmRsZXJcIjtcbn0pKEV4cHJlc3NMYXllclR5cGUgPSBleHBvcnRzLkV4cHJlc3NMYXllclR5cGUgfHwgKGV4cG9ydHMuRXhwcmVzc0xheWVyVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHByZXNzTGF5ZXJUeXBlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = exports.ExpressLayerType = exports.ExpressInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"ExpressInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.ExpressInstrumentation; } }));\nvar ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nObject.defineProperty(exports, \"ExpressLayerType\", ({ enumerable: true, get: function () { return ExpressLayerType_1.ExpressLayerType; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyw4QkFBOEI7QUFDbEYsd0JBQXdCLG1CQUFPLENBQUMsaU5BQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySix5QkFBeUIsbUJBQU8sQ0FBQywrTkFBMEI7QUFDM0Qsb0RBQW1ELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQzFJLHVCQUF1QixtQkFBTyxDQUFDLDJOQUF3QjtBQUN2RCxrREFBaUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDcEkiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5FeHByZXNzTGF5ZXJUeXBlID0gZXhwb3J0cy5FeHByZXNzSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwcmVzc0luc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuRXhwcmVzc0luc3RydW1lbnRhdGlvbjsgfSB9KTtcbnZhciBFeHByZXNzTGF5ZXJUeXBlXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwcmVzc0xheWVyVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRXhwcmVzc0xheWVyVHlwZV8xLkV4cHJlc3NMYXllclR5cGU7IH0gfSk7XG52YXIgQXR0cmlidXRlTmFtZXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXR0cmlidXRlTmFtZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEF0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressInstrumentation = void 0;\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/** Express instrumentation for OpenTelemetry */\nclass ExpressInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('express', ['>=4.0.0 <6'], moduleExports => {\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype // Express v5\n                    : moduleExports.Router; // Express v4\n                // patch express.Router.route\n                if ((0, instrumentation_1.isWrapped)(routerProto.route)) {\n                    this._unwrap(routerProto, 'route');\n                }\n                this._wrap(routerProto, 'route', this._getRoutePatch());\n                // patch express.Router.use\n                if ((0, instrumentation_1.isWrapped)(routerProto.use)) {\n                    this._unwrap(routerProto, 'use');\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._wrap(routerProto, 'use', this._getRouterUsePatch());\n                // patch express.Application.use\n                if ((0, instrumentation_1.isWrapped)(moduleExports.application.use)) {\n                    this._unwrap(moduleExports.application, 'use');\n                }\n                this._wrap(moduleExports.application, 'use', \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._getAppUsePatch(isExpressWithRouterPrototype));\n                return moduleExports;\n            }, moduleExports => {\n                if (moduleExports === undefined)\n                    return;\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype\n                    : moduleExports.Router;\n                this._unwrap(routerProto, 'route');\n                this._unwrap(routerProto, 'use');\n                this._unwrap(moduleExports.application, 'use');\n            }),\n        ];\n    }\n    /**\n     * Get the patch for Router.route function\n     */\n    _getRoutePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function route_trace(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Router.use function\n     */\n    _getRouterUsePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Application.use function\n     */\n    _getAppUsePatch(isExpressWithRouterPrototype) {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                // If we access app.router in express 4.x we trigger an assertion error.\n                // This property existed in v3, was removed in v4 and then re-added in v5.\n                const router = isExpressWithRouterPrototype\n                    ? this.router\n                    : this._router;\n                const route = original.apply(this, args);\n                if (router) {\n                    const layer = router.stack[router.stack.length - 1];\n                    instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                }\n                return route;\n            };\n        };\n    }\n    /** Patch each express layer to create span and propagate context */\n    _applyPatch(layer, layerPath) {\n        const instrumentation = this;\n        // avoid patching multiple times the same layer\n        if (layer[internal_types_1.kLayerPatched] === true)\n            return;\n        layer[internal_types_1.kLayerPatched] = true;\n        this._wrap(layer, 'handle', original => {\n            // TODO: instrument error handlers\n            if (original.length === 4)\n                return original;\n            const patched = function (req, res) {\n                const { isLayerPathStored } = (0, utils_1.storeLayerPath)(req, layerPath);\n                const constructedRoute = (0, utils_1.getConstructedRoute)(req);\n                const actualMatchedRoute = (0, utils_1.getActualMatchedRoute)(req);\n                const attributes = {\n                    [semantic_conventions_1.ATTR_HTTP_ROUTE]: actualMatchedRoute,\n                };\n                const metadata = (0, utils_1.getLayerMetadata)(constructedRoute, layer, layerPath);\n                const type = metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE];\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n                if (rpcMetadata?.type === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = actualMatchedRoute;\n                }\n                // verify against the config if the layer should be ignored\n                if ((0, utils_1.isLayerIgnored)(metadata.name, type, instrumentation.getConfig())) {\n                    if (type === ExpressLayerType_1.ExpressLayerType.MIDDLEWARE) {\n                        req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                    }\n                    return original.apply(this, arguments);\n                }\n                if (api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return original.apply(this, arguments);\n                }\n                const spanName = instrumentation._getSpanName({\n                    request: req,\n                    layerType: type,\n                    route: constructedRoute,\n                }, metadata.name);\n                const span = instrumentation.tracer.startSpan(spanName, {\n                    attributes: Object.assign(attributes, metadata.attributes),\n                });\n                const parentContext = api_1.context.active();\n                let currentContext = api_1.trace.setSpan(parentContext, span);\n                const { requestHook } = instrumentation.getConfig();\n                if (requestHook) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => requestHook(span, {\n                        request: req,\n                        layerType: type,\n                        route: constructedRoute,\n                    }), e => {\n                        if (e) {\n                            api_1.diag.error('express instrumentation: request hook failed', e);\n                        }\n                    }, true);\n                }\n                let spanHasEnded = false;\n                // TODO: Fix router spans (getRouterPath does not work properly) to\n                // have useful names before removing this branch\n                if (metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE] ===\n                    ExpressLayerType_1.ExpressLayerType.ROUTER) {\n                    span.end();\n                    spanHasEnded = true;\n                    currentContext = parentContext;\n                }\n                // listener for response.on('finish')\n                const onResponseFinish = () => {\n                    if (spanHasEnded === false) {\n                        spanHasEnded = true;\n                        span.end();\n                    }\n                };\n                // verify we have a callback\n                const args = Array.from(arguments);\n                const callbackIdx = args.findIndex(arg => typeof arg === 'function');\n                if (callbackIdx >= 0) {\n                    arguments[callbackIdx] = function () {\n                        // express considers anything but an empty value, \"route\" or \"router\"\n                        // passed to its callback to be an error\n                        const maybeError = arguments[0];\n                        const isError = ![undefined, null, 'route', 'router'].includes(maybeError);\n                        if (!spanHasEnded && isError) {\n                            const [error, message] = (0, utils_1.asErrorAndMessage)(maybeError);\n                            span.recordException(error);\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message,\n                            });\n                        }\n                        if (spanHasEnded === false) {\n                            spanHasEnded = true;\n                            req.res?.removeListener('finish', onResponseFinish);\n                            span.end();\n                        }\n                        if (!(req.route && isError) && isLayerPathStored) {\n                            req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                        }\n                        const callback = args[callbackIdx];\n                        return api_1.context.bind(parentContext, callback).apply(this, arguments);\n                    };\n                }\n                try {\n                    return api_1.context.bind(currentContext, original).apply(this, arguments);\n                }\n                catch (anyError) {\n                    const [error, message] = (0, utils_1.asErrorAndMessage)(anyError);\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message,\n                    });\n                    throw anyError;\n                }\n                finally {\n                    /**\n                     * At this point if the callback wasn't called, that means either the\n                     * layer is asynchronous (so it will call the callback later on) or that\n                     * the layer directly ends the http response, so we'll hook into the \"finish\"\n                     * event to handle the later case.\n                     */\n                    if (!spanHasEnded) {\n                        res.once('finish', onResponseFinish);\n                    }\n                }\n            };\n            // `handle` isn't just a regular function in some cases. It also contains\n            // some properties holding metadata and state so we need to proxy them\n            // through through patched function\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1950\n            // Also some apps/libs do their own patching before OTEL and have these properties\n            // in the proptotype. So we use a `for...in` loop to get own properties and also\n            // any enumerable prop in the prototype chain\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2271\n            for (const key in original) {\n                Object.defineProperty(patched, key, {\n                    get() {\n                        return original[key];\n                    },\n                    set(value) {\n                        original[key] = value;\n                    },\n                });\n            }\n            return patched;\n        });\n    }\n    _getSpanName(info, defaultName) {\n        const { spanNameHook } = this.getConfig();\n        if (!(spanNameHook instanceof Function)) {\n            return defaultName;\n        }\n        try {\n            return spanNameHook(info, defaultName) ?? defaultName;\n        }\n        catch (err) {\n            api_1.diag.error('express instrumentation: error calling span name rewrite hook', err);\n            return defaultName;\n        }\n    }\n}\nexports.ExpressInstrumentation = ExpressInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._LAYERS_STORE_PROPERTY = exports.kLayerPatched = void 0;\n/**\n * This symbol is used to mark express layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexports.kLayerPatched = Symbol('express-layer-patched');\n/**\n * This const define where on the `request` object the Instrumentation will mount the\n * current stack of express layer.\n *\n * It is necessary because express doesn't store the different layers\n * (ie: middleware, router etc) that it called to get to the current layer.\n * Given that, the only way to know the route of a given layer is to\n * store the path of where each previous layer has been mounted.\n *\n * ex: bodyParser > auth middleware > /users router > get /:id\n *  in this case the stack would be: [\"/users\", \"/:id\"]\n *\n * ex2: bodyParser > /api router > /v1 router > /users router > get /:id\n *  stack: [\"/api\", \"/v1\", \"/users\", \":id\"]\n *\n */\nexports._LAYERS_STORE_PROPERTY = '__ot_middlewares';\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyxxQkFBcUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFkgPSBleHBvcnRzLmtMYXllclBhdGNoZWQgPSB2b2lkIDA7XG4vKipcbiAqIFRoaXMgc3ltYm9sIGlzIHVzZWQgdG8gbWFyayBleHByZXNzIGxheWVyIGFzIGJlaW5nIGFscmVhZHkgaW5zdHJ1bWVudGVkXG4gKiBzaW5jZSBpdHMgcG9zc2libGUgdG8gdXNlIGEgZ2l2ZW4gbGF5ZXIgbXVsdGlwbGUgdGltZXMgKGV4OiBtaWRkbGV3YXJlcylcbiAqL1xuZXhwb3J0cy5rTGF5ZXJQYXRjaGVkID0gU3ltYm9sKCdleHByZXNzLWxheWVyLXBhdGNoZWQnKTtcbi8qKlxuICogVGhpcyBjb25zdCBkZWZpbmUgd2hlcmUgb24gdGhlIGByZXF1ZXN0YCBvYmplY3QgdGhlIEluc3RydW1lbnRhdGlvbiB3aWxsIG1vdW50IHRoZVxuICogY3VycmVudCBzdGFjayBvZiBleHByZXNzIGxheWVyLlxuICpcbiAqIEl0IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGV4cHJlc3MgZG9lc24ndCBzdG9yZSB0aGUgZGlmZmVyZW50IGxheWVyc1xuICogKGllOiBtaWRkbGV3YXJlLCByb3V0ZXIgZXRjKSB0aGF0IGl0IGNhbGxlZCB0byBnZXQgdG8gdGhlIGN1cnJlbnQgbGF5ZXIuXG4gKiBHaXZlbiB0aGF0LCB0aGUgb25seSB3YXkgdG8ga25vdyB0aGUgcm91dGUgb2YgYSBnaXZlbiBsYXllciBpcyB0b1xuICogc3RvcmUgdGhlIHBhdGggb2Ygd2hlcmUgZWFjaCBwcmV2aW91cyBsYXllciBoYXMgYmVlbiBtb3VudGVkLlxuICpcbiAqIGV4OiBib2R5UGFyc2VyID4gYXV0aCBtaWRkbGV3YXJlID4gL3VzZXJzIHJvdXRlciA+IGdldCAvOmlkXG4gKiAgaW4gdGhpcyBjYXNlIHRoZSBzdGFjayB3b3VsZCBiZTogW1wiL3VzZXJzXCIsIFwiLzppZFwiXVxuICpcbiAqIGV4MjogYm9keVBhcnNlciA+IC9hcGkgcm91dGVyID4gL3YxIHJvdXRlciA+IC91c2VycyByb3V0ZXIgPiBnZXQgLzppZFxuICogIHN0YWNrOiBbXCIvYXBpXCIsIFwiL3YxXCIsIFwiL3VzZXJzXCIsIFwiOmlkXCJdXG4gKlxuICovXG5leHBvcnRzLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFkgPSAnX19vdF9taWRkbGV3YXJlcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getActualMatchedRoute = exports.getConstructedRoute = exports.getLayerPath = exports.asErrorAndMessage = exports.isLayerIgnored = exports.getLayerMetadata = exports.getRouterPath = exports.storeLayerPath = void 0;\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/**\n * Store layers path in the request to be able to construct route later\n * @param request The request where\n * @param [value] the value to push into the array\n */\nconst storeLayerPath = (request, value) => {\n    if (Array.isArray(request[internal_types_1._LAYERS_STORE_PROPERTY]) === false) {\n        Object.defineProperty(request, internal_types_1._LAYERS_STORE_PROPERTY, {\n            enumerable: false,\n            value: [],\n        });\n    }\n    if (value === undefined)\n        return { isLayerPathStored: false };\n    request[internal_types_1._LAYERS_STORE_PROPERTY].push(value);\n    return { isLayerPathStored: true };\n};\nexports.storeLayerPath = storeLayerPath;\n/**\n * Recursively search the router path from layer stack\n * @param path The path to reconstruct\n * @param layer The layer to reconstruct from\n * @returns The reconstructed path\n */\nconst getRouterPath = (path, layer) => {\n    const stackLayer = layer.handle?.stack?.[0];\n    if (stackLayer?.route?.path) {\n        return `${path}${stackLayer.route.path}`;\n    }\n    if (stackLayer?.handle?.stack) {\n        return (0, exports.getRouterPath)(path, stackLayer);\n    }\n    return path;\n};\nexports.getRouterPath = getRouterPath;\n/**\n * Parse express layer context to retrieve a name and attributes.\n * @param route The route of the layer\n * @param layer Express layer\n * @param [layerPath] if present, the path on which the layer has been mounted\n */\nconst getLayerMetadata = (route, layer, layerPath) => {\n    if (layer.name === 'router') {\n        const maybeRouterPath = (0, exports.getRouterPath)('', layer);\n        const extractedRouterPath = maybeRouterPath\n            ? maybeRouterPath\n            : layerPath || route || '/';\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: extractedRouterPath,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.ROUTER,\n            },\n            name: `router - ${extractedRouterPath}`,\n        };\n    }\n    else if (layer.name === 'bound dispatch' || layer.name === 'handle') {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: (route || layerPath) ?? 'request handler',\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.REQUEST_HANDLER,\n            },\n            name: `request handler${layer.path ? ` - ${route || layerPath}` : ''}`,\n        };\n    }\n    else {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: layer.name,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.MIDDLEWARE,\n            },\n            name: `middleware - ${layer.name}`,\n        };\n    }\n};\nexports.getLayerMetadata = getLayerMetadata;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param obj obj to inspect\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isLayerIgnored = (name, type, config) => {\n    if (Array.isArray(config?.ignoreLayersType) &&\n        config?.ignoreLayersType?.includes(type)) {\n        return true;\n    }\n    if (Array.isArray(config?.ignoreLayers) === false)\n        return false;\n    try {\n        for (const pattern of config.ignoreLayers) {\n            if (satisfiesPattern(name, pattern)) {\n                return true;\n            }\n        }\n    }\n    catch (e) {\n        /* catch block*/\n    }\n    return false;\n};\nexports.isLayerIgnored = isLayerIgnored;\n/**\n * Converts a user-provided error value into an error and error message pair\n *\n * @param error - User-provided error value\n * @returns Both an Error or string representation of the value and an error message\n */\nconst asErrorAndMessage = (error) => error instanceof Error\n    ? [error, error.message]\n    : [String(error), String(error)];\nexports.asErrorAndMessage = asErrorAndMessage;\n/**\n * Extracts the layer path from the route arguments\n *\n * @param args - Arguments of the route\n * @returns The layer path\n */\nconst getLayerPath = (args) => {\n    const firstArg = args[0];\n    if (Array.isArray(firstArg)) {\n        return firstArg.map(arg => extractLayerPathSegment(arg) || '').join(',');\n    }\n    return extractLayerPathSegment(firstArg);\n};\nexports.getLayerPath = getLayerPath;\nconst extractLayerPathSegment = (arg) => {\n    if (typeof arg === 'string') {\n        return arg;\n    }\n    if (arg instanceof RegExp || typeof arg === 'number') {\n        return arg.toString();\n    }\n    return;\n};\nfunction getConstructedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    const meaningfulPaths = layersStore.filter(path => path !== '/' && path !== '/*');\n    if (meaningfulPaths.length === 1 && meaningfulPaths[0] === '*') {\n        return '*';\n    }\n    // Join parts and remove duplicate slashes\n    return meaningfulPaths.join('').replace(/\\/{2,}/g, '/');\n}\nexports.getConstructedRoute = getConstructedRoute;\n/**\n * Extracts the actual matched route from Express request for OpenTelemetry instrumentation.\n * Returns the route that should be used as the http.route attribute.\n *\n * @param req - The Express request object with layers store\n * @param layersStoreProperty - The property name where layer paths are stored\n * @returns The matched route string or undefined if no valid route is found\n */\nfunction getActualMatchedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    // If no layers are stored, no route can be determined\n    if (layersStore.length === 0) {\n        return undefined;\n    }\n    // Handle root path case - if all paths are root, only return root if originalUrl is also root\n    // The layer store also includes root paths in case a non-existing url was requested\n    if (layersStore.every(path => path === '/')) {\n        return req.originalUrl === '/' ? '/' : undefined;\n    }\n    const constructedRoute = getConstructedRoute(req);\n    if (constructedRoute === '*') {\n        return constructedRoute;\n    }\n    // For RegExp routes or route arrays, return the constructed route\n    // This handles the case where the route is defined using RegExp or an array\n    if (constructedRoute.includes('/') &&\n        (constructedRoute.includes(',') ||\n            constructedRoute.includes('\\\\') ||\n            constructedRoute.includes('*') ||\n            constructedRoute.includes('['))) {\n        return constructedRoute;\n    }\n    // Ensure route starts with '/' if it doesn't already\n    const normalizedRoute = constructedRoute.startsWith('/')\n        ? constructedRoute\n        : `/${constructedRoute}`;\n    // Validate that this appears to be a matched route\n    // A route is considered matched if:\n    // 1. We have a constructed route\n    // 2. The original URL matches or starts with our route pattern\n    const isValidRoute = normalizedRoute.length > 0 &&\n        (req.originalUrl === normalizedRoute ||\n            req.originalUrl.startsWith(normalizedRoute) ||\n            isRoutePattern(normalizedRoute));\n    return isValidRoute ? normalizedRoute : undefined;\n}\nexports.getActualMatchedRoute = getActualMatchedRoute;\n/**\n * Checks if a route contains parameter patterns (e.g., :id, :userId)\n * which are valid even if they don't exactly match the original URL\n */\nfunction isRoutePattern(route) {\n    return route.includes(':') || route.includes('*');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.53.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-express';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNTMuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js ***!
  \*********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"EXPRESS_TYPE\"] = \"express.type\";\n    AttributeNames[\"EXPRESS_NAME\"] = \"express.name\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9BdHRyaWJ1dGVOYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QyxzQkFBc0IsS0FBSztBQUMxRSIsInNvdXJjZXMiOlsiL1VzZXJzL2NvZHlkZWFya2xhbmQvc2VudHJ5dmliZS9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLWV4cHJlc3NAMC41My4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWV4cHJlc3MvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJFWFBSRVNTX1RZUEVcIl0gPSBcImV4cHJlc3MudHlwZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiRVhQUkVTU19OQU1FXCJdID0gXCJleHByZXNzLm5hbWVcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js ***!
  \***********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressLayerType = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExpressLayerType;\n(function (ExpressLayerType) {\n    ExpressLayerType[\"ROUTER\"] = \"router\";\n    ExpressLayerType[\"MIDDLEWARE\"] = \"middleware\";\n    ExpressLayerType[\"REQUEST_HANDLER\"] = \"request_handler\";\n})(ExpressLayerType = exports.ExpressLayerType || (exports.ExpressLayerType = {}));\n//# sourceMappingURL=ExpressLayerType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrREFBa0Qsd0JBQXdCLEtBQUs7QUFDaEYiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHByZXNzTGF5ZXJUeXBlID0gdm9pZCAwO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBFeHByZXNzTGF5ZXJUeXBlO1xuKGZ1bmN0aW9uIChFeHByZXNzTGF5ZXJUeXBlKSB7XG4gICAgRXhwcmVzc0xheWVyVHlwZVtcIlJPVVRFUlwiXSA9IFwicm91dGVyXCI7XG4gICAgRXhwcmVzc0xheWVyVHlwZVtcIk1JRERMRVdBUkVcIl0gPSBcIm1pZGRsZXdhcmVcIjtcbiAgICBFeHByZXNzTGF5ZXJUeXBlW1wiUkVRVUVTVF9IQU5ETEVSXCJdID0gXCJyZXF1ZXN0X2hhbmRsZXJcIjtcbn0pKEV4cHJlc3NMYXllclR5cGUgPSBleHBvcnRzLkV4cHJlc3NMYXllclR5cGUgfHwgKGV4cG9ydHMuRXhwcmVzc0xheWVyVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHByZXNzTGF5ZXJUeXBlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = exports.ExpressLayerType = exports.ExpressInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"ExpressInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.ExpressInstrumentation; } }));\nvar ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nObject.defineProperty(exports, \"ExpressLayerType\", ({ enumerable: true, get: function () { return ExpressLayerType_1.ExpressLayerType; } }));\nvar AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nObject.defineProperty(exports, \"AttributeNames\", ({ enumerable: true, get: function () { return AttributeNames_1.AttributeNames; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyw4QkFBOEI7QUFDbEYsd0JBQXdCLG1CQUFPLENBQUMsaU5BQW1CO0FBQ25ELDBEQUF5RCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNySix5QkFBeUIsbUJBQU8sQ0FBQywrTkFBMEI7QUFDM0Qsb0RBQW1ELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDO0FBQzFJLHVCQUF1QixtQkFBTyxDQUFDLDJOQUF3QjtBQUN2RCxrREFBaUQsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDcEkiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5FeHByZXNzTGF5ZXJUeXBlID0gZXhwb3J0cy5FeHByZXNzSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGluc3RydW1lbnRhdGlvbl8xID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwcmVzc0luc3RydW1lbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdHJ1bWVudGF0aW9uXzEuRXhwcmVzc0luc3RydW1lbnRhdGlvbjsgfSB9KTtcbnZhciBFeHByZXNzTGF5ZXJUeXBlXzEgPSByZXF1aXJlKFwiLi9lbnVtcy9FeHByZXNzTGF5ZXJUeXBlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhwcmVzc0xheWVyVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRXhwcmVzc0xheWVyVHlwZV8xLkV4cHJlc3NMYXllclR5cGU7IH0gfSk7XG52YXIgQXR0cmlidXRlTmFtZXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zL0F0dHJpYnV0ZU5hbWVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXR0cmlidXRlTmFtZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEF0dHJpYnV0ZU5hbWVzXzEuQXR0cmlidXRlTmFtZXM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = undefined;globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"15.5.4\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExpressInstrumentation = void 0;\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/** Express instrumentation for OpenTelemetry */\nclass ExpressInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, config);\n    }\n    init() {\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('express', ['>=4.0.0 <6'], moduleExports => {\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype // Express v5\n                    : moduleExports.Router; // Express v4\n                // patch express.Router.route\n                if ((0, instrumentation_1.isWrapped)(routerProto.route)) {\n                    this._unwrap(routerProto, 'route');\n                }\n                this._wrap(routerProto, 'route', this._getRoutePatch());\n                // patch express.Router.use\n                if ((0, instrumentation_1.isWrapped)(routerProto.use)) {\n                    this._unwrap(routerProto, 'use');\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._wrap(routerProto, 'use', this._getRouterUsePatch());\n                // patch express.Application.use\n                if ((0, instrumentation_1.isWrapped)(moduleExports.application.use)) {\n                    this._unwrap(moduleExports.application, 'use');\n                }\n                this._wrap(moduleExports.application, 'use', \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._getAppUsePatch(isExpressWithRouterPrototype));\n                return moduleExports;\n            }, moduleExports => {\n                if (moduleExports === undefined)\n                    return;\n                const isExpressWithRouterPrototype = typeof moduleExports?.Router?.prototype?.route === 'function';\n                const routerProto = isExpressWithRouterPrototype\n                    ? moduleExports.Router.prototype\n                    : moduleExports.Router;\n                this._unwrap(routerProto, 'route');\n                this._unwrap(routerProto, 'use');\n                this._unwrap(moduleExports.application, 'use');\n            }),\n        ];\n    }\n    /**\n     * Get the patch for Router.route function\n     */\n    _getRoutePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function route_trace(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Router.use function\n     */\n    _getRouterUsePatch() {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                const route = original.apply(this, args);\n                const layer = this.stack[this.stack.length - 1];\n                instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                return route;\n            };\n        };\n    }\n    /**\n     * Get the patch for Application.use function\n     */\n    _getAppUsePatch(isExpressWithRouterPrototype) {\n        const instrumentation = this;\n        return function (original) {\n            return function use(...args) {\n                // If we access app.router in express 4.x we trigger an assertion error.\n                // This property existed in v3, was removed in v4 and then re-added in v5.\n                const router = isExpressWithRouterPrototype\n                    ? this.router\n                    : this._router;\n                const route = original.apply(this, args);\n                if (router) {\n                    const layer = router.stack[router.stack.length - 1];\n                    instrumentation._applyPatch(layer, (0, utils_1.getLayerPath)(args));\n                }\n                return route;\n            };\n        };\n    }\n    /** Patch each express layer to create span and propagate context */\n    _applyPatch(layer, layerPath) {\n        const instrumentation = this;\n        // avoid patching multiple times the same layer\n        if (layer[internal_types_1.kLayerPatched] === true)\n            return;\n        layer[internal_types_1.kLayerPatched] = true;\n        this._wrap(layer, 'handle', original => {\n            // TODO: instrument error handlers\n            if (original.length === 4)\n                return original;\n            const patched = function (req, res) {\n                const { isLayerPathStored } = (0, utils_1.storeLayerPath)(req, layerPath);\n                const constructedRoute = (0, utils_1.getConstructedRoute)(req);\n                const actualMatchedRoute = (0, utils_1.getActualMatchedRoute)(req);\n                const attributes = {\n                    [semantic_conventions_1.ATTR_HTTP_ROUTE]: actualMatchedRoute,\n                };\n                const metadata = (0, utils_1.getLayerMetadata)(constructedRoute, layer, layerPath);\n                const type = metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE];\n                const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n                if (rpcMetadata?.type === core_1.RPCType.HTTP) {\n                    rpcMetadata.route = actualMatchedRoute;\n                }\n                // verify against the config if the layer should be ignored\n                if ((0, utils_1.isLayerIgnored)(metadata.name, type, instrumentation.getConfig())) {\n                    if (type === ExpressLayerType_1.ExpressLayerType.MIDDLEWARE) {\n                        req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                    }\n                    return original.apply(this, arguments);\n                }\n                if (api_1.trace.getSpan(api_1.context.active()) === undefined) {\n                    return original.apply(this, arguments);\n                }\n                const spanName = instrumentation._getSpanName({\n                    request: req,\n                    layerType: type,\n                    route: constructedRoute,\n                }, metadata.name);\n                const span = instrumentation.tracer.startSpan(spanName, {\n                    attributes: Object.assign(attributes, metadata.attributes),\n                });\n                const parentContext = api_1.context.active();\n                let currentContext = api_1.trace.setSpan(parentContext, span);\n                const { requestHook } = instrumentation.getConfig();\n                if (requestHook) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => requestHook(span, {\n                        request: req,\n                        layerType: type,\n                        route: constructedRoute,\n                    }), e => {\n                        if (e) {\n                            api_1.diag.error('express instrumentation: request hook failed', e);\n                        }\n                    }, true);\n                }\n                let spanHasEnded = false;\n                // TODO: Fix router spans (getRouterPath does not work properly) to\n                // have useful names before removing this branch\n                if (metadata.attributes[AttributeNames_1.AttributeNames.EXPRESS_TYPE] ===\n                    ExpressLayerType_1.ExpressLayerType.ROUTER) {\n                    span.end();\n                    spanHasEnded = true;\n                    currentContext = parentContext;\n                }\n                // listener for response.on('finish')\n                const onResponseFinish = () => {\n                    if (spanHasEnded === false) {\n                        spanHasEnded = true;\n                        span.end();\n                    }\n                };\n                // verify we have a callback\n                const args = Array.from(arguments);\n                const callbackIdx = args.findIndex(arg => typeof arg === 'function');\n                if (callbackIdx >= 0) {\n                    arguments[callbackIdx] = function () {\n                        // express considers anything but an empty value, \"route\" or \"router\"\n                        // passed to its callback to be an error\n                        const maybeError = arguments[0];\n                        const isError = ![undefined, null, 'route', 'router'].includes(maybeError);\n                        if (!spanHasEnded && isError) {\n                            const [error, message] = (0, utils_1.asErrorAndMessage)(maybeError);\n                            span.recordException(error);\n                            span.setStatus({\n                                code: api_1.SpanStatusCode.ERROR,\n                                message,\n                            });\n                        }\n                        if (spanHasEnded === false) {\n                            spanHasEnded = true;\n                            req.res?.removeListener('finish', onResponseFinish);\n                            span.end();\n                        }\n                        if (!(req.route && isError) && isLayerPathStored) {\n                            req[internal_types_1._LAYERS_STORE_PROPERTY].pop();\n                        }\n                        const callback = args[callbackIdx];\n                        return api_1.context.bind(parentContext, callback).apply(this, arguments);\n                    };\n                }\n                try {\n                    return api_1.context.bind(currentContext, original).apply(this, arguments);\n                }\n                catch (anyError) {\n                    const [error, message] = (0, utils_1.asErrorAndMessage)(anyError);\n                    span.recordException(error);\n                    span.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message,\n                    });\n                    throw anyError;\n                }\n                finally {\n                    /**\n                     * At this point if the callback wasn't called, that means either the\n                     * layer is asynchronous (so it will call the callback later on) or that\n                     * the layer directly ends the http response, so we'll hook into the \"finish\"\n                     * event to handle the later case.\n                     */\n                    if (!spanHasEnded) {\n                        res.once('finish', onResponseFinish);\n                    }\n                }\n            };\n            // `handle` isn't just a regular function in some cases. It also contains\n            // some properties holding metadata and state so we need to proxy them\n            // through through patched function\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1950\n            // Also some apps/libs do their own patching before OTEL and have these properties\n            // in the proptotype. So we use a `for...in` loop to get own properties and also\n            // any enumerable prop in the prototype chain\n            // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2271\n            for (const key in original) {\n                Object.defineProperty(patched, key, {\n                    get() {\n                        return original[key];\n                    },\n                    set(value) {\n                        original[key] = value;\n                    },\n                });\n            }\n            return patched;\n        });\n    }\n    _getSpanName(info, defaultName) {\n        const { spanNameHook } = this.getConfig();\n        if (!(spanNameHook instanceof Function)) {\n            return defaultName;\n        }\n        try {\n            return spanNameHook(info, defaultName) ?? defaultName;\n        }\n        catch (err) {\n            api_1.diag.error('express instrumentation: error calling span name rewrite hook', err);\n            return defaultName;\n        }\n    }\n}\nexports.ExpressInstrumentation = ExpressInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/instrumentation.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._LAYERS_STORE_PROPERTY = exports.kLayerPatched = void 0;\n/**\n * This symbol is used to mark express layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nexports.kLayerPatched = Symbol('express-layer-patched');\n/**\n * This const define where on the `request` object the Instrumentation will mount the\n * current stack of express layer.\n *\n * It is necessary because express doesn't store the different layers\n * (ie: middleware, router etc) that it called to get to the current layer.\n * Given that, the only way to know the route of a given layer is to\n * store the path of where each previous layer has been mounted.\n *\n * ex: bodyParser > auth middleware > /users router > get /:id\n *  in this case the stack would be: [\"/users\", \"/:id\"]\n *\n * ex2: bodyParser > /api router > /v1 router > /users router > get /:id\n *  stack: [\"/api\", \"/v1\", \"/users\", \":id\"]\n *\n */\nexports._LAYERS_STORE_PROPERTY = '__ot_middlewares';\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyxxQkFBcUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy9pbnRlcm5hbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFkgPSBleHBvcnRzLmtMYXllclBhdGNoZWQgPSB2b2lkIDA7XG4vKipcbiAqIFRoaXMgc3ltYm9sIGlzIHVzZWQgdG8gbWFyayBleHByZXNzIGxheWVyIGFzIGJlaW5nIGFscmVhZHkgaW5zdHJ1bWVudGVkXG4gKiBzaW5jZSBpdHMgcG9zc2libGUgdG8gdXNlIGEgZ2l2ZW4gbGF5ZXIgbXVsdGlwbGUgdGltZXMgKGV4OiBtaWRkbGV3YXJlcylcbiAqL1xuZXhwb3J0cy5rTGF5ZXJQYXRjaGVkID0gU3ltYm9sKCdleHByZXNzLWxheWVyLXBhdGNoZWQnKTtcbi8qKlxuICogVGhpcyBjb25zdCBkZWZpbmUgd2hlcmUgb24gdGhlIGByZXF1ZXN0YCBvYmplY3QgdGhlIEluc3RydW1lbnRhdGlvbiB3aWxsIG1vdW50IHRoZVxuICogY3VycmVudCBzdGFjayBvZiBleHByZXNzIGxheWVyLlxuICpcbiAqIEl0IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGV4cHJlc3MgZG9lc24ndCBzdG9yZSB0aGUgZGlmZmVyZW50IGxheWVyc1xuICogKGllOiBtaWRkbGV3YXJlLCByb3V0ZXIgZXRjKSB0aGF0IGl0IGNhbGxlZCB0byBnZXQgdG8gdGhlIGN1cnJlbnQgbGF5ZXIuXG4gKiBHaXZlbiB0aGF0LCB0aGUgb25seSB3YXkgdG8ga25vdyB0aGUgcm91dGUgb2YgYSBnaXZlbiBsYXllciBpcyB0b1xuICogc3RvcmUgdGhlIHBhdGggb2Ygd2hlcmUgZWFjaCBwcmV2aW91cyBsYXllciBoYXMgYmVlbiBtb3VudGVkLlxuICpcbiAqIGV4OiBib2R5UGFyc2VyID4gYXV0aCBtaWRkbGV3YXJlID4gL3VzZXJzIHJvdXRlciA+IGdldCAvOmlkXG4gKiAgaW4gdGhpcyBjYXNlIHRoZSBzdGFjayB3b3VsZCBiZTogW1wiL3VzZXJzXCIsIFwiLzppZFwiXVxuICpcbiAqIGV4MjogYm9keVBhcnNlciA+IC9hcGkgcm91dGVyID4gL3YxIHJvdXRlciA+IC91c2VycyByb3V0ZXIgPiBnZXQgLzppZFxuICogIHN0YWNrOiBbXCIvYXBpXCIsIFwiL3YxXCIsIFwiL3VzZXJzXCIsIFwiOmlkXCJdXG4gKlxuICovXG5leHBvcnRzLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFkgPSAnX19vdF9taWRkbGV3YXJlcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getActualMatchedRoute = exports.getConstructedRoute = exports.getLayerPath = exports.asErrorAndMessage = exports.isLayerIgnored = exports.getLayerMetadata = exports.getRouterPath = exports.storeLayerPath = void 0;\nconst ExpressLayerType_1 = __webpack_require__(/*! ./enums/ExpressLayerType */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/ExpressLayerType.js\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/enums/AttributeNames.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/internal-types.js\");\n/**\n * Store layers path in the request to be able to construct route later\n * @param request The request where\n * @param [value] the value to push into the array\n */\nconst storeLayerPath = (request, value) => {\n    if (Array.isArray(request[internal_types_1._LAYERS_STORE_PROPERTY]) === false) {\n        Object.defineProperty(request, internal_types_1._LAYERS_STORE_PROPERTY, {\n            enumerable: false,\n            value: [],\n        });\n    }\n    if (value === undefined)\n        return { isLayerPathStored: false };\n    request[internal_types_1._LAYERS_STORE_PROPERTY].push(value);\n    return { isLayerPathStored: true };\n};\nexports.storeLayerPath = storeLayerPath;\n/**\n * Recursively search the router path from layer stack\n * @param path The path to reconstruct\n * @param layer The layer to reconstruct from\n * @returns The reconstructed path\n */\nconst getRouterPath = (path, layer) => {\n    const stackLayer = layer.handle?.stack?.[0];\n    if (stackLayer?.route?.path) {\n        return `${path}${stackLayer.route.path}`;\n    }\n    if (stackLayer?.handle?.stack) {\n        return (0, exports.getRouterPath)(path, stackLayer);\n    }\n    return path;\n};\nexports.getRouterPath = getRouterPath;\n/**\n * Parse express layer context to retrieve a name and attributes.\n * @param route The route of the layer\n * @param layer Express layer\n * @param [layerPath] if present, the path on which the layer has been mounted\n */\nconst getLayerMetadata = (route, layer, layerPath) => {\n    if (layer.name === 'router') {\n        const maybeRouterPath = (0, exports.getRouterPath)('', layer);\n        const extractedRouterPath = maybeRouterPath\n            ? maybeRouterPath\n            : layerPath || route || '/';\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: extractedRouterPath,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.ROUTER,\n            },\n            name: `router - ${extractedRouterPath}`,\n        };\n    }\n    else if (layer.name === 'bound dispatch' || layer.name === 'handle') {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: (route || layerPath) ?? 'request handler',\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.REQUEST_HANDLER,\n            },\n            name: `request handler${layer.path ? ` - ${route || layerPath}` : ''}`,\n        };\n    }\n    else {\n        return {\n            attributes: {\n                [AttributeNames_1.AttributeNames.EXPRESS_NAME]: layer.name,\n                [AttributeNames_1.AttributeNames.EXPRESS_TYPE]: ExpressLayerType_1.ExpressLayerType.MIDDLEWARE,\n            },\n            name: `middleware - ${layer.name}`,\n        };\n    }\n};\nexports.getLayerMetadata = getLayerMetadata;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param obj obj to inspect\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isLayerIgnored = (name, type, config) => {\n    if (Array.isArray(config?.ignoreLayersType) &&\n        config?.ignoreLayersType?.includes(type)) {\n        return true;\n    }\n    if (Array.isArray(config?.ignoreLayers) === false)\n        return false;\n    try {\n        for (const pattern of config.ignoreLayers) {\n            if (satisfiesPattern(name, pattern)) {\n                return true;\n            }\n        }\n    }\n    catch (e) {\n        /* catch block*/\n    }\n    return false;\n};\nexports.isLayerIgnored = isLayerIgnored;\n/**\n * Converts a user-provided error value into an error and error message pair\n *\n * @param error - User-provided error value\n * @returns Both an Error or string representation of the value and an error message\n */\nconst asErrorAndMessage = (error) => error instanceof Error\n    ? [error, error.message]\n    : [String(error), String(error)];\nexports.asErrorAndMessage = asErrorAndMessage;\n/**\n * Extracts the layer path from the route arguments\n *\n * @param args - Arguments of the route\n * @returns The layer path\n */\nconst getLayerPath = (args) => {\n    const firstArg = args[0];\n    if (Array.isArray(firstArg)) {\n        return firstArg.map(arg => extractLayerPathSegment(arg) || '').join(',');\n    }\n    return extractLayerPathSegment(firstArg);\n};\nexports.getLayerPath = getLayerPath;\nconst extractLayerPathSegment = (arg) => {\n    if (typeof arg === 'string') {\n        return arg;\n    }\n    if (arg instanceof RegExp || typeof arg === 'number') {\n        return arg.toString();\n    }\n    return;\n};\nfunction getConstructedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    const meaningfulPaths = layersStore.filter(path => path !== '/' && path !== '/*');\n    if (meaningfulPaths.length === 1 && meaningfulPaths[0] === '*') {\n        return '*';\n    }\n    // Join parts and remove duplicate slashes\n    return meaningfulPaths.join('').replace(/\\/{2,}/g, '/');\n}\nexports.getConstructedRoute = getConstructedRoute;\n/**\n * Extracts the actual matched route from Express request for OpenTelemetry instrumentation.\n * Returns the route that should be used as the http.route attribute.\n *\n * @param req - The Express request object with layers store\n * @param layersStoreProperty - The property name where layer paths are stored\n * @returns The matched route string or undefined if no valid route is found\n */\nfunction getActualMatchedRoute(req) {\n    const layersStore = Array.isArray(req[internal_types_1._LAYERS_STORE_PROPERTY])\n        ? req[internal_types_1._LAYERS_STORE_PROPERTY]\n        : [];\n    // If no layers are stored, no route can be determined\n    if (layersStore.length === 0) {\n        return undefined;\n    }\n    // Handle root path case - if all paths are root, only return root if originalUrl is also root\n    // The layer store also includes root paths in case a non-existing url was requested\n    if (layersStore.every(path => path === '/')) {\n        return req.originalUrl === '/' ? '/' : undefined;\n    }\n    const constructedRoute = getConstructedRoute(req);\n    if (constructedRoute === '*') {\n        return constructedRoute;\n    }\n    // For RegExp routes or route arrays, return the constructed route\n    // This handles the case where the route is defined using RegExp or an array\n    if (constructedRoute.includes('/') &&\n        (constructedRoute.includes(',') ||\n            constructedRoute.includes('\\\\') ||\n            constructedRoute.includes('*') ||\n            constructedRoute.includes('['))) {\n        return constructedRoute;\n    }\n    // Ensure route starts with '/' if it doesn't already\n    const normalizedRoute = constructedRoute.startsWith('/')\n        ? constructedRoute\n        : `/${constructedRoute}`;\n    // Validate that this appears to be a matched route\n    // A route is considered matched if:\n    // 1. We have a constructed route\n    // 2. The original URL matches or starts with our route pattern\n    const isValidRoute = normalizedRoute.length > 0 &&\n        (req.originalUrl === normalizedRoute ||\n            req.originalUrl.startsWith(normalizedRoute) ||\n            isRoutePattern(normalizedRoute));\n    return isValidRoute ? normalizedRoute : undefined;\n}\nexports.getActualMatchedRoute = getActualMatchedRoute;\n/**\n * Checks if a route contains parameter patterns (e.g., :id, :userId)\n * which are valid even if they don't exactly match the original URL\n */\nfunction isRoutePattern(route) {\n    return route.includes(':') || route.includes('*');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/utils.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.53.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-express';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHVCQUF1QjtBQUM5QztBQUNBLHVCQUF1QjtBQUN2QixvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9jb2R5ZGVhcmtsYW5kL3NlbnRyeXZpYmUvbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1leHByZXNzQDAuNTMuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1leHByZXNzL2J1aWxkL3NyYy92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNTMuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZXhwcmVzcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@opentelemetry+instrumentation-express@0.53.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-express/build/src/version.js\n");

/***/ })

};
;