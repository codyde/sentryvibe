"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ansi-to-html@0.7.2";
exports.ids = ["vendor-chunks/ansi-to-html@0.7.2"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/ansi-to-html@0.7.2/node_modules/ansi-to-html/lib/ansi_to_html.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/ansi-to-html@0.7.2/node_modules/ansi-to-html/lib/ansi_to_html.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar entities = __webpack_require__(/*! entities */ \"(ssr)/../../node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/index.js\");\n\nvar defaults = {\n  fg: '#FFF',\n  bg: '#000',\n  newline: false,\n  escapeXML: false,\n  stream: false,\n  colors: getDefaultColors()\n};\n\nfunction getDefaultColors() {\n  var colors = {\n    0: '#000',\n    1: '#A00',\n    2: '#0A0',\n    3: '#A50',\n    4: '#00A',\n    5: '#A0A',\n    6: '#0AA',\n    7: '#AAA',\n    8: '#555',\n    9: '#F55',\n    10: '#5F5',\n    11: '#FF5',\n    12: '#55F',\n    13: '#F5F',\n    14: '#5FF',\n    15: '#FFF'\n  };\n  range(0, 5).forEach(function (red) {\n    range(0, 5).forEach(function (green) {\n      range(0, 5).forEach(function (blue) {\n        return setStyleColor(red, green, blue, colors);\n      });\n    });\n  });\n  range(0, 23).forEach(function (gray) {\n    var c = gray + 232;\n    var l = toHexString(gray * 10 + 8);\n    colors[c] = '#' + l + l + l;\n  });\n  return colors;\n}\n/**\n * @param {number} red\n * @param {number} green\n * @param {number} blue\n * @param {object} colors\n */\n\n\nfunction setStyleColor(red, green, blue, colors) {\n  var c = 16 + red * 36 + green * 6 + blue;\n  var r = red > 0 ? red * 40 + 55 : 0;\n  var g = green > 0 ? green * 40 + 55 : 0;\n  var b = blue > 0 ? blue * 40 + 55 : 0;\n  colors[c] = toColorHexString([r, g, b]);\n}\n/**\n * Converts from a number like 15 to a hex string like 'F'\n * @param {number} num\n * @returns {string}\n */\n\n\nfunction toHexString(num) {\n  var str = num.toString(16);\n\n  while (str.length < 2) {\n    str = '0' + str;\n  }\n\n  return str;\n}\n/**\n * Converts from an array of numbers like [15, 15, 15] to a hex string like 'FFF'\n * @param {[red, green, blue]} ref\n * @returns {string}\n */\n\n\nfunction toColorHexString(ref) {\n  var results = [];\n\n  var _iterator = _createForOfIteratorHelper(ref),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var r = _step.value;\n      results.push(toHexString(r));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return '#' + results.join('');\n}\n/**\n * @param {Array} stack\n * @param {string} token\n * @param {*} data\n * @param {object} options\n */\n\n\nfunction generateOutput(stack, token, data, options) {\n  var result;\n\n  if (token === 'text') {\n    result = pushText(data, options);\n  } else if (token === 'display') {\n    result = handleDisplay(stack, data, options);\n  } else if (token === 'xterm256Foreground') {\n    result = pushForegroundColor(stack, options.colors[data]);\n  } else if (token === 'xterm256Background') {\n    result = pushBackgroundColor(stack, options.colors[data]);\n  } else if (token === 'rgb') {\n    result = handleRgb(stack, data);\n  }\n\n  return result;\n}\n/**\n * @param {Array} stack\n * @param {string} data\n * @returns {*}\n */\n\n\nfunction handleRgb(stack, data) {\n  data = data.substring(2).slice(0, -1);\n  var operation = +data.substr(0, 2);\n  var color = data.substring(5).split(';');\n  var rgb = color.map(function (value) {\n    return ('0' + Number(value).toString(16)).substr(-2);\n  }).join('');\n  return pushStyle(stack, (operation === 38 ? 'color:#' : 'background-color:#') + rgb);\n}\n/**\n * @param {Array} stack\n * @param {number} code\n * @param {object} options\n * @returns {*}\n */\n\n\nfunction handleDisplay(stack, code, options) {\n  code = parseInt(code, 10);\n  var codeMap = {\n    '-1': function _() {\n      return '<br/>';\n    },\n    0: function _() {\n      return stack.length && resetStyles(stack);\n    },\n    1: function _() {\n      return pushTag(stack, 'b');\n    },\n    3: function _() {\n      return pushTag(stack, 'i');\n    },\n    4: function _() {\n      return pushTag(stack, 'u');\n    },\n    8: function _() {\n      return pushStyle(stack, 'display:none');\n    },\n    9: function _() {\n      return pushTag(stack, 'strike');\n    },\n    22: function _() {\n      return pushStyle(stack, 'font-weight:normal;text-decoration:none;font-style:normal');\n    },\n    23: function _() {\n      return closeTag(stack, 'i');\n    },\n    24: function _() {\n      return closeTag(stack, 'u');\n    },\n    39: function _() {\n      return pushForegroundColor(stack, options.fg);\n    },\n    49: function _() {\n      return pushBackgroundColor(stack, options.bg);\n    },\n    53: function _() {\n      return pushStyle(stack, 'text-decoration:overline');\n    }\n  };\n  var result;\n\n  if (codeMap[code]) {\n    result = codeMap[code]();\n  } else if (4 < code && code < 7) {\n    result = pushTag(stack, 'blink');\n  } else if (29 < code && code < 38) {\n    result = pushForegroundColor(stack, options.colors[code - 30]);\n  } else if (39 < code && code < 48) {\n    result = pushBackgroundColor(stack, options.colors[code - 40]);\n  } else if (89 < code && code < 98) {\n    result = pushForegroundColor(stack, options.colors[8 + (code - 90)]);\n  } else if (99 < code && code < 108) {\n    result = pushBackgroundColor(stack, options.colors[8 + (code - 100)]);\n  }\n\n  return result;\n}\n/**\n * Clear all the styles\n * @returns {string}\n */\n\n\nfunction resetStyles(stack) {\n  var stackClone = stack.slice(0);\n  stack.length = 0;\n  return stackClone.reverse().map(function (tag) {\n    return '</' + tag + '>';\n  }).join('');\n}\n/**\n * Creates an array of numbers ranging from low to high\n * @param {number} low\n * @param {number} high\n * @returns {Array}\n * @example range(3, 7); // creates [3, 4, 5, 6, 7]\n */\n\n\nfunction range(low, high) {\n  var results = [];\n\n  for (var j = low; j <= high; j++) {\n    results.push(j);\n  }\n\n  return results;\n}\n/**\n * Returns a new function that is true if value is NOT the same category\n * @param {string} category\n * @returns {function}\n */\n\n\nfunction notCategory(category) {\n  return function (e) {\n    return (category === null || e.category !== category) && category !== 'all';\n  };\n}\n/**\n * Converts a code into an ansi token type\n * @param {number} code\n * @returns {string}\n */\n\n\nfunction categoryForCode(code) {\n  code = parseInt(code, 10);\n  var result = null;\n\n  if (code === 0) {\n    result = 'all';\n  } else if (code === 1) {\n    result = 'bold';\n  } else if (2 < code && code < 5) {\n    result = 'underline';\n  } else if (4 < code && code < 7) {\n    result = 'blink';\n  } else if (code === 8) {\n    result = 'hide';\n  } else if (code === 9) {\n    result = 'strike';\n  } else if (29 < code && code < 38 || code === 39 || 89 < code && code < 98) {\n    result = 'foreground-color';\n  } else if (39 < code && code < 48 || code === 49 || 99 < code && code < 108) {\n    result = 'background-color';\n  }\n\n  return result;\n}\n/**\n * @param {string} text\n * @param {object} options\n * @returns {string}\n */\n\n\nfunction pushText(text, options) {\n  if (options.escapeXML) {\n    return entities.encodeXML(text);\n  }\n\n  return text;\n}\n/**\n * @param {Array} stack\n * @param {string} tag\n * @param {string} [style='']\n * @returns {string}\n */\n\n\nfunction pushTag(stack, tag, style) {\n  if (!style) {\n    style = '';\n  }\n\n  stack.push(tag);\n  return \"<\".concat(tag).concat(style ? \" style=\\\"\".concat(style, \"\\\"\") : '', \">\");\n}\n/**\n * @param {Array} stack\n * @param {string} style\n * @returns {string}\n */\n\n\nfunction pushStyle(stack, style) {\n  return pushTag(stack, 'span', style);\n}\n\nfunction pushForegroundColor(stack, color) {\n  return pushTag(stack, 'span', 'color:' + color);\n}\n\nfunction pushBackgroundColor(stack, color) {\n  return pushTag(stack, 'span', 'background-color:' + color);\n}\n/**\n * @param {Array} stack\n * @param {string} style\n * @returns {string}\n */\n\n\nfunction closeTag(stack, style) {\n  var last;\n\n  if (stack.slice(-1)[0] === style) {\n    last = stack.pop();\n  }\n\n  if (last) {\n    return '</' + style + '>';\n  }\n}\n/**\n * @param {string} text\n * @param {object} options\n * @param {function} callback\n * @returns {Array}\n */\n\n\nfunction tokenize(text, options, callback) {\n  var ansiMatch = false;\n  var ansiHandler = 3;\n\n  function remove() {\n    return '';\n  }\n\n  function removeXterm256Foreground(m, g1) {\n    callback('xterm256Foreground', g1);\n    return '';\n  }\n\n  function removeXterm256Background(m, g1) {\n    callback('xterm256Background', g1);\n    return '';\n  }\n\n  function newline(m) {\n    if (options.newline) {\n      callback('display', -1);\n    } else {\n      callback('text', m);\n    }\n\n    return '';\n  }\n\n  function ansiMess(m, g1) {\n    ansiMatch = true;\n\n    if (g1.trim().length === 0) {\n      g1 = '0';\n    }\n\n    g1 = g1.trimRight(';').split(';');\n\n    var _iterator2 = _createForOfIteratorHelper(g1),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var g = _step2.value;\n        callback('display', g);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return '';\n  }\n\n  function realText(m) {\n    callback('text', m);\n    return '';\n  }\n\n  function rgb(m) {\n    callback('rgb', m);\n    return '';\n  }\n  /* eslint no-control-regex:0 */\n\n\n  var tokens = [{\n    pattern: /^\\x08+/,\n    sub: remove\n  }, {\n    pattern: /^\\x1b\\[[012]?K/,\n    sub: remove\n  }, {\n    pattern: /^\\x1b\\[\\(B/,\n    sub: remove\n  }, {\n    pattern: /^\\x1b\\[[34]8;2;\\d+;\\d+;\\d+m/,\n    sub: rgb\n  }, {\n    pattern: /^\\x1b\\[38;5;(\\d+)m/,\n    sub: removeXterm256Foreground\n  }, {\n    pattern: /^\\x1b\\[48;5;(\\d+)m/,\n    sub: removeXterm256Background\n  }, {\n    pattern: /^\\n/,\n    sub: newline\n  }, {\n    pattern: /^\\r+\\n/,\n    sub: newline\n  }, {\n    pattern: /^\\r/,\n    sub: newline\n  }, {\n    pattern: /^\\x1b\\[((?:\\d{1,3};?)+|)m/,\n    sub: ansiMess\n  }, {\n    // CSI n J\n    // ED - Erase in Display Clears part of the screen.\n    // If n is 0 (or missing), clear from cursor to end of screen.\n    // If n is 1, clear from cursor to beginning of the screen.\n    // If n is 2, clear entire screen (and moves cursor to upper left on DOS ANSI.SYS).\n    // If n is 3, clear entire screen and delete all lines saved in the scrollback buffer\n    //   (this feature was added for xterm and is supported by other terminal applications).\n    pattern: /^\\x1b\\[\\d?J/,\n    sub: remove\n  }, {\n    // CSI n ; m f\n    // HVP - Horizontal Vertical Position Same as CUP\n    pattern: /^\\x1b\\[\\d{0,3};\\d{0,3}f/,\n    sub: remove\n  }, {\n    // catch-all for CSI sequences?\n    pattern: /^\\x1b\\[?[\\d;]{0,3}/,\n    sub: remove\n  }, {\n    /**\n     * extracts real text - not containing:\n     * - `\\x1b' - ESC - escape (Ascii 27)\n     * - '\\x08' - BS - backspace (Ascii 8)\n     * - `\\n` - Newline - linefeed (LF) (ascii 10)\n     * - `\\r` - Windows Carriage Return (CR)\n     */\n    pattern: /^(([^\\x1b\\x08\\r\\n])+)/,\n    sub: realText\n  }];\n\n  function process(handler, i) {\n    if (i > ansiHandler && ansiMatch) {\n      return;\n    }\n\n    ansiMatch = false;\n    text = text.replace(handler.pattern, handler.sub);\n  }\n\n  var results1 = [];\n  var _text = text,\n      length = _text.length;\n\n  outer: while (length > 0) {\n    for (var i = 0, o = 0, len = tokens.length; o < len; i = ++o) {\n      var handler = tokens[i];\n      process(handler, i);\n\n      if (text.length !== length) {\n        // We matched a token and removed it from the text. We need to\n        // start matching *all* tokens against the new text.\n        length = text.length;\n        continue outer;\n      }\n    }\n\n    if (text.length === length) {\n      break;\n    }\n\n    results1.push(0);\n    length = text.length;\n  }\n\n  return results1;\n}\n/**\n * If streaming, then the stack is \"sticky\"\n *\n * @param {Array} stickyStack\n * @param {string} token\n * @param {*} data\n * @returns {Array}\n */\n\n\nfunction updateStickyStack(stickyStack, token, data) {\n  if (token !== 'text') {\n    stickyStack = stickyStack.filter(notCategory(categoryForCode(data)));\n    stickyStack.push({\n      token: token,\n      data: data,\n      category: categoryForCode(data)\n    });\n  }\n\n  return stickyStack;\n}\n\nvar Filter = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {string=} options.fg The default foreground color used when reset color codes are encountered.\n   * @param {string=} options.bg The default background color used when reset color codes are encountered.\n   * @param {boolean=} options.newline Convert newline characters to `<br/>`.\n   * @param {boolean=} options.escapeXML Generate HTML/XML entities.\n   * @param {boolean=} options.stream Save style state across invocations of `toHtml()`.\n   * @param {(string[] | {[code: number]: string})=} options.colors Can override specific colors or the entire ANSI palette.\n   */\n  function Filter(options) {\n    _classCallCheck(this, Filter);\n\n    options = options || {};\n\n    if (options.colors) {\n      options.colors = Object.assign({}, defaults.colors, options.colors);\n    }\n\n    this.options = Object.assign({}, defaults, options);\n    this.stack = [];\n    this.stickyStack = [];\n  }\n  /**\n   * @param {string | string[]} input\n   * @returns {string}\n   */\n\n\n  _createClass(Filter, [{\n    key: \"toHtml\",\n    value: function toHtml(input) {\n      var _this = this;\n\n      input = typeof input === 'string' ? [input] : input;\n      var stack = this.stack,\n          options = this.options;\n      var buf = [];\n      this.stickyStack.forEach(function (element) {\n        var output = generateOutput(stack, element.token, element.data, options);\n\n        if (output) {\n          buf.push(output);\n        }\n      });\n      tokenize(input.join(''), options, function (token, data) {\n        var output = generateOutput(stack, token, data, options);\n\n        if (output) {\n          buf.push(output);\n        }\n\n        if (options.stream) {\n          _this.stickyStack = updateStickyStack(_this.stickyStack, token, data);\n        }\n      });\n\n      if (stack.length) {\n        buf.push(resetStyles(stack));\n      }\n\n      return buf.join('');\n    }\n  }]);\n\n  return Filter;\n}();\n\nmodule.exports = Filter;\n//# sourceMappingURL=ansi_to_html.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/ansi-to-html@0.7.2/node_modules/ansi-to-html/lib/ansi_to_html.js\n");

/***/ })

};
;