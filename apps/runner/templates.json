{
  "version": "1.0.0",
  "templates": [
    {
      "id": "react-vite",
      "name": "React + Vite",
      "description": "Simple, fast React app with Vite - perfect for basic projects and prototypes",
      "repository": "github:codyde/template-reactvite",
      "branch": "main",

      "selection": {
        "keywords": [
          "simple",
          "basic",
          "quick",
          "prototype",
          "demo",
          "app",
          "website",
          "page",
          "ui",
          "interface",
          "component",
          "react",
          "vite",
          "frontend"
        ],
        "useCases": [
          "Simple single-page applications and UIs",
          "Quick prototypes and demos",
          "Basic web apps without backend complexity",
          "Learning projects and tutorials",
          "Component libraries and design systems",
          "Client-side only applications",
          "Default choice for straightforward projects"
        ],
        "examples": [
          "Build a todo app",
          "Create a calculator",
          "Make a weather app",
          "Build a simple dashboard",
          "Create a landing page",
          "Build a basic form"
        ]
      },

      "tech": {
        "framework": "vite",
        "version": "5.x",
        "language": "typescript",
        "styling": "tailwind",
        "packageManager": "pnpm",
        "nodeVersion": ">=20.0.0"
      },

      "setup": {
        "defaultPort": 5173,
        "installCommand": "pnpm install",
        "devCommand": "pnpm dev",
        "buildCommand": "pnpm build"
      },

      "ai": {
        "systemPromptAddition": "This is a simple React + Vite project - the default for basic applications.\n\n**Key Patterns:**\n- Pure client-side React application\n- No backend or API needed\n- Fast development with Vite HMR\n- TypeScript for type safety\n- Tailwind CSS for styling\n\n**Directory Structure:**\n- src/ - React components and logic\n- src/components/ - Reusable components\n- src/App.tsx - Main application component\n\n**When to use:**\n- Simple UIs without server-side logic\n- Prototypes and demos\n- Learning projects\n- Any basic React application\n\n**When NOT to use:**\n- Need authentication or database (use Next.js)\n- Need separate backend API (use Vite + React + Node)\n- Need static site generation (use Astro)",

        "includedFeatures": [
          "React 18 with TypeScript",
          "Vite 5 with fast HMR",
          "Tailwind CSS configured",
          "ESLint and TypeScript setup",
          "Example components and routing",
          "Clean project structure"
        ]
      }
    },

    {
      "id": "nextjs-fullstack",
      "name": "Next.js 15 Full-Stack",
      "description": "Modern full-stack with App Router, TypeScript, Tailwind, and shadcn/ui",
      "repository": "github:codyde/template-nextjs15",
      "branch": "main",

      "selection": {
        "keywords": [
          "nextjs",
          "next.js",
          "next",
          "full-stack",
          "fullstack",
          "ssr",
          "server-side",
          "app router",
          "react server components",
          "tailwind",
          "shadcn",
          "typescript",
          "authentication",
          "auth",
          "database",
          "api",
          "dashboard",
          "admin",
          "saas"
        ],
        "useCases": [
          "Full-stack web applications with server and client rendering",
          "SaaS products requiring authentication and APIs",
          "Dynamic websites with database integration",
          "Dashboard applications with real-time data",
          "E-commerce platforms",
          "Admin panels and management tools",
          "Applications requiring SEO optimization"
        ],
        "examples": [
          "Build a todo app with authentication",
          "Create an analytics dashboard",
          "Make a blog with CMS",
          "Build a SaaS landing page with pricing",
          "Create an e-commerce product catalog",
          "Build an admin panel with user management"
        ]
      },

      "tech": {
        "framework": "next",
        "version": "15.x",
        "language": "typescript",
        "styling": "tailwind",
        "uiLibrary": "shadcn",
        "packageManager": "pnpm",
        "nodeVersion": ">=20.0.0"
      },

      "setup": {
        "defaultPort": 3001,
        "installCommand": "pnpm install",
        "devCommand": "pnpm dev",
        "buildCommand": "pnpm build"
      },

      "ai": {
        "systemPromptAddition": "This is a Next.js 15 App Router project.\n\n**Key Patterns:**\n- Use Server Components by default (no 'use client' needed)\n- Add 'use client' ONLY when needed (useState, useEffect, event handlers)\n- API routes: app/api/[route]/route.ts with export async function GET/POST\n- Use TypeScript import type for type-only imports\n- Tailwind for styling with utility classes\n- shadcn/ui components are pre-installed in components/ui/\n\n**Directory Structure:**\n- app/ - App Router pages and layouts\n- components/ - Shared React components\n- lib/ - Utilities, types, helpers\n\n**After template is downloaded:**\n1. Install dependencies: cd {projectName} && pnpm install\n2. Components are ready to use: import { Button } from '@/components/ui/button'\n3. Create new pages in app/ directory",

        "includedFeatures": [
          "Pre-configured TypeScript with strict mode",
          "Tailwind CSS with custom config",
          "shadcn/ui components (Button, Card, Input, Select, etc.)",
          "Example API route at /api/example",
          "Root layout with metadata and fonts",
          "Sample homepage with working components",
          "ESLint and Prettier configured"
        ]
      }
    },

    {
      "id": "vite-react-node",
      "name": "Vite + React + Node.js",
      "description": "Fast React SPA with separate Node.js/Express backend",
      "repository": "github:codyde/template-reactnode",
      "branch": "main",

      "selection": {
        "keywords": [
          "vite",
          "react",
          "spa",
          "single-page",
          "node",
          "nodejs",
          "express",
          "api",
          "backend",
          "rest",
          "restful",
          "client-server",
          "websocket",
          "real-time"
        ],
        "useCases": [
          "Single-page applications with separate API",
          "React frontends with Express backends",
          "Projects requiring clear frontend/backend separation",
          "Real-time applications with WebSocket support",
          "Prototypes and MVPs needing quick setup",
          "Mobile-first web applications"
        ],
        "examples": [
          "Build a chat application",
          "Create a weather dashboard",
          "Make a recipe finder app",
          "Build a task tracking tool",
          "Create a note-taking app with search"
        ]
      },

      "tech": {
        "framework": "vite",
        "version": "5.x",
        "language": "typescript",
        "styling": "tailwind",
        "packageManager": "pnpm",
        "nodeVersion": ">=20.0.0"
      },

      "setup": {
        "defaultPort": 5173,
        "installCommand": "pnpm install && cd server && pnpm install",
        "devCommand": "pnpm dev",
        "buildCommand": "pnpm build"
      },

      "ai": {
        "systemPromptAddition": "This project has two separate parts:\n\n**client/** - Vite React frontend\n- Runs on port 5173\n- TypeScript + React + Tailwind\n- Vite proxy configured for /api routes\n\n**server/** - Node.js Express backend\n- Runs on port 3001\n- Express with CORS and JSON middleware\n- API routes in server/routes/\n\n**Development workflow:**\n1. Install deps in both: cd {projectName} && pnpm install && cd server && pnpm install\n2. Run dev script from root: pnpm dev (starts both frontend and backend)\n3. Frontend calls backend via /api proxy\n\n**API calls from frontend:**\n```typescript\nconst response = await fetch('/api/data')\nconst data = await response.json()\n```",

        "includedFeatures": [
          "Vite React app with TypeScript and Hot Module Replacement",
          "Express API server with CORS configured",
          "Proxy configuration for /api routes in development",
          "Example API endpoints (GET, POST)",
          "Sample React components and routing",
          "Tailwind CSS configured in client",
          "Concurrent dev script to run both servers"
        ]
      }
    },

    {
      "id": "astro-static",
      "name": "Astro Static Site",
      "description": "Fast static site with optional React islands for interactivity",
      "repository": "github:codyde/template-astro",
      "branch": "main",

      "selection": {
        "keywords": [
          "astro",
          "static",
          "ssg",
          "blog",
          "content",
          "markdown",
          "documentation",
          "docs",
          "landing",
          "landing-page",
          "portfolio",
          "seo",
          "performance",
          "marketing"
        ],
        "useCases": [
          "Static websites and landing pages",
          "Blogs and content-heavy sites",
          "Documentation sites and guides",
          "Portfolio and showcase websites",
          "Marketing pages requiring excellent SEO",
          "Sites prioritizing performance and load times"
        ],
        "examples": [
          "Build a personal blog with posts",
          "Create a documentation site",
          "Make a portfolio website",
          "Build a company landing page",
          "Create a marketing site with blog"
        ]
      },

      "tech": {
        "framework": "astro",
        "version": "5.x",
        "language": "typescript",
        "styling": "tailwind",
        "packageManager": "pnpm",
        "nodeVersion": ">=20.0.0"
      },

      "setup": {
        "defaultPort": 4321,
        "installCommand": "pnpm install",
        "devCommand": "pnpm dev",
        "buildCommand": "pnpm build"
      },

      "ai": {
        "systemPromptAddition": "This is an Astro static site generator project.\n\n**Key Patterns:**\n- Pages are .astro files with --- frontmatter at the top\n- File-based routing in src/pages/ (index.astro = homepage)\n- Use layouts in src/layouts/ for consistent page structure\n- Add React islands for interactivity: <Component client:load />\n- Content collections for blog posts/docs in src/content/\n\n**CRITICAL: Code Snippet Handling for Deployments:**\n- ALWAYS use <code set:html={'TheCode'} /> to properly fence code snippets\n- This prevents code from breaking during deployment builds\n- Never use regular <code>{code}</code> for multi-line or complex code snippets\n- Example: <code set:html={'const x = 1;\\nconst y = 2;'} />\n\n**Example .astro page:**\n```astro\n---\nimport Layout from '../layouts/Layout.astro'\nconst title = 'My Page'\n---\n<Layout title={title}>\n  <h1>{title}</h1>\n  <p>Static content, ultra fast!</p>\n</Layout>\n```\n\n**For interactivity, use React islands:**\n```astro\n---\nimport Counter from '../components/Counter.tsx'\n---\n<Counter client:load />\n```",

        "includedFeatures": [
          "Astro 5.x with TypeScript configured",
          "Tailwind CSS with Astro integration",
          "Example pages (index, about, blog)",
          "Layout component with metadata",
          "Content collections setup for blog",
          "Sample blog posts in Markdown",
          "React integration for islands"
        ]
      }
    }
  ]
}
